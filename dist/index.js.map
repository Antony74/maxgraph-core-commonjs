{"version":3,"file":"index.js","sources":["../node_modules/@maxgraph/core/lib/esm/view/image/ImageBox.js","../node_modules/@maxgraph/core/lib/esm/view/event/EventObject.js","../node_modules/@maxgraph/core/lib/esm/view/event/EventSource.js","../node_modules/@maxgraph/core/lib/esm/util/Constants.js","../node_modules/@maxgraph/core/lib/esm/Client.js","../node_modules/@maxgraph/core/lib/esm/util/EventUtils.js","../node_modules/@maxgraph/core/lib/esm/util/domUtils.js","../node_modules/@maxgraph/core/lib/esm/view/event/InternalMouseEvent.js","../node_modules/@maxgraph/core/lib/esm/view/event/InternalEvent.js","../node_modules/@maxgraph/core/lib/esm/view/geometry/Point.js","../node_modules/@maxgraph/core/lib/esm/view/geometry/Rectangle.js","../node_modules/@maxgraph/core/lib/esm/util/StringUtils.js","../node_modules/@maxgraph/core/lib/esm/util/ObjectIdentity.js","../node_modules/@maxgraph/core/lib/esm/util/Dictionary.js","../node_modules/@maxgraph/core/lib/esm/view/cell/CellPath.js","../node_modules/@maxgraph/core/lib/esm/internal/time-utils.js","../node_modules/@maxgraph/core/lib/esm/util/logger.js","../node_modules/@maxgraph/core/lib/esm/internal/clone-utils.js","../node_modules/@maxgraph/core/lib/esm/i18n/provider.js","../node_modules/@maxgraph/core/lib/esm/util/config.js","../node_modules/@maxgraph/core/lib/esm/internal/utils.js","../node_modules/@maxgraph/core/lib/esm/util/styleUtils.js","../node_modules/@maxgraph/core/lib/esm/util/cloneUtils.js","../node_modules/@maxgraph/core/lib/esm/view/cell/Cell.js","../node_modules/@maxgraph/core/lib/esm/view/undoable_changes/ChildChange.js","../node_modules/@maxgraph/core/lib/esm/view/undoable_changes/GeometryChange.js","../node_modules/@maxgraph/core/lib/esm/view/undoable_changes/RootChange.js","../node_modules/@maxgraph/core/lib/esm/view/undoable_changes/StyleChange.js","../node_modules/@maxgraph/core/lib/esm/view/undoable_changes/TerminalChange.js","../node_modules/@maxgraph/core/lib/esm/view/undoable_changes/ValueChange.js","../node_modules/@maxgraph/core/lib/esm/view/cell/CellState.js","../node_modules/@maxgraph/core/lib/esm/util/mathUtils.js","../node_modules/@maxgraph/core/lib/esm/view/style/edge/SideToSide.js","../node_modules/@maxgraph/core/lib/esm/view/style/edge/TopToBottom.js","../node_modules/@maxgraph/core/lib/esm/view/style/edge/Elbow.js","../node_modules/@maxgraph/core/lib/esm/view/style/config.js","../node_modules/@maxgraph/core/lib/esm/view/style/edge/EntityRelation.js","../node_modules/@maxgraph/core/lib/esm/view/style/edge/Loop.js","../node_modules/@maxgraph/core/lib/esm/util/arrayUtils.js","../node_modules/@maxgraph/core/lib/esm/view/geometry/Geometry.js","../node_modules/@maxgraph/core/lib/esm/view/style/edge/shared.js","../node_modules/@maxgraph/core/lib/esm/view/style/edge/Segment.js","../node_modules/@maxgraph/core/lib/esm/view/style/edge/Orthogonal.js","../node_modules/@maxgraph/core/lib/esm/view/style/edge/Manhattan.js","../node_modules/@maxgraph/core/lib/esm/view/style/perimeter/EllipsePerimeter.js","../node_modules/@maxgraph/core/lib/esm/view/style/perimeter/HexagonPerimeter.js","../node_modules/@maxgraph/core/lib/esm/view/style/perimeter/RectanglePerimeter.js","../node_modules/@maxgraph/core/lib/esm/view/style/perimeter/RhombusPerimeter.js","../node_modules/@maxgraph/core/lib/esm/view/style/perimeter/TrianglePerimeter.js","../node_modules/@maxgraph/core/lib/esm/view/style/marker/edge-markers.js","../node_modules/@maxgraph/core/lib/esm/internal/BaseRegistry.js","../node_modules/@maxgraph/core/lib/esm/view/style/edge/EdgeStyleRegistry.js","../node_modules/@maxgraph/core/lib/esm/view/cell/CellHighlight.js","../node_modules/@maxgraph/core/lib/esm/view/cell/CellMarker.js","../node_modules/@maxgraph/core/lib/esm/util/UrlConverter.js","../node_modules/@maxgraph/core/lib/esm/view/canvas/AbstractCanvas2D.js","../node_modules/@maxgraph/core/lib/esm/view/cell/TemporaryCellStates.js","../node_modules/@maxgraph/core/lib/esm/util/MaxXmlRequest.js","../node_modules/@maxgraph/core/lib/esm/util/requestUtils.js","../node_modules/@maxgraph/core/lib/esm/serialization/ObjectCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/CodecRegistry.js","../node_modules/@maxgraph/core/lib/esm/serialization/Codec.js","../node_modules/@maxgraph/core/lib/esm/util/xmlUtils.js","../node_modules/@maxgraph/core/lib/esm/view/canvas/SvgCanvas2D.js","../node_modules/@maxgraph/core/lib/esm/view/shape/Shape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/node/EllipseShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/node/RectangleShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/node/ImageShape.js","../node_modules/@maxgraph/core/lib/esm/view/other/ConnectionConstraint.js","../node_modules/@maxgraph/core/lib/esm/view/handler/ConstraintHandler.js","../node_modules/@maxgraph/core/lib/esm/view/handler/config.js","../node_modules/@maxgraph/core/lib/esm/view/handler/EdgeHandler.js","../node_modules/@maxgraph/core/lib/esm/view/handler/VertexHandler.js","../node_modules/@maxgraph/core/lib/esm/internal/i18n-utils.js","../node_modules/@maxgraph/core/lib/esm/view/handler/ElbowEdgeHandler.js","../node_modules/@maxgraph/core/lib/esm/view/handler/EdgeSegmentHandler.js","../node_modules/@maxgraph/core/lib/esm/util/cellArrayUtils.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/CellsMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/ConnectionsMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/DragDropMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/EdgeMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/EditingMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/EventsMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/FoldingMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/GroupingMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/ImageMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/LabelMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/OrderMixin.js","../node_modules/@maxgraph/core/lib/esm/view/cell/CellOverlay.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/OverlaysMixin.js","../node_modules/@maxgraph/core/lib/esm/view/shape/edge/PolylineShape.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/PageBreaksMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/PanningMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/PortsMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/SelectionMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/SnapMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/SwimlaneMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/TerminalMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/TooltipMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/ValidationMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/VertexMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/ZoomMixin.js","../node_modules/@maxgraph/core/lib/esm/view/mixins/_graph-mixins-apply.js","../node_modules/@maxgraph/core/lib/esm/view/AbstractGraph.js","../node_modules/@maxgraph/core/lib/esm/view/undoable_changes/UndoableEdit.js","../node_modules/@maxgraph/core/lib/esm/view/undoable_changes/CollapseChange.js","../node_modules/@maxgraph/core/lib/esm/view/undoable_changes/VisibleChange.js","../node_modules/@maxgraph/core/lib/esm/view/GraphDataModel.js","../node_modules/@maxgraph/core/lib/esm/view/style/marker/EdgeMarkerRegistry.js","../node_modules/@maxgraph/core/lib/esm/view/shape/edge/ConnectorShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/node/TextShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/ShapeRegistry.js","../node_modules/@maxgraph/core/lib/esm/view/shape/stencil/StencilShapeRegistry.js","../node_modules/@maxgraph/core/lib/esm/view/cell/CellRenderer.js","../node_modules/@maxgraph/core/lib/esm/view/style/Stylesheet.js","../node_modules/@maxgraph/core/lib/esm/view/undoable_changes/SelectionChange.js","../node_modules/@maxgraph/core/lib/esm/view/GraphSelectionModel.js","../node_modules/@maxgraph/core/lib/esm/view/undoable_changes/CurrentRootChange.js","../node_modules/@maxgraph/core/lib/esm/view/style/perimeter/PerimeterRegistry.js","../node_modules/@maxgraph/core/lib/esm/view/GraphView.js","../node_modules/@maxgraph/core/lib/esm/view/BaseGraph.js","../node_modules/@maxgraph/core/lib/esm/view/shape/node/RhombusShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/node/CylinderShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/node/ActorShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/node/TriangleShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/node/HexagonShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/node/CloudShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/edge/LineShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/edge/ArrowShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/edge/ArrowConnectorShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/node/DoubleEllipseShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/node/SwimlaneShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/node/LabelShape.js","../node_modules/@maxgraph/core/lib/esm/view/shape/register-shapes.js","../node_modules/@maxgraph/core/lib/esm/view/style/register.js","../node_modules/@maxgraph/core/lib/esm/view/plugins/CellEditorHandler.js","../node_modules/@maxgraph/core/lib/esm/view/plugins/TooltipHandler.js","../node_modules/@maxgraph/core/lib/esm/view/plugins/SelectionCellsHandler.js","../node_modules/@maxgraph/core/lib/esm/gui/MaxPopupMenu.js","../node_modules/@maxgraph/core/lib/esm/view/plugins/PopupMenuHandler.js","../node_modules/@maxgraph/core/lib/esm/view/plugins/ConnectionHandler.js","../node_modules/@maxgraph/core/lib/esm/view/other/Guide.js","../node_modules/@maxgraph/core/lib/esm/view/plugins/SelectionHandler.js","../node_modules/@maxgraph/core/lib/esm/view/other/PanningManager.js","../node_modules/@maxgraph/core/lib/esm/view/plugins/PanningHandler.js","../node_modules/@maxgraph/core/lib/esm/view/plugins/FitPlugin.js","../node_modules/@maxgraph/core/lib/esm/view/plugins/RubberBandHandler.js","../node_modules/@maxgraph/core/lib/esm/view/plugins/index.js","../node_modules/@maxgraph/core/lib/esm/view/Graph.js","../node_modules/@maxgraph/core/lib/esm/view/layout/LayoutManager.js","../node_modules/@maxgraph/core/lib/esm/view/other/Outline.js","../node_modules/@maxgraph/core/lib/esm/view/other/PrintPreview.js","../node_modules/@maxgraph/core/lib/esm/view/layout/SwimlaneManager.js","../node_modules/@maxgraph/core/lib/esm/view/undoable_changes/CellAttributeChange.js","../node_modules/@maxgraph/core/lib/esm/view/handler/KeyHandler.js","../node_modules/@maxgraph/core/lib/esm/editor/EditorKeyHandler.js","../node_modules/@maxgraph/core/lib/esm/editor/EditorPopupMenu.js","../node_modules/@maxgraph/core/lib/esm/gui/MaxToolbar.js","../node_modules/@maxgraph/core/lib/esm/view/other/DragSource.js","../node_modules/@maxgraph/core/lib/esm/util/gestureUtils.js","../node_modules/@maxgraph/core/lib/esm/editor/EditorToolbar.js","../node_modules/@maxgraph/core/lib/esm/view/undoable_changes/UndoManager.js","../node_modules/@maxgraph/core/lib/esm/view/layout/GraphLayout.js","../node_modules/@maxgraph/core/lib/esm/view/layout/util/WeightedCellSorter.js","../node_modules/@maxgraph/core/lib/esm/util/treeTraversal.js","../node_modules/@maxgraph/core/lib/esm/view/layout/CompactTreeLayout.js","../node_modules/@maxgraph/core/lib/esm/view/layout/StackLayout.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/CellCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/ModelCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/mxGraph/utils.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/mxGraph/mxCellCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/mxGraph/mxGeometryCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/register-shared.js","../node_modules/@maxgraph/core/lib/esm/serialization/register-model-codecs.js","../node_modules/@maxgraph/core/lib/esm/serialization/ModelXmlSerializer.js","../node_modules/@maxgraph/core/lib/esm/gui/MaxWindow.js","../node_modules/@maxgraph/core/lib/esm/gui/MaxForm.js","../node_modules/@maxgraph/core/lib/esm/util/Clipboard.js","../node_modules/@maxgraph/core/lib/esm/gui/guiUtils.js","../node_modules/@maxgraph/core/lib/esm/gui/MaxLog.js","../node_modules/@maxgraph/core/lib/esm/util/printUtils.js","../node_modules/@maxgraph/core/lib/esm/editor/Editor.js","../node_modules/@maxgraph/core/lib/esm/view/cell/CellTracker.js","../node_modules/@maxgraph/core/lib/esm/view/cell/VertexHandle.js","../node_modules/@maxgraph/core/lib/esm/view/layout/CircleLayout.js","../node_modules/@maxgraph/core/lib/esm/view/layout/CompositeLayout.js","../node_modules/@maxgraph/core/lib/esm/view/layout/EdgeLabelLayout.js","../node_modules/@maxgraph/core/lib/esm/view/layout/FastOrganicLayout.js","../node_modules/@maxgraph/core/lib/esm/view/layout/ParallelEdgeLayout.js","../node_modules/@maxgraph/core/lib/esm/view/layout/PartitionLayout.js","../node_modules/@maxgraph/core/lib/esm/view/layout/RadialTreeLayout.js","../node_modules/@maxgraph/core/lib/esm/view/layout/datatypes/HierarchicalEdgeStyle.js","../node_modules/@maxgraph/core/lib/esm/view/layout/datatypes/GraphAbstractHierarchyCell.js","../node_modules/@maxgraph/core/lib/esm/view/layout/datatypes/GraphHierarchyNode.js","../node_modules/@maxgraph/core/lib/esm/view/layout/datatypes/GraphHierarchyEdge.js","../node_modules/@maxgraph/core/lib/esm/view/layout/hierarchical/GraphHierarchyModel.js","../node_modules/@maxgraph/core/lib/esm/view/layout/hierarchical/HierarchicalLayoutStage.js","../node_modules/@maxgraph/core/lib/esm/view/layout/hierarchical/MinimumCycleRemover.js","../node_modules/@maxgraph/core/lib/esm/view/layout/util/MedianCellSorter.js","../node_modules/@maxgraph/core/lib/esm/view/layout/hierarchical/MedianHybridCrossingReduction.js","../node_modules/@maxgraph/core/lib/esm/view/layout/hierarchical/CoordinateAssignment.js","../node_modules/@maxgraph/core/lib/esm/view/layout/HierarchicalLayout.js","../node_modules/@maxgraph/core/lib/esm/view/layout/hierarchical/SwimlaneModel.js","../node_modules/@maxgraph/core/lib/esm/view/layout/hierarchical/SwimlaneOrdering.js","../node_modules/@maxgraph/core/lib/esm/view/layout/SwimlaneLayout.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/editor/EditorCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/editor/EditorKeyHandlerCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/editor/EditorPopupMenuCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/editor/EditorToolbarCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/GraphCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/BaseGraphCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/ChildChangeCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/GenericChangeCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/utils.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/GraphViewCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/RootChangeCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/StylesheetCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/codecs/TerminalChangeCodec.js","../node_modules/@maxgraph/core/lib/esm/serialization/register-other-codecs.js","../node_modules/@maxgraph/core/lib/esm/view/shape/stencil/register.js","../node_modules/@maxgraph/core/lib/esm/view/shape/stencil/StencilShape.js","../node_modules/@maxgraph/core/lib/esm/i18n/config.js","../node_modules/@maxgraph/core/lib/esm/i18n/Translations.js","../node_modules/@maxgraph/core/lib/esm/util/domHelpers.js","../node_modules/@maxgraph/core/lib/esm/view/animate/Animation.js","../node_modules/@maxgraph/core/lib/esm/view/animate/Effects.js","../node_modules/@maxgraph/core/lib/esm/view/cell/CellStatePreview.js","../node_modules/@maxgraph/core/lib/esm/view/animate/Morphing.js","../node_modules/@maxgraph/core/lib/esm/view/canvas/XmlCanvas2D.js","../node_modules/@maxgraph/core/lib/esm/gui/MaxLogAsLogger.js","../node_modules/@maxgraph/core/lib/esm/view/image/ImageBundle.js","../node_modules/@maxgraph/core/lib/esm/view/image/ImageExport.js","../node_modules/@maxgraph/core/lib/esm/view/other/AutoSaveManager.js","../node_modules/@maxgraph/core/lib/esm/view/other/Multiplicity.js","../node_modules/mime-db/index.js","../node_modules/mime-types/mimeScore.js","../node_modules/mime-types/index.js","../src/inlineImage.ts","../src/maxGraphToSvg.ts"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Encapsulates the URL, width and height of an image.\n */\nclass ImageBox {\n    constructor(src, width, height) {\n        this.src = src;\n        this.width = width;\n        this.height = height;\n    }\n}\nexport default ImageBox;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * `EventObject` is a wrapper for all properties of a single event.\n *\n * Additionally, it also offers functions to consume the event and check if it was consumed as follows:\n *\n * ```javascript\n * evt.consume();\n * INV: evt.isConsumed() == true\n * ```\n *\n * @category Event\n */\nclass EventObject {\n    /**\n     * Constructs a new event object with the specified name. An optional\n     * sequence of key, value pairs can be appended to define properties.\n     *\n     * Example:\n     *\n     * ```javascript\n     * new EventObject(\"eventName\", key1, val1, .., keyN, valN)\n     * ```\n     *\n     * @param name\n     * @param args\n     */\n    constructor(name = '', ...args) {\n        /**\n         * Holds the consumed state. Default is false.\n         */\n        this.consumed = false;\n        this.name = name;\n        this.properties = {};\n        if (!!args[0] && args[0].constructor === Object) {\n            // A literal object ({})\n            for (const [key, value] of Object.entries(args[0])) {\n                this.properties[key] = value;\n            }\n        }\n        else {\n            // two-values [key, value, key, value, ...]\n            for (let i = 0; i < args.length; i += 2) {\n                if (args[i + 1] !== null) {\n                    this.properties[args[i]] = args[i + 1];\n                }\n            }\n        }\n    }\n    /**\n     * Returns <name>.\n     */\n    getName() {\n        return this.name;\n    }\n    /**\n     * Returns <properties>.\n     */\n    getProperties() {\n        return this.properties;\n    }\n    /**\n     * Returns the property for the given key.\n     */\n    getProperty(key) {\n        return this.properties[key];\n    }\n    /**\n     * Returns true if the event has been consumed.\n     */\n    isConsumed() {\n        return this.consumed;\n    }\n    /**\n     * Consumes the event.\n     */\n    consume() {\n        this.consumed = true;\n    }\n}\nexport default EventObject;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventObject from './EventObject';\n/**\n * Base class for objects that dispatch named events.\n *\n * To create a subclass that inherits from `EventSource`, the following code is used:\n *\n * ```javascript\n * class MyClass extends EventSource {\n *   // implement the logic here\n * };\n * ```\n *\n * Known Subclasses:\n * - {@link CellOverlay}\n * - {@link Editor}\n * - {@link AbstractGraph}\n * - {@link GraphDataModel}\n * - {@link GraphView}\n * - {@link MaxToolbar}\n * - {@link MaxWindow}\n *\n * @category Event\n */\nclass EventSource {\n    constructor(eventSource = null) {\n        /**\n         * Holds the event names and associated listeners in an array. The array\n         * contains the event name followed by the respective listener for each\n         * registered listener.\n         */\n        this.eventListeners = [];\n        /**\n         * Specifies if events can be fired. Default is true.\n         */\n        this.eventsEnabled = true;\n        /**\n         * Optional source for events. Default is null.\n         */\n        this.eventSource = null;\n        this.eventSource = eventSource;\n    }\n    /**\n     * Returns <eventsEnabled>.\n     */\n    isEventsEnabled() {\n        return this.eventsEnabled;\n    }\n    /**\n     * Sets <eventsEnabled>.\n     */\n    setEventsEnabled(value) {\n        this.eventsEnabled = value;\n    }\n    /**\n     * Returns <eventSource>.\n     */\n    getEventSource() {\n        return this.eventSource;\n    }\n    /**\n     * Sets <eventSource>.\n     */\n    setEventSource(value) {\n        this.eventSource = value;\n    }\n    /**\n     * Binds the specified function to the given event name. If no event name\n     * is given, then the listener is registered for all events.\n     *\n     * The parameters of the listener are the sender and an {@link EventObject}.\n     */\n    addListener(name, funct) {\n        this.eventListeners.push({ name, funct });\n    }\n    /**\n     * Removes all occurrences of the given listener from <eventListeners>.\n     */\n    removeListener(funct) {\n        let i = 0;\n        while (i < this.eventListeners.length) {\n            if (this.eventListeners[i].funct === funct) {\n                this.eventListeners.splice(i, 1);\n            }\n            else {\n                i += 1;\n            }\n        }\n    }\n    /**\n     * Dispatches the given event to the listeners which are registered for\n     * the event. The sender argument is optional. The current execution scope\n     * (\"this\") is used for the listener invocation (see {@link Utils#bind}).\n     *\n     * Example:\n     *\n     * ```javascript\n     * fireEvent(new mxEventObject(\"eventName\", key1, val1, .., keyN, valN))\n     * ```\n     *\n     * @param evt {@link EventObject} that represents the event.\n     * @param sender Optional sender to be passed to the listener. Default value is\n     * the return value of <getEventSource>.\n     */\n    fireEvent(evt, sender = null) {\n        if (this.isEventsEnabled()) {\n            if (!evt) {\n                evt = new EventObject('');\n            }\n            if (!sender) {\n                sender = this.getEventSource();\n            }\n            if (!sender) {\n                sender = this;\n            }\n            for (const eventListener of this.eventListeners) {\n                if (eventListener.name === null || eventListener.name === evt.getName()) {\n                    eventListener.funct.apply(this, [sender, evt]);\n                }\n            }\n        }\n    }\n}\nexport default EventSource;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * The version of the `maxGraph` library.\n */\n// WARN: this constant is updated at release time by the script located at 'scripts/update-versions.mjs'.\n// So, if you modify the name of this file or this constant, please update the script accordingly.\nexport const VERSION = '0.20.0';\n/**\n * Defines the portion of the cell which is to be used as a connectable\n * region. Default is 0.3. Possible values are 0 < x <= 1.\n */\nexport const DEFAULT_HOTSPOT = 0.3;\n/**\n * Defines the minimum size in pixels of the portion of the cell which is\n * to be used as a connectable region. Default is 8.\n */\nexport const MIN_HOTSPOT_SIZE = 8;\n/**\n * Defines the maximum size in pixels of the portion of the cell which is\n * to be used as a connectable region. Use 0 for no maximum. Default is 0.\n */\nexport const MAX_HOTSPOT_SIZE = 0;\n/**\n * Name of the field to be used to store the object ID.\n */\nexport const IDENTITY_FIELD_NAME = 'mxObjectId';\n/**\n * Defines the SVG namespace.\n */\nexport const NS_SVG = 'http://www.w3.org/2000/svg';\n/**\n * Defines the XLink namespace.\n */\nexport const NS_XLINK = 'http://www.w3.org/1999/xlink';\n/** Default value of {@link StyleDefaultsConfig.shadowColor}. */\nexport const SHADOWCOLOR = 'gray';\n/** Default value of {@link StyleDefaultsConfig.shadowOffsetX}. */\nexport const SHADOW_OFFSET_X = 2;\n/** Default value of {@link StyleDefaultsConfig.shadowOffsetY}. */\nexport const SHADOW_OFFSET_Y = 3;\n/** Default value of {@link StyleDefaultsConfig.shadowOpacity}. */\nexport const SHADOW_OPACITY = 1;\n/**\n * Defines the vertical offset for the tooltip.\n * Default is 16.\n */\nexport const TOOLTIP_VERTICAL_OFFSET = 16;\n/**\n * Specifies the default valid color. Default is #0000FF.\n */\nexport const DEFAULT_VALID_COLOR = '#00FF00';\n/**\n * Specifies the default invalid color. Default is #FF0000.\n */\nexport const DEFAULT_INVALID_COLOR = '#FF0000';\n/**\n * Specifies the default highlight color for shape outlines.\n * Default is #0000FF. This is used in {@link ConnectionHandler} and {@link EdgeHandler}.\n */\nexport const OUTLINE_HIGHLIGHT_COLOR = '#00FF00';\n/**\n * Defines the strokewidth to be used for shape outlines.\n * Default is 5. This is used in {@link ConnectionHandler} and {@link EdgeHandler}.\n */\nexport const OUTLINE_HIGHLIGHT_STROKEWIDTH = 5;\n/**\n * Defines the strokewidth to be used for the highlights.\n * Default is 3.\n */\nexport const HIGHLIGHT_STROKEWIDTH = 3;\n/**\n * Size of the constraint highlight (in px). Default is 2.\n */\nexport const HIGHLIGHT_SIZE = 2;\n/**\n * Opacity (in %) used for the highlights (including outline).\n * Default is 100.\n */\nexport const HIGHLIGHT_OPACITY = 100;\n/**\n * Defines the color to be used for the cell highlighting.\n * Use 'none' for no color. Default is #00FF00.\n */\n// TODO this constants is unused (it wasn't used in mxGraph as well)--> remove it (and all documentation references as well)\nexport const HIGHLIGHT_COLOR = '#00FF00';\n/**\n * Defines the color to be used for highlighting a target cell for a new\n * or changed connection. Note that this may be either a source or\n * target terminal in the graph. Use 'none' for no color.\n * Default is #0000FF.\n */\n// TODO this constants is unused (it wasn't used in mxGraph as well)--> remove it (and all documentation references as well)\nexport const CONNECT_TARGET_COLOR = '#0000FF';\n/**\n * Defines the color to be used for highlighting an invalid target cells\n * for a new or changed connections. Note that this may be either a source\n * or target terminal in the graph. Use 'none' for no color. Default is\n * #FF0000.\n */\nexport const INVALID_CONNECT_TARGET_COLOR = '#FF0000';\n/**\n * Defines the color to be used for the highlighting target parent cells\n * (for drag and drop). Use 'none' for no color. Default is #0000FF.\n */\nexport const DROP_TARGET_COLOR = '#0000FF';\n/**\n * Defines the color to be used for the coloring valid connection\n * previews. Use 'none' for no color. Default is #FF0000.\n */\nexport const VALID_COLOR = '#00FF00';\n/**\n * Defines the color to be used for the coloring invalid connection\n * previews. Use 'none' for no color. Default is #FF0000.\n */\nexport const INVALID_COLOR = '#FF0000';\n/**\n * Default value ('green' color) of {@link EdgeHandlerConfig.selectionColor}.\n */\nexport const EDGE_SELECTION_COLOR = '#00FF00';\n/**\n * Default value ('green' color) of {@link VertexHandlerConfig.selectionColor}.\n */\nexport const VERTEX_SELECTION_COLOR = '#00FF00';\n/**\n * Default value of {@link VertexHandlerConfig.selectionStrokeWidth}.\n */\nexport const VERTEX_SELECTION_STROKEWIDTH = 1;\n/**\n * Default value of {@link EdgeHandlerConfig.selectionStrokeWidth}.\n */\nexport const EDGE_SELECTION_STROKEWIDTH = 1;\n/**\n * Default value of {@link VertexHandlerConfig.selectionDashed}.\n */\nexport const VERTEX_SELECTION_DASHED = true;\n/**\n * Default value of {@link EdgeHandlerConfig.selectionDashed}.\n */\nexport const EDGE_SELECTION_DASHED = true;\n/**\n * Defines the color to be used for the guidelines in `Guide`.\n * @default #FF0000.\n */\nexport const GUIDE_COLOR = '#FF0000';\n/**\n * Defines the strokewidth to be used for the guidelines in `Guide`.\n * @default 1.\n */\nexport const GUIDE_STROKEWIDTH = 1;\n/**\n * Defines the color to be used for the outline rectangle\n * border.  Use 'none' for no color. Default is #0099FF.\n */\nexport const OUTLINE_COLOR = '#0099FF';\n/**\n * Defines the strokewidth to be used for the outline rectangle\n * stroke width. Default is 3.\n */\nexport const OUTLINE_STROKEWIDTH = 3;\n/**\n * Default value of {@link HandleConfig.size}.\n */\nexport const HANDLE_SIZE = 6;\n/**\n * Default value of {@link HandleConfig.labelSize}.\n */\nexport const LABEL_HANDLE_SIZE = 4;\n/**\n * Default value ('green' color) of {@link HandleConfig.fillColor}.\n */\nexport const HANDLE_FILLCOLOR = '#00FF00';\n/**\n * Default value of {@link HandleConfig.strokeColor}.\n */\nexport const HANDLE_STROKECOLOR = 'black';\n/**\n * Default value of {@link HandleConfig.labelFillColor}.\n */\nexport const LABEL_HANDLE_FILLCOLOR = 'yellow';\n/**\n * Default value ('blue' color) of {@link EdgeHandlerConfig.connectFillColor}.\n */\nexport const CONNECT_HANDLE_FILLCOLOR = '#0000FF';\n/**\n * Defines the color to be used for the locked handle fill color. Use\n * 'none' for no color. Default is #FF0000 (red).\n */\nexport const LOCKED_HANDLE_FILLCOLOR = '#FF0000';\n/**\n * Defines the color to be used for the outline sizer fill color. Use\n * 'none' for no color. Default is #00FFFF.\n */\nexport const OUTLINE_HANDLE_FILLCOLOR = '#00FFFF';\n/**\n * Defines the color to be used for the outline sizer stroke color. Use\n * 'none' for no color. Default is #0033FF.\n */\nexport const OUTLINE_HANDLE_STROKECOLOR = '#0033FF';\n/**\n * Defines the default family for all fonts. Default is Arial,Helvetica.\n */\nexport const DEFAULT_FONTFAMILY = 'Arial,Helvetica';\n/**\n * Defines the default size (in px). Default is 11.\n */\nexport const DEFAULT_FONTSIZE = 11;\n/**\n * Defines the default value for the <STYLE_TEXT_DIRECTION> if no value is\n * defined for it in the style. Default value is an empty string which means\n * the default system setting is used and no direction is set.\n */\nexport const DEFAULT_TEXT_DIRECTION = '';\n/**\n * Defines the default line height for text labels. Default is 1.2.\n */\nexport const LINE_HEIGHT = 1.2;\n/**\n * Defines the CSS value for the word-wrap property. Default is \"normal\".\n * Change this to \"break-word\" to allow long words to be able to be broken\n * and wrap onto the next line.\n */\nexport const WORD_WRAP = 'normal';\n/**\n * Specifies if absolute line heights should be used (px) in CSS. Default\n * is false. Set this to true for backwards compatibility.\n */\nexport const ABSOLUTE_LINE_HEIGHT = false;\n/**\n * Defines the default style for all fonts. Default is 0. This can be set\n * to any combination of font styles as follows.\n *\n * ```javascript\n * mxConstants.DEFAULT_FONTSTYLE = mxConstants.FONT_BOLD | mxConstants.FONT_ITALIC;\n * ```\n */\nexport const DEFAULT_FONTSTYLE = 0;\n/**\n * Defines the default start size for swimlanes. Default is 40.\n */\nexport const DEFAULT_STARTSIZE = 40;\n/**\n * Defines the default size for all markers. Default is 6.\n */\nexport const DEFAULT_MARKERSIZE = 6;\n/**\n * Defines the default width and height for images used in the\n * label shape. Default is 24.\n */\nexport const DEFAULT_IMAGESIZE = 24;\n/**\n * Default value of {@link EntityRelationConnectorConfig.segment}.\n */\nexport const ENTITY_SEGMENT = 30;\n/**\n * Defines the default rounding factor for the rounded vertices in percent between\n * `0` and `1`. Values should be smaller than `0.5`.\n * See {@link CellStateStyle.arcSize}.\n */\nexport const RECTANGLE_ROUNDING_FACTOR = 0.15;\n/**\n * Defines the default size in pixels of the arcs for the rounded edges.\n * See {@link CellStateStyle.arcSize}.\n */\nexport const LINE_ARCSIZE = 20;\n/**\n * Defines the spacing between the arrow shape and its terminals. Default is 0.\n */\nexport const ARROW_SPACING = 0;\n/**\n * Defines the width of the arrow shape. Default is 30.\n */\nexport const ARROW_WIDTH = 30;\n/**\n * Defines the size of the arrowhead in the arrow shape. Default is 30.\n */\nexport const ARROW_SIZE = 30;\n/**\n * Defines the rectangle for the A4 portrait page format.\n * The dimensions of this page format are 827x1169 pixels.\n */\nexport const PAGE_FORMAT_A4_PORTRAIT = [0, 0, 827, 1169];\n/**\n * Defines the rectangle for the A4 landscape page format.\n * The dimensions of this page format are 1169x827 pixels.\n */\nexport const PAGE_FORMAT_A4_LANDSCAPE = [0, 0, 1169, 827];\n/**\n * Defines the rectangle for the Letter portrait page format.\n * The dimensions of this page format are 850x1100 pixels.\n */\n// It may not be used in @maxGraph/core for now, but helpful for users. So don't remove it.\nexport const PAGE_FORMAT_LETTER_PORTRAIT = [0, 0, 850, 1100];\n/**\n * Defines the rectangle for the Letter landscape page format.\n * The dimensions of this page format are 1100x850 pixels.\n */\n// It may not be used in @maxGraph/core for now, but helpful for users. So don't remove it.\nexport const PAGE_FORMAT_LETTER_LANDSCAPE = [0, 0, 1100, 850];\n/**\n * Defines the value for none. Default is \"none\".\n */\nexport const NONE = 'none';\nexport const FONT_STYLE_MASK = {\n    /** for bold fonts. */\n    BOLD: 1,\n    /** for italic fonts. */\n    ITALIC: 2,\n    /** for underlined fonts. */\n    UNDERLINE: 4,\n    /** for strikethrough fonts. */\n    STRIKETHROUGH: 8,\n};\n/**\n * Bitwise mask for all directions.\n */\nexport const DIRECTION_MASK = {\n    /** No direction. */\n    NONE: 0,\n    WEST: 1,\n    NORTH: 2,\n    SOUTH: 4,\n    EAST: 8,\n    /** All directions. */\n    ALL: 15,\n};\n/**\n * The values of {@link Node.nodeType}\n */\nexport const NODE_TYPE = {\n    ELEMENT: 1,\n    ATTRIBUTE: 2,\n    TEXT: 3,\n    CDATA: 4,\n    ENTITY_REFERENCE: 5,\n    ENTITY: 6,\n    PROCESSING_INSTRUCTION: 7,\n    COMMENT: 8,\n    DOCUMENT: 9,\n    DOCUMENT_TYPE: 10,\n    DOCUMENT_FRAGMENT: 11,\n    NOTATION: 12,\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2017, JGraph Ltd\nCopyright (c) 2006-2017, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { NS_SVG } from './util/Constants';\n/**\n * @category Configuration\n */\nclass Client {\n}\n/**\n * Base path for all URLs in the core without trailing slash.\n *\n * When using a relative path, the path is relative to the URL of the page that contains the assignment. Trailing slashes are automatically removed.\n * @default '.'\n */\nClient.basePath = '.';\nClient.setBasePath = (value) => {\n    if (typeof value !== 'undefined' && value.length > 0) {\n        // Adds a trailing slash if required\n        if (value.substring(value.length - 1) === '/') {\n            value = value.substring(0, value.length - 1);\n        }\n        Client.basePath = value;\n    }\n    else {\n        Client.basePath = '.';\n    }\n};\n/**\n * Base path for all images URLs in the core without trailing slash.\n *\n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n * @default '.'\n */\nClient.imageBasePath = '.';\nClient.setImageBasePath = (value) => {\n    if (typeof value !== 'undefined' && value.length > 0) {\n        // Adds a trailing slash if required\n        if (value.substring(value.length - 1) === '/') {\n            value = value.substring(0, value.length - 1);\n        }\n        Client.imageBasePath = value;\n    }\n    else {\n        Client.imageBasePath = `${Client.basePath}/images`;\n    }\n};\n/**\n * True if the current browser is Microsoft Edge.\n */\nClient.IS_EDGE = typeof window !== 'undefined' &&\n    navigator.userAgent != null &&\n    !!navigator.userAgent.match(/Edge\\//);\n/**\n * True if the current browser is Netscape (including Firefox).\n */\nClient.IS_NS = typeof window !== 'undefined' &&\n    navigator.userAgent != null &&\n    navigator.userAgent.indexOf('Mozilla/') >= 0 &&\n    navigator.userAgent.indexOf('MSIE') < 0 &&\n    navigator.userAgent.indexOf('Edge/') < 0;\n/**\n * True if the current browser is Safari.\n */\nClient.IS_SF = typeof window !== 'undefined' && /Apple Computer, Inc/.test(navigator.vendor);\n/**\n * Returns true if the user agent contains Android.\n */\nClient.IS_ANDROID = typeof window !== 'undefined' && navigator.appVersion.indexOf('Android') >= 0;\n/**\n * Returns true if the user agent is an iPad, iPhone or iPod.\n */\nClient.IS_IOS = typeof window !== 'undefined' && /iP(hone|od|ad)/.test(navigator.platform);\n/**\n * True if the current browser is Google Chrome.\n */\nClient.IS_GC = typeof window !== 'undefined' && /Google Inc/.test(navigator.vendor);\n/**\n * True if the this is running inside a Chrome App.\n */\nClient.IS_CHROMEAPP = typeof window !== 'undefined' &&\n    // @ts-ignore\n    window.chrome != null &&\n    // @ts-ignore\n    chrome.app != null &&\n    // @ts-ignore\n    chrome.app.runtime != null;\n/**\n * True if the current browser is Firefox.\n */\nClient.IS_FF = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n/**\n * True if -moz-transform is available as a CSS style. This is the case\n * for all Firefox-based browsers newer than or equal 3, such as Camino,\n * Iceweasel, Seamonkey and Iceape.\n */\nClient.IS_MT = typeof window !== 'undefined' &&\n    ((navigator.userAgent.indexOf('Firefox/') >= 0 &&\n        navigator.userAgent.indexOf('Firefox/1.') < 0 &&\n        navigator.userAgent.indexOf('Firefox/2.') < 0) ||\n        (navigator.userAgent.indexOf('Iceweasel/') >= 0 &&\n            navigator.userAgent.indexOf('Iceweasel/1.') < 0 &&\n            navigator.userAgent.indexOf('Iceweasel/2.') < 0) ||\n        (navigator.userAgent.indexOf('SeaMonkey/') >= 0 &&\n            navigator.userAgent.indexOf('SeaMonkey/1.') < 0) ||\n        (navigator.userAgent.indexOf('Iceape/') >= 0 &&\n            navigator.userAgent.indexOf('Iceape/1.') < 0));\n/**\n * True if the browser supports SVG.\n */\nClient.IS_SVG = typeof window !== 'undefined' &&\n    navigator.appName.toUpperCase() !== 'MICROSOFT INTERNET EXPLORER';\n/**\n * True if foreignObject support is not available. This is the case for\n * Opera, older SVG-based browsers and all versions of IE.\n */\nClient.NO_FO = typeof window !== 'undefined' &&\n    (!document.createElementNS ||\n        document.createElementNS(NS_SVG, 'foreignObject').toString() !==\n            '[object SVGForeignObjectElement]' ||\n        navigator.userAgent.indexOf('Opera/') >= 0);\n/**\n * True if the client is a Windows.\n */\nClient.IS_WIN = typeof window !== 'undefined' && navigator.appVersion.indexOf('Win') > 0;\n/**\n * True if the client is a Mac.\n */\nClient.IS_MAC = typeof window !== 'undefined' && navigator.appVersion.indexOf('Mac') > 0;\n/**\n * True if the client is a Chrome OS.\n */\nClient.IS_CHROMEOS = typeof window !== 'undefined' && /\\bCrOS\\b/.test(navigator.appVersion);\n/**\n * True if this device supports touchstart/-move/-end events (Apple iOS,\n * Android, Chromebook and Chrome Browser on touch-enabled devices).\n */\nClient.IS_TOUCH = typeof window !== 'undefined' && 'ontouchstart' in document.documentElement;\n/**\n * True if this device supports Microsoft pointer events (always false on Macs).\n */\nClient.IS_POINTER = typeof window !== 'undefined' &&\n    window.PointerEvent != null &&\n    !(navigator.appVersion.indexOf('Mac') > 0);\n/**\n * True if the documents location does not start with http:// or https://.\n */\nClient.IS_LOCAL = typeof window !== 'undefined' &&\n    document.location.href.indexOf('http://') < 0 &&\n    document.location.href.indexOf('https://') < 0;\nexport default Client;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Client from '../Client';\n/**\n * Returns the touch or mouse event that contains the mouse coordinates.\n */\nexport const getMainEvent = (evt) => {\n    let t = evt;\n    if ((t.type === 'touchstart' || t.type === 'touchmove') && t.touches && t.touches[0]) {\n        t = t.touches[0];\n    }\n    else if (t.type === 'touchend' && t.changedTouches && t.changedTouches[0]) {\n        t = t.changedTouches[0];\n    }\n    return t;\n};\n/**\n * Returns true if the meta key is pressed for the given event.\n */\nexport const getClientX = (evt) => {\n    return getMainEvent(evt).clientX;\n};\n/**\n * Returns true if the meta key is pressed for the given event.\n */\n// static getClientY(e: TouchEvent | MouseEvent): number;\nexport const getClientY = (evt) => {\n    return getMainEvent(evt).clientY;\n};\n/**\n * Returns the event's target or srcElement depending on the browser.\n */\nexport const getSource = (evt) => {\n    return evt.target;\n};\n/**\n * Returns true if the event has been consumed using {@link consume}.\n */\nexport const isConsumed = (evt) => {\n    const t = evt;\n    return t.isConsumed !== undefined && t.isConsumed;\n};\n/**\n * Returns true if the event was generated using a touch device (not a pen or mouse).\n */\nexport const isTouchEvent = (evt) => {\n    const t = evt;\n    return t.pointerType\n        ? t.pointerType === 'touch' || t.pointerType === t.MSPOINTER_TYPE_TOUCH\n        : t.mozInputSource !== undefined\n            ? t.mozInputSource === 5\n            : t.type.indexOf('touch') === 0;\n};\n/**\n * Returns true if the event was generated using a pen (not a touch device or mouse).\n */\nexport const isPenEvent = (evt) => {\n    const t = evt;\n    return t.pointerType\n        ? t.pointerType == 'pen' || t.pointerType === t.MSPOINTER_TYPE_PEN\n        : t.mozInputSource !== undefined\n            ? t.mozInputSource === 2\n            : t.type.indexOf('pen') === 0;\n};\n/**\n * Returns true if the event was generated using a touch device (not a pen or mouse).\n */\nexport const isMultiTouchEvent = (evt) => {\n    const t = evt;\n    return (t.type &&\n        t.type.indexOf('touch') == 0 &&\n        t.touches !== undefined &&\n        t.touches.length > 1);\n};\n/**\n * Returns true if the event was generated using a mouse (not a pen or touch device).\n */\nexport const isMouseEvent = (evt) => {\n    const t = evt;\n    return t.pointerType\n        ? t.pointerType == 'mouse' || t.pointerType === t.MSPOINTER_TYPE_MOUSE\n        : t.mozInputSource !== undefined\n            ? t.mozInputSource === 1\n            : t.type.indexOf('mouse') === 0;\n};\n/**\n * Returns true if the left mouse button is pressed for the given event.\n * To check if a button is pressed during a mouseMove you should use the\n * {@link mxGraph.isMouseDown} property. Note that this returns true in Firefox\n * for control+left-click on the Mac.\n */\n// static isLeftMouseButton(evt: MouseEvent): boolean;\nexport const isLeftMouseButton = (evt) => {\n    // Special case for mousemove and mousedown we check the buttons\n    // if it exists because which is 0 even if no button is pressed\n    if ('buttons' in evt && (evt.type === 'mousedown' || evt.type === 'mousemove')) {\n        return evt.buttons === 1;\n    }\n    if (evt.which !== undefined) {\n        return evt.which === 1;\n    }\n    return evt.button === 1;\n};\n/**\n * Returns true if the middle mouse button is pressed for the given event.\n * To check if a button is pressed during a mouseMove you should use the\n * {@link mxGraph.isMouseDown} property.\n */\nexport const isMiddleMouseButton = (evt) => {\n    return evt.button === 4;\n};\n/**\n * Returns true if the right mouse button was pressed. Note that this\n * button might not be available on some systems. For handling a popup\n * trigger {@link isPopupTrigger} should be used.\n */\nexport const isRightMouseButton = (evt) => {\n    return evt.button === 2;\n};\n/**\n * Returns true if the event is a popup trigger. This implementation\n * returns true if the right button or the left button and control was\n * pressed on a Mac.\n */\nexport const isPopupTrigger = (evt) => {\n    return (isRightMouseButton(evt) ||\n        (Client.IS_MAC &&\n            isControlDown(evt) &&\n            !isShiftDown(evt) &&\n            !isMetaDown(evt) &&\n            !isAltDown(evt)));\n};\n/**\n * Returns true if the shift key is pressed for the given event.\n */\nexport const isShiftDown = (evt) => {\n    return evt.shiftKey;\n};\n/**\n * Returns true if the alt key is pressed for the given event.\n */\nexport const isAltDown = (evt) => {\n    return evt.altKey;\n};\n/**\n * Returns true if the control key is pressed for the given event.\n */\nexport const isControlDown = (evt) => {\n    return evt.ctrlKey;\n};\n/**\n * Returns true if the meta key is pressed for the given event.\n */\nexport const isMetaDown = (evt) => {\n    return evt.metaKey;\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { NODE_TYPE } from './Constants';\n/**\n * Returns the text content of the specified node.\n *\n * @param elems DOM nodes to return the text for.\n */\nexport const extractTextWithWhitespace = (elems) => {\n    // Known block elements for handling linefeeds (list is not complete)\n    const blocks = [\n        'BLOCKQUOTE',\n        'DIV',\n        'H1',\n        'H2',\n        'H3',\n        'H4',\n        'H5',\n        'H6',\n        'OL',\n        'P',\n        'PRE',\n        'TABLE',\n        'UL',\n    ];\n    const ret = [];\n    function doExtract(elts) {\n        // Single break should be ignored\n        if (elts.length == 1 && (elts[0].nodeName == 'BR' || elts[0].innerHTML == '\\n')) {\n            return;\n        }\n        for (let i = 0; i < elts.length; i += 1) {\n            const elem = elts[i];\n            // DIV with a br or linefeed forces a linefeed\n            if (elem.nodeName == 'BR' ||\n                elem.innerHTML == '\\n' ||\n                ((elts.length == 1 || i == 0) &&\n                    elem.nodeName == 'DIV' &&\n                    elem.innerHTML.toLowerCase() == '<br>')) {\n                ret.push('\\n');\n            }\n            else {\n                if (elem.nodeType === 3 || elem.nodeType === 4) {\n                    if (elem.nodeValue && elem.nodeValue.length > 0) {\n                        ret.push(elem.nodeValue);\n                    }\n                }\n                else if (elem.nodeType !== 8 && elem.childNodes.length > 0) {\n                    doExtract(Array.from(elem.childNodes));\n                }\n                if (i < elts.length - 1 && blocks.indexOf(elts[i + 1].nodeName) >= 0) {\n                    ret.push('\\n');\n                }\n            }\n        }\n    }\n    doExtract(elems);\n    return ret.join('');\n};\n/**\n * Returns the text content of the specified node.\n *\n * @param node DOM node to return the text content for.\n */\nexport const getTextContent = (node) => {\n    return node?.textContent ?? '';\n};\n/**\n * Sets the text content of the specified node.\n *\n * @param node DOM node to set the text content for.\n * @param text String that represents the text content.\n */\nexport const setTextContent = (node, text) => {\n    if ('innerText' in node) {\n        node.innerText = text;\n    }\n    else {\n        node.textContent = text;\n    }\n};\n/**\n * Returns the inner HTML for the given node as a string or an empty string\n * if no node was specified. The inner HTML is the text representing all\n * children of the node, but not the node itself.\n *\n * @param node DOM node to return the inner HTML for.\n */\nexport const getInnerHtml = (node) => {\n    if (node != null) {\n        const serializer = new XMLSerializer();\n        return serializer.serializeToString(node);\n    }\n    return '';\n};\n/**\n * Returns the outer HTML for the given node as a string or an empty\n * string if no node was specified. The outer HTML is the text representing\n * all children of the node including the node itself.\n *\n * @param node DOM node to return the outer HTML for.\n */\nexport const getOuterHtml = (node) => {\n    if (node != null) {\n        const serializer = new XMLSerializer();\n        return serializer.serializeToString(node);\n    }\n    return '';\n};\n/**\n * Creates a text node for the given string and appends it to the given\n * parent. Returns the text node.\n *\n * @param parent DOM node to append the text node to.\n * @param text String representing the text to be added.\n */\nexport const write = (parent, text) => {\n    const doc = parent.ownerDocument;\n    const node = doc.createTextNode(text);\n    if (parent != null) {\n        parent.appendChild(node);\n    }\n    return node;\n};\n/**\n * Creates a text node for the given string and appends it to the given\n * parent with an additional linefeed. Returns the text node.\n *\n * @param parent DOM node to append the text node to.\n * @param text String representing the text to be added.\n */\nexport const writeln = (parent, text) => {\n    const doc = parent.ownerDocument;\n    const node = doc.createTextNode(text);\n    if (parent != null) {\n        parent.appendChild(node);\n        parent.appendChild(document.createElement('br'));\n    }\n    return node;\n};\n/**\n * Appends a linebreak to the given parent and returns the linebreak.\n *\n * @param parent DOM node to append the linebreak to.\n */\nexport const br = (parent, count = 1) => {\n    let br = null;\n    for (let i = 0; i < count; i += 1) {\n        if (parent != null) {\n            br = parent.ownerDocument.createElement('br');\n            parent.appendChild(br);\n        }\n    }\n    return br;\n};\n/**\n * Appends a new paragraph with the given text to the specified parent and\n * returns the paragraph.\n *\n * @param parent DOM node to append the text node to.\n * @param text String representing the text for the new paragraph.\n */\nexport const para = (parent, text) => {\n    const p = document.createElement('p');\n    write(p, text);\n    if (parent != null) {\n        parent.appendChild(p);\n    }\n    return p;\n};\n/**\n * Returns true if the given value is an XML node with the node name\n * and if the optional attribute has the specified value.\n *\n * This implementation assumes that the given value is a DOM node if the\n * nodeType property is numeric, that is, if isNaN returns false for\n * value.nodeType.\n *\n * @param value Object that should be examined as a node.\n * @param nodeName String that specifies the node name.\n * @param attributeName Optional attribute name to check.\n * @param attributeValue Optional attribute value to check.\n */\nexport const isNode = (value, nodeName = null, attributeName, attributeValue) => {\n    if (value != null &&\n        !isNaN(value.nodeType) &&\n        (nodeName == null || value.nodeName.toLowerCase() == nodeName.toLowerCase())) {\n        return attributeName == null || value.getAttribute(attributeName) == attributeValue;\n    }\n    return false;\n};\n/**\n * Returns true if the given ancestor is an ancestor of the\n * given DOM node in the DOM. This also returns true if the\n * child is the ancestor.\n *\n * @param ancestor DOM node that represents the ancestor.\n * @param child DOM node that represents the child.\n */\nexport const isAncestorNode = (ancestor, child) => {\n    let parent = child;\n    while (parent != null) {\n        if (parent === ancestor) {\n            return true;\n        }\n        parent = parent.parentNode;\n    }\n    return false;\n};\n/**\n * Returns an array of child nodes that are of the given node type.\n *\n * @param node Parent DOM node to return the children from.\n * @param nodeType Optional node type to return. Default is {@link NODE_TYPE.ELEMENT}.\n */\nexport const getChildNodes = (node, nodeType = NODE_TYPE.ELEMENT) => {\n    const children = [];\n    let tmp = node.firstChild;\n    while (tmp != null) {\n        if (tmp.nodeType === nodeType) {\n            children.push(tmp);\n        }\n        tmp = tmp.nextSibling;\n    }\n    return children;\n};\n/**\n * Cross browser implementation for document.importNode. Uses {@link Document.importNode}\n * in all browsers but IE, where the node is cloned by creating a new node and\n * copying all attributes and children into it using importNode, recursively.\n *\n * @param doc Document to import the node into.\n * @param node Node to be imported.\n * @param allChildren If all children should be imported.\n */\nexport const importNode = (doc, node, allChildren) => {\n    return doc.importNode(node, allChildren);\n};\n/**\n * Clears the current selection in the page.\n */\nexport const clearSelection = () => {\n    // @ts-ignore\n    const sel = window.getSelection ? window.getSelection() : document.selection;\n    if (sel) {\n        if (sel.removeAllRanges) {\n            sel.removeAllRanges();\n        }\n        else if (sel.empty) {\n            sel.empty();\n        }\n    }\n};\n/**\n * Creates and returns an image (IMG node) or VML image (v:image) in IE6 in\n * quirks mode.\n *\n * @param src URL that points to the image to be displayed.\n */\nexport const createImage = (src) => {\n    let imageNode = null;\n    imageNode = document.createElement('img');\n    imageNode.setAttribute('src', src);\n    imageNode.setAttribute('border', '0');\n    return imageNode;\n};\n/**\n * Adds a link node to the head of the document.\n *\n * The charset is hardcoded to `UTF-8` and the type is `text/css`.\n *\n * @param rel String that represents the rel attribute of the link node.\n * @param href String that represents the href attribute of the link node.\n * @param doc Optional parent document of the link node.\n * @param id unique id for the link element to check if it already exists\n */\nexport const addLinkToHead = (rel, href, doc = null, id = null) => {\n    doc = doc || document;\n    // Workaround for Operation Aborted in IE6 if base tag is used in head\n    const link = doc.createElement('link');\n    link.setAttribute('rel', rel);\n    link.setAttribute('href', href);\n    link.setAttribute('charset', 'UTF-8');\n    link.setAttribute('type', 'text/css');\n    if (id) {\n        link.setAttribute('id', id);\n    }\n    const head = doc.getElementsByTagName('head')[0];\n    head.appendChild(link);\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { getClientX, getClientY, getSource, isMouseEvent, isPopupTrigger, } from '../../util/EventUtils';\nimport { isAncestorNode } from '../../util/domUtils';\n/**\n * Base class for all mouse events in mxGraph. A listener for this event should\n * implement the following methods:\n *\n * ```javascript\n * graph.addMouseListener(\n * {\n *   mouseDown: (sender, evt)=>\n *   {\n *     GlobalConfig.logger.debug('mouseDown');\n *   },\n *   mouseMove: (sender, evt)=>\n *   {\n *     GlobalConfig.logger.debug('mouseMove');\n *   },\n *   mouseUp: (sender, evt)=>\n *   {\n *     GlobalConfig.logger.debug('mouseUp');\n *   }\n * });\n * ```\n *\n * @category Event\n */\nclass InternalMouseEvent {\n    /**\n     * Constructs a new event object for the given arguments.\n     *\n     * @param evt Native mouse event.\n     * @param state Optional {@link CellState} under the mouse.\n     */\n    constructor(evt, state = null) {\n        /**\n         * Holds the consumed state of this event.\n         */\n        this.consumed = false;\n        this.evt = evt;\n        this.state = state;\n        this.sourceState = state;\n        // graphX and graphY are updated right after this constructor is executed,\n        // so let them default to 0 and make them not nullable.\n        this.graphX = 0;\n        this.graphY = 0;\n    }\n    /**\n     * Returns <evt>.\n     */\n    getEvent() {\n        return this.evt;\n    }\n    /**\n     * Returns the target DOM element using {@link Event#getSource} for <evt>.\n     */\n    getSource() {\n        return getSource(this.evt);\n    }\n    /**\n     * Returns true if the given {@link Shape} is the source of <evt>.\n     */\n    isSource(shape) {\n        return shape ? isAncestorNode(shape.node, this.getSource()) : false;\n    }\n    /**\n     * Returns <evt.clientX>.\n     */\n    getX() {\n        return getClientX(this.getEvent());\n    }\n    /**\n     * Returns <evt.clientY>.\n     */\n    getY() {\n        return getClientY(this.getEvent());\n    }\n    /**\n     * Returns <graphX>.\n     */\n    getGraphX() {\n        return this.graphX;\n    }\n    /**\n     * Returns <graphY>.\n     */\n    getGraphY() {\n        return this.graphY;\n    }\n    /**\n     * Returns <state>.\n     */\n    getState() {\n        return this.state;\n    }\n    /**\n     * Returns the <Cell> in <state> is not null.\n     */\n    getCell() {\n        const state = this.getState();\n        return state ? state.cell : null;\n    }\n    /**\n     * Returns true if the event is a popup trigger.\n     */\n    isPopupTrigger() {\n        return isPopupTrigger(this.getEvent());\n    }\n    /**\n     * Returns <consumed>.\n     */\n    isConsumed() {\n        return this.consumed;\n    }\n    /**\n     * Sets <consumed> to true and invokes preventDefault on the native event\n     * if such a method is defined. This is used mainly to avoid the cursor from\n     * being changed to a text cursor in Webkit. You can use the preventDefault\n     * flag to disable this functionality.\n     *\n     * @param preventDefault Specifies if the native event should be canceled. Default\n     * is true.\n     */\n    consume(preventDefault) {\n        preventDefault = preventDefault\n            ? preventDefault\n            : (window.TouchEvent && this.evt instanceof TouchEvent) || isMouseEvent(this.evt);\n        if (preventDefault && this.evt.preventDefault) {\n            this.evt.preventDefault();\n        }\n        // Sets local consumed state\n        this.consumed = true;\n    }\n}\nexport default InternalMouseEvent;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalMouseEvent from './InternalMouseEvent';\nimport Client from '../../Client';\nimport { isConsumed, isMouseEvent } from '../../util/EventUtils';\n// Checks if passive event listeners are supported\n// see https://github.com/Modernizr/Modernizr/issues/1894\nlet supportsPassive = false;\ntry {\n    document.addEventListener('test', () => {\n        return;\n    }, Object.defineProperty &&\n        Object.defineProperty({}, 'passive', {\n            get: () => {\n                supportsPassive = true;\n            },\n        }));\n}\ncatch (e) {\n    // ignore\n}\n/**\n * @class InternalEvent\n *\n * Cross-browser DOM event support. For internal event handling,\n * {@link EventSource} and the graph event dispatch loop in {@link AbstractGraph} are used.\n *\n * ### Memory Leaks:\n *\n * Use this class for adding and removing listeners to/from DOM nodes. The\n * {@link removeAllListeners} function is provided to remove all listeners that\n * have been added using {@link addListener}. The function should be invoked when\n * the last reference is removed in the JavaScript code, typically when the\n * referenced DOM node is removed from the DOM.\n *\n * @category Event\n */\nclass InternalEvent {\n    /**\n     * Binds the function to the specified event on the given element. Use\n     * {@link mxUtils.bind} in order to bind the \"this\" keyword inside the function\n     * to a given execution scope.\n     */\n    static addListener(element, eventName, funct) {\n        element.addEventListener(eventName, funct, supportsPassive ? { passive: false } : false);\n        if (!element.mxListenerList) {\n            element.mxListenerList = [];\n        }\n        const entry = { name: eventName, f: funct };\n        element.mxListenerList.push(entry);\n    }\n    /**\n     * Removes the specified listener from the given element.\n     */\n    static removeListener(element, eventName, funct) {\n        element.removeEventListener(eventName, funct, false);\n        if (element.mxListenerList) {\n            const listenerCount = element.mxListenerList.length;\n            for (let i = 0; i < listenerCount; i += 1) {\n                const entry = element.mxListenerList[i];\n                if (entry.f === funct) {\n                    element.mxListenerList.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     * Removes all listeners from the given element.\n     */\n    static removeAllListeners(element) {\n        const list = element.mxListenerList;\n        if (list) {\n            while (list.length > 0) {\n                const entry = list[0];\n                InternalEvent.removeListener(element, entry.name, entry.f);\n            }\n        }\n    }\n    /**\n     * Adds the given listeners for touch, mouse and/or pointer events. If\n     * <Client.IS_POINTER> is true then pointer events will be registered,\n     * else the respective mouse events will be registered. If <Client.IS_POINTER>\n     * is false and <Client.IS_TOUCH> is true then the respective touch events\n     * will be registered as well as the mouse events.\n     */\n    static addGestureListeners(node, startListener = null, moveListener = null, endListener = null) {\n        if (startListener) {\n            InternalEvent.addListener(node, Client.IS_POINTER ? 'pointerdown' : 'mousedown', startListener);\n        }\n        if (moveListener) {\n            InternalEvent.addListener(node, Client.IS_POINTER ? 'pointermove' : 'mousemove', moveListener);\n        }\n        if (endListener) {\n            InternalEvent.addListener(node, Client.IS_POINTER ? 'pointerup' : 'mouseup', endListener);\n        }\n        if (!Client.IS_POINTER && Client.IS_TOUCH) {\n            if (startListener) {\n                InternalEvent.addListener(node, 'touchstart', startListener);\n            }\n            if (moveListener) {\n                InternalEvent.addListener(node, 'touchmove', moveListener);\n            }\n            if (endListener) {\n                InternalEvent.addListener(node, 'touchend', endListener);\n            }\n        }\n    }\n    /**\n     * Removes the given listeners from mousedown, mousemove, mouseup and the\n     * respective touch events if <Client.IS_TOUCH> is true.\n     */\n    static removeGestureListeners(node, startListener, moveListener, endListener) {\n        if (startListener) {\n            InternalEvent.removeListener(node, Client.IS_POINTER ? 'pointerdown' : 'mousedown', startListener);\n        }\n        if (moveListener) {\n            InternalEvent.removeListener(node, Client.IS_POINTER ? 'pointermove' : 'mousemove', moveListener);\n        }\n        if (endListener) {\n            InternalEvent.removeListener(node, Client.IS_POINTER ? 'pointerup' : 'mouseup', endListener);\n        }\n        if (!Client.IS_POINTER && Client.IS_TOUCH) {\n            if (startListener) {\n                InternalEvent.removeListener(node, 'touchstart', startListener);\n            }\n            if (moveListener) {\n                InternalEvent.removeListener(node, 'touchmove', moveListener);\n            }\n            if (endListener) {\n                InternalEvent.removeListener(node, 'touchend', endListener);\n            }\n        }\n    }\n    /**\n     * Redirects the mouse events from the given DOM node to the graph dispatch\n     * loop using the event and given state as event arguments. State can\n     * either be an instance of <CellState> or a function that returns an\n     * <CellState>. The down, move, up and dblClick arguments are optional\n     * functions that take the trigger event as arguments and replace the\n     * default behaviour.\n     */\n    static redirectMouseEvents(node, graph, state = null, down = null, move = null, up = null, dblClick = null) {\n        const getState = (evt) => {\n            return typeof state === 'function' ? state(evt) : state;\n        };\n        InternalEvent.addGestureListeners(node, (evt) => {\n            if (down) {\n                down(evt);\n            }\n            else if (!isConsumed(evt)) {\n                graph.fireMouseEvent(InternalEvent.MOUSE_DOWN, new InternalMouseEvent(evt, getState(evt)));\n            }\n        }, (evt) => {\n            if (move) {\n                move(evt);\n            }\n            else if (!isConsumed(evt)) {\n                graph.fireMouseEvent(InternalEvent.MOUSE_MOVE, new InternalMouseEvent(evt, getState(evt)));\n            }\n        }, (evt) => {\n            if (up) {\n                up(evt);\n            }\n            else if (!isConsumed(evt)) {\n                graph.fireMouseEvent(InternalEvent.MOUSE_UP, new InternalMouseEvent(evt, getState(evt)));\n            }\n        });\n        InternalEvent.addListener(node, 'dblclick', (evt) => {\n            if (dblClick) {\n                dblClick(evt);\n            }\n            else if (!isConsumed(evt)) {\n                const tmp = getState(evt);\n                graph.dblClick(evt, tmp?.cell);\n            }\n        });\n    }\n    /**\n     * Removes the known listeners from the given DOM node and its descendants.\n     *\n     * @param element DOM node to remove the listeners from.\n     */\n    static release(element) {\n        try {\n            InternalEvent.removeAllListeners(element);\n            // @ts-ignore\n            const children = element.childNodes;\n            if (children !== undefined) {\n                const childCount = children.length;\n                for (let i = 0; i < childCount; i += 1) {\n                    InternalEvent.release(children[i]);\n                }\n            }\n        }\n        catch (e) {\n            // ignores errors as this is typically called in cleanup code\n        }\n    }\n    /**\n     * Installs the given function as a handler for mouse wheel events. The\n     * function has two arguments: the mouse event and a boolean that specifies\n     * if the wheel was moved up or down.\n     *\n     * This has been tested with IE 6 and 7, Firefox (all versions), Opera and\n     * Safari. It does currently not work on Safari for Mac.\n     *\n     * ### Example\n     *\n     * @example\n     * ```javascript\n     * mxEvent.addMouseWheelListener(function (evt, up)\n     * {\n     *   GlobalConfig.logger.show();\n     *   GlobalConfig.logger.debug('mouseWheel: up='+up);\n     * });\n     * ```\n     *\n     * @param funct Handler function that takes the event argument and a boolean up\n     * argument for the mousewheel direction.\n     * @param target Target for installing the listener in Google Chrome. See\n     * https://www.chromestatus.com/features/6662647093133312.\n     */\n    static addMouseWheelListener(funct, target) {\n        if (funct != null) {\n            const wheelHandler = (evt) => {\n                // To prevent window zoom on trackpad pinch\n                if (evt.ctrlKey) {\n                    evt.preventDefault();\n                }\n                // Handles the event using the given function\n                if (Math.abs(evt.deltaX) > 0.5 || Math.abs(evt.deltaY) > 0.5) {\n                    funct(evt, evt.deltaY == 0 ? -evt.deltaX > 0 : -evt.deltaY > 0);\n                }\n            };\n            target = target != null ? target : window;\n            if (Client.IS_SF && !Client.IS_TOUCH) {\n                let scale = 1;\n                InternalEvent.addListener(target, 'gesturestart', (evt) => {\n                    InternalEvent.consume(evt);\n                    scale = 1;\n                });\n                InternalEvent.addListener(target, 'gesturechange', ((evt) => {\n                    InternalEvent.consume(evt);\n                    if (typeof evt.scale === 'number') {\n                        const diff = scale - evt.scale;\n                        if (Math.abs(diff) > 0.2) {\n                            funct(evt, diff < 0, true);\n                            scale = evt.scale;\n                        }\n                    }\n                }));\n                InternalEvent.addListener(target, 'gestureend', (evt) => {\n                    InternalEvent.consume(evt);\n                });\n            }\n            else {\n                let evtCache = [];\n                let dx0 = 0;\n                let dy0 = 0;\n                // Adds basic listeners for graph event dispatching\n                InternalEvent.addGestureListeners(target, ((evt) => {\n                    if (!isMouseEvent(evt) && evt.pointerId != null) {\n                        evtCache.push(evt);\n                    }\n                }), ((evt) => {\n                    if (!isMouseEvent(evt) && evtCache.length == 2) {\n                        // Find this event in the cache and update its record with this event\n                        for (let i = 0; i < evtCache.length; i += 1) {\n                            if (evt.pointerId == evtCache[i].pointerId) {\n                                evtCache[i] = evt;\n                                break;\n                            }\n                        }\n                        // Calculate the distance between the two pointers\n                        const dx = Math.abs(evtCache[0].clientX - evtCache[1].clientX);\n                        const dy = Math.abs(evtCache[0].clientY - evtCache[1].clientY);\n                        const tx = Math.abs(dx - dx0);\n                        const ty = Math.abs(dy - dy0);\n                        if (tx > InternalEvent.PINCH_THRESHOLD ||\n                            ty > InternalEvent.PINCH_THRESHOLD) {\n                            const cx = evtCache[0].clientX + (evtCache[1].clientX - evtCache[0].clientX) / 2;\n                            const cy = evtCache[0].clientY + (evtCache[1].clientY - evtCache[0].clientY) / 2;\n                            funct(evtCache[0], tx > ty ? dx > dx0 : dy > dy0, true, cx, cy);\n                            // Cache the distance for the next move event\n                            dx0 = dx;\n                            dy0 = dy;\n                        }\n                    }\n                }), (evt) => {\n                    evtCache = [];\n                    dx0 = 0;\n                    dy0 = 0;\n                });\n            }\n            InternalEvent.addListener(target, 'wheel', wheelHandler);\n        }\n    }\n    /**\n     * Disables the context menu for the given element.\n     */\n    static disableContextMenu(element) {\n        InternalEvent.addListener(element, 'contextmenu', (evt) => {\n            if (evt.preventDefault) {\n                evt.preventDefault();\n            }\n            return false;\n        });\n    }\n    /**\n     * Consumes the given event.\n     *\n     * @param evt Native event to be consumed.\n     * @param {boolean} [preventDefault=true] Optional boolean to prevent the default for the event.\n     * Default is true.\n     * @param {boolean} [stopPropagation=true] Option boolean to stop event propagation. Default is\n     * true.\n     */\n    static consume(evt, preventDefault = true, stopPropagation = true) {\n        if (preventDefault) {\n            if (evt.preventDefault) {\n                if (stopPropagation) {\n                    evt.stopPropagation();\n                }\n                evt.preventDefault();\n            }\n            else if (stopPropagation) {\n                evt.cancelBubble = true;\n            }\n        }\n        // Opera\n        // @ts-ignore This is a non-standard property.\n        evt.isConsumed = true;\n        // Other browsers\n        if (!evt.preventDefault) {\n            evt.returnValue = false;\n        }\n    }\n}\n//\n// Special handles in mouse events\n//\n/**\n * Index for the label handle in an mxMouseEvent. This should be a negative\n * value that does not interfere with any possible handle indices.\n * @default -1\n */\nInternalEvent.LABEL_HANDLE = -1;\n/**\n * Index for the rotation handle in an mxMouseEvent. This should be a\n * negative value that does not interfere with any possible handle indices.\n * @default -2\n */\nInternalEvent.ROTATION_HANDLE = -2;\n/**\n * Start index for the custom handles in an mxMouseEvent. This should be a\n * negative value and is the start index which is decremented for each\n * custom handle.\n * @default -100\n */\nInternalEvent.CUSTOM_HANDLE = -100;\n/**\n * Start index for the virtual handles in an mxMouseEvent. This should be a\n * negative value and is the start index which is decremented for each\n * virtual handle.\n * This assumes that there are no more\n * than VIRTUAL_HANDLE - CUSTOM_HANDLE custom handles.\n *\n * @default -100000\n */\nInternalEvent.VIRTUAL_HANDLE = -100000;\n//\n// Event names\n//\n/**\n * Specifies the event name for mouseDown.\n */\nInternalEvent.MOUSE_DOWN = 'mouseDown';\n/**\n * Specifies the event name for mouseMove.\n */\nInternalEvent.MOUSE_MOVE = 'mouseMove';\n/**\n * Specifies the event name for mouseUp.\n */\nInternalEvent.MOUSE_UP = 'mouseUp';\n/**\n * Specifies the event name for activate.\n */\nInternalEvent.ACTIVATE = 'activate';\n/**\n * Specifies the event name for resizeStart.\n */\nInternalEvent.RESIZE_START = 'resizeStart';\n/**\n * Specifies the event name for resize.\n */\nInternalEvent.RESIZE = 'resize';\n/**\n * Specifies the event name for resizeEnd.\n */\nInternalEvent.RESIZE_END = 'resizeEnd';\n/**\n * Specifies the event name for moveStart.\n */\nInternalEvent.MOVE_START = 'moveStart';\n/**\n * Specifies the event name for move.\n */\nInternalEvent.MOVE = 'move';\n/**\n * Specifies the event name for moveEnd.\n */\nInternalEvent.MOVE_END = 'moveEnd';\n/**\n * Specifies the event name for panStart.\n */\nInternalEvent.PAN_START = 'panStart';\n/**\n * Specifies the event name for pan.\n */\nInternalEvent.PAN = 'pan';\n/**\n * Specifies the event name for panEnd.\n */\nInternalEvent.PAN_END = 'panEnd';\n/**\n * Specifies the event name for minimize.\n */\nInternalEvent.MINIMIZE = 'minimize';\n/**\n * Specifies the event name for normalize.\n */\nInternalEvent.NORMALIZE = 'normalize';\n/**\n * Specifies the event name for maximize.\n */\nInternalEvent.MAXIMIZE = 'maximize';\n/**\n * Specifies the event name for hide.\n */\nInternalEvent.HIDE = 'hide';\n/**\n * Specifies the event name for show.\n */\nInternalEvent.SHOW = 'show';\n/**\n * Specifies the event name for close.\n */\nInternalEvent.CLOSE = 'close';\n/**\n * Specifies the event name for destroy.\n */\nInternalEvent.DESTROY = 'destroy';\n/**\n * Specifies the event name for refresh.\n */\nInternalEvent.REFRESH = 'refresh';\n/**\n * Specifies the event name for size.\n */\nInternalEvent.SIZE = 'size';\n/**\n * Specifies the event name for select.\n */\nInternalEvent.SELECT = 'select';\n/**\n * Specifies the event name for fired.\n */\nInternalEvent.FIRED = 'fired';\n/**\n * Specifies the event name for fireMouseEvent.\n */\nInternalEvent.FIRE_MOUSE_EVENT = 'fireMouseEvent';\n/**\n * Specifies the event name for gesture.\n */\nInternalEvent.GESTURE = 'gesture';\n/**\n * Specifies the event name for tapAndHold.\n */\nInternalEvent.TAP_AND_HOLD = 'tapAndHold';\n/**\n * Specifies the event name for get.\n */\nInternalEvent.GET = 'get';\n/**\n * Specifies the event name for receive.\n */\nInternalEvent.RECEIVE = 'receive';\n/**\n * Specifies the event name for connect.\n */\nInternalEvent.CONNECT = 'connect';\n/**\n * Specifies the event name for disconnect.\n */\nInternalEvent.DISCONNECT = 'disconnect';\n/**\n * Specifies the event name for suspend.\n */\nInternalEvent.SUSPEND = 'suspend';\n/**\n * Specifies the event name for suspend.\n */\nInternalEvent.RESUME = 'resume';\n/**\n * Specifies the event name for mark.\n */\nInternalEvent.MARK = 'mark';\n/**\n * Specifies the event name for root.\n */\nInternalEvent.ROOT = 'root';\n/**\n * Specifies the event name for post.\n */\nInternalEvent.POST = 'post';\n/**\n * Specifies the event name for open.\n */\nInternalEvent.OPEN = 'open';\n/**\n * Specifies the event name for open.\n */\nInternalEvent.SAVE = 'save';\n/**\n * Specifies the event name for beforeAddVertex.\n */\nInternalEvent.BEFORE_ADD_VERTEX = 'beforeAddVertex';\n/**\n * Specifies the event name for addVertex.\n */\nInternalEvent.ADD_VERTEX = 'addVertex';\n/**\n * Specifies the event name for afterAddVertex.\n */\nInternalEvent.AFTER_ADD_VERTEX = 'afterAddVertex';\n/**\n * Specifies the event name for done.\n */\nInternalEvent.DONE = 'done';\n/**\n * Specifies the event name for execute.\n */\nInternalEvent.EXECUTE = 'execute';\n/**\n * Specifies the event name for executed.\n */\nInternalEvent.EXECUTED = 'executed';\n/**\n * Specifies the event name for beginUpdate.\n */\nInternalEvent.BEGIN_UPDATE = 'beginUpdate';\n/**\n * Specifies the event name for startEdit.\n */\nInternalEvent.START_EDIT = 'startEdit';\n/**\n * Specifies the event name for endUpdate.\n */\nInternalEvent.END_UPDATE = 'endUpdate';\n/**\n * Specifies the event name for endEdit.\n */\nInternalEvent.END_EDIT = 'endEdit';\n/**\n * Specifies the event name for beforeUndo.\n */\nInternalEvent.BEFORE_UNDO = 'beforeUndo';\n/**\n * Specifies the event name for undo.\n */\nInternalEvent.UNDO = 'undo';\n/**\n * Specifies the event name for redo.\n */\nInternalEvent.REDO = 'redo';\n/**\n * Specifies the event name for change.\n */\nInternalEvent.CHANGE = 'change';\n/**\n * Specifies the event name for notify.\n */\nInternalEvent.NOTIFY = 'notify';\n/**\n * Specifies the event name for layoutCells.\n */\nInternalEvent.LAYOUT_CELLS = 'layoutCells';\n/**\n * Specifies the event name for click.\n */\nInternalEvent.CLICK = 'click';\n/**\n * Specifies the event name for scale.\n */\nInternalEvent.SCALE = 'scale';\n/**\n * Specifies the event name for translate.\n */\nInternalEvent.TRANSLATE = 'translate';\n/**\n * Specifies the event name for scaleAndTranslate.\n */\nInternalEvent.SCALE_AND_TRANSLATE = 'scaleAndTranslate';\n/**\n * Specifies the event name for up.\n */\nInternalEvent.UP = 'up';\n/**\n * Specifies the event name for down.\n */\nInternalEvent.DOWN = 'down';\n/**\n * Specifies the event name for add.\n */\nInternalEvent.ADD = 'add';\n/**\n * Specifies the event name for remove.\n */\nInternalEvent.REMOVE = 'remove';\n/**\n * Specifies the event name for clear.\n */\nInternalEvent.CLEAR = 'clear';\n/**\n * Specifies the event name for addCells.\n */\nInternalEvent.ADD_CELLS = 'addCells';\n/**\n * Specifies the event name for cellsAdded.\n */\nInternalEvent.CELLS_ADDED = 'cellsAdded';\n/**\n * Specifies the event name for moveCells.\n */\nInternalEvent.MOVE_CELLS = 'moveCells';\n/**\n * Specifies the event name for cellsMoved.\n */\nInternalEvent.CELLS_MOVED = 'cellsMoved';\n/**\n * Specifies the event name for resizeCells.\n */\nInternalEvent.RESIZE_CELLS = 'resizeCells';\n/**\n * Specifies the event name for cellsResized.\n */\nInternalEvent.CELLS_RESIZED = 'cellsResized';\n/**\n * Specifies the event name for toggleCells.\n */\nInternalEvent.TOGGLE_CELLS = 'toggleCells';\n/**\n * Specifies the event name for cellsToggled.\n */\nInternalEvent.CELLS_TOGGLED = 'cellsToggled';\n/**\n * Specifies the event name for orderCells.\n */\nInternalEvent.ORDER_CELLS = 'orderCells';\n/**\n * Specifies the event name for cellsOrdered.\n */\nInternalEvent.CELLS_ORDERED = 'cellsOrdered';\n/**\n * Specifies the event name for removeCells.\n */\nInternalEvent.REMOVE_CELLS = 'removeCells';\n/**\n * Specifies the event name for cellsRemoved.\n */\nInternalEvent.CELLS_REMOVED = 'cellsRemoved';\n/**\n * Specifies the event name for groupCells.\n */\nInternalEvent.GROUP_CELLS = 'groupCells';\n/**\n * Specifies the event name for ungroupCells.\n */\nInternalEvent.UNGROUP_CELLS = 'ungroupCells';\n/**\n * Specifies the event name for removeCellsFromParent.\n */\nInternalEvent.REMOVE_CELLS_FROM_PARENT = 'removeCellsFromParent';\n/**\n * Specifies the event name for foldCells.\n */\nInternalEvent.FOLD_CELLS = 'foldCells';\n/**\n * Specifies the event name for cellsFolded.\n */\nInternalEvent.CELLS_FOLDED = 'cellsFolded';\n/**\n * Specifies the event name for alignCells.\n */\nInternalEvent.ALIGN_CELLS = 'alignCells';\n/**\n * Specifies the event name for labelChanged.\n */\nInternalEvent.LABEL_CHANGED = 'labelChanged';\n/**\n * Specifies the event name for connectCell.\n */\nInternalEvent.CONNECT_CELL = 'connectCell';\n/**\n * Specifies the event name for cellConnected.\n */\nInternalEvent.CELL_CONNECTED = 'cellConnected';\n/**\n * Specifies the event name for splitEdge.\n */\nInternalEvent.SPLIT_EDGE = 'splitEdge';\n/**\n * Specifies the event name for flipEdge.\n */\nInternalEvent.FLIP_EDGE = 'flipEdge';\n/**\n * Specifies the event name for startEditing.\n */\nInternalEvent.START_EDITING = 'startEditing';\n/**\n * Specifies the event name for editingStarted.\n */\nInternalEvent.EDITING_STARTED = 'editingStarted';\n/**\n * Specifies the event name for editingStopped.\n */\nInternalEvent.EDITING_STOPPED = 'editingStopped';\n/**\n * Specifies the event name for addOverlay.\n */\nInternalEvent.ADD_OVERLAY = 'addOverlay';\n/**\n * Specifies the event name for removeOverlay.\n */\nInternalEvent.REMOVE_OVERLAY = 'removeOverlay';\n/**\n * Specifies the event name for updateCellSize.\n */\nInternalEvent.UPDATE_CELL_SIZE = 'updateCellSize';\n/**\n * Specifies the event name for escape.\n */\nInternalEvent.ESCAPE = 'escape';\n/**\n * Specifies the event name for doubleClick.\n */\nInternalEvent.DOUBLE_CLICK = 'doubleClick';\n/**\n * Specifies the event name for start.\n */\nInternalEvent.START = 'start';\n/**\n * Specifies the event name for reset.\n */\nInternalEvent.RESET = 'reset';\n/**\n * Threshold for pinch gestures to fire a mouse wheel event.\n * Default value is 10.\n */\nInternalEvent.PINCH_THRESHOLD = 10;\nexport default InternalEvent;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Implements a 2-dimensional vector with double precision coordinates.\n *\n * @category Geometry\n */\nclass Point {\n    /**\n     * Constructs a new point for the optional x and y coordinates.\n     *\n     * @param x - The x-coordinate (default is 0).\n     * @param y - The y-coordinate (default is 0).\n     */\n    constructor(x = 0, y = 0) {\n        /**\n         * Holds the x-coordinate of the point. Default is 0.\n         */\n        this._x = 0;\n        /**\n         * Holds the y-coordinate of the point. Default is 0.\n         */\n        this._y = 0;\n        this.x = x;\n        this.y = y;\n    }\n    get x() {\n        return this._x;\n    }\n    set x(x) {\n        if (Number.isNaN(x))\n            throw new Error('Invalid x supplied.');\n        this._x = x;\n    }\n    get y() {\n        return this._y;\n    }\n    set y(y) {\n        if (Number.isNaN(y))\n            throw new Error('Invalid y supplied.');\n        this._y = y;\n    }\n    /**\n     * Returns true if the given object equals this point.\n     */\n    equals(p) {\n        if (!p)\n            return false;\n        return p.x === this.x && p.y === this.y;\n    }\n    /**\n     * Returns a clone of this {@link Point}.\n     */\n    clone() {\n        return new Point(this.x, this.y);\n    }\n}\nexport default Point;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from './Point';\n/**\n * Extends {@link Point} to implement a 2-dimensional rectangle with double precision coordinates.\n *\n * @category Geometry\n */\nclass Rectangle extends Point {\n    /**\n     * Constructs a new rectangle for the optional parameters.\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0) {\n        super(x, y);\n        /**\n         * Holds the width of the rectangle.\n         * @default 0\n         */\n        this._width = 0;\n        /**\n         * Holds the height of the rectangle.\n         * @default 0\n         */\n        this._height = 0;\n        this.width = width;\n        this.height = height;\n    }\n    get width() {\n        return this._width;\n    }\n    set width(width) {\n        if (Number.isNaN(width))\n            throw new Error('Invalid width supplied.');\n        this._width = width;\n    }\n    get height() {\n        return this._height;\n    }\n    set height(height) {\n        if (Number.isNaN(height))\n            throw new Error('Invalid height supplied.');\n        this._height = height;\n    }\n    /**\n     * Sets this rectangle to the specified values\n     */\n    setRect(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Returns the x-coordinate of the center point.\n     */\n    getCenterX() {\n        return this.x + this.width / 2;\n    }\n    /**\n     * Returns the y-coordinate of the center point.\n     */\n    getCenterY() {\n        return this.y + this.height / 2;\n    }\n    /**\n     * Adds the given rectangle to this rectangle.\n     */\n    add(rect) {\n        const minX = Math.min(this.x, rect.x);\n        const minY = Math.min(this.y, rect.y);\n        const maxX = Math.max(this.x + this.width, rect.x + rect.width);\n        const maxY = Math.max(this.y + this.height, rect.y + rect.height);\n        this.x = minX;\n        this.y = minY;\n        this.width = maxX - minX;\n        this.height = maxY - minY;\n    }\n    /**\n     * Changes this rectangle to where it overlaps with the given rectangle.\n     */\n    intersect(rect) {\n        const r1 = this.x + this.width;\n        const r2 = rect.x + rect.width;\n        const b1 = this.y + this.height;\n        const b2 = rect.y + rect.height;\n        this.x = Math.max(this.x, rect.x);\n        this.y = Math.max(this.y, rect.y);\n        this.width = Math.min(r1, r2) - this.x;\n        this.height = Math.min(b1, b2) - this.y;\n    }\n    /**\n     * Grows the rectangle by the given amount, that is, this method subtracts\n     * the given amount from the x- and y-coordinates and adds twice the amount\n     * to the width and height.\n     */\n    grow(amount) {\n        this.x -= amount;\n        this.y -= amount;\n        this.width += 2 * amount;\n        this.height += 2 * amount;\n    }\n    /**\n     * Returns the top, left corner as a new {@link Point}.\n     */\n    getPoint() {\n        return new Point(this.x, this.y);\n    }\n    /**\n     * Rotates this rectangle by 90 degree around its center point.\n     */\n    rotate90() {\n        const t = (this.width - this.height) / 2;\n        this.x += t;\n        this.y -= t;\n        const tmp = this.width;\n        this.width = this.height;\n        this.height = tmp;\n    }\n    /**\n     * Returns true if the given object equals this rectangle.\n     */\n    equals(rect) {\n        if (!rect)\n            return false;\n        return (rect.x === this.x &&\n            rect.y === this.y &&\n            rect.width === this.width &&\n            rect.height === this.height);\n    }\n    clone() {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n}\n/**\n * Returns a new {@link Rectangle} which is a copy of the given rectangle.\n */\nRectangle.fromRectangle = (rect) => {\n    return new Rectangle(rect.x, rect.y, rect.width, rect.height);\n};\nexport default Rectangle;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { NODE_TYPE } from './Constants';\nimport { getTextContent } from './domUtils';\n/**\n * Strips all whitespaces from the beginning of the string. Without the\n * second parameter, this will trim these characters:\n *\n * - \" \" (ASCII 32 (0x20)), an ordinary space\n * - \"\\t\" (ASCII 9 (0x09)), a tab\n * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n */\nexport const ltrim = (str, chars = '\\\\s') => str != null ? str.replace(new RegExp(`^[${chars}]+`, 'g'), '') : null;\n/**\n * Strips all whitespaces from the end of the string. Without the second\n * parameter, this will trim these characters:\n *\n * - \" \" (ASCII 32 (0x20)), an ordinary space\n * - \"\\t\" (ASCII 9 (0x09)), a tab\n * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n */\nexport const rtrim = (str, chars = '\\\\s') => str != null ? str.replace(new RegExp(`[${chars}]+$`, 'g'), '') : null;\n/**\n * Strips all whitespaces from both end of the string.\n * Without the second parameter, Javascript function will trim these\n * characters:\n *\n * - \" \" (ASCII 32 (0x20)), an ordinary space\n * - \"\\t\" (ASCII 9 (0x09)), a tab\n * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n */\nexport const trim = (str, chars) => ltrim(rtrim(str, chars), chars);\n/**\n * Returns the name for the given function.\n *\n * @param f JavaScript object that represents a function.\n */\nexport const getFunctionName = (f) => {\n    let str = null;\n    if (f != null) {\n        if (f.name != null) {\n            str = f.name;\n        }\n        else {\n            str = trim(f.toString());\n            if (str !== null && /^function\\s/.test(str)) {\n                str = ltrim(str.substring(9));\n                if (str !== null) {\n                    const idx2 = str.indexOf('(');\n                    if (idx2 > 0) {\n                        str = str.substring(0, idx2);\n                    }\n                }\n            }\n        }\n    }\n    return str;\n};\n/**\n * Replaces each trailing newline with the given pattern.\n */\nexport const replaceTrailingNewlines = (str, pattern) => {\n    // LATER: Check is this can be done with a regular expression\n    let postfix = '';\n    while (str.length > 0 && str.charAt(str.length - 1) == '\\n') {\n        str = str.substring(0, str.length - 1);\n        postfix += pattern;\n    }\n    return str + postfix;\n};\n/**\n * Removes the sibling text nodes for the given node that only consists\n * of tabs, newlines and spaces.\n *\n * @param node DOM node whose siblings should be removed.\n * @param before Optional boolean that specifies the direction of the traversal.\n */\nexport const removeWhitespace = (node, before) => {\n    let tmp = before ? node.previousSibling : node.nextSibling;\n    while (tmp != null && tmp.nodeType === NODE_TYPE.TEXT) {\n        const next = before ? tmp.previousSibling : tmp.nextSibling;\n        const text = getTextContent(tmp);\n        if (trim(text)?.length === 0) {\n            tmp.parentNode?.removeChild(tmp);\n        }\n        tmp = next;\n    }\n};\n/**\n * Replaces characters (less than, greater than, newlines and quotes) with\n * their HTML entities in the given string and returns the result.\n *\n * @param s String that contains the characters to be converted.\n * @param newline If newlines should be replaced. Default is `true`.\n */\nexport const htmlEntities = (s, newline = true) => {\n    s = String(s || '');\n    s = s.replace(/&/g, '&amp;'); // 38 26\n    s = s.replace(/\"/g, '&quot;'); // 34 22\n    s = s.replace(/'/g, '&#39;'); // 39 27\n    s = s.replace(/</g, '&lt;'); // 60 3C\n    s = s.replace(/>/g, '&gt;'); // 62 3E\n    if (newline) {\n        s = s.replace(/\\n/g, '&#xa;');\n    }\n    return s;\n};\n/**\n * Returns a textual representation of the specified object.\n *\n * @param obj Object to return the string representation for.\n */\nexport const toString = (obj) => {\n    let output = '';\n    for (const i in obj) {\n        try {\n            if (obj[i] == null) {\n                output += `${i} = [null]\\n`;\n            }\n            else if (typeof obj[i] === 'function') {\n                output += `${i} => [Function]\\n`;\n            }\n            else if (typeof obj[i] === 'object') {\n                const ctor = getFunctionName(obj[i].constructor);\n                output += `${i} => [${ctor}]\\n`;\n            }\n            else {\n                output += `${i} = ${obj[i]}\\n`;\n            }\n        }\n        catch (e) {\n            output += `${i}=${e.message}`;\n        }\n    }\n    return output;\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { IDENTITY_FIELD_NAME } from './Constants';\nimport { getFunctionName } from './StringUtils';\n/**\n * @class\n *\n * Identity for JavaScript objects and functions. This is implemented using\n * a simple incrementing counter which is stored in each object under\n * {@link FIELD_NAME}.\n *\n * The identity for an object does not change during its lifecycle.\n */\nclass ObjectIdentity {\n    /**\n     * Returns the ID for the given object or function.\n     */\n    static get(obj) {\n        if (obj) {\n            if (obj[IDENTITY_FIELD_NAME] === null || obj[IDENTITY_FIELD_NAME] === undefined) {\n                if (typeof obj === 'object') {\n                    const ctor = getFunctionName(obj.constructor);\n                    obj[IDENTITY_FIELD_NAME] = `${ctor}#${ObjectIdentity.counter++}`;\n                }\n                else if (typeof obj === 'function') {\n                    obj[IDENTITY_FIELD_NAME] = `Function#${ObjectIdentity.counter++}`;\n                }\n            }\n            return obj[IDENTITY_FIELD_NAME];\n        }\n        return null;\n    }\n    /**\n     * Deletes the ID from the given object or function.\n     */\n    static clear(obj) {\n        delete obj[IDENTITY_FIELD_NAME];\n    }\n}\n/**\n * Name of the field to be used to store the object ID.\n * @default {@IDENTITY_FIELD_NAME}\n */\nObjectIdentity.FIELD_NAME = IDENTITY_FIELD_NAME;\n/**\n * Current counter.\n */\nObjectIdentity.counter = 0;\nexport default ObjectIdentity;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectIdentity from './ObjectIdentity';\n/**\n * A wrapper class for an associative array with object keys.\n *\n * Note: This implementation uses {@link ObjectIdentity} to turn object keys into strings.\n *\n */\nclass Dictionary {\n    constructor() {\n        /**\n         * Stores the (key, value) pairs in this dictionary.\n         */\n        this.map = {};\n        this.clear();\n    }\n    /**\n     * Clears the dictionary.\n     */\n    clear() {\n        this.map = {};\n    }\n    /**\n     * Returns the value for the given key.\n     */\n    get(key) {\n        const id = ObjectIdentity.get(key);\n        return this.map[id] ?? null;\n    }\n    /**\n     * Stores the value under the given key and returns the previous\n     * value for that key.\n     */\n    put(key, value) {\n        const id = ObjectIdentity.get(key);\n        const previous = this.map[id];\n        this.map[id] = value;\n        return previous ?? null;\n    }\n    /**\n     * Removes the value for the given key and returns the value that\n     * has been removed.\n     */\n    remove(key) {\n        const id = ObjectIdentity.get(key);\n        const previous = this.map[id];\n        delete this.map[id];\n        return previous ?? null;\n    }\n    /**\n     * Returns all keys as an array.\n     */\n    getKeys() {\n        const result = [];\n        for (const key in this.map) {\n            result.push(key);\n        }\n        return result;\n    }\n    /**\n     * Returns all values as an array.\n     */\n    getValues() {\n        const result = [];\n        for (const key in this.map) {\n            result.push(this.map[key]);\n        }\n        return result;\n    }\n    /**\n     * Visits all entries in the dictionary using the given function with the\n     * following signature: (key, value)=> where key is a string and\n     * value is an object.\n     *\n     * @param visitor A function that takes the key and value as arguments.\n     */\n    visit(visitor) {\n        for (const key in this.map) {\n            visitor(key, this.map[key]);\n        }\n    }\n}\nexport default Dictionary;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Implements a mechanism for temporary cell Ids.\n * @class CellPath\n */\nclass CellPath {\n    constructor() {\n        throw new Error(\"Static class can't be instantiated!\");\n    }\n    /**\n     * Creates the cell path for the given cell. The cell path is a\n     * concatenation of the indices of all ancestors on the (finite) path to\n     * the root, eg. \"0.0.0.1\".\n     *\n     * @param cell Cell whose path should be returned.\n     */\n    static create(cell) {\n        let result = '';\n        let parent = cell.getParent();\n        while (parent) {\n            const index = parent.getIndex(cell);\n            result = index + CellPath.PATH_SEPARATOR + result;\n            cell = parent;\n            parent = cell.getParent();\n        }\n        // Remove trailing separator\n        const n = result.length;\n        if (n > 1) {\n            result = result.substring(0, n - 1);\n        }\n        return result;\n    }\n    /**\n     * Returns the path for the parent of the cell represented by the given\n     * path. Returns null if the given path has no parent.\n     *\n     * @param path Path whose parent path should be returned.\n     */\n    static getParentPath(path) {\n        const index = path.lastIndexOf(CellPath.PATH_SEPARATOR);\n        if (index >= 0) {\n            return path.substring(0, index);\n        }\n        if (path.length > 0) {\n            return '';\n        }\n        return null;\n    }\n    /**\n     * Returns the cell for the specified cell path using the given root as the\n     * root of the path.\n     *\n     * @param root Root cell of the path to be resolved.\n     * @param path String that defines the path.\n     */\n    static resolve(root, path) {\n        let parent = root;\n        const tokens = path.split(CellPath.PATH_SEPARATOR);\n        for (let i = 0; i < tokens.length; i += 1) {\n            parent = parent.getChildAt(parseInt(tokens[i]));\n        }\n        return parent;\n    }\n    /**\n     * Compares the given cell paths and returns -1 if p1 is smaller, 0 if\n     * p1 is equal and 1 if p1 is greater than p2.\n     */\n    static compare(p1, p2) {\n        const min = Math.min(p1.length, p2.length);\n        let comp = 0;\n        for (let i = 0; i < min; i += 1) {\n            if (p1[i] !== p2[i]) {\n                if (p1[i].length === 0 || p2[i].length === 0) {\n                    comp = p1[i] === p2[i] ? 0 : p1[i] > p2[i] ? 1 : -1;\n                }\n                else {\n                    const t1 = parseInt(p1[i]);\n                    const t2 = parseInt(p2[i]);\n                    comp = t1 === t2 ? 0 : t1 > t2 ? 1 : -1;\n                }\n                break;\n            }\n        }\n        // Compares path length if both paths are equal to this point\n        if (comp === 0) {\n            const t1 = p1.length;\n            const t2 = p2.length;\n            if (t1 !== t2) {\n                comp = t1 > t2 ? 1 : -1;\n            }\n        }\n        return comp;\n    }\n}\n/**\n * Defines the separator between the path components. Default is \".\".\n */\nCellPath.PATH_SEPARATOR = '.';\nexport default CellPath;\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * If `baseTimestamp` is provided and not zero, returns a message describing the elapsed milliseconds since this value.\n * Otherwise, returns an empty string.\n * @param baseTimestamp the base timestamp to compute the elapsed milliseconds from\n *\n * @private not part of the public API, can be removed or changed without prior notice\n */\nexport const getElapseMillisecondsMessage = (baseTimestamp) => baseTimestamp ? ` (${new Date().getTime() - baseTimestamp} ms)` : '';\n","/*\nCopyright 2024-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { getElapseMillisecondsMessage } from '../internal/time-utils';\n/**\n * A {@link Logger} that does nothing.\n *\n * @experimental subject to change or removal. The logging system may be modified in the future without prior notice.\n * @since 0.11.0\n * @category Logging\n */\nexport class NoOpLogger {\n    debug(_message) { }\n    enter(_message) {\n        return undefined;\n    }\n    error(_message, ..._optionalParams) { }\n    info(_message) { }\n    leave(_message, _baseTimestamp) { }\n    show() { }\n    trace(_message) { }\n    warn(_message) { }\n}\n/**\n * A {@link Logger} that directs logs to the browser console.\n *\n * @experimental subject to change or removal. The logging system may be modified in the future without prior notice.\n * @since 0.11.0\n * @category Logging\n */\nexport class ConsoleLogger {\n    constructor() {\n        this.debugEnabled = false;\n        this.infoEnabled = false;\n        this.traceEnabled = false;\n    }\n    /* eslint-disable no-console -- we must use \"console\" to direct logs to the browser console */\n    enter(message) {\n        if (this.traceEnabled) {\n            console.trace(`Entering ${message}`);\n            return new Date().getTime();\n        }\n    }\n    leave(message, baseTimestamp) {\n        if (this.traceEnabled) {\n            const dt = getElapseMillisecondsMessage(baseTimestamp);\n            console.trace(`Leaving ${message}${dt}`);\n        }\n    }\n    show() { }\n    trace(message) {\n        if (this.traceEnabled) {\n            console.trace(message);\n        }\n    }\n    debug(message) {\n        if (this.debugEnabled) {\n            console.debug(message);\n        }\n    }\n    info(message) {\n        if (this.infoEnabled) {\n            console.info(message);\n        }\n    }\n    warn(message) {\n        console.warn(message);\n    }\n    error(message, ...optionalParams) {\n        console.error(message, ...optionalParams);\n    }\n}\n/* eslint-enable no-console */\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Shallow copies properties from the source object to the target object.\n *\n * **WARNING**: This function performs only a **shallow** copy i.e. there is no deep copy of the properties that are objects, expect for arrays.\n *\n * @template T The type of the objects.\n *\n * @param source The source object from which properties will be copied.\n * @param target The target object to which properties will be copied.\n *\n * @private not part of the public API, can be removed or changed without prior notice\n * @since 0.14.0\n */\nexport const shallowCopy = (source, target) => {\n    for (const key in source) {\n        // attempt to prevent prototype pollution\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            const sourceValue = source[key];\n            if (Array.isArray(sourceValue)) {\n                // TypeScript cannot infer that the key in target will also be an array when source and target are of the same type\n                target[key] = [...sourceValue];\n            }\n            else {\n                target[key] = sourceValue;\n            }\n        }\n    }\n};\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * A {@link I18nProvider} that does nothing.\n *\n * @experimental subject to change or removal. The I18n system may be modified in the future without prior notice.\n * @since 0.17.0\n * @category I18n\n */\nexport class NoOpI18n {\n    isEnabled() {\n        return false;\n    }\n    get() {\n        return null;\n    }\n    addResource() {\n        // do nothing\n    }\n}\n","/*\nCopyright 2024-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { NoOpLogger } from './logger';\nimport { SHADOW_OFFSET_X, SHADOW_OFFSET_Y, SHADOW_OPACITY, SHADOWCOLOR, } from './Constants';\nimport { shallowCopy } from '../internal/clone-utils';\nimport { NoOpI18n } from '../i18n/provider';\n/**\n * Global configuration for maxGraph.\n *\n * @experimental subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.11.0\n * @category Configuration\n */\nexport const GlobalConfig = {\n    /**\n     * Configure the {@link I18nProvider} to use for all translated messages.\n     *\n     * Available implementations provided by maxGraph are:\n     * * {@link NoOpI18n} - Default implementation that does nothing.\n     * * {@link TranslationsAsI18n} - Uses {@link Translations} to manage translations.\n     *\n     * To change the i18n provider, set this property to an instance of the desired provider:\n     * ```js\n     * // To use the i18n system provided by maxGraph\n     * GlobalConfig.i18n = new TranslationsAsI18n();\n     * ```\n     *\n     * @default {@link NoOpI18n}\n     * @since 0.17.0\n     */\n    i18n: new NoOpI18n(),\n    /**\n     * Configure the logger to use for all log messages.\n     *\n     * Available implementations provided by maxGraph are:\n     * * {@link ConsoleLogger} - Directs logs to the browser console.\n     * * {@link NoOpLogger} - Default implementation that does nothing.\n     * * {@link MaxLogAsLogger} - Directs logs to {@link MaxLog}.\n     *\n     * To change the logger, set this property to an instance of the desired logger:\n     * ```js\n     * // To direct logs to the browser console\n     * GlobalConfig.logger = new ConsoleLogger();\n     * // To direct logs to MaxLog\n     * GlobalConfig.logger = new MaxLogAsLogger();\n     * ```\n     *\n     * @default {@link NoOpLogger}\n     */\n    logger: new NoOpLogger(),\n};\n/**\n * Configure style defaults for maxGraph.\n *\n * @experimental subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.14.0\n * @category Configuration\n */\nexport const StyleDefaultsConfig = {\n    /**\n     * Defines the color to be used to draw shadows in shapes and windows.\n     * @default {@link SHADOWCOLOR}\n     */\n    shadowColor: SHADOWCOLOR,\n    /**\n     * Specifies the x-offset of the shadow.\n     * @default {@link SHADOW_OFFSET_X}\n     */\n    shadowOffsetX: SHADOW_OFFSET_X,\n    /**\n     * Specifies the y-offset of the shadow.\n     * @default {@link SHADOW_OFFSET_Y}\n     */\n    shadowOffsetY: SHADOW_OFFSET_Y,\n    /**\n     * Defines the opacity for shadow. Possible values are between 1 (opaque) and 0 (transparent).\n     * @default {@link SHADOW_OPACITY}\n     */\n    shadowOpacity: SHADOW_OPACITY,\n};\nconst defaultStyleDefaultsConfig = { ...StyleDefaultsConfig };\n/**\n * Resets {@link StyleDefaultsConfig} to default values.\n *\n * @experimental Subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.14.0\n * @category Configuration\n */\nexport const resetStyleDefaultsConfig = () => {\n    shallowCopy(defaultStyleDefaultsConfig, StyleDefaultsConfig);\n};\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { NODE_TYPE } from '../util/Constants';\nimport { GlobalConfig } from '../util/config';\n/**\n * @private\n */\nexport const doEval = (expression) => {\n    // eslint-disable-next-line no-eval -- valid here as we want this function to be the only place in the codebase that uses eval\n    return eval(expression);\n};\n/**\n * Returns true if the parameter is not `nullish` and its nodeType relates to an {@link Element}.\n * @private\n */\nexport const isElement = (node) => node?.nodeType === NODE_TYPE.ELEMENT;\n/**\n * @private not part of the public API, can be removed or changed without prior notice\n */\nexport const isNullish = (v) => v === null || v === undefined;\n/**\n * Merge a mixin into the destination\n * @param dest the destination class\n *\n * @private not part of the public API, can be removed or changed without prior notice\n */\nexport const mixInto = (dest) => (mixin) => {\n    const keys = Reflect.ownKeys(mixin);\n    try {\n        for (const key of keys) {\n            Object.defineProperty(dest.prototype, key, {\n                value: mixin[key],\n                writable: true,\n            });\n        }\n    }\n    catch (e) {\n        GlobalConfig.logger.error('Error while mixing', e);\n    }\n};\n/**\n * @param value the value to check.\n * @param mask the binary mask to apply.\n * @returns `true` if the value matches the binary mask.\n * @private Subject to change prior being part of the public API.\n */\nexport const matchBinaryMask = (value, mask) => {\n    return (value & mask) === mask;\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Client from '../Client';\nimport { DEFAULT_FONTFAMILY, DEFAULT_FONTSIZE, FONT_STYLE_MASK, LINE_HEIGHT, } from './Constants';\nimport Point from '../view/geometry/Point';\nimport Dictionary from './Dictionary';\nimport CellPath from '../view/cell/CellPath';\nimport Rectangle from '../view/geometry/Rectangle';\nimport { matchBinaryMask } from '../internal/utils';\n/**\n * Removes the cursors from the style of the given DOM node and its descendants.\n *\n * @param element DOM node to remove the cursor style from.\n */\nexport const removeCursors = (element) => {\n    if (element.style) {\n        element.style.cursor = '';\n    }\n    const children = element.children;\n    if (children) {\n        const childCount = children.length;\n        for (let i = 0; i < childCount; i += 1) {\n            removeCursors(children[i]);\n        }\n    }\n};\n/**\n * Returns the current style of the specified element.\n *\n * @param element DOM node whose current style should be returned.\n */\nexport const getCurrentStyle = (element) => {\n    return !element || element.toString() === '[object ShadowRoot]'\n        ? null\n        : window.getComputedStyle(element, '');\n};\n/**\n * Parses the given CSS numeric value adding handling for the values thin, medium and thick (2, 4 and 6).\n */\nexport const parseCssNumber = (value) => {\n    if (value === 'thin') {\n        value = '2';\n    }\n    else if (value === 'medium') {\n        value = '4';\n    }\n    else if (value === 'thick') {\n        value = '6';\n    }\n    let n = parseFloat(value);\n    if (Number.isNaN(n)) {\n        n = 0;\n    }\n    return n;\n};\n/**\n * Adds the given style with the standard name and an optional vendor prefix for the current browser.\n *\n * ```javascript\n * styleUtils.setPrefixedStyle(node.style, 'transformOrigin', '0% 0%');\n * ```\n */\nexport const setPrefixedStyle = (style, name, value) => {\n    let prefix = null;\n    if (Client.IS_SF || Client.IS_GC) {\n        prefix = 'Webkit';\n    }\n    else if (Client.IS_MT) {\n        prefix = 'Moz';\n    }\n    style.setProperty(name, value);\n    if (prefix !== null && name.length > 0) {\n        name = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);\n        style.setProperty(name, value);\n    }\n};\n/**\n * Function: hasScrollbars\n *\n * Returns true if the overflow CSS property of the given node is either\n * scroll or auto.\n *\n * @param node DOM node whose style should be checked for scrollbars.\n */\nexport const hasScrollbars = (node) => {\n    const style = getCurrentStyle(node);\n    return !!style && (style.overflow === 'scroll' || style.overflow === 'auto');\n};\n/**\n * Returns the client size for the current document as an {@link Rectangle}.\n */\nexport const getDocumentSize = () => {\n    const b = document.body;\n    const d = document.documentElement;\n    try {\n        return new Rectangle(0, 0, b.clientWidth ?? d.clientWidth, Math.max(b.clientHeight ?? 0, d.clientHeight));\n    }\n    catch (e) {\n        return new Rectangle();\n    }\n};\n/**\n * Makes sure the given node is inside the visible area of the window.\n * This is done by setting the left and top in the style.\n */\nexport const fit = (node) => {\n    const ds = getDocumentSize();\n    const left = node.offsetLeft;\n    const width = node.offsetWidth;\n    const offset = getDocumentScrollOrigin(node.ownerDocument);\n    const sl = offset.x;\n    const st = offset.y;\n    const right = sl + ds.width;\n    if (left + width > right) {\n        node.style.left = `${Math.max(sl, right - width)}px`;\n    }\n    const top = node.offsetTop;\n    const height = node.offsetHeight;\n    const bottom = st + ds.height;\n    if (top + height > bottom) {\n        node.style.top = `${Math.max(st, bottom - height)}px`;\n    }\n};\n/**\n * Returns the offset for the specified container as an {@link Point}.\n * The offset is the distance from the top left corner of the container to the top left corner of the document.\n *\n * @param container DOM node to return the offset for.\n * @param scrollOffset Optional boolean to add the scroll offset of the document. Default is `false`.\n */\nexport const getOffset = (container, scrollOffset = false) => {\n    let offsetLeft = 0;\n    let offsetTop = 0;\n    // Ignores document scroll origin for fixed elements\n    let fixed = false;\n    let node = container;\n    const b = document.body;\n    const d = document.documentElement;\n    while (node != null && node != b && node != d && !fixed) {\n        const style = getCurrentStyle(node);\n        if (style != null) {\n            fixed = fixed || style.position == 'fixed';\n        }\n        node = node.parentNode;\n    }\n    if (!scrollOffset && !fixed) {\n        const offset = getDocumentScrollOrigin(container.ownerDocument);\n        offsetLeft += offset.x;\n        offsetTop += offset.y;\n    }\n    const r = container.getBoundingClientRect();\n    if (r != null) {\n        offsetLeft += r.left;\n        offsetTop += r.top;\n    }\n    return new Point(offsetLeft, offsetTop);\n};\n/**\n * Returns the scroll origin of the given document or the current document if no document is given.\n */\nexport const getDocumentScrollOrigin = (doc) => {\n    // @ts-ignore 'parentWindow' is an unknown property.\n    const wnd = doc.defaultView || doc.parentWindow;\n    const x = wnd != null && window.pageXOffset !== undefined\n        ? window.pageXOffset\n        : (document.documentElement || document.body.parentNode || document.body)\n            .scrollLeft;\n    const y = wnd != null && window.pageYOffset !== undefined\n        ? window.pageYOffset\n        : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n    return new Point(x, y);\n};\n/**\n * Returns the top, left corner of the view rectangle as an {@link Point}.\n *\n * @param node DOM node whose scroll origin should be returned.\n * @param includeAncestors Whether the scroll origin of the ancestors should be included. Default is `false`.\n * @param includeDocument Whether the scroll origin of the document should be included. Default is `true`.\n */\nexport const getScrollOrigin = (node = null, includeAncestors = false, includeDocument = true) => {\n    const doc = node != null ? node.ownerDocument : document;\n    const b = doc.body;\n    const d = doc.documentElement;\n    const result = new Point();\n    let fixed = false;\n    while (node != null && node != b && node != d) {\n        if (!Number.isNaN(node.scrollLeft) && !Number.isNaN(node.scrollTop)) {\n            result.x += node.scrollLeft;\n            result.y += node.scrollTop;\n        }\n        const style = getCurrentStyle(node);\n        if (style != null) {\n            fixed = fixed || style.position == 'fixed';\n        }\n        node = includeAncestors ? node.parentNode : null;\n    }\n    if (!fixed && includeDocument) {\n        const origin = getDocumentScrollOrigin(doc);\n        result.x += origin.x;\n        result.y += origin.y;\n    }\n    return result;\n};\n/**\n * Converts the specified point (x, y) using the offset of the specified container and returns a new {@link Point} with the result.\n *\n * ```javascript\n * const pt = styleUtils.convertPoint(graph.container, eventUtils.getClientX(evt), eventUtils.getClientY(evt));\n * ```\n *\n * @param container DOM node to use for the offset.\n * @param x X-coordinate of the point to be converted.\n * @param y Y-coordinate of the point to be converted.\n */\nexport const convertPoint = (container, x, y) => {\n    const origin = getScrollOrigin(container, false);\n    const offset = getOffset(container);\n    offset.x -= origin.x;\n    offset.y -= origin.y;\n    return new Point(x - offset.x, y - offset.y);\n};\n/**\n * Assigns the value for the given key in the styles of the given cells, or removes the key from the styles if the value is `null`.\n *\n * @param model {@link GraphDataModel} to execute the transaction in.\n * @param cells Array of {@link Cell}s to be updated.\n * @param key Key of the style to be changed.\n * @param value New value for the given key.\n */\nexport const setCellStyles = (model, cells, key, value) => {\n    if (cells.length > 0) {\n        model.batchUpdate(() => {\n            for (let i = 0; i < cells.length; i += 1) {\n                const cell = cells[i];\n                if (cell) {\n                    // Currently, the style object must be cloned, otherwise model.setStyle does not trigger the change event and the cell state in the view is not updated\n                    const style = cell.getClonedStyle();\n                    style[key] = value;\n                    model.setStyle(cell, style);\n                }\n            }\n        });\n    }\n};\n/**\n * Sets or toggles the flag bit for the given key in the cell's styles.\n * If the `value` parameter is not set, then the flag is toggled.\n *\n * Example that toggles the bold font style:\n *\n * ```javascript\n * const cells = graph.getSelectionCells();\n * setCellStyleFlags(graph.model,\n *       cells,\n *       'fontStyle',\n *       constants.FONT_STYLE_FLAG.BOLD);\n * ```\n *\n * @param model {@link GraphDataModel} that contains the cells.\n * @param cells Array of {@link Cell}s to change the style for.\n * @param key Key of the style to be changed.\n * @param flag Integer for the bit to be changed.\n * @param value Optional boolean value for the flag.\n */\nexport const setCellStyleFlags = (model, cells, key, flag, value) => {\n    if (cells.length > 0) {\n        model.batchUpdate(() => {\n            for (let i = 0; i < cells.length; i += 1) {\n                const cell = cells[i];\n                if (cell) {\n                    // Currently, the style object must be cloned, otherwise model.setStyle does not trigger the change event and the cell state in the view is not updated\n                    const style = setStyleFlag(cell.getClonedStyle(), key, flag, value);\n                    model.setStyle(cell, style);\n                }\n            }\n        });\n    }\n};\n/**\n * Sets or toggles the flag bit for the given key in the cell's style.\n * If the `value` parameter is not set, then the flag is toggled.\n *\n * @param style The style of the Cell.\n * @param key Key of the style to be changed.\n * @param flag Integer for the bit to be changed.\n * @param value Optional boolean value for the given flag.\n */\nexport const setStyleFlag = (style, key, flag, value) => {\n    const v = style[key];\n    if (v === undefined) {\n        style[key] = value === undefined || value ? flag : 0;\n    }\n    else {\n        if (value === undefined) {\n            style[key] = v ^ flag;\n        }\n        else if (value) {\n            style[key] = v | flag;\n        }\n        else {\n            style[key] = v & ~flag;\n        }\n    }\n    return style;\n};\n/**\n * Sets the opacity of the specified DOM node to the given value in %.\n *\n * @param node DOM node to set the opacity for.\n * @param value Opacity in %. Possible values are between 0 and 100.\n */\nexport const setOpacity = (node, value) => {\n    node.style.opacity = String(value / 100);\n};\n/**\n * Returns an {@link Rectangle} with the size (width and height in pixels) of the given string.\n * The string may contain HTML markup.\n * Newlines should be converted to `<br>` before calling this method.\n * The caller is responsible for sanitizing the HTML markup.\n *\n * Example:\n *\n * ```javascript\n * const label = graph.getLabel(cell).replace(/\\n/g, \"<br>\");\n * const size = graph.getSizeForString(label);\n * ```\n *\n * @param text String whose size should be returned.\n * @param fontSize Integer that specifies the font size in pixels. Default is {@link DEFAULT_FONTSIZE}.\n * @param fontFamily String that specifies the name of the font family. Default is {@link DEFAULT_FONTFAMILY}.\n * @param textWidth Optional width for text wrapping.\n * @param fontStyle Optional font style, value generally taken from {@link CellStateStyle.fontStyle}.\n */\nexport const getSizeForString = (text, fontSize = DEFAULT_FONTSIZE, fontFamily = DEFAULT_FONTFAMILY, textWidth = null, fontStyle = null) => {\n    const div = document.createElement('div');\n    // Sets the font size and family\n    div.style.fontFamily = fontFamily;\n    div.style.fontSize = `${Math.round(fontSize)}px`;\n    div.style.lineHeight = `${Math.round(fontSize * LINE_HEIGHT)}px`;\n    // Sets the font style\n    if (fontStyle !== null) {\n        matchBinaryMask(fontStyle, FONT_STYLE_MASK.BOLD) && (div.style.fontWeight = 'bold');\n        matchBinaryMask(fontStyle, FONT_STYLE_MASK.ITALIC) &&\n            (div.style.fontStyle = 'italic');\n        const txtDecor = [];\n        matchBinaryMask(fontStyle, FONT_STYLE_MASK.UNDERLINE) && txtDecor.push('underline');\n        matchBinaryMask(fontStyle, FONT_STYLE_MASK.STRIKETHROUGH) &&\n            txtDecor.push('line-through');\n        txtDecor.length > 0 && (div.style.textDecoration = txtDecor.join(' '));\n    }\n    // Disables block layout and outside wrapping and hides the div\n    div.style.position = 'absolute';\n    div.style.visibility = 'hidden';\n    div.style.display = 'inline-block';\n    if (textWidth !== null) {\n        div.style.width = `${textWidth}px`;\n        div.style.whiteSpace = 'normal';\n    }\n    else {\n        div.style.whiteSpace = 'nowrap';\n    }\n    // Adds the text and inserts into DOM for updating of size\n    div.innerHTML = text;\n    document.body.appendChild(div);\n    // Gets the size and removes from DOM\n    const size = new Rectangle(0, 0, div.offsetWidth, div.offsetHeight);\n    document.body.removeChild(div);\n    return size;\n};\n/**\n * Sorts the given cells according to the order in the cell hierarchy.\n * Ascending is optional and defaults to `true`.\n */\nexport const sortCells = (cells, ascending = true) => {\n    const lookup = new Dictionary();\n    cells.sort((o1, o2) => {\n        let p1 = lookup.get(o1);\n        if (p1 == null) {\n            p1 = CellPath.create(o1).split(CellPath.PATH_SEPARATOR);\n            lookup.put(o1, p1);\n        }\n        let p2 = lookup.get(o2);\n        if (p2 == null) {\n            p2 = CellPath.create(o2).split(CellPath.PATH_SEPARATOR);\n            lookup.put(o2, p2);\n        }\n        const comp = CellPath.compare(p1, p2);\n        return comp == 0 ? 0 : comp > 0 == ascending ? 1 : -1;\n    });\n    return cells;\n};\n/**\n * Returns an {@link Point} that represents the horizontal and vertical alignment for numeric computations.\n *\n * X is -0.5 for center, -1 for right and 0 for left alignment.\n * Y is -0.5 for middle, -1 for bottom and 0 for top alignment.\n *\n * Default values for missing arguments is center and middle.\n */\nexport const getAlignmentAsPoint = (align, valign) => {\n    let dx = -0.5;\n    let dy = -0.5;\n    // Horizontal alignment\n    if (align === 'left') {\n        dx = 0;\n    }\n    else if (align === 'right') {\n        dx = -1;\n    }\n    // Vertical alignment\n    if (valign === 'top') {\n        dy = 0;\n    }\n    else if (valign === 'bottom') {\n        dy = -1;\n    }\n    return new Point(dx, dy);\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectIdentity from './ObjectIdentity';\n/**\n * Recursively clones the specified object ignoring all field names in the\n * given array of transient fields. {@link ObjectIdentity#FIELD_NAME} is always\n * ignored by this function.\n *\n * @param obj Object to be cloned.\n * @param transients Optional array of strings representing the fieldname to be\n * ignored.\n * @param shallow Optional boolean argument to specify if a shallow clone should\n * be created, that is, one where all object references are not cloned or,\n * in other words, one where only atomic (strings, numbers) values are\n * cloned. Default is false.\n */\nexport const clone = function _clone(obj, transients = null, shallow = false) {\n    shallow = shallow != null ? shallow : false;\n    let clone = null;\n    if (obj != null && typeof obj.constructor === 'function') {\n        clone = new obj.constructor();\n        for (const i in obj) {\n            if (i != ObjectIdentity.FIELD_NAME &&\n                (transients == null || transients.indexOf(i) < 0)) {\n                if (!shallow && typeof obj[i] === 'object') {\n                    clone[i] = _clone(obj[i]);\n                }\n                else {\n                    clone[i] = obj[i];\n                }\n            }\n        }\n    }\n    return clone;\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { clone } from '../../util/cloneUtils';\nimport Point from '../geometry/Point';\nimport CellPath from './CellPath';\nimport { isElement, isNullish } from '../../internal/utils';\n/**\n * Cells are the elements of the graph model. They represent the state\n * of the groups, vertices and edges in a graph.\n *\n * ### Custom attributes\n * For custom attributes we recommend using an XML node as the value of a cell.\n * The following code can be used to create a cell with an XML node as the value:\n * ```javascript\n * const doc = xmlUtils.createXmlDocument();\n * const node = doc.createElement('MyNode')\n * node.setAttribute('label', 'MyLabel');\n * node.setAttribute('attribute1', 'value1');\n * graph.insertVertex(graph.getDefaultParent(), null, node, 40, 40, 80, 30);\n * ```\n *\n * For the label to work, {@link AbstractGraph.convertValueToString} and\n * {@link AbstractGraph.cellLabelChanged} should be overridden as follows:\n *\n * ```javascript\n * graph.convertValueToString(cell) {\n *   if (domUtils.isNode(cell.value)) {\n *     return cell.getAttribute('label', '')\n *   }\n * };\n *\n * const cellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged(cell, newValue, autoSize) {\n *   if (domUtils.isNode(cell.value)) {\n *     // Clones the value for correct undo/redo\n *     const elt = cell.value.cloneNode(true);\n *     elt.setAttribute('label', newValue);\n *     newValue = elt;\n *   }\n *\n *   cellLabelChanged.apply(this, arguments);\n * };\n * ```\n */\nexport class Cell {\n    constructor(value = null, geometry = null, style = {}) {\n        // TODO: Document me!\n        // used by invalidate() of GraphView\n        this.invalidating = false;\n        this.onInit = null;\n        // used by addCellOverlay() of mxGraph\n        this.overlays = [];\n        /**\n         * Holds the identifier of the Cell.\n         * @default null\n         */\n        this.id = null;\n        /**\n         * Holds the user object.\n         * @default null\n         */\n        this.value = null;\n        /**\n         * Holds the {@link Geometry}.\n         * @default null\n         */\n        this.geometry = null;\n        /**\n         * Holds the style of the Cell.\n         * @default {}\n         */\n        this.style = {};\n        /**\n         * Specifies whether the cell is a vertex.\n         * @default false\n         */\n        this.vertex = false;\n        /**\n         * Specifies whether the cell is an edge.\n         * @default false\n         */\n        this.edge = false;\n        /**\n         * Specifies whether the cell is connectable.\n         * @default true\n         */\n        this.connectable = true;\n        /**\n         * Specifies whether the cell is visible.\n         * @default true\n         */\n        this.visible = true;\n        /**\n         * Specifies whether the cell is collapsed.\n         * @default false\n         */\n        this.collapsed = false;\n        /**\n         * Reference to the parent cell.\n         * @default null\n         */\n        this.parent = null;\n        /**\n         * Reference to the source terminal.\n         * @default null\n         */\n        this.source = null;\n        /**\n         * Reference to the target terminal.\n         * @default null\n         */\n        this.target = null;\n        /**\n         * Holds the child cells.\n         * @default []\n         */\n        this.children = [];\n        /**\n         * Holds the edges.\n         * @default []\n         */\n        this.edges = [];\n        /**\n         * List of members that should not be cloned inside {@link clone}. This field is\n         * passed to {@link utils.clone} and is not made persistent in {@link CellCodec}.\n         * This is not a convention for all classes, it is only used in this class\n         * to mark transient fields since transient modifiers are not supported by\n         * the language.\n         */\n        this.mxTransient = [\n            'id',\n            'value',\n            'parent',\n            'source',\n            'target',\n            'children',\n            'edges',\n        ];\n        this.value = value;\n        this.setGeometry(geometry);\n        this.setStyle(style);\n        if (this.onInit) {\n            this.onInit();\n        }\n    }\n    // TODO: Document me!!!\n    getChildren() {\n        return this.children || [];\n    }\n    /**\n     * Returns the Id of the cell as a string.\n     */\n    getId() {\n        return this.id;\n    }\n    /**\n     * Sets the Id of the cell to the given string.\n     */\n    setId(id) {\n        this.id = id;\n    }\n    /**\n     * Returns the user object of the cell. The user\n     * object is stored in <value>.\n     */\n    getValue() {\n        return this.value;\n    }\n    /**\n     * Sets the user object of the cell. The user object\n     * is stored in <value>.\n     */\n    setValue(value) {\n        this.value = value;\n    }\n    /**\n     * Changes the user object after an in-place edit\n     * and returns the previous value. This implementation\n     * replaces the user object with the given value and\n     * returns the old user object.\n     */\n    valueChanged(newValue) {\n        const previous = this.getValue();\n        this.setValue(newValue);\n        return previous;\n    }\n    /**\n     * Returns the {@link Geometry} that describes the <geometry>.\n     */\n    getGeometry() {\n        return this.geometry;\n    }\n    /**\n     * Sets the {@link Geometry} to be used as the <geometry>.\n     */\n    setGeometry(geometry) {\n        this.geometry = geometry;\n    }\n    /**\n     * Returns a string that describes the {@link style}.\n     *\n     * **IMPORTANT**: if you want to get the style object to later update it and propagate changes to the view, use {@link getClonedStyle} instead.\n     */\n    getStyle() {\n        return this.style;\n    }\n    /**\n     * Use this method to get the style object to later update it and propagate changes to the view.\n     *\n     * See {@link GraphDataModel.setStyle} for more details.\n     */\n    getClonedStyle() {\n        return clone(this.getStyle());\n    }\n    /**\n     * Sets the string to be used as the {@link style}.\n     */\n    setStyle(style) {\n        this.style = style;\n    }\n    /**\n     * Returns true if the cell is a vertex.\n     */\n    isVertex() {\n        return this.vertex;\n    }\n    /**\n     * Specifies if the cell is a vertex. This should only be assigned at\n     * construction of the cell and not be changed during its lifecycle.\n     *\n     * @param vertex Boolean that specifies if the cell is a vertex.\n     */\n    setVertex(vertex) {\n        this.vertex = vertex;\n    }\n    /**\n     * Returns true if the cell is an edge.\n     */\n    isEdge() {\n        return this.edge;\n    }\n    /**\n     * Specifies if the cell is an edge. This should only be assigned at\n     * construction of the cell and not be changed during its lifecycle.\n     *\n     * @param edge Boolean that specifies if the cell is an edge.\n     */\n    setEdge(edge) {\n        this.edge = edge;\n    }\n    /**\n     * Returns true if the cell is connectable.\n     */\n    isConnectable() {\n        return this.connectable;\n    }\n    /**\n     * Sets the connectable state.\n     *\n     * @param connectable Boolean that specifies the new connectable state.\n     */\n    setConnectable(connectable) {\n        this.connectable = connectable;\n    }\n    /**\n     * Returns true if the cell is visibile.\n     */\n    isVisible() {\n        return this.visible;\n    }\n    /**\n     * Specifies if the cell is visible.\n     *\n     * @param visible Boolean that specifies the new visible state.\n     */\n    setVisible(visible) {\n        this.visible = visible;\n    }\n    /**\n     * Returns true if the cell is collapsed.\n     */\n    isCollapsed() {\n        return this.collapsed;\n    }\n    /**\n     * Sets the collapsed state.\n     *\n     * @param collapsed Boolean that specifies the new collapsed state.\n     */\n    setCollapsed(collapsed) {\n        this.collapsed = collapsed;\n    }\n    /**\n     * Returns the cell's parent.\n     */\n    getParent() {\n        return this.parent;\n    }\n    /**\n     * Sets the parent cell.\n     *\n     * @param parent<Cell> that represents the new parent.\n     */\n    setParent(parent) {\n        this.parent = parent;\n    }\n    /**\n     * Returns the source or target terminal.\n     *\n     * @param source Boolean that specifies if the source terminal should be\n     * returned.\n     */\n    getTerminal(source = false) {\n        return source ? this.source : this.target;\n    }\n    /**\n     * Sets the source or target terminal and returns the new terminal.\n     *\n     * @param terminal  Cell that represents the new source or target terminal.\n     * @param isSource  boolean that specifies if the source or target terminal should be set.\n     */\n    setTerminal(terminal, isSource) {\n        if (isSource) {\n            this.source = terminal;\n        }\n        else {\n            this.target = terminal;\n        }\n        return terminal;\n    }\n    /**\n     * Returns the number of child cells.\n     */\n    getChildCount() {\n        return this.children.length;\n    }\n    /**\n     * Returns the index of the specified child in the child array.\n     *\n     * @param child Child whose index should be returned.\n     */\n    getIndex(child) {\n        if (child === null)\n            return -1;\n        return this.children.indexOf(child);\n    }\n    /**\n     * Returns the child at the specified index.\n     *\n     * @param indexInteger that specifies the child to be returned.\n     */\n    getChildAt(index) {\n        return this.children[index];\n    }\n    /**\n     * Inserts the specified child into the child array at the specified index\n     * and updates the parent reference of the child. If not childIndex is\n     * specified then the child is appended to the child array. Returns the\n     * inserted child.\n     *\n     * @param child<Cell> to be inserted or appended to the child array.\n     * @param indexOptional integer that specifies the index at which the child\n     * should be inserted into the child array.\n     */\n    insert(child, index) {\n        if (index === undefined) {\n            index = this.getChildCount();\n            if (child.getParent() === this) {\n                index--;\n            }\n        }\n        child.removeFromParent();\n        child.setParent(this);\n        this.children.splice(index, 0, child);\n        return child;\n    }\n    /**\n     * Removes the child at the specified index from the child array and\n     * returns the child that was removed. Will remove the parent reference of\n     * the child.\n     *\n     * @param indexInteger that specifies the index of the child to be\n     * removed.\n     */\n    remove(index) {\n        let child = null;\n        if (index >= 0) {\n            child = this.getChildAt(index);\n            if (child) {\n                this.children.splice(index, 1);\n                child.setParent(null);\n            }\n        }\n        return child;\n    }\n    /**\n     * Removes the cell from its parent.\n     */\n    removeFromParent() {\n        if (this.parent) {\n            const index = this.parent.getIndex(this);\n            this.parent.remove(index);\n        }\n    }\n    /**\n     * Returns the number of edges in the edge array.\n     */\n    getEdgeCount() {\n        return this.edges.length;\n    }\n    /**\n     * Returns the index of the specified edge in <edges>.\n     *\n     * @param edge<Cell> whose index in <edges> should be returned.\n     */\n    getEdgeIndex(edge) {\n        return this.edges.indexOf(edge);\n    }\n    /**\n     * Returns the edge at the specified index in <edges>.\n     *\n     * @param indexInteger that specifies the index of the edge to be returned.\n     */\n    getEdgeAt(index) {\n        return this.edges[index];\n    }\n    /**\n     * Inserts the specified edge into the edge array and returns the edge.\n     * Will update the respective terminal reference of the edge.\n     *\n     * @param edge              <Cell> to be inserted into the edge array.\n     * @param isOutgoing Boolean that specifies if the edge is outgoing.\n     */\n    insertEdge(edge, isOutgoing = false) {\n        edge.removeFromTerminal(isOutgoing);\n        edge.setTerminal(this, isOutgoing);\n        if (this.edges.length === 0 ||\n            edge.getTerminal(!isOutgoing) !== this ||\n            this.edges.indexOf(edge) < 0) {\n            this.edges.push(edge);\n        }\n        return edge;\n    }\n    /**\n     * Removes the specified edge from the edge array and returns the edge.\n     * Will remove the respective terminal reference from the edge.\n     *\n     * @param edge<Cell> to be removed from the edge array.\n     * @param isOutgoing Boolean that specifies if the edge is outgoing.\n     */\n    removeEdge(edge, isOutgoing = false) {\n        if (edge != null) {\n            if (edge.getTerminal(!isOutgoing) !== this && this.edges != null) {\n                const index = this.getEdgeIndex(edge);\n                if (index >= 0) {\n                    this.edges.splice(index, 1);\n                }\n            }\n            edge.setTerminal(null, isOutgoing);\n        }\n        return edge;\n    }\n    /**\n     * Removes the edge from its source or target terminal.\n     *\n     * @param isSource Boolean that specifies if the edge should be removed from its source or target terminal.\n     */\n    removeFromTerminal(isSource) {\n        const terminal = this.getTerminal(isSource);\n        if (terminal) {\n            terminal.removeEdge(this, isSource);\n        }\n    }\n    /**\n     * Returns true if the user object is an XML node that contains the given attribute.\n     *\n     * @param name Name nameName of the attribute.\n     */\n    hasAttribute(name) {\n        const userObject = this.getValue();\n        return isElement(userObject) && userObject.hasAttribute\n            ? userObject.hasAttribute(name)\n            : !isNullish(userObject.getAttribute?.(name));\n    }\n    /**\n     * Returns the specified attribute from the user object if it is an XML node.\n     *\n     * @param name Name of the attribute whose value should be returned.\n     * @param defaultValue Optional default value to use if the attribute has no\n     * value.\n     */\n    getAttribute(name, defaultValue) {\n        const userObject = this.getValue();\n        const val = isElement(userObject) ? userObject.getAttribute?.(name) : null;\n        return val ?? defaultValue;\n    }\n    /**\n     * Sets the specified attribute on the user object if it is an XML node.\n     *\n     * @param name Name of the attribute whose value should be set.\n     * @param value New value of the attribute.\n     */\n    setAttribute(name, value) {\n        const userObject = this.getValue();\n        if (isElement(userObject)) {\n            userObject.setAttribute?.(name, value);\n        }\n    }\n    /**\n     * Returns a clone of the cell.\n     *\n     * Uses {@link cloneValue} to clone the user object.\n     *\n     * All fields in {@link mxTransient} are ignored during the cloning.\n     */\n    clone() {\n        const c = clone(this, this.mxTransient);\n        c.setValue(this.cloneValue());\n        return c;\n    }\n    /**\n     * Returns a clone of the cell's user object.\n     */\n    cloneValue() {\n        let value = this.getValue();\n        if (!isNullish(value)) {\n            if (typeof value.clone === 'function') {\n                value = value.clone();\n            }\n            else if (!isNullish(value.nodeType) && value.cloneNode) {\n                value = value.cloneNode(true);\n            }\n        }\n        return value;\n    }\n    /**\n     * Returns the nearest common ancestor for the specified cells to `this`.\n     *\n     * @param {Cell} cell2  that specifies the second cell in the tree.\n     */\n    getNearestCommonAncestor(cell2) {\n        // Creates the cell path for the second cell\n        let path = CellPath.create(cell2);\n        if (path.length > 0) {\n            // Bubbles through the ancestors of the first cell to find the nearest common ancestor.\n            // eslint-disable-next-line @typescript-eslint/no-this-alias -- we need to use `this` to refer to the instance to start processing\n            let cell = this;\n            let current = CellPath.create(cell);\n            // Inverts arguments\n            if (path.length < current.length) {\n                cell = cell2;\n                const tmp = current;\n                current = path;\n                path = tmp;\n            }\n            while (cell && current) {\n                const parent = cell.getParent();\n                // Checks if the cell path is equal to the beginning of the given cell path\n                if (path.indexOf(current + CellPath.PATH_SEPARATOR) === 0 && parent) {\n                    return cell;\n                }\n                current = CellPath.getParentPath(current);\n                cell = parent;\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns true if the given parent is an ancestor of the given child. Note\n     * returns true if child == parent.\n     *\n     * @param {Cell} child  that specifies the child.\n     */\n    isAncestor(child) {\n        while (child && child !== this) {\n            child = child.getParent();\n        }\n        return child === this;\n    }\n    /**\n     * Returns the child vertices of the given parent.\n     */\n    getChildVertices() {\n        return this.getChildCells(true, false);\n    }\n    /**\n     * Returns the child edges of the given parent.\n     */\n    getChildEdges() {\n        return this.getChildCells(false, true);\n    }\n    /**\n     * Returns the children of the given cell that are vertices and/or edges\n     * depending on the arguments.\n     *\n     * @param vertices  Boolean indicating if child vertices should be returned.\n     * Default is false.\n     * @param edges  Boolean indicating if child edges should be returned.\n     * Default is false.\n     */\n    getChildCells(vertices = false, edges = false) {\n        const childCount = this.getChildCount();\n        const result = [];\n        for (let i = 0; i < childCount; i += 1) {\n            const child = this.getChildAt(i);\n            if ((!edges && !vertices) ||\n                (edges && child.isEdge()) ||\n                (vertices && child.isVertex())) {\n                result.push(child);\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns the number of incoming or outgoing edges, ignoring the given\n     * edge.\n     *\n     * @param outgoing  Boolean that specifies if the number of outgoing or\n     * incoming edges should be returned.\n     * @param {Cell} ignoredEdge  that represents an edge to be ignored.\n     */\n    getDirectedEdgeCount(outgoing, ignoredEdge = null) {\n        let count = 0;\n        const edgeCount = this.getEdgeCount();\n        for (let i = 0; i < edgeCount; i += 1) {\n            const edge = this.getEdgeAt(i);\n            if (edge !== ignoredEdge && edge && edge.getTerminal(outgoing) === this) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n    /**\n     * Returns all edges of the given cell without loops.\n     */\n    getConnections() {\n        return this.getEdges(true, true, false);\n    }\n    /**\n     * Returns the incoming edges of the given cell without loops.\n     */\n    getIncomingEdges() {\n        return this.getEdges(true, false, false);\n    }\n    /**\n     * Returns the outgoing edges of the given cell without loops.\n     */\n    getOutgoingEdges() {\n        return this.getEdges(false, true, false);\n    }\n    /**\n     * Returns all distinct edges connected to this cell as a new array of\n     * {@link Cell}. If at least one of incoming or outgoing is true, then loops\n     * are ignored, otherwise if both are false, then all edges connected to\n     * the given cell are returned including loops.\n     *\n     * @param incoming  Optional boolean that specifies if incoming edges should be\n     * returned. Default is true.\n     * @param outgoing  Optional boolean that specifies if outgoing edges should be\n     * returned. Default is true.\n     * @param includeLoops  Optional boolean that specifies if loops should be returned.\n     * Default is true.\n     */\n    getEdges(incoming = true, outgoing = true, includeLoops = true) {\n        const edgeCount = this.getEdgeCount();\n        const result = [];\n        for (let i = 0; i < edgeCount; i += 1) {\n            const edge = this.getEdgeAt(i);\n            const source = edge.getTerminal(true);\n            const target = edge.getTerminal(false);\n            if ((includeLoops && source === target) ||\n                (source !== target &&\n                    ((incoming && target === this) || (outgoing && source === this)))) {\n                result.push(edge);\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns the absolute, accumulated origin for the children inside the\n     * given parent as an {@link Point}.\n     */\n    getOrigin() {\n        let result = new Point();\n        const parent = this.getParent();\n        if (parent) {\n            result = parent.getOrigin();\n            if (!this.isEdge()) {\n                const geo = this.getGeometry();\n                if (geo) {\n                    result.x += geo.x;\n                    result.y += geo.y;\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns all descendants of the given cell and the cell itself in an array.\n     */\n    getDescendants() {\n        return this.filterDescendants(null);\n    }\n    /**\n     * Visits all cells recursively and applies the specified filter function\n     * to each cell. If the function returns true then the cell is added\n     * to the resulting array. The parent and result paramters are optional.\n     * If parent is not specified then the recursion starts at {@link root}.\n     *\n     * Example:\n     * The following example extracts all vertices from a given model:\n     * ```javascript\n     * var filter(cell)\n     * {\n     * \treturn model.isVertex(cell);\n     * }\n     * var vertices = model.filterDescendants(filter);\n     * ```\n     *\n     * @param filter  JavaScript function that takes an {@link Cell} as an argument\n     * and returns a boolean.\n     */\n    filterDescendants(filter) {\n        // Creates a new array for storing the result\n        let result = [];\n        // Checks if the filter returns true for the cell\n        // and adds it to the result array\n        if (filter === null || filter(this)) {\n            result.push(this);\n        }\n        // Visits the children of the cell\n        const childCount = this.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            const child = this.getChildAt(i);\n            result = result.concat(child.filterDescendants(filter));\n        }\n        return result;\n    }\n    /**\n     * Returns the root of the model or the topmost parent of the given cell.\n     */\n    getRoot() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias -- we need to use `this` to refer to the instance to start processing\n        let cell = this;\n        let root = cell;\n        while (cell) {\n            root = cell;\n            cell = cell.getParent();\n        }\n        return root;\n    }\n}\nexport default Cell;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Action to add or remove a child in a model.\n *\n * @category Change\n */\nexport class ChildChange {\n    constructor(model, parent, child, index = 0) {\n        this.model = model;\n        this.parent = parent;\n        this.previous = parent;\n        this.child = child;\n        this.index = index;\n        this.previousIndex = index;\n    }\n    /**\n     * Changes the parent of {@link child} using {@link GraphDataModel.parentForCellChanged} and removes or restores the cell's connections.\n     */\n    execute() {\n        let tmp = this.child.getParent();\n        const tmp2 = tmp ? tmp.getIndex(this.child) : 0;\n        if (!this.previous) {\n            this.connect(this.child, false);\n        }\n        tmp = this.model.parentForCellChanged(this.child, this.previous, this.previousIndex);\n        if (this.previous) {\n            this.connect(this.child, true);\n        }\n        this.parent = this.previous;\n        this.previous = tmp;\n        this.index = this.previousIndex;\n        this.previousIndex = tmp2;\n    }\n    /**\n     * Disconnects the given cell recursively from its\n     * terminals and stores the previous terminal in the\n     * cell's terminals.\n     *\n     * @warning doc from mxGraph source code is incorrect\n     */\n    connect(cell, isConnect = true) {\n        const source = cell.getTerminal(true);\n        const target = cell.getTerminal(false);\n        if (source) {\n            if (isConnect) {\n                this.model.terminalForCellChanged(cell, source, true);\n            }\n            else {\n                this.model.terminalForCellChanged(cell, null, true);\n            }\n        }\n        if (target) {\n            if (isConnect) {\n                this.model.terminalForCellChanged(cell, target, false);\n            }\n            else {\n                this.model.terminalForCellChanged(cell, null, false);\n            }\n        }\n        cell.setTerminal(source, true);\n        cell.setTerminal(target, false);\n        const childCount = cell.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            this.connect(cell.getChildAt(i), isConnect);\n        }\n    }\n}\nexport default ChildChange;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Action to change a cell's geometry in a model.\n *\n * @category Change\n */\nclass GeometryChange {\n    constructor(model, cell, geometry) {\n        this.model = model;\n        this.cell = cell;\n        this.geometry = geometry;\n        this.previous = geometry;\n    }\n    /**\n     * Changes the geometry of {@link cell} to {@link previous} using{@link GraphDataModel.geometryForCellChanged}.\n     */\n    execute() {\n        this.geometry = this.previous;\n        this.previous = this.model.geometryForCellChanged(this.cell, this.previous);\n    }\n}\nexport default GeometryChange;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Action to change the root in a model.\n *\n * @category Change\n */\nexport class RootChange {\n    constructor(model, root) {\n        this.model = model;\n        this.root = root;\n        this.previous = root;\n    }\n    /**\n     * Carries out a change of the root using {@link GraphDataModel.rootChanged}.\n     */\n    execute() {\n        this.root = this.previous;\n        this.previous = this.model.rootChanged(this.previous);\n    }\n}\nexport default RootChange;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Action to change a cell's style in a model.\n *\n * @category Change\n */\nclass StyleChange {\n    constructor(model, cell, style) {\n        this.model = model;\n        this.cell = cell;\n        this.style = style;\n        this.previous = style;\n    }\n    /**\n     * Changes the style of {@link cell} to {@link previous} using {@link GraphDataModel.styleForCellChanged}.\n     */\n    execute() {\n        this.style = this.previous;\n        this.previous = this.model.styleForCellChanged(this.cell, this.previous);\n    }\n}\nexport default StyleChange;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Action to change a terminal in a model.\n *\n * @category Change\n */\nexport class TerminalChange {\n    constructor(model, cell, terminal, source) {\n        this.model = model;\n        this.cell = cell;\n        this.terminal = terminal;\n        this.previous = terminal;\n        this.source = source;\n    }\n    /**\n     * Changes the terminal of {@link cell} to {@link previous} using {@link GraphDataModel.terminalForCellChanged}.\n     */\n    execute() {\n        this.terminal = this.previous;\n        this.previous = this.model.terminalForCellChanged(this.cell, this.previous, this.source);\n    }\n}\nexport default TerminalChange;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Action to change a user object in a model.\n *\n * @category Change\n */\nclass ValueChange {\n    constructor(model, cell, value) {\n        this.model = model;\n        this.cell = cell;\n        this.value = value;\n        this.previous = value;\n    }\n    /**\n     * Changes the value of {@link cell} to {@link previous} using {@link GraphDataModel.valueForCellChanged}.\n     */\n    execute() {\n        this.value = this.previous;\n        this.previous = this.model.valueForCellChanged(this.cell, this.previous);\n    }\n}\nexport default ValueChange;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport Rectangle from '../geometry/Rectangle';\nimport Dictionary from '../../util/Dictionary';\nimport { NONE } from '../../util/Constants';\n/**\n * Represents the current state of a cell in a given {@link GraphView}.\n *\n * For edges, the edge label position is stored in {@link absoluteOffset}.\n *\n * The size for oversize labels can be retrieved using the `boundingBox` property of the {@link text} field as shown below.\n *\n * ```javascript\n * const bbox = state.text?.boundingBox ?? null;\n * ```\n */\nclass CellState extends Rectangle {\n    /**\n     * Constructs a new object that represents the current state of the given Cell in the specified view.\n     *\n     * @param view {@link GraphView} that contains the state.\n     * @param cell {@link Cell} that this state represents.\n     * @param style the style of the Cell.\n     */\n    constructor(view = null, cell = null, style = null) {\n        super();\n        // referenced in CellRenderer\n        this.node = null;\n        // TODO: Document me!!\n        this.cellBounds = null;\n        this.paintBounds = null;\n        this.boundingBox = null;\n        // Used by CellRenderer.createControl\n        this.control = null;\n        // Used by CellRenderer.createCellOverlays\n        this.overlays = new Dictionary();\n        /**\n         * Specifies if the style is invalid.\n         * @default false\n         */\n        this.invalidStyle = false;\n        /**\n         * Specifies if the state is invalid.\n         * @default true\n         */\n        this.invalid = true;\n        /**\n         * Holds an array of <Point> that represent the absolute points of an edge.\n         */\n        this.absolutePoints = [];\n        /**\n         * Caches the visible source terminal state.\n         */\n        this.visibleSourceState = null;\n        /**\n         * Caches the visible target terminal state.\n         */\n        this.visibleTargetState = null;\n        /**\n         * Caches the distance between the end points for an edge.\n         */\n        this.terminalDistance = 0;\n        /**\n         * Caches the length of an edge.\n         */\n        this.length = 0;\n        /**\n         * Array of numbers that represent the cached length of each segment of the edge.\n         */\n        this.segments = [];\n        /**\n         * Holds the {@link Shape} that represents the cell graphically.\n         */\n        this.shape = null;\n        /**\n         * Holds the {@link Text} that represents the label of the cell.\n         * This may be `null` if the cell has no label.\n         */\n        this.text = null;\n        /**\n         * Holds the unscaled width of the state.\n         */\n        this.unscaledWidth = 0;\n        /**\n         * Holds the unscaled height of the state.\n         */\n        this.unscaledHeight = 0;\n        this.parentHighlight = null;\n        this.point = null;\n        if (view) {\n            this.view = view;\n        }\n        if (cell) {\n            this.cell = cell;\n        }\n        this.style = style ?? {};\n        this.origin = new Point();\n        this.absoluteOffset = new Point();\n    }\n    /**\n     * Returns the {@link Rectangle} that should be used as the perimeter of the cell.\n     *\n     * @param border Optional border to be added around the perimeter bounds.\n     * @param bounds Optional {@link Rectangle} to be used as the initial bounds.\n     */\n    getPerimeterBounds(border = 0, bounds = new Rectangle(this.x, this.y, this.width, this.height)) {\n        if (this.shape?.stencil?.aspect === 'fixed') {\n            const aspect = this.shape.stencil.computeAspect(this.shape, bounds.x, bounds.y, bounds.width, bounds.height);\n            bounds.x = aspect.x;\n            bounds.y = aspect.y;\n            bounds.width = this.shape.stencil.w0 * aspect.width;\n            bounds.height = this.shape.stencil.h0 * aspect.height;\n        }\n        if (border !== 0) {\n            bounds.grow(border);\n        }\n        return bounds;\n    }\n    /**\n     * Sets the first or last point in <absolutePoints> depending on isSource.\n     *\n     * @param point {@link Point} that represents the terminal point.\n     * @param isSource Boolean that specifies if the first or last point should be assigned.\n     */\n    setAbsoluteTerminalPoint(point, isSource = false) {\n        if (isSource) {\n            if (this.absolutePoints.length === 0) {\n                this.absolutePoints.push(point);\n            }\n            else {\n                this.absolutePoints[0] = point;\n            }\n        }\n        else if (this.absolutePoints.length === 0) {\n            this.absolutePoints.push(null);\n            this.absolutePoints.push(point);\n        }\n        else if (this.absolutePoints.length === 1) {\n            this.absolutePoints.push(point);\n        }\n        else {\n            this.absolutePoints[this.absolutePoints.length - 1] = point;\n        }\n    }\n    /**\n     * Sets the given cursor on the shape and text shape.\n     */\n    setCursor(cursor) {\n        if (this.shape) {\n            this.shape.setCursor(cursor);\n        }\n        if (this.text) {\n            this.text.setCursor(cursor);\n        }\n    }\n    /**\n     * Returns the visible source or target terminal cell.\n     *\n     * @param source Boolean that specifies if the source or target cell should be returned.\n     */\n    getVisibleTerminal(source = false) {\n        return this.getVisibleTerminalState(source)?.cell ?? null;\n    }\n    /**\n     * Returns the visible source or target terminal state.\n     *\n     * @param source Boolean that specifies if the source or target state should be returned.\n     */\n    getVisibleTerminalState(source = false) {\n        return source ? this.visibleSourceState : this.visibleTargetState;\n    }\n    /**\n     * Sets the visible source or target terminal state.\n     *\n     * @param terminalState {@link CellState} that represents the terminal.\n     * @param source Boolean that specifies if the source or target state should be set.\n     */\n    setVisibleTerminalState(terminalState, source = false) {\n        if (source) {\n            this.visibleSourceState = terminalState;\n        }\n        else {\n            this.visibleTargetState = terminalState;\n        }\n    }\n    /**\n     * Returns the unscaled, untranslated bounds.\n     */\n    getCellBounds() {\n        return this.cellBounds;\n    }\n    /**\n     * Returns the unscaled, untranslated paint bounds.\n     *\n     * This is the same as {@link getCellBounds} but with a 90-degrees rotation if the  {@link Shape.isPaintBoundsInverted} returns `true`.\n     */\n    getPaintBounds() {\n        return this.paintBounds;\n    }\n    /**\n     * Updates the {@link cellBounds} and {@link paintBounds}.\n     */\n    updateCachedBounds() {\n        const view = this.view;\n        const tr = view.translate;\n        const s = view.scale;\n        this.cellBounds = new Rectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n        this.paintBounds = Rectangle.fromRectangle(this.cellBounds);\n        if (this.shape && this.shape.isPaintBoundsInverted()) {\n            this.paintBounds.rotate90();\n        }\n    }\n    /**\n     * Copies all fields from the given state to this state.\n     */\n    setState(state) {\n        this.view = state.view;\n        this.cell = state.cell;\n        this.style = state.style;\n        this.absolutePoints = state.absolutePoints;\n        this.origin = state.origin;\n        this.absoluteOffset = state.absoluteOffset;\n        this.boundingBox = state.boundingBox;\n        this.terminalDistance = state.terminalDistance;\n        this.segments = state.segments;\n        this.length = state.length;\n        this.x = state.x;\n        this.y = state.y;\n        this.width = state.width;\n        this.height = state.height;\n        this.unscaledWidth = state.unscaledWidth;\n        this.unscaledHeight = state.unscaledHeight;\n    }\n    /**\n     * Returns a clone of this {@link Point}.\n     */\n    clone() {\n        const clone = new CellState(this.view, this.cell, this.style);\n        // Clones the absolute points\n        for (let i = 0; i < this.absolutePoints.length; i += 1) {\n            const p = this.absolutePoints[i];\n            clone.absolutePoints[i] = p ? p.clone() : null;\n        }\n        if (this.origin) {\n            clone.origin = this.origin.clone();\n        }\n        if (this.absoluteOffset) {\n            clone.absoluteOffset = this.absoluteOffset.clone();\n        }\n        if (this.boundingBox) {\n            clone.boundingBox = this.boundingBox.clone();\n        }\n        clone.terminalDistance = this.terminalDistance;\n        clone.segments = this.segments;\n        clone.length = this.length;\n        clone.x = this.x;\n        clone.y = this.y;\n        clone.width = this.width;\n        clone.height = this.height;\n        clone.unscaledWidth = this.unscaledWidth;\n        clone.unscaledHeight = this.unscaledHeight;\n        return clone;\n    }\n    /**\n     * Destroys the state and all associated resources.\n     */\n    destroy() {\n        this.view.graph.cellRenderer.destroy(this);\n    }\n    /**\n     * Returns `true` if the given cell state is a loop.\n     *\n     * @param state {@link CellState} that represents a potential loop.\n     */\n    isLoop(state) {\n        const src = this.getVisibleTerminalState(true);\n        return src && src === this.getVisibleTerminalState(false);\n    }\n    /*****************************************************************************\n     * Group: Graph appearance\n     *****************************************************************************/\n    /**\n     * Returns the vertical alignment for the given cell state.\n     * This implementation returns the value stored in the {@link CellStateStyle.verticalAlign}\n     * property of {@link style}.\n     */\n    getVerticalAlign() {\n        return this.style.verticalAlign ?? 'middle';\n    }\n    /**\n     * Returns `true` if the given state has no stroke, no fill color and no image.\n     */\n    isTransparentState() {\n        return ((this.style.strokeColor ?? NONE) === NONE &&\n            (this.style.fillColor ?? NONE) === NONE &&\n            !this.getImageSrc());\n    }\n    /**\n     * Returns the image URL for the given cell state.\n     * This implementation returns the value stored in the {@link CellStateStyle.image} property\n     * of {@link style}.\n     */\n    getImageSrc() {\n        return this.style.image || null;\n    }\n    /**\n     * Returns the indicator color for the given cell state.\n     * This implementation returns the value stored in the {@link CellStateStyle.indicatorColor}\n     * property of {@link style}.\n     */\n    getIndicatorColor() {\n        return this.style.indicatorColor || null;\n    }\n    /**\n     * Returns the indicator gradient color for the given cell state.\n     * This implementation returns the value stored in the {@link CellStateStyle.gradientColor}\n     * property of {@link style}.\n     */\n    getIndicatorGradientColor() {\n        return this.style.gradientColor || null;\n    }\n    /**\n     * Returns the indicator shape for the given cell state.\n     * This implementation returns the value stored in the {@link CellStateStyle.indicatorShape}\n     * property of {@link style}.\n     */\n    getIndicatorShape() {\n        return this.style.indicatorShape || null;\n    }\n    /**\n     * Returns the indicator image for the given cell state.\n     * This implementation returns the value stored in the {@link CellStateStyle.indicatorImage}\n     * property of {@link style}.\n     */\n    getIndicatorImageSrc() {\n        return this.style.indicatorImage || null;\n    }\n}\nexport default CellState;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { DIRECTION_MASK } from './Constants';\nimport Point from '../view/geometry/Point';\nimport Rectangle from '../view/geometry/Rectangle';\nimport { isNullish } from '../internal/utils';\n/**\n * Converts the given degree to radians.\n */\nexport const toRadians = (deg) => {\n    return (Math.PI * deg) / 180;\n};\n/**\n * Converts the given radians to degree.\n */\nexport const toDegree = (rad) => {\n    return (rad * 180) / Math.PI;\n};\n/**\n * Converts the given arc to a series of curves.\n */\nexport const arcToCurves = (x0, y0, r1, r2, angle, largeArcFlag, sweepFlag, x, y) => {\n    x -= x0;\n    y -= y0;\n    if (r1 === 0 || r2 === 0) {\n        return [];\n    }\n    const fS = sweepFlag;\n    const psai = angle;\n    r1 = Math.abs(r1);\n    r2 = Math.abs(r2);\n    const ctx = -x / 2;\n    const cty = -y / 2;\n    const cpsi = Math.cos((psai * Math.PI) / 180);\n    const spsi = Math.sin((psai * Math.PI) / 180);\n    const rxd = cpsi * ctx + spsi * cty;\n    const ryd = -1 * spsi * ctx + cpsi * cty;\n    const rxdd = rxd * rxd;\n    const rydd = ryd * ryd;\n    const r1x = r1 * r1;\n    const r2y = r2 * r2;\n    const lamda = rxdd / r1x + rydd / r2y;\n    let sds;\n    if (lamda > 1) {\n        r1 = Math.sqrt(lamda) * r1;\n        r2 = Math.sqrt(lamda) * r2;\n        sds = 0;\n    }\n    else {\n        let seif = 1;\n        if (largeArcFlag === fS) {\n            seif = -1;\n        }\n        sds =\n            seif * Math.sqrt((r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd));\n    }\n    const txd = (sds * r1 * ryd) / r2;\n    const tyd = (-1 * sds * r2 * rxd) / r1;\n    const tx = cpsi * txd - spsi * tyd + x / 2;\n    const ty = spsi * txd + cpsi * tyd + y / 2;\n    let rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);\n    let s1 = rad >= 0 ? rad : 2 * Math.PI + rad;\n    rad =\n        Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) -\n            Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);\n    let dr = rad >= 0 ? rad : 2 * Math.PI + rad;\n    if (!fS && dr > 0) {\n        dr -= 2 * Math.PI;\n    }\n    else if (fS && dr < 0) {\n        dr += 2 * Math.PI;\n    }\n    const sse = (dr * 2) / Math.PI;\n    const seg = Math.ceil(sse < 0 ? -1 * sse : sse);\n    const segr = dr / seg;\n    const t = ((8 / 3) * Math.sin(segr / 4) * Math.sin(segr / 4)) / Math.sin(segr / 2);\n    const cpsir1 = cpsi * r1;\n    const cpsir2 = cpsi * r2;\n    const spsir1 = spsi * r1;\n    const spsir2 = spsi * r2;\n    let mc = Math.cos(s1);\n    let ms = Math.sin(s1);\n    let x2 = -t * (cpsir1 * ms + spsir2 * mc);\n    let y2 = -t * (spsir1 * ms - cpsir2 * mc);\n    let x3 = 0;\n    let y3 = 0;\n    const result = [];\n    for (let n = 0; n < seg; ++n) {\n        s1 += segr;\n        mc = Math.cos(s1);\n        ms = Math.sin(s1);\n        x3 = cpsir1 * mc - spsir2 * ms + tx;\n        y3 = spsir1 * mc + cpsir2 * ms + ty;\n        const dx = -t * (cpsir1 * ms + spsir2 * mc);\n        const dy = -t * (spsir1 * ms - cpsir2 * mc);\n        // CurveTo updates x0, y0 so need to restore it\n        const index = n * 6;\n        result[index] = Number(x2 + x0);\n        result[index + 1] = Number(y2 + y0);\n        result[index + 2] = Number(x3 - dx + x0);\n        result[index + 3] = Number(y3 - dy + y0);\n        result[index + 4] = Number(x3 + x0);\n        result[index + 5] = Number(y3 + y0);\n        x2 = x3 + dx;\n        y2 = y3 + dy;\n    }\n    return result;\n};\n/**\n * Returns the bounding box for the rotated rectangle.\n *\n * @param rect {@link Rectangle} to be rotated.\n * @param angle Number that represents the angle (in degrees).\n * @param cx Optional {@link Point} that represents the rotation center. If no\n * rotation center is given then the center of rect is used.\n */\nexport const getBoundingBox = (rect, rotation, cx = null) => {\n    let result = null;\n    if (rect && rotation !== 0) {\n        const rad = toRadians(rotation);\n        const cos = Math.cos(rad);\n        const sin = Math.sin(rad);\n        cx = cx != null ? cx : new Point(rect.x + rect.width / 2, rect.y + rect.height / 2);\n        let p1 = new Point(rect.x, rect.y);\n        let p2 = new Point(rect.x + rect.width, rect.y);\n        let p3 = new Point(p2.x, rect.y + rect.height);\n        let p4 = new Point(rect.x, p3.y);\n        p1 = getRotatedPoint(p1, cos, sin, cx);\n        p2 = getRotatedPoint(p2, cos, sin, cx);\n        p3 = getRotatedPoint(p3, cos, sin, cx);\n        p4 = getRotatedPoint(p4, cos, sin, cx);\n        result = new Rectangle(p1.x, p1.y, 0, 0);\n        result.add(new Rectangle(p2.x, p2.y, 0, 0));\n        result.add(new Rectangle(p3.x, p3.y, 0, 0));\n        result.add(new Rectangle(p4.x, p4.y, 0, 0));\n    }\n    return result;\n};\n/**\n * Rotates the given point by the given cos and sin.\n */\nexport const getRotatedPoint = (pt, cos, sin, c = new Point()) => {\n    const x = pt.x - c.x;\n    const y = pt.y - c.y;\n    const x1 = x * cos - y * sin;\n    const y1 = y * cos + x * sin;\n    return new Point(x1 + c.x, y1 + c.y);\n};\n/**\n * Returns an integer mask of the port constraints for the given terminal and edge.\n *\n * @param terminal {@link CellState} that represents the terminal.\n * @param edge {@link CellState} that represents the edge.\n * @param source Boolean that specifies if the terminal is the source terminal.\n * @param defaultValue Default value to be returned if no port constraint is defined in the terminal.\n * @return the mask of port constraint directions\n */\nexport const getPortConstraints = (terminal, edge, source, defaultValue) => {\n    const value = terminal.style.portConstraint ??\n        (source ? edge.style.sourcePortConstraint : edge.style.targetPortConstraint);\n    if (isNullish(value)) {\n        return defaultValue;\n    }\n    // The implementation here is derived from the mxGraph implementation\n    // In mxGraph, the configuration of several directions was done by concatenating them in a string without separator like in \"portConstraint=northsouth\"\n    // See https://github.com/jgraph/mxgraph/blob/v4.2.2/javascript/examples/orthogonal.html#L101-L102\n    // Other examples exist in draw.io: https://github.com/jgraph/drawio/blob/acd938b1/src/main/webapp/js/diagramly/Dialogs.js#L2302-L2305\n    // The implementation here still supports the string concatenation of several directions to allow import of mxGraph XML models without additional transformations.\n    const directions = value.toString();\n    let returnValue = DIRECTION_MASK.NONE;\n    const constraintRotationEnabled = terminal.style.portConstraintRotation ?? false;\n    const rotation = constraintRotationEnabled ? (terminal.style.rotation ?? 0) : 0;\n    let quad = 0;\n    if (rotation > 45) {\n        quad = 1;\n        if (rotation >= 135) {\n            quad = 2;\n        }\n    }\n    else if (rotation < -45) {\n        quad = 3;\n        if (rotation <= -135) {\n            quad = 2;\n        }\n    }\n    if (directions.indexOf('north') >= 0) {\n        switch (quad) {\n            case 0:\n                returnValue |= DIRECTION_MASK.NORTH;\n                break;\n            case 1:\n                returnValue |= DIRECTION_MASK.EAST;\n                break;\n            case 2:\n                returnValue |= DIRECTION_MASK.SOUTH;\n                break;\n            case 3:\n                returnValue |= DIRECTION_MASK.WEST;\n                break;\n        }\n    }\n    if (directions.indexOf('west') >= 0) {\n        switch (quad) {\n            case 0:\n                returnValue |= DIRECTION_MASK.WEST;\n                break;\n            case 1:\n                returnValue |= DIRECTION_MASK.NORTH;\n                break;\n            case 2:\n                returnValue |= DIRECTION_MASK.EAST;\n                break;\n            case 3:\n                returnValue |= DIRECTION_MASK.SOUTH;\n                break;\n        }\n    }\n    if (directions.indexOf('south') >= 0) {\n        switch (quad) {\n            case 0:\n                returnValue |= DIRECTION_MASK.SOUTH;\n                break;\n            case 1:\n                returnValue |= DIRECTION_MASK.WEST;\n                break;\n            case 2:\n                returnValue |= DIRECTION_MASK.NORTH;\n                break;\n            case 3:\n                returnValue |= DIRECTION_MASK.EAST;\n                break;\n        }\n    }\n    if (directions.indexOf('east') >= 0) {\n        switch (quad) {\n            case 0:\n                returnValue |= DIRECTION_MASK.EAST;\n                break;\n            case 1:\n                returnValue |= DIRECTION_MASK.SOUTH;\n                break;\n            case 2:\n                returnValue |= DIRECTION_MASK.WEST;\n                break;\n            case 3:\n                returnValue |= DIRECTION_MASK.NORTH;\n                break;\n        }\n    }\n    return returnValue;\n};\n/**\n * Reverse the port constraint bitmask. For example, north | east\n * becomes south | west\n */\nexport const reversePortConstraints = (constraint) => {\n    let result = 0;\n    result = (constraint & DIRECTION_MASK.WEST) << 3;\n    result |= (constraint & DIRECTION_MASK.NORTH) << 1;\n    result |= (constraint & DIRECTION_MASK.SOUTH) >> 1;\n    result |= (constraint & DIRECTION_MASK.EAST) >> 3;\n    return result;\n};\n/**\n * Finds the index of the nearest segment on the given cell state for\n * the specified coordinate pair.\n */\nexport const findNearestSegment = (state, x, y) => {\n    let index = -1;\n    if (state.absolutePoints.length > 0) {\n        let last = state.absolutePoints[0];\n        let min = null;\n        for (let i = 1; i < state.absolutePoints.length; i += 1) {\n            const current = state.absolutePoints[i];\n            if (!last || !current)\n                continue;\n            const dist = ptSegDistSq(last.x, last.y, current.x, current.y, x, y);\n            if (min == null || dist < min) {\n                min = dist;\n                index = i - 1;\n            }\n            last = current;\n        }\n    }\n    return index;\n};\n/**\n * Adds the given margins to the given rectangle and rotates and flips the\n * rectangle according to the respective styles in style.\n */\nexport const getDirectedBounds = (rect, m, style, flipH, flipV) => {\n    const d = style?.direction ?? 'east';\n    flipH ?? (flipH = style?.flipH ?? false);\n    flipV ?? (flipV = style?.flipV ?? false);\n    m.x = Math.round(Math.max(0, Math.min(rect.width, m.x)));\n    m.y = Math.round(Math.max(0, Math.min(rect.height, m.y)));\n    m.width = Math.round(Math.max(0, Math.min(rect.width, m.width)));\n    m.height = Math.round(Math.max(0, Math.min(rect.height, m.height)));\n    if ((flipV && (d === 'south' || d === 'north')) ||\n        (flipH && (d === 'east' || d === 'west'))) {\n        const tmp = m.x;\n        m.x = m.width;\n        m.width = tmp;\n    }\n    if ((flipH && (d === 'south' || d === 'north')) ||\n        (flipV && (d === 'east' || d === 'west'))) {\n        const tmp = m.y;\n        m.y = m.height;\n        m.height = tmp;\n    }\n    const m2 = Rectangle.fromRectangle(m);\n    if (d === 'south') {\n        m2.y = m.x;\n        m2.x = m.height;\n        m2.width = m.y;\n        m2.height = m.width;\n    }\n    else if (d === 'west') {\n        m2.y = m.height;\n        m2.x = m.width;\n        m2.width = m.x;\n        m2.height = m.y;\n    }\n    else if (d === 'north') {\n        m2.y = m.width;\n        m2.x = m.y;\n        m2.width = m.height;\n        m2.height = m.x;\n    }\n    return new Rectangle(rect.x + m2.x, rect.y + m2.y, rect.width - m2.width - m2.x, rect.height - m2.height - m2.y);\n};\n/**\n * Returns the intersection between the polygon defined by the array of\n * points and the line between center and point.\n */\nexport const getPerimeterPoint = (pts, center, point) => {\n    let min = null;\n    for (let i = 0; i < pts.length - 1; i += 1) {\n        const pt = intersection(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y, center.x, center.y, point.x, point.y);\n        if (pt != null) {\n            const dx = point.x - pt.x;\n            const dy = point.y - pt.y;\n            const ip = { p: pt, distSq: dy * dy + dx * dx };\n            if (ip != null && (min == null || min.distSq > ip.distSq)) {\n                min = ip;\n            }\n        }\n    }\n    return min != null ? min.p : null;\n};\n/**\n * Returns true if the given rectangle intersects the given segment.\n *\n * @param bounds {@link Rectangle} that represents the rectangle.\n * @param p1 {@link Point} that represents the first point of the segment.\n * @param p2 {@link Point} that represents the second point of the segment.\n */\nexport const rectangleIntersectsSegment = (bounds, p1, p2) => {\n    const top = bounds.y;\n    const left = bounds.x;\n    const bottom = top + bounds.height;\n    const right = left + bounds.width;\n    // Find min and max X for the segment\n    let minX = p1.x;\n    let maxX = p2.x;\n    if (p1.x > p2.x) {\n        minX = p2.x;\n        maxX = p1.x;\n    }\n    // Find the intersection of the segment's and rectangle's x-projections\n    if (maxX > right) {\n        maxX = right;\n    }\n    if (minX < left) {\n        minX = left;\n    }\n    if (minX > maxX) {\n        // If their projections do not intersect return false\n        return false;\n    }\n    // Find corresponding min and max Y for min and max X we found before\n    let minY = p1.y;\n    let maxY = p2.y;\n    const dx = p2.x - p1.x;\n    if (Math.abs(dx) > 0.0000001) {\n        const a = (p2.y - p1.y) / dx;\n        const b = p1.y - a * p1.x;\n        minY = a * minX + b;\n        maxY = a * maxX + b;\n    }\n    if (minY > maxY) {\n        const tmp = maxY;\n        maxY = minY;\n        minY = tmp;\n    }\n    // Find the intersection of the segment's and rectangle's y-projections\n    if (maxY > bottom) {\n        maxY = bottom;\n    }\n    if (minY < top) {\n        minY = top;\n    }\n    if (minY > maxY) {\n        // If Y-projections do not intersect return false\n        return false;\n    }\n    return true;\n};\n/**\n * Returns true if the specified point (x, y) is contained in the given rectangle.\n *\n * @param bounds {@link Rectangle} that represents the area.\n * @param x X-coordinate of the point.\n * @param y Y-coordinate of the point.\n */\nexport const contains = (bounds, x, y) => {\n    return (bounds.x <= x &&\n        bounds.x + bounds.width >= x &&\n        bounds.y <= y &&\n        bounds.y + bounds.height >= y);\n};\n/**\n * Returns true if the two rectangles intersect.\n *\n * @param a {@link Rectangle} to be checked for intersection.\n * @param b {@link Rectangle} to be checked for intersection.\n */\nexport const intersects = (a, b) => {\n    let tw = a.width;\n    let th = a.height;\n    let rw = b.width;\n    let rh = b.height;\n    if (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0) {\n        return false;\n    }\n    const tx = a.x;\n    const ty = a.y;\n    const rx = b.x;\n    const ry = b.y;\n    rw += rx;\n    rh += ry;\n    tw += tx;\n    th += ty;\n    return ((rw < rx || rw > tx) &&\n        (rh < ry || rh > ty) &&\n        (tw < tx || tw > rx) &&\n        (th < ty || th > ry));\n};\n/**\n * Returns true if the state and the hotspot intersect.\n *\n * @param state <CellState>\n * @param x X-coordinate.\n * @param y Y-coordinate.\n * @param hotspot Optional size of the hostpot.\n * @param min Optional min size of the hostpot.\n * @param max Optional max size of the hostpot.\n */\nexport const intersectsHotspot = (state, x, y, hotspot, min, max) => {\n    hotspot = hotspot != null ? hotspot : 1;\n    min = min != null ? min : 0;\n    max = max != null ? max : 0;\n    if (hotspot > 0) {\n        let cx = state.getCenterX();\n        let cy = state.getCenterY();\n        let w = state.width;\n        let h = state.height;\n        const style = state.style;\n        const start = (style?.startSize ?? 0) * state.view.scale;\n        if (start > 0) {\n            if (style?.horizontal ?? true) {\n                cy = state.y + start / 2;\n                h = start;\n            }\n            else {\n                cx = state.x + start / 2;\n                w = start;\n            }\n        }\n        w = Math.max(min, w * hotspot);\n        h = Math.max(min, h * hotspot);\n        if (max > 0) {\n            w = Math.min(w, max);\n            h = Math.min(h, max);\n        }\n        const rect = new Rectangle(cx - w / 2, cy - h / 2, w, h);\n        const alpha = toRadians(style?.rotation ?? 0);\n        if (alpha != 0) {\n            const cos = Math.cos(-alpha);\n            const sin = Math.sin(-alpha);\n            const cx = new Point(state.getCenterX(), state.getCenterY());\n            const pt = getRotatedPoint(new Point(x, y), cos, sin, cx);\n            x = pt.x;\n            y = pt.y;\n        }\n        return contains(rect, x, y);\n    }\n    return true;\n};\n/**\n * Returns true if the specified value is numeric, that is, if it is not\n * null, not an empty string, not a HEX number and isNaN returns false.\n *\n * @param n String representing the possibly numeric value.\n */\nexport const isNumeric = (n) => {\n    return (!Number.isNaN(parseFloat(n)) &&\n        isFinite(+n) &&\n        (typeof n !== 'string' || n.toLowerCase().indexOf('0x') < 0));\n};\n/**\n * Returns true if the given value is an valid integer number.\n *\n * @param n String representing the possibly numeric value.\n */\nexport const isInteger = (n) => {\n    return String(parseInt(n)) === String(n);\n};\n/**\n * Returns the remainder of division of n by m. You should use this instead\n * of the built-in operation as the built-in operation does not properly\n * handle negative numbers.\n */\nexport const mod = (n, m) => {\n    return ((n % m) + m) % m;\n};\n/**\n * Returns the intersection of two lines as an {@link Point}.\n *\n * @param x0 X-coordinate of the first line's startpoint.\n * @param y0 X-coordinate of the first line's startpoint.\n * @param x1 X-coordinate of the first line's endpoint.\n * @param y1 Y-coordinate of the first line's endpoint.\n * @param x2 X-coordinate of the second line's startpoint.\n * @param y2 Y-coordinate of the second line's startpoint.\n * @param x3 X-coordinate of the second line's endpoint.\n * @param y3 Y-coordinate of the second line's endpoint.\n */\nexport const intersection = (x0, y0, x1, y1, x2, y2, x3, y3) => {\n    const denom = (y3 - y2) * (x1 - x0) - (x3 - x2) * (y1 - y0);\n    const nume_a = (x3 - x2) * (y0 - y2) - (y3 - y2) * (x0 - x2);\n    const nume_b = (x1 - x0) * (y0 - y2) - (y1 - y0) * (x0 - x2);\n    const ua = nume_a / denom;\n    const ub = nume_b / denom;\n    if (ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0) {\n        // Get the intersection point\n        const x = x0 + ua * (x1 - x0);\n        const y = y0 + ua * (y1 - y0);\n        return new Point(x, y);\n    }\n    // No intersection\n    return null;\n};\n/**\n * Returns the square distance between a segment and a point. To get the\n * distance between a point and a line (with infinite length) use\n * {@link Utils#ptLineDist}.\n *\n * @param x1 X-coordinate of the startpoint of the segment.\n * @param y1 Y-coordinate of the startpoint of the segment.\n * @param x2 X-coordinate of the endpoint of the segment.\n * @param y2 Y-coordinate of the endpoint of the segment.\n * @param px X-coordinate of the point.\n * @param py Y-coordinate of the point.\n */\nexport const ptSegDistSq = (x1, y1, x2, y2, px, py) => {\n    x2 -= x1;\n    y2 -= y1;\n    px -= x1;\n    py -= y1;\n    let dotprod = px * x2 + py * y2;\n    let projlenSq;\n    if (dotprod <= 0.0) {\n        projlenSq = 0.0;\n    }\n    else {\n        px = x2 - px;\n        py = y2 - py;\n        dotprod = px * x2 + py * y2;\n        if (dotprod <= 0.0) {\n            projlenSq = 0.0;\n        }\n        else {\n            projlenSq = (dotprod * dotprod) / (x2 * x2 + y2 * y2);\n        }\n    }\n    let lenSq = px * px + py * py - projlenSq;\n    if (lenSq < 0) {\n        lenSq = 0;\n    }\n    return lenSq;\n};\n/**\n * Returns the distance between a line defined by two points and a point.\n * To get the distance between a point and a segment (with a specific\n * length) use {@link Utils#ptSeqDistSq}.\n *\n * @param x1 X-coordinate of point 1 of the line.\n * @param y1 Y-coordinate of point 1 of the line.\n * @param x2 X-coordinate of point 1 of the line.\n * @param y2 Y-coordinate of point 1 of the line.\n * @param px X-coordinate of the point.\n * @param py Y-coordinate of the point.\n */\nexport const ptLineDist = (x1, y1, x2, y2, px, py) => {\n    return (Math.abs((y2 - y1) * px - (x2 - x1) * py + x2 * y1 - y2 * x1) /\n        Math.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1)));\n};\n/**\n * Returns 1 if the given point on the right side of the segment, 0 if its\n * on the segment, and -1 if the point is on the left side of the segment.\n *\n * @param x1 X-coordinate of the startpoint of the segment.\n * @param y1 Y-coordinate of the startpoint of the segment.\n * @param x2 X-coordinate of the endpoint of the segment.\n * @param y2 Y-coordinate of the endpoint of the segment.\n * @param px X-coordinate of the point.\n * @param py Y-coordinate of the point.\n */\nexport const relativeCcw = (x1, y1, x2, y2, px, py) => {\n    x2 -= x1;\n    y2 -= y1;\n    px -= x1;\n    py -= y1;\n    let ccw = px * y2 - py * x2;\n    if (ccw == 0.0) {\n        ccw = px * x2 + py * y2;\n        if (ccw > 0.0) {\n            px -= x2;\n            py -= y2;\n            ccw = px * x2 + py * y2;\n            if (ccw < 0.0) {\n                ccw = 0.0;\n            }\n        }\n    }\n    return ccw < 0.0 ? -1 : ccw > 0.0 ? 1 : 0;\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CellState from '../../cell/CellState';\nimport Point from '../../geometry/Point';\nimport { contains } from '../../../util/mathUtils';\n/**\n * Implements a horizontal elbow edge.\n *\n * This EdgeStyle is registered under `sideToSideEdgeStyle` in {@link EdgeStyleRegistry} when using {@link Graph} or calling {@link registerDefaultEdgeStyles}.\n *\n * **IMPORTANT**: When registering it manually  in {@link EdgeStyleRegistry}, the following metadata must be used:\n * - handlerKind: 'elbow'\n * - isOrthogonal: true\n */\nexport const SideToSide = (state, source, target, points, result) => {\n    const { view } = state;\n    let pt = points != null && points.length > 0 ? points[0] : null;\n    const pts = state.absolutePoints;\n    const p0 = pts[0];\n    const pe = pts[pts.length - 1];\n    if (pt != null) {\n        pt = view.transformControlPoint(state, pt);\n    }\n    if (p0 != null) {\n        source = new CellState();\n        source.x = p0.x;\n        source.y = p0.y;\n    }\n    if (pe != null) {\n        target = new CellState();\n        target.x = pe.x;\n        target.y = pe.y;\n    }\n    if (source != null && target != null) {\n        const l = Math.max(source.x, target.x);\n        const r = Math.min(source.x + source.width, target.x + target.width);\n        const x = pt != null ? pt.x : Math.round(r + (l - r) / 2);\n        let y1 = view.getRoutingCenterY(source);\n        let y2 = view.getRoutingCenterY(target);\n        if (pt != null) {\n            if (pt.y >= source.y && pt.y <= source.y + source.height) {\n                y1 = pt.y;\n            }\n            if (pt.y >= target.y && pt.y <= target.y + target.height) {\n                y2 = pt.y;\n            }\n        }\n        if (!contains(target, x, y1) && !contains(source, x, y1)) {\n            result.push(new Point(x, y1));\n        }\n        if (!contains(target, x, y2) && !contains(source, x, y2)) {\n            result.push(new Point(x, y2));\n        }\n        if (result.length === 1) {\n            if (pt != null) {\n                if (!contains(target, x, pt.y) && !contains(source, x, pt.y)) {\n                    result.push(new Point(x, pt.y));\n                }\n            }\n            else {\n                const t = Math.max(source.y, target.y);\n                const b = Math.min(source.y + source.height, target.y + target.height);\n                result.push(new Point(x, t + (b - t) / 2));\n            }\n        }\n    }\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CellState from '../../cell/CellState';\nimport Point from '../../geometry/Point';\nimport { contains } from '../../../util/mathUtils';\n/**\n * Implements a vertical elbow edge.\n *\n * This EdgeStyle is registered under `topToBottomEdgeStyle` in {@link EdgeStyleRegistry} when using {@link Graph} or calling {@link registerDefaultEdgeStyles}.\n *\n * **IMPORTANT**: When registering it manually  in {@link EdgeStyleRegistry}, the following metadata must be used:\n * - handlerKind: 'elbow'\n * - isOrthogonal: true\n */\nexport const TopToBottom = (state, source, target, points, result) => {\n    const { view } = state;\n    let pt = points != null && points.length > 0 ? points[0] : null;\n    const pts = state.absolutePoints;\n    const p0 = pts[0];\n    const pe = pts[pts.length - 1];\n    if (pt != null) {\n        pt = view.transformControlPoint(state, pt);\n    }\n    if (p0 != null) {\n        source = new CellState();\n        source.x = p0.x;\n        source.y = p0.y;\n    }\n    if (pe != null) {\n        target = new CellState();\n        target.x = pe.x;\n        target.y = pe.y;\n    }\n    if (source != null && target != null) {\n        const t = Math.max(source.y, target.y);\n        const b = Math.min(source.y + source.height, target.y + target.height);\n        let x = view.getRoutingCenterX(source);\n        if (pt != null && pt.x >= source.x && pt.x <= source.x + source.width) {\n            x = pt.x;\n        }\n        const y = pt != null ? pt.y : Math.round(b + (t - b) / 2);\n        if (!contains(target, x, y) && !contains(source, x, y)) {\n            result.push(new Point(x, y));\n        }\n        if (pt != null && pt.x >= target.x && pt.x <= target.x + target.width) {\n            x = pt.x;\n        }\n        else {\n            x = view.getRoutingCenterX(target);\n        }\n        if (!contains(target, x, y) && !contains(source, x, y)) {\n            result.push(new Point(x, y));\n        }\n        if (result.length === 1) {\n            if (pt != null && result.length === 1) {\n                if (!contains(target, pt.x, y) && !contains(source, pt.x, y)) {\n                    result.push(new Point(pt.x, y));\n                }\n            }\n            else {\n                const l = Math.max(source.x, target.x);\n                const r = Math.min(source.x + source.width, target.x + target.width);\n                result.push(new Point(l + (r - l) / 2, y));\n            }\n        }\n    }\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { SideToSide } from './SideToSide';\nimport { TopToBottom } from './TopToBottom';\n/**\n * Uses either {@link SideToSide} or {@link TopToBottom} depending on the horizontal flag in the cell style.\n * {@link SideToSide} is used if horizontal is `true` or unspecified.\n *\n * This EdgeStyle is registered under `elbowEdgeStyle` in {@link EdgeStyleRegistry} when using {@link Graph} or calling {@link registerDefaultEdgeStyles}.\n *\n * **IMPORTANT**: When registering it manually  in {@link EdgeStyleRegistry}, the following metadata must be used:\n * - handlerKind: 'elbow'\n * - isOrthogonal: true\n */\nexport const ElbowConnector = (state, source, target, points, result) => {\n    let pt = points != null && points.length > 0 ? points[0] : null;\n    let vertical = false;\n    let horizontal = false;\n    if (source != null && target != null) {\n        if (pt != null) {\n            const left = Math.min(source.x, target.x);\n            const right = Math.max(source.x + source.width, target.x + target.width);\n            const top = Math.min(source.y, target.y);\n            const bottom = Math.max(source.y + source.height, target.y + target.height);\n            pt = state.view.transformControlPoint(state, pt);\n            vertical = pt.y < top || pt.y > bottom;\n            horizontal = pt.x < left || pt.x > right;\n        }\n        else {\n            const left = Math.max(source.x, target.x);\n            const right = Math.min(source.x + source.width, target.x + target.width);\n            vertical = left === right;\n            if (!vertical) {\n                const top = Math.max(source.y, target.y);\n                const bottom = Math.min(source.y + source.height, target.y + target.height);\n                horizontal = top === bottom;\n            }\n        }\n    }\n    if (!horizontal && (vertical || state.style.elbow === 'vertical')) {\n        TopToBottom(state, source, target, points, result);\n    }\n    else {\n        SideToSide(state, source, target, points, result);\n    }\n};\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { ENTITY_SEGMENT } from '../../util/Constants';\nimport { shallowCopy } from '../../internal/clone-utils';\n/**\n * Configure the {@link EntityRelation} connector.\n *\n * @experimental subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.15.0\n * @category Configuration\n * @category EdgeStyle\n */\nexport const EntityRelationConnectorConfig = {\n    /**\n     * Defines the length of the horizontal segment of an `Entity Relation`.\n     * This can be overridden using {@link CellStateStyle.segment} style.\n     * @default {@link ENTITY_SEGMENT}\n     */\n    segment: ENTITY_SEGMENT,\n};\n/**\n * Resets {@link EntityRelationConnectorConfig} to default values.\n *\n * @experimental Subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.15.0\n * @category Configuration\n * @category EdgeStyle\n */\nexport const resetEntityRelationConnectorConfig = () => {\n    // implement the reset manually as there are a few properties for now\n    EntityRelationConnectorConfig.segment = ENTITY_SEGMENT;\n};\n/**\n * Configure the {@link OrthConnector}.\n *\n * @experimental subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.16.0\n * @category Configuration\n * @category EdgeStyle\n */\nexport const OrthogonalConnectorConfig = {\n    /**\n     * If the value is not set in {@link CellStateStyle.jettySize}, defines the jetty size of the connector.\n     *\n     * If the computed value of the jetty size coming from {@link CellStateStyle} is 'auto', it is used in the computation of the automatic jetty size.\n     * See the implementation of {@link OrthConnector} for more details.\n     *\n     * @default 10\n     */\n    buffer: 10,\n    /**\n     * See the implementation of {@link OrthConnector} for more details.\n     * @default true\n     */\n    pointsFallback: true,\n};\nconst originalOrthogonalConnectorConfig = { ...OrthogonalConnectorConfig };\n/**\n * Resets {@link OrthogonalConnectorConfig} to default values.\n *\n * @experimental Subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.16.0\n * @category Configuration\n * @category EdgeStyle\n */\nexport const resetOrthogonalConnectorConfig = () => {\n    shallowCopy(originalOrthogonalConnectorConfig, OrthogonalConnectorConfig);\n};\nconst allDirections = () => {\n    return ['north', 'south', 'east', 'west'];\n};\n/**\n * Configure the {@link ManhattanConnector}.\n *\n * @experimental subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.16.0\n * @category Configuration\n * @category EdgeStyle\n */\nexport const ManhattanConnectorConfig = {\n    maxAllowedDirectionChange: 90,\n    maxLoops: 2000,\n    endDirections: allDirections(),\n    startDirections: allDirections(),\n    step: 12,\n};\nconst originalManhattanConnectorConfig = {};\nshallowCopy(ManhattanConnectorConfig, originalManhattanConnectorConfig);\n/**\n * Resets {@link ManhattanConnectorConfig} to default values.\n *\n * @experimental Subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.16.0\n * @category Configuration\n * @category EdgeStyle\n */\nexport const resetManhattanConnectorConfig = () => {\n    shallowCopy(originalManhattanConnectorConfig, ManhattanConnectorConfig);\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CellState from '../../cell/CellState';\nimport Point from '../../geometry/Point';\nimport { DIRECTION_MASK } from '../../../util/Constants';\nimport { getPortConstraints } from '../../../util/mathUtils';\nimport { EntityRelationConnectorConfig } from '../config';\n/**\n * Implements an entity relation style for edges (as used in database schema diagrams).\n *\n * At the time the function is called, the result array contains a placeholder (`null`) for the first absolute point,\n * that is, the point where the edge and source terminal are connected.\n *\n * The implementation of the style then adds all intermediate waypoints except for the last point,\n * that is, the connection point between the edge and the target terminal.\n *\n * The first and the last point in the result array are then replaced with Point that take into account the terminal's perimeter and next point on the edge.\n *\n * This EdgeStyle is registered under `entityRelationEdgeStyle` in {@link EdgeStyleRegistry} when using {@link Graph} or calling {@link registerDefaultEdgeStyles}.\n *\n * **IMPORTANT**: When registering it manually  in {@link EdgeStyleRegistry}, the following metadata must be used:\n * - handlerKind: 'default' or unset\n * - isOrthogonal: true\n *\n * @param state {@link CellState} that represents the edge to be updated.\n * @param source {@link CellState} that represents the source terminal.\n * @param target {@link CellState} that represents the target terminal.\n * @param _points\n * @param result Array of {@link Point} that represent the actual points of the edge.\n */\nexport const EntityRelation = (state, source, target, _points, result) => {\n    const { view } = state;\n    const segment = (state.style?.segment ?? EntityRelationConnectorConfig.segment) * view.scale;\n    const pts = state.absolutePoints;\n    const p0 = pts[0];\n    const pe = pts[pts.length - 1];\n    let isSourceLeft = false;\n    if (source != null) {\n        const sourceGeometry = source.cell.getGeometry();\n        if (sourceGeometry.relative) {\n            isSourceLeft = sourceGeometry.x <= 0.5;\n        }\n        else if (target != null) {\n            isSourceLeft =\n                (pe != null ? pe.x : target.x + target.width) < (p0 != null ? p0.x : source.x);\n        }\n    }\n    if (p0 != null) {\n        source = new CellState();\n        source.x = p0.x;\n        source.y = p0.y;\n    }\n    else if (source != null) {\n        const constraint = getPortConstraints(source, state, true, DIRECTION_MASK.NONE);\n        if (constraint !== DIRECTION_MASK.NONE &&\n            constraint !== DIRECTION_MASK.WEST + DIRECTION_MASK.EAST) {\n            isSourceLeft = constraint === DIRECTION_MASK.WEST;\n        }\n    }\n    else {\n        return;\n    }\n    let isTargetLeft = true;\n    if (target != null) {\n        const targetGeometry = target.cell.getGeometry();\n        if (targetGeometry.relative) {\n            isTargetLeft = targetGeometry.x <= 0.5;\n        }\n        else if (source != null) {\n            isTargetLeft =\n                (p0 != null ? p0.x : source.x + source.width) < (pe != null ? pe.x : target.x);\n        }\n    }\n    if (pe != null) {\n        target = new CellState();\n        target.x = pe.x;\n        target.y = pe.y;\n    }\n    else if (target != null) {\n        const constraint = getPortConstraints(target, state, false, DIRECTION_MASK.NONE);\n        if (constraint !== DIRECTION_MASK.NONE &&\n            constraint != DIRECTION_MASK.WEST + DIRECTION_MASK.EAST) {\n            isTargetLeft = constraint === DIRECTION_MASK.WEST;\n        }\n    }\n    if (source != null && target != null) {\n        const x0 = isSourceLeft ? source.x : source.x + source.width;\n        const y0 = view.getRoutingCenterY(source);\n        const xe = isTargetLeft ? target.x : target.x + target.width;\n        const ye = view.getRoutingCenterY(target);\n        const seg = segment;\n        let dx = isSourceLeft ? -seg : seg;\n        const dep = new Point(x0 + dx, y0);\n        dx = isTargetLeft ? -seg : seg;\n        const arr = new Point(xe + dx, ye);\n        // Adds intermediate points if both go out on same side\n        if (isSourceLeft === isTargetLeft) {\n            const x = isSourceLeft ? Math.min(x0, xe) - segment : Math.max(x0, xe) + segment;\n            result.push(new Point(x, y0));\n            result.push(new Point(x, ye));\n        }\n        else if (dep.x < arr.x === isSourceLeft) {\n            const midY = y0 + (ye - y0) / 2;\n            result.push(dep);\n            result.push(new Point(dep.x, midY));\n            result.push(new Point(arr.x, midY));\n            result.push(arr);\n        }\n        else {\n            result.push(dep);\n            result.push(arr);\n        }\n    }\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\nimport { contains } from '../../../util/mathUtils';\n/**\n * Implements a self-reference, aka. loop.\n *\n * This EdgeStyle is registered under `loopEdgeStyle` in {@link EdgeStyleRegistry} when using {@link Graph} or calling {@link registerDefaultEdgeStyles}.\n *\n * **IMPORTANT**: When registering it manually  in {@link EdgeStyleRegistry}, the following metadata must be used:\n * - handlerKind: 'elbow'\n * - isOrthogonal: false\n */\nexport const Loop = (state, source, _target, points, result) => {\n    const pts = state.absolutePoints;\n    const p0 = pts[0];\n    const pe = pts[pts.length - 1];\n    if (p0 != null && pe != null) {\n        if (points != null && points.length > 0) {\n            for (let i = 0; i < points.length; i += 1) {\n                let pt = points[i];\n                pt = state.view.transformControlPoint(state, pt);\n                result.push(new Point(pt.x, pt.y));\n            }\n        }\n        return;\n    }\n    if (source != null) {\n        const { view } = state;\n        const { graph } = view;\n        let pt = points != null && points.length > 0 ? points[0] : null;\n        if (pt != null) {\n            pt = view.transformControlPoint(state, pt);\n            if (contains(source, pt.x, pt.y)) {\n                pt = null;\n            }\n        }\n        let x = 0;\n        let dx = 0;\n        let y = 0;\n        let dy = 0;\n        const seg = (state.style.segment ?? graph.gridSize) * view.scale;\n        const dir = state.style?.direction ?? 'west';\n        if (dir === 'north' || dir === 'south') {\n            x = view.getRoutingCenterX(source);\n            dx = seg;\n        }\n        else {\n            y = view.getRoutingCenterY(source);\n            dy = seg;\n        }\n        if (pt == null || pt.x < source.x || pt.x > source.x + source.width) {\n            if (pt != null) {\n                x = pt.x;\n                dy = Math.max(Math.abs(y - pt.y), dy);\n            }\n            else if (dir === 'north') {\n                y = source.y - 2 * dx;\n            }\n            else if (dir === 'south') {\n                y = source.y + source.height + 2 * dx;\n            }\n            else if (dir === 'east') {\n                x = source.x - 2 * dy;\n            }\n            else {\n                x = source.x + source.width + 2 * dy;\n            }\n        }\n        else if (pt !== null) {\n            x = view.getRoutingCenterX(source);\n            dx = Math.max(Math.abs(x - pt.x), dy);\n            y = pt.y;\n            dy = 0;\n        }\n        result.push(new Point(x - dx, y - dy));\n        result.push(new Point(x + dx, y + dy));\n    }\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Dictionary from './Dictionary';\n/**\n * Removes all occurrences of the given object in the given array or\n * object. If there are multiple occurrences of the object, be they\n * associative or as an array entry, all occurrences are removed from\n * the array or deleted from the object. By removing the object from\n * the array, all elements following the removed element are shifted\n * by one step towards the beginning of the array.\n *\n * The length of arrays is not modified inside this function.\n *\n * @param obj Object to find in the given array.\n * @param array Array to check for the given obj.\n */\nexport const remove = (obj, array) => {\n    let result = null;\n    if (typeof array === 'object') {\n        let index = array.indexOf(obj);\n        while (index >= 0) {\n            array.splice(index, 1);\n            result = obj;\n            index = array.indexOf(obj);\n        }\n    }\n    for (const key in array) {\n        if (array[key] == obj) {\n            delete array[key];\n            result = obj;\n        }\n    }\n    return result;\n};\n/**\n * Compares all Point in the given lists.\n *\n * @param a Array of <Point> to be compared.\n * @param b Array of <Point> to be compared.\n */\nexport const equalPoints = (a, b) => {\n    if ((!a && b) || (a && !b) || (a && b && a.length != b.length)) {\n        return false;\n    }\n    if (a && b) {\n        for (let i = 0; i < a.length; i += 1) {\n            const p = a[i];\n            if (!p || (p && !p.equals(b[i])))\n                return false;\n        }\n    }\n    return true;\n};\n/**\n * Returns true if all properties of the given objects are equal. Values\n * with NaN are equal to NaN and unequal to any other value.\n *\n * @param a First object to be compared.\n * @param b Second object to be compared.\n */\nexport const equalEntries = (a, b) => {\n    // Counts keys in b to check if all values have been compared\n    let count = 0;\n    if ((!a && b) || (a && !b) || (a && b && a.length != b.length)) {\n        return false;\n    }\n    if (a && b) {\n        for (const key in b) {\n            count++;\n        }\n        for (const key in a) {\n            count--;\n            if ((!Number.isNaN(a[key]) || !Number.isNaN(b[key])) && a[key] !== b[key]) {\n                return false;\n            }\n        }\n    }\n    return count === 0;\n};\n/**\n * Removes all duplicates from the given array.\n */\nexport const removeDuplicates = (arr) => {\n    const dict = new Dictionary();\n    const result = [];\n    for (let i = 0; i < arr.length; i += 1) {\n        if (!dict.get(arr[i])) {\n            result.push(arr[i]);\n            dict.put(arr[i], true);\n        }\n    }\n    return result;\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from './Point';\nimport Rectangle from './Rectangle';\nimport { getRotatedPoint, toRadians } from '../../util/mathUtils';\nimport { equalPoints } from '../../util/arrayUtils';\nimport { clone } from '../../util/cloneUtils';\n/**\n * For vertices, the geometry consists of the x- and y-location, and the width\n * and height. For edges, the geometry consists of the optional terminal- and\n * control points. The terminal points are only required if an edge is\n * unconnected, and are stored in the {@link sourcePoint} and {@link targetPoint}\n * variables, respectively.\n *\n * ### Example\n *\n * If an edge is unconnected, that is, it has no source or target terminal,\n * then a geometry with terminal points for a new edge can be defined as\n * follows.\n *\n * ```javascript\n * geometry.setTerminalPoint(new mxPoint(x1, y1), true);\n * geometry.points: [new mxPoint(x2, y2)];\n * geometry.setTerminalPoint(new mxPoint(x3, y3), false);\n * ```\n *\n * Control points are used regardless of the connected state of an edge and may\n * be ignored or interpreted differently depending on the edge's {@link edgeStyle}.\n *\n * To disable automatic reset of control points after a cell has been moved or\n * resized, {@link AbstractGraph.resetEdgesOnMove} and {@link AbstractGraph.resetEdgesOnResize} may be used.\n *\n * ### Edge Labels\n *\n * Using the x- and y-coordinates of a cell's geometry, it is possible to\n * position the label on edges on a specific location on the actual edge shape\n * as it appears on the screen. The x-coordinate of an edge's geometry is used\n * to describe the distance from the center of the edge from -1 to 1 with 0\n * being the center of the edge and the default value. The y-coordinate of an\n * edge's geometry is used to describe the absolute, orthogonal distance in\n * pixels from that point. In addition, the {@link Geometry.offset} is used as an\n * absolute offset vector from the resulting point.\n *\n * This coordinate system is applied if {@link relative} is true, otherwise the\n * offset defines the absolute vector from the edge's center point to the\n * label and the values for {@link x} and {@link y} are ignored.\n *\n * The width and height parameter for edge geometries can be used to set the\n * label width and height (eg. for word wrapping).\n *\n * ### Ports\n *\n * The term \"port\" refers to a relatively positioned, connectable child cell,\n * which is used to specify the connection between the parent and another cell\n * in the graph. Ports are typically modeled as vertices with relative\n * geometries.\n *\n * ### Offsets\n *\n * The {@link offset} field is interpreted in 3 different ways, depending on the cell\n * and the geometry. For edges, the offset defines the absolute offset for the\n * edge label. For relative geometries, the offset defines the absolute offset\n * for the origin (top, left corner) of the vertex, otherwise the offset\n * defines the absolute offset for the label inside the vertex or group.\n *\n * @category Geometry\n */\nclass Geometry extends Rectangle {\n    constructor(x = 0, y = 0, width = 0, height = 0) {\n        super(x, y, width, height);\n        /**\n         * Global switch to translate the points in translate. Default is true.\n         */\n        this.TRANSLATE_CONTROL_POINTS = true;\n        /**\n         * Stores alternate values for x, y, width and height in a rectangle.\n         * See {@link swap} to exchange the values. Default is null.\n         *\n         * @see {@link swap}\n         */\n        this.alternateBounds = null;\n        /**\n         * Defines the source {@link Point} of the edge. This is used if the\n         * corresponding edge does not have a source vertex. Otherwise, it is ignored.\n         * @default null\n         */\n        this.sourcePoint = null;\n        /**\n         * Defines the source {@link Point} of the edge. This is used if the\n         * corresponding edge does not have a target vertex. Otherwise, it is ignored.\n         * @default null\n         */\n        this.targetPoint = null;\n        /**\n         * Array of {@link Point} which specifies the control points along the edge.\n         * These points are the intermediate points on the edge, for the endpoints\n         * use {@link targetPoint} and {@link sourcePoint} or set the terminals of the edge to\n         * a non-null value.\n         * @default null\n         */\n        this.points = null;\n        /**\n         * For edges, this holds the offset (in pixels) from the position defined by {@link x} and {@link y} on the edge.\n         *\n         * For relative geometries (for vertices), this defines the absolute offset from the point defined by the relative\n         * coordinates.\n         *\n         * For absolute geometries (for vertices), this defines the offset for the label.\n         * @default null\n         */\n        this.offset = null;\n        /**\n         * Specifies if the coordinates in the geometry are to be interpreted as relative coordinates.\n         *\n         * For edges, this is used to define the location of the edge label relative to the edge\n         * as rendered on the display.\n         *\n         * For vertices, this specifies the relative location inside the bounds of the parent cell.\n         *\n         * If this is `false`, then the coordinates are relative to the origin of the parent cell or,\n         * for edges, the edge label position is relative to the center of the edge as rendered on screen.\n         *\n         * @default false.\n         */\n        this.relative = false;\n    }\n    setRelative(isRelative) {\n        this.relative = isRelative;\n    }\n    /**\n     * Swaps the x, y, width and height with the values stored in\n     * {@link alternateBounds} and puts the previous values into {@link alternateBounds} as\n     * a rectangle. This operation is carried-out in-place, that is, using the\n     * existing geometry instance. If this operation is called during a graph\n     * model transactional change, then the geometry should be cloned before\n     * calling this method and setting the geometry of the cell using\n     * {@link GraphDataModel.setGeometry}.\n     */\n    swap() {\n        if (this.alternateBounds) {\n            const old = new Rectangle(this.x, this.y, this.width, this.height);\n            this.x = this.alternateBounds.x;\n            this.y = this.alternateBounds.y;\n            this.width = this.alternateBounds.width;\n            this.height = this.alternateBounds.height;\n            this.alternateBounds = old;\n        }\n    }\n    /**\n     * Returns the {@link Point} representing the source or target point of this\n     * edge. This is only used if the edge has no source or target vertex.\n     *\n     * @param {Boolean} isSource that specifies if the source or target point should be returned.\n     */\n    getTerminalPoint(isSource) {\n        return isSource ? this.sourcePoint : this.targetPoint;\n    }\n    /**\n     * Sets the {@link sourcePoint} or {@link targetPoint} to the given {@link Point} and\n     * returns the new point.\n     *\n     * @param {Point} point to be used as the new source or target point.\n     * @param {Boolean} isSource that specifies if the source or target point should be set.\n     */\n    setTerminalPoint(point, isSource) {\n        if (isSource) {\n            this.sourcePoint = point;\n        }\n        else {\n            this.targetPoint = point;\n        }\n        return point;\n    }\n    /**\n     * Rotates the geometry by the given angle around the given center. That is,\n     * {@link x} and {@link y} of the geometry, the {@link sourcePoint}, {@link targetPoint} and all\n     * {@link points} are translated by the given amount. {@link x} and {@link y} are only\n     * translated if {@link relative} is false.\n     *\n     * @param {Number} angle that specifies the rotation angle in degrees.\n     * @param {Point} cx   that specifies the center of the rotation.\n     */\n    rotate(angle, cx) {\n        const rad = toRadians(angle);\n        const cos = Math.cos(rad);\n        const sin = Math.sin(rad);\n        // Rotates the geometry\n        if (!this.relative) {\n            const ct = new Point(this.getCenterX(), this.getCenterY());\n            const pt = getRotatedPoint(ct, cos, sin, cx);\n            this.x = Math.round(pt.x - this.width / 2);\n            this.y = Math.round(pt.y - this.height / 2);\n        }\n        // Rotates the source point\n        if (this.sourcePoint) {\n            const pt = getRotatedPoint(this.sourcePoint, cos, sin, cx);\n            this.sourcePoint.x = Math.round(pt.x);\n            this.sourcePoint.y = Math.round(pt.y);\n        }\n        // Translates the target point\n        if (this.targetPoint) {\n            const pt = getRotatedPoint(this.targetPoint, cos, sin, cx);\n            this.targetPoint.x = Math.round(pt.x);\n            this.targetPoint.y = Math.round(pt.y);\n        }\n        // Translate the control points\n        if (this.points) {\n            for (let i = 0; i < this.points.length; i += 1) {\n                if (this.points[i]) {\n                    const pt = getRotatedPoint(this.points[i], cos, sin, cx);\n                    this.points[i].x = Math.round(pt.x);\n                    this.points[i].y = Math.round(pt.y);\n                }\n            }\n        }\n    }\n    /**\n     * Translates the geometry by the specified amount. That is, {@link x} and {@link y} of the\n     * geometry, the {@link sourcePoint}, {@link targetPoint} and all {@link points} are translated\n     * by the given amount. {@link x} and {@link y} are only translated if {@link relative} is false.\n     * If {@link TRANSLATE_CONTROL_POINTS} is false, then {@link points} are not modified by\n     * this function.\n     *\n     * @param {Number} dx that specifies the x-coordinate of the translation.\n     * @param {Number} dy that specifies the y-coordinate of the translation.\n     */\n    translate(dx, dy) {\n        // Translates the geometry\n        if (!this.relative) {\n            this.x += dx;\n            this.y += dy;\n        }\n        // Translates the source point\n        if (this.sourcePoint) {\n            this.sourcePoint.x = this.sourcePoint.x + dx;\n            this.sourcePoint.y = this.sourcePoint.y + dy;\n        }\n        // Translates the target point\n        if (this.targetPoint) {\n            this.targetPoint.x = this.targetPoint.x + dx;\n            this.targetPoint.y = this.targetPoint.y + dy;\n        }\n        // Translate the control points\n        if (this.TRANSLATE_CONTROL_POINTS && this.points) {\n            for (let i = 0; i < this.points.length; i += 1) {\n                if (this.points[i]) {\n                    this.points[i].x = this.points[i].x + dx;\n                    this.points[i].y = this.points[i].y + dy;\n                }\n            }\n        }\n    }\n    /**\n     * Scales the geometry by the given amount. That is, {@link x} and {@link y} of the\n     * geometry, the {@link sourcePoint}, {@link targetPoint} and all {@link points} are scaled\n     * by the given amount. {@link x}, {@link y}, {@link width} and {@link height} are only scaled if\n     * {@link relative} is false. If {@link fixedAspect} is true, then the smaller value\n     * is used to scale the width and the height.\n     *\n     * @param {Number} sx that specifies the horizontal scale factor.\n     * @param {Number} sy that specifies the vertical scale factor.\n     * @param {Optional} fixedAspect boolean to keep the aspect ratio fixed.\n     */\n    scale(sx, sy, fixedAspect) {\n        // Translates the source point\n        if (this.sourcePoint) {\n            this.sourcePoint.x = this.sourcePoint.x * sx;\n            this.sourcePoint.y = this.sourcePoint.y * sy;\n        }\n        // Translates the target point\n        if (this.targetPoint) {\n            this.targetPoint.x = this.targetPoint.x * sx;\n            this.targetPoint.y = this.targetPoint.y * sy;\n        }\n        // Translate the control points\n        if (this.points) {\n            for (let i = 0; i < this.points.length; i += 1) {\n                if (this.points[i]) {\n                    this.points[i].x = this.points[i].x * sx;\n                    this.points[i].y = this.points[i].y * sy;\n                }\n            }\n        }\n        // Translates the geometry\n        if (!this.relative) {\n            this.x *= sx;\n            this.y *= sy;\n            if (fixedAspect) {\n                sy = sx = Math.min(sx, sy);\n            }\n            this.width *= sx;\n            this.height *= sy;\n        }\n    }\n    /**\n     * Returns true if the given object equals this geometry.\n     */\n    equals(geom) {\n        if (!geom)\n            return false;\n        return (super.equals(geom) &&\n            this.relative === geom.relative &&\n            ((this.sourcePoint === null && geom.sourcePoint === null) ||\n                !!this.sourcePoint?.equals(geom.sourcePoint)) &&\n            ((this.targetPoint === null && geom.targetPoint === null) ||\n                !!this.targetPoint?.equals(geom.targetPoint)) &&\n            equalPoints(this.points, geom.points) &&\n            ((this.alternateBounds === null && geom.alternateBounds === null) ||\n                !!this.alternateBounds?.equals(geom.alternateBounds)) &&\n            ((this.offset === null && geom.offset === null) ||\n                !!this.offset?.equals(geom.offset)));\n    }\n    clone() {\n        return clone(this);\n    }\n}\nexport default Geometry;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\n/**\n * Scales an array of {@link Point}\n *\n * @param points array of {@link Point} to scale\n * @param scale the scaling to divide by\n * @private\n * @internal\n */\nexport function scalePointArray(points, scale) {\n    let result = [];\n    if (points != null) {\n        for (let i = 0; i < points.length; i += 1) {\n            if (points[i] != null) {\n                result[i] = new Point(Math.round((points[i].x / scale) * 10) / 10, Math.round((points[i].y / scale) * 10) / 10);\n            }\n            else {\n                result[i] = null;\n            }\n        }\n    }\n    else {\n        result = null;\n    }\n    return result;\n}\n/**\n * Scales an {@link CellState}.\n *\n * @param state {@link CellState} to scale\n * @param scale the scaling to divide by\n */\nexport function scaleCellState(state, scale) {\n    let result = null;\n    if (state != null) {\n        result = state.clone();\n        result.setRect(Math.round((state.x / scale) * 10) / 10, Math.round((state.y / scale) * 10) / 10, Math.round((state.width / scale) * 10) / 10, Math.round((state.height / scale) * 10) / 10);\n    }\n    return result;\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\nimport { contains } from '../../../util/mathUtils';\nimport { scaleCellState, scalePointArray } from './shared';\n/**\n * Implements an orthogonal edge style.\n * Use {@link EdgeSegmentHandler} as an interactive handler for this style.\n *\n * This EdgeStyle is registered under `segmentEdgeStyle` in {@link EdgeStyleRegistry} when using {@link Graph} or calling {@link registerDefaultEdgeStyles}.\n *\n * **IMPORTANT**: When registering it manually  in {@link EdgeStyleRegistry}, the following metadata must be used:\n * - handlerKind: 'segment'\n * - isOrthogonal: true\n *\n * @param state {@link CellState} that represents the edge to be updated.\n * @param sourceScaled {@link CellState} that represents the source terminal.\n * @param targetScaled {@link CellState} that represents the target terminal.\n * @param controlHints List of relative control points.\n * @param result Array of {@link Point} that represent the actual points of the edge.\n */\nexport const SegmentConnector = (state, sourceScaled, targetScaled, controlHints, result) => {\n    // Creates array of all way- and terminal points\n    // TODO: Figure out what to do when there are nulls in `pts`!\n    const pts = scalePointArray(state.absolutePoints, state.view.scale);\n    const source = scaleCellState(sourceScaled, state.view.scale);\n    const target = scaleCellState(targetScaled, state.view.scale);\n    const tol = 1;\n    // Whether the first segment outgoing from the source end is horizontal\n    let lastPushed = result.length > 0 ? result[0] : null;\n    let horizontal = true;\n    let hint = null;\n    // Adds waypoints only if outside of tolerance\n    function pushPoint(pt) {\n        pt.x = Math.round(pt.x * state.view.scale * 10) / 10;\n        pt.y = Math.round(pt.y * state.view.scale * 10) / 10;\n        if (lastPushed == null ||\n            Math.abs(lastPushed.x - pt.x) >= tol ||\n            Math.abs(lastPushed.y - pt.y) >= Math.max(1, state.view.scale)) {\n            result.push(pt);\n            lastPushed = pt;\n        }\n        return lastPushed;\n    }\n    // Adds the first point\n    let pt = pts[0];\n    if (pt == null && source != null) {\n        pt = new Point(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));\n    }\n    else if (pt != null) {\n        pt = pt.clone();\n    }\n    const lastInx = pts.length - 1;\n    let pe = null;\n    // Adds the waypoints\n    if (controlHints != null && controlHints.length > 0) {\n        // Converts all hints and removes nulls\n        let hints = [];\n        for (let i = 0; i < controlHints.length; i += 1) {\n            const tmp = state.view.transformControlPoint(state, controlHints[i], true);\n            if (tmp != null) {\n                hints.push(tmp);\n            }\n        }\n        if (hints.length === 0) {\n            return;\n        }\n        // Aligns source and target hint to fixed points\n        if (pt != null && hints[0] != null) {\n            if (Math.abs(hints[0].x - pt.x) < tol) {\n                hints[0].x = pt.x;\n            }\n            if (Math.abs(hints[0].y - pt.y) < tol) {\n                hints[0].y = pt.y;\n            }\n        }\n        pe = pts[lastInx];\n        if (pe != null && hints[hints.length - 1] != null) {\n            if (Math.abs(hints[hints.length - 1].x - pe.x) < tol) {\n                hints[hints.length - 1].x = pe.x;\n            }\n            if (Math.abs(hints[hints.length - 1].y - pe.y) < tol) {\n                hints[hints.length - 1].y = pe.y;\n            }\n        }\n        hint = hints[0];\n        let currentTerm = source;\n        let currentPt = pts[0];\n        let hozChan = false;\n        let vertChan = false;\n        let currentHint = hint;\n        if (currentPt != null) {\n            currentTerm = null;\n        }\n        // Check for alignment with fixed points and with channels\n        // at source and target segments only\n        for (let i = 0; i < 2; i += 1) {\n            const fixedVertAlign = currentPt != null && currentPt.x === currentHint.x;\n            const fixedHozAlign = currentPt != null && currentPt.y === currentHint.y;\n            const inHozChan = currentTerm != null &&\n                currentHint.y >= currentTerm.y &&\n                currentHint.y <= currentTerm.y + currentTerm.height;\n            const inVertChan = currentTerm != null &&\n                currentHint.x >= currentTerm.x &&\n                currentHint.x <= currentTerm.x + currentTerm.width;\n            hozChan = fixedHozAlign || (currentPt == null && inHozChan);\n            vertChan = fixedVertAlign || (currentPt == null && inVertChan);\n            // If the current hint falls in both the hor and vert channels in the case\n            // of a floating port, or if the hint is exactly co-incident with a\n            // fixed point, ignore the source and try to work out the orientation\n            // from the target end\n            if (!(i == 0 && ((hozChan && vertChan) || (fixedVertAlign && fixedHozAlign)))) {\n                if (currentPt != null &&\n                    !fixedHozAlign &&\n                    !fixedVertAlign &&\n                    (inHozChan || inVertChan)) {\n                    horizontal = !inHozChan;\n                    break;\n                }\n                if (vertChan || hozChan) {\n                    horizontal = hozChan;\n                    if (i === 1) {\n                        // Work back from target end\n                        horizontal = hints.length % 2 === 0 ? hozChan : vertChan;\n                    }\n                    break;\n                }\n            }\n            currentTerm = target;\n            currentPt = pts[lastInx];\n            if (currentPt != null) {\n                currentTerm = null;\n            }\n            currentHint = hints[hints.length - 1];\n            if (fixedVertAlign && fixedHozAlign) {\n                hints = hints.slice(1);\n            }\n        }\n        if (horizontal &&\n            ((pts[0] != null && pts[0].y !== hint.y) ||\n                (pts[0] == null &&\n                    source != null &&\n                    (hint.y < source.y || hint.y > source.y + source.height)))) {\n            pushPoint(new Point(pt.x, hint.y));\n        }\n        else if (!horizontal &&\n            ((pts[0] != null && pts[0].x !== hint.x) ||\n                (pts[0] == null &&\n                    source != null &&\n                    (hint.x < source.x || hint.x > source.x + source.width)))) {\n            pushPoint(new Point(hint.x, pt.y));\n        }\n        if (horizontal) {\n            pt.y = hint.y;\n        }\n        else {\n            pt.x = hint.x;\n        }\n        for (let i = 0; i < hints.length; i += 1) {\n            horizontal = !horizontal;\n            hint = hints[i];\n            if (horizontal) {\n                pt.y = hint.y;\n            }\n            else {\n                pt.x = hint.x;\n            }\n            pushPoint(pt.clone());\n        }\n    }\n    else {\n        hint = pt;\n        // FIXME: First click in connect preview toggles orientation\n        horizontal = true;\n    }\n    // Adds the last point\n    pt = pts[lastInx];\n    if (pt == null && target != null) {\n        pt = new Point(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));\n    }\n    if (pt != null) {\n        if (hint != null) {\n            if (horizontal &&\n                ((pts[lastInx] != null && pts[lastInx].y !== hint.y) ||\n                    (pts[lastInx] == null &&\n                        target != null &&\n                        (hint.y < target.y || hint.y > target.y + target.height)))) {\n                pushPoint(new Point(pt.x, hint.y));\n            }\n            else if (!horizontal &&\n                ((pts[lastInx] != null && pts[lastInx].x !== hint.x) ||\n                    (pts[lastInx] == null &&\n                        target != null &&\n                        (hint.x < target.x || hint.x > target.x + target.width)))) {\n                pushPoint(new Point(hint.x, pt.y));\n            }\n        }\n    }\n    // Removes bends inside the source terminal for floating ports\n    if (pts[0] == null && source != null) {\n        while (result.length > 1 &&\n            result[1] != null &&\n            contains(source, result[1].x, result[1].y)) {\n            result.splice(1, 1);\n        }\n    }\n    // Removes bends inside the target terminal\n    if (pts[lastInx] == null && target != null) {\n        while (result.length > 1 &&\n            result[result.length - 1] != null &&\n            contains(target, result[result.length - 1].x, result[result.length - 1].y)) {\n            result.splice(result.length - 1, 1);\n        }\n    }\n    // Removes last point if inside tolerance with end point\n    if (pe != null &&\n        result[result.length - 1] != null &&\n        Math.abs(pe.x - result[result.length - 1].x) <= tol &&\n        Math.abs(pe.y - result[result.length - 1].y) <= tol) {\n        result.splice(result.length - 1, 1);\n        // Lines up second last point in result with end point\n        if (result[result.length - 1] != null) {\n            if (Math.abs(result[result.length - 1].x - pe.x) < tol) {\n                result[result.length - 1].x = pe.x;\n            }\n            if (Math.abs(result[result.length - 1].y - pe.y) < tol) {\n                result[result.length - 1].y = pe.y;\n            }\n        }\n    }\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { scaleCellState, scalePointArray } from './shared';\nimport { DEFAULT_MARKERSIZE, DIRECTION_MASK, NONE } from '../../../util/Constants';\nimport { getBoundingBox, getPortConstraints, reversePortConstraints, } from '../../../util/mathUtils';\nimport { OrthogonalConnectorConfig } from '../config';\nimport Point from '../../geometry/Point';\nimport Rectangle from '../../geometry/Rectangle';\nimport { SegmentConnector } from './Segment';\nconst dirVectors = [\n    [-1, 0],\n    [0, -1],\n    [1, 0],\n    [0, 1],\n    [-1, 0],\n    [0, -1],\n    [1, 0],\n];\nconst wayPoints1 = [\n    [0, 0],\n    [0, 0],\n    [0, 0],\n    [0, 0],\n    [0, 0],\n    [0, 0],\n    [0, 0],\n    [0, 0],\n    [0, 0],\n    [0, 0],\n    [0, 0],\n    [0, 0],\n];\nconst routePatterns = [\n    [\n        [513, 2308, 2081, 2562],\n        [513, 1090, 514, 2184, 2114, 2561],\n        [513, 1090, 514, 2564, 2184, 2562],\n        [513, 2308, 2561, 1090, 514, 2568, 2308],\n    ],\n    [\n        [514, 1057, 513, 2308, 2081, 2562],\n        [514, 2184, 2114, 2561],\n        [514, 2184, 2562, 1057, 513, 2564, 2184],\n        [514, 1057, 513, 2568, 2308, 2561],\n    ],\n    [\n        [1090, 514, 1057, 513, 2308, 2081, 2562],\n        [2114, 2561],\n        [1090, 2562, 1057, 513, 2564, 2184],\n        [1090, 514, 1057, 513, 2308, 2561, 2568],\n    ],\n    [\n        [2081, 2562],\n        [1057, 513, 1090, 514, 2184, 2114, 2561],\n        [1057, 513, 1090, 514, 2184, 2562, 2564],\n        [1057, 2561, 1090, 514, 2568, 2308],\n    ],\n];\nconst vertexSeparations = [];\nconst limits = [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n];\n// const LEFT_MASK = 32;\n//\n// const TOP_MASK = 64;\n//\n// const RIGHT_MASK = 128;\n//\n// const BOTTOM_MASK = 256;\n//\n// const LEFT = 1;\n//\n// const TOP = 2;\n//\n// const RIGHT = 4;\n//\n// const BOTTOM = 8;\n// TODO remove magic numbers\nconst SIDE_MASK = 480;\n// LEFT_MASK | TOP_MASK | RIGHT_MASK | BOTTOM_MASK,\nconst CENTER_MASK = 512;\nconst SOURCE_MASK = 1024;\nconst TARGET_MASK = 2048;\nconst VERTEX_MASK = 3072;\n// SOURCE_MASK | TARGET_MASK,\nfunction getJettySize(state, isSource) {\n    const buffer = OrthogonalConnectorConfig.buffer;\n    let value = (isSource ? state.style.sourceJettySize : state.style.targetJettySize) ??\n        state.style.jettySize ??\n        buffer;\n    if (value === 'auto') {\n        // Computes the automatic jetty size\n        const type = (isSource ? state.style.startArrow : state.style.endArrow) ?? NONE;\n        if (type !== NONE) {\n            const size = (isSource ? state.style.startSize : state.style.endSize) ?? DEFAULT_MARKERSIZE;\n            value = Math.max(2, Math.ceil((size + buffer) / buffer)) * buffer;\n        }\n        else {\n            value = 2 * buffer;\n        }\n    }\n    return value;\n}\n/**\n * Implements a local orthogonal router between the given cells.\n *\n * This EdgeStyle is registered under `orthogonalEdgeStyle` in {@link EdgeStyleRegistry} when using {@link Graph} or calling {@link registerDefaultEdgeStyles}.\n *\n * **IMPORTANT**: When registering it manually  in {@link EdgeStyleRegistry}, the following metadata must be used:\n * - handlerKind: 'segment'\n * - isOrthogonal: true\n *\n * @param state {@link CellState} that represents the edge to be updated.\n * @param sourceScaled {@link CellState} that represents the source terminal.\n * @param targetScaled {@link CellState} that represents the target terminal.\n * @param controlHints List of relative control {@link Point}s.\n * @param result Array of {@link Point}s that represent the actual points of the edge.\n */\nexport const OrthogonalConnector = (state, sourceScaled, targetScaled, controlHints, result) => {\n    // TODO: Figure out what to do when there are nulls in `pts`!\n    const pts = scalePointArray(state.absolutePoints, state.view.scale);\n    const source = scaleCellState(sourceScaled, state.view.scale);\n    const target = scaleCellState(targetScaled, state.view.scale);\n    const sourceEdge = source == null ? false : source.cell.isEdge();\n    const targetEdge = target == null ? false : target.cell.isEdge();\n    const p0 = pts[0];\n    const pe = pts[pts.length - 1];\n    let sourceX = source != null ? source.x : p0.x;\n    let sourceY = source != null ? source.y : p0.y;\n    let sourceWidth = source != null ? source.width : 0;\n    let sourceHeight = source != null ? source.height : 0;\n    let targetX = target != null ? target.x : pe.x;\n    let targetY = target != null ? target.y : pe.y;\n    let targetWidth = target != null ? target.width : 0;\n    let targetHeight = target != null ? target.height : 0;\n    let sourceBuffer = getJettySize(state, true);\n    let targetBuffer = getJettySize(state, false);\n    // Workaround for loop routing within buffer zone\n    if (source != null && target === source) {\n        targetBuffer = Math.max(sourceBuffer, targetBuffer);\n        sourceBuffer = targetBuffer;\n    }\n    const totalBuffer = targetBuffer + sourceBuffer;\n    let tooShort = false;\n    // Checks minimum distance for fixed points and falls back to segment connector\n    if (p0 != null && pe != null) {\n        const dx = pe.x - p0.x;\n        const dy = pe.y - p0.y;\n        tooShort = dx * dx + dy * dy < totalBuffer * totalBuffer;\n    }\n    if (tooShort ||\n        (OrthogonalConnectorConfig.pointsFallback &&\n            controlHints != null &&\n            controlHints.length > 0) ||\n        sourceEdge ||\n        targetEdge) {\n        SegmentConnector(state, sourceScaled, targetScaled, controlHints, result);\n        return;\n    }\n    // Determine the side(s) of the source and target vertices\n    // that the edge may connect to\n    // portConstraint [source, target]\n    const portConstraint = [DIRECTION_MASK.ALL, DIRECTION_MASK.ALL];\n    let rotation = 0;\n    if (source != null) {\n        portConstraint[0] = getPortConstraints(source, state, true, DIRECTION_MASK.ALL);\n        rotation = source.style.rotation ?? 0;\n        if (rotation !== 0) {\n            const newRect = (getBoundingBox(new Rectangle(sourceX, sourceY, sourceWidth, sourceHeight), rotation));\n            sourceX = newRect.x;\n            sourceY = newRect.y;\n            sourceWidth = newRect.width;\n            sourceHeight = newRect.height;\n        }\n    }\n    if (target != null) {\n        portConstraint[1] = getPortConstraints(target, state, false, DIRECTION_MASK.ALL);\n        rotation = target.style.rotation ?? 0;\n        if (rotation !== 0) {\n            const newRect = (getBoundingBox(new Rectangle(targetX, targetY, targetWidth, targetHeight), rotation));\n            targetX = newRect.x;\n            targetY = newRect.y;\n            targetWidth = newRect.width;\n            targetHeight = newRect.height;\n        }\n    }\n    const dir = [0, 0];\n    // Work out which faces of the vertices present against each other\n    // in a way that would allow a 3-segment connection if port constraints\n    // permitted.\n    // geo -> [source, target] [x, y, width, height]\n    const geo = [\n        [sourceX, sourceY, sourceWidth, sourceHeight],\n        [targetX, targetY, targetWidth, targetHeight],\n    ];\n    const buffer = [sourceBuffer, targetBuffer];\n    for (let i = 0; i < 2; i += 1) {\n        limits[i][1] = geo[i][0] - buffer[i];\n        limits[i][2] = geo[i][1] - buffer[i];\n        limits[i][4] = geo[i][0] + geo[i][2] + buffer[i];\n        limits[i][8] = geo[i][1] + geo[i][3] + buffer[i];\n    }\n    // Work out which quad the target is in\n    const sourceCenX = geo[0][0] + geo[0][2] / 2.0;\n    const sourceCenY = geo[0][1] + geo[0][3] / 2.0;\n    const targetCenX = geo[1][0] + geo[1][2] / 2.0;\n    const targetCenY = geo[1][1] + geo[1][3] / 2.0;\n    const dx = sourceCenX - targetCenX;\n    const dy = sourceCenY - targetCenY;\n    let quad = 0;\n    // 0 | 1\n    // -----\n    // 3 | 2\n    if (dx < 0) {\n        if (dy < 0) {\n            quad = 2;\n        }\n        else {\n            quad = 1;\n        }\n    }\n    else if (dy <= 0) {\n        quad = 3;\n        // Special case on x = 0 and negative y\n        if (dx === 0) {\n            quad = 2;\n        }\n    }\n    // Check for connection constraints\n    let currentTerm = null;\n    if (source != null) {\n        currentTerm = p0;\n    }\n    const constraint = [\n        [0.5, 0.5],\n        [0.5, 0.5],\n    ];\n    for (let i = 0; i < 2; i += 1) {\n        if (currentTerm != null) {\n            constraint[i][0] = (currentTerm.x - geo[i][0]) / geo[i][2];\n            if (Math.abs(currentTerm.x - geo[i][0]) <= 1) {\n                dir[i] = DIRECTION_MASK.WEST;\n            }\n            else if (Math.abs(currentTerm.x - geo[i][0] - geo[i][2]) <= 1) {\n                dir[i] = DIRECTION_MASK.EAST;\n            }\n            constraint[i][1] = (currentTerm.y - geo[i][1]) / geo[i][3];\n            if (Math.abs(currentTerm.y - geo[i][1]) <= 1) {\n                dir[i] = DIRECTION_MASK.NORTH;\n            }\n            else if (Math.abs(currentTerm.y - geo[i][1] - geo[i][3]) <= 1) {\n                dir[i] = DIRECTION_MASK.SOUTH;\n            }\n        }\n        currentTerm = null;\n        if (target != null) {\n            currentTerm = pe;\n        }\n    }\n    const sourceTopDist = geo[0][1] - (geo[1][1] + geo[1][3]);\n    const sourceLeftDist = geo[0][0] - (geo[1][0] + geo[1][2]);\n    const sourceBottomDist = geo[1][1] - (geo[0][1] + geo[0][3]);\n    const sourceRightDist = geo[1][0] - (geo[0][0] + geo[0][2]);\n    vertexSeparations[1] = Math.max(sourceLeftDist - totalBuffer, 0);\n    vertexSeparations[2] = Math.max(sourceTopDist - totalBuffer, 0);\n    vertexSeparations[4] = Math.max(sourceBottomDist - totalBuffer, 0);\n    vertexSeparations[3] = Math.max(sourceRightDist - totalBuffer, 0);\n    //= =============================================================\n    // Start of source and target direction determination\n    // Work through the preferred orientations by relative positioning\n    // of the vertices and list them in preferred and available order\n    const dirPref = [];\n    const horPref = [];\n    const vertPref = [];\n    horPref[0] =\n        sourceLeftDist >= sourceRightDist ? DIRECTION_MASK.WEST : DIRECTION_MASK.EAST;\n    vertPref[0] =\n        sourceTopDist >= sourceBottomDist ? DIRECTION_MASK.NORTH : DIRECTION_MASK.SOUTH;\n    horPref[1] = reversePortConstraints(horPref[0]);\n    vertPref[1] = reversePortConstraints(vertPref[0]);\n    const preferredHorizDist = sourceLeftDist >= sourceRightDist ? sourceLeftDist : sourceRightDist;\n    const preferredVertDist = sourceTopDist >= sourceBottomDist ? sourceTopDist : sourceBottomDist;\n    const prefOrdering = [\n        [0, 0],\n        [0, 0],\n    ];\n    let preferredOrderSet = false;\n    // If the preferred port isn't available, switch it\n    for (let i = 0; i < 2; i += 1) {\n        if (dir[i] !== 0x0) {\n            continue;\n        }\n        if ((horPref[i] & portConstraint[i]) === 0) {\n            horPref[i] = reversePortConstraints(horPref[i]);\n        }\n        if ((vertPref[i] & portConstraint[i]) === 0) {\n            vertPref[i] = reversePortConstraints(vertPref[i]);\n        }\n        prefOrdering[i][0] = vertPref[i];\n        prefOrdering[i][1] = horPref[i];\n    }\n    if (preferredVertDist > 0 && preferredHorizDist > 0) {\n        // Possibility of two segment edge connection\n        if ((horPref[0] & portConstraint[0]) > 0 && (vertPref[1] & portConstraint[1]) > 0) {\n            prefOrdering[0][0] = horPref[0];\n            prefOrdering[0][1] = vertPref[0];\n            prefOrdering[1][0] = vertPref[1];\n            prefOrdering[1][1] = horPref[1];\n            preferredOrderSet = true;\n        }\n        else if ((vertPref[0] & portConstraint[0]) > 0 &&\n            (horPref[1] & portConstraint[1]) > 0) {\n            prefOrdering[0][0] = vertPref[0];\n            prefOrdering[0][1] = horPref[0];\n            prefOrdering[1][0] = horPref[1];\n            prefOrdering[1][1] = vertPref[1];\n            preferredOrderSet = true;\n        }\n    }\n    if (preferredVertDist > 0 && !preferredOrderSet) {\n        prefOrdering[0][0] = vertPref[0];\n        prefOrdering[0][1] = horPref[0];\n        prefOrdering[1][0] = vertPref[1];\n        prefOrdering[1][1] = horPref[1];\n        preferredOrderSet = true;\n    }\n    if (preferredHorizDist > 0 && !preferredOrderSet) {\n        prefOrdering[0][0] = horPref[0];\n        prefOrdering[0][1] = vertPref[0];\n        prefOrdering[1][0] = horPref[1];\n        prefOrdering[1][1] = vertPref[1];\n        preferredOrderSet = true;\n    }\n    // The source and target prefs are now an ordered list of\n    // the preferred port selections\n    // If the list contains gaps, compact it\n    for (let i = 0; i < 2; i += 1) {\n        if (dir[i] !== 0x0) {\n            continue;\n        }\n        if ((prefOrdering[i][0] & portConstraint[i]) === 0) {\n            prefOrdering[i][0] = prefOrdering[i][1];\n        }\n        dirPref[i] = prefOrdering[i][0] & portConstraint[i];\n        dirPref[i] |= (prefOrdering[i][1] & portConstraint[i]) << 8;\n        dirPref[i] |= (prefOrdering[1 - i][i] & portConstraint[i]) << 16;\n        dirPref[i] |= (prefOrdering[1 - i][1 - i] & portConstraint[i]) << 24;\n        if ((dirPref[i] & 0xf) === 0) {\n            dirPref[i] = dirPref[i] << 8;\n        }\n        if ((dirPref[i] & 0xf00) === 0) {\n            dirPref[i] = (dirPref[i] & 0xf) | (dirPref[i] >> 8);\n        }\n        if ((dirPref[i] & 0xf0000) === 0) {\n            dirPref[i] = (dirPref[i] & 0xffff) | ((dirPref[i] & 0xf000000) >> 8);\n        }\n        dir[i] = dirPref[i] & 0xf;\n        if (portConstraint[i] === DIRECTION_MASK.WEST ||\n            portConstraint[i] === DIRECTION_MASK.NORTH ||\n            portConstraint[i] === DIRECTION_MASK.EAST ||\n            portConstraint[i] === DIRECTION_MASK.SOUTH) {\n            dir[i] = portConstraint[i];\n        }\n    }\n    //= =============================================================\n    // End of source and target direction determination\n    let sourceIndex = dir[0] === DIRECTION_MASK.EAST ? 3 : dir[0];\n    let targetIndex = dir[1] === DIRECTION_MASK.EAST ? 3 : dir[1];\n    sourceIndex -= quad;\n    targetIndex -= quad;\n    if (sourceIndex < 1) {\n        sourceIndex += 4;\n    }\n    if (targetIndex < 1) {\n        targetIndex += 4;\n    }\n    const routePattern = routePatterns[sourceIndex - 1][targetIndex - 1];\n    wayPoints1[0][0] = geo[0][0];\n    wayPoints1[0][1] = geo[0][1];\n    switch (dir[0]) {\n        case DIRECTION_MASK.WEST:\n            wayPoints1[0][0] -= sourceBuffer;\n            wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n            break;\n        case DIRECTION_MASK.SOUTH:\n            wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n            wayPoints1[0][1] += geo[0][3] + sourceBuffer;\n            break;\n        case DIRECTION_MASK.EAST:\n            wayPoints1[0][0] += geo[0][2] + sourceBuffer;\n            wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n            break;\n        case DIRECTION_MASK.NORTH:\n            wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n            wayPoints1[0][1] -= sourceBuffer;\n            break;\n    }\n    let currentIndex = 0;\n    // Orientation, 0 horizontal, 1 vertical\n    let lastOrientation = (dir[0] & (DIRECTION_MASK.EAST | DIRECTION_MASK.WEST)) > 0 ? 0 : 1;\n    const initialOrientation = lastOrientation;\n    let currentOrientation = 0;\n    for (let i = 0; i < routePattern.length; i += 1) {\n        const nextDirection = routePattern[i] & 0xf;\n        // Rotate the index of this direction by the quad\n        // to get the real direction\n        let directionIndex = nextDirection === DIRECTION_MASK.EAST ? 3 : nextDirection;\n        directionIndex += quad;\n        if (directionIndex > 4) {\n            directionIndex -= 4;\n        }\n        const direction = dirVectors[directionIndex - 1];\n        currentOrientation = directionIndex % 2 > 0 ? 0 : 1;\n        // Only update the current index if the point moved\n        // in the direction of the current segment move,\n        // otherwise the same point is moved until there is\n        // a segment direction change\n        if (currentOrientation !== lastOrientation) {\n            currentIndex++;\n            // Copy the previous way point into the new one\n            // We can't base the new position on index - 1\n            // because sometime elbows turn out not to exist,\n            // then we'd have to rewind.\n            wayPoints1[currentIndex][0] = wayPoints1[currentIndex - 1][0];\n            wayPoints1[currentIndex][1] = wayPoints1[currentIndex - 1][1];\n        }\n        const tar = (routePattern[i] & TARGET_MASK) > 0;\n        const sou = (routePattern[i] & SOURCE_MASK) > 0;\n        let side = (routePattern[i] & SIDE_MASK) >> 5;\n        side <<= quad;\n        if (side > 0xf) {\n            side >>= 4;\n        }\n        const center = (routePattern[i] & CENTER_MASK) > 0;\n        if ((sou || tar) && side < 9) {\n            let limit = 0;\n            const souTar = sou ? 0 : 1;\n            if (center && currentOrientation === 0) {\n                limit = geo[souTar][0] + constraint[souTar][0] * geo[souTar][2];\n            }\n            else if (center) {\n                limit = geo[souTar][1] + constraint[souTar][1] * geo[souTar][3];\n            }\n            else {\n                limit = limits[souTar][side];\n            }\n            if (currentOrientation === 0) {\n                const lastX = wayPoints1[currentIndex][0];\n                const deltaX = (limit - lastX) * direction[0];\n                if (deltaX > 0) {\n                    wayPoints1[currentIndex][0] += direction[0] * deltaX;\n                }\n            }\n            else {\n                const lastY = wayPoints1[currentIndex][1];\n                const deltaY = (limit - lastY) * direction[1];\n                if (deltaY > 0) {\n                    wayPoints1[currentIndex][1] += direction[1] * deltaY;\n                }\n            }\n        }\n        else if (center) {\n            // Which center we're travelling to depend on the current direction\n            wayPoints1[currentIndex][0] +=\n                direction[0] * Math.abs(vertexSeparations[directionIndex] / 2);\n            wayPoints1[currentIndex][1] +=\n                direction[1] * Math.abs(vertexSeparations[directionIndex] / 2);\n        }\n        if (currentIndex > 0 &&\n            wayPoints1[currentIndex][currentOrientation] ===\n                wayPoints1[currentIndex - 1][currentOrientation]) {\n            currentIndex--;\n        }\n        else {\n            lastOrientation = currentOrientation;\n        }\n    }\n    for (let i = 0; i <= currentIndex; i += 1) {\n        if (i === currentIndex) {\n            // Last point can cause last segment to be in\n            // same direction as jetty/approach. If so,\n            // check the number of points is consistent\n            // with the relative orientation of source and target\n            // jx. Same orientation requires an even\n            // number of turns (points), different requires\n            // odd.\n            const targetOrientation = (dir[1] & (DIRECTION_MASK.EAST | DIRECTION_MASK.WEST)) > 0 ? 0 : 1;\n            const sameOrient = targetOrientation === initialOrientation ? 0 : 1;\n            // (currentIndex + 1) % 2 is 0 for even number of points,\n            // 1 for odd\n            if (sameOrient !== (currentIndex + 1) % 2) {\n                // The last point isn't required\n                break;\n            }\n        }\n        result.push(new Point(Math.round(wayPoints1[i][0] * state.view.scale * 10) / 10, Math.round(wayPoints1[i][1] * state.view.scale * 10) / 10));\n    }\n    // Removes duplicates\n    let index = 1;\n    while (index < result.length) {\n        if (result[index - 1] == null ||\n            result[index] == null ||\n            result[index - 1].x !== result[index].x ||\n            result[index - 1].y !== result[index].y) {\n            index++;\n        }\n        else {\n            result.splice(index, 1);\n        }\n    }\n};\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\nimport Rectangle from '../../geometry/Rectangle';\nimport { ManhattanConnectorConfig } from '../config';\nimport Geometry from '../../geometry/Geometry';\nimport { OrthogonalConnector } from './Orthogonal';\nimport { SegmentConnector } from './Segment';\n/**\n * ManhattanConnector code is based on code from https://github.com/mwangm/mxgraph-manhattan-connector\n *\n * Implements router to find the shortest route that avoids cells using manhattan distance as metric.\n *\n * This EdgeStyle is registered under `manhattanEdgeStyle` in {@link EdgeStyleRegistry} when using {@link Graph} or calling {@link registerDefaultEdgeStyles}.\n *\n * **IMPORTANT**: When registering it manually  in {@link EdgeStyleRegistry}, the following metadata must be used:\n * - handlerKind: 'segment'\n * - isOrthogonal: true\n */\nexport const ManhattanConnector = (state, source, target, points, result) => {\n    /**\n     * Adds all values from source geometry to target.\n     * Used to create padding box around cell geometry.\n     * @param target\n     * @param source\n     * @returns\n     */\n    function moveAndExpand(target, source) {\n        target.x += source.x || 0;\n        target.y += source.y || 0;\n        target.width += source.width || 0;\n        target.height += source.height || 0;\n        return target;\n    }\n    function snapCoordinateToGrid(value, gridSize) {\n        return gridSize * Math.round(value / gridSize);\n    }\n    function snapPointToGrid(p, gx, gy) {\n        p.x = snapCoordinateToGrid(p.x, gx);\n        p.y = snapCoordinateToGrid(p.y, gy || gx);\n        return p;\n    }\n    function isPointInRectangle(rect, p) {\n        return (p.x >= rect.x &&\n            p.x <= rect.x + rect.width &&\n            p.y >= rect.y &&\n            p.y <= rect.y + rect.height);\n    }\n    function getRectangleCenter(rect) {\n        return new Point(rect.x + rect.width / 2, rect.y + rect.height / 2);\n    }\n    function getDifferencePoint(p1, p2) {\n        return new Point(p1.x - p2.x, p1.y - p2.y);\n    }\n    function movePoint(p, moveX, moveY) {\n        p.x += moveX || 0;\n        p.y += moveY || 0;\n        return p;\n    }\n    function getPointTheta(p1, p2) {\n        const p = p2.clone();\n        const y = -(p.y - p1.y);\n        const x = p.x - p1.x;\n        const PRECISION = 10;\n        const rad = y.toFixed(PRECISION) == '0' && x.toFixed(PRECISION) == '0' ? 0 : Math.atan2(y, x);\n        return (180 * rad) / Math.PI;\n    }\n    function normalizePoint(point) {\n        return new Point(point.x === 0 ? 0 : Math.abs(point.x) / point.x, point.y === 0 ? 0 : Math.abs(point.y) / point.y);\n    }\n    function getManhattanDistance(p1, p2) {\n        return Math.abs(p2.x - p1.x) + Math.abs(p2.y - p1.y);\n    }\n    function toPointFromString(pointString) {\n        const xy = pointString.split(pointString.indexOf('@') === -1 ? ' ' : '@');\n        return new Point(parseInt(xy[0], 10), parseInt(xy[1], 10));\n    }\n    function pointToString(point) {\n        return `${point.x}@${point.y}`;\n    }\n    function getCellAbsoluteBounds(cellState) {\n        const graph = cellState.view.graph;\n        const cellBounds = graph.getCellBounds(cellState.cell, false, false)?.clone();\n        if (!cellBounds)\n            return undefined;\n        const view = graph.view;\n        const { scale, translate } = view;\n        const { x, y } = translate;\n        const round = (v) => Math.round(v * 10) / 10;\n        const res = new Rectangle(round(cellBounds.x / scale - x), round(cellBounds.y / scale - y), round(cellBounds.width / scale), round(cellBounds.height / scale));\n        return res;\n    }\n    const mStep = ManhattanConnectorConfig.step;\n    const config = {\n        // Padding applied on the element bounding boxes\n        paddingBox: new Geometry(-mStep, -mStep, mStep * 2, mStep * 2),\n        // An array of directions to find next points on the route\n        directions: [\n            {\n                offsetX: mStep,\n                offsetY: 0,\n                cost: mStep,\n                angle: normalizeAngle(getPointTheta(new Point(0, 0), new Point(mStep, 0))),\n            },\n            {\n                offsetX: 0,\n                offsetY: mStep,\n                cost: mStep,\n                angle: normalizeAngle(getPointTheta(new Point(0, 0), new Point(0, mStep))),\n            },\n            {\n                offsetX: -mStep,\n                offsetY: 0,\n                cost: mStep,\n                angle: normalizeAngle(getPointTheta(new Point(0, 0), new Point(-mStep, 0))),\n            },\n            {\n                offsetX: 0,\n                offsetY: -mStep,\n                cost: mStep,\n                angle: normalizeAngle(getPointTheta(new Point(0, 0), new Point(0, -mStep))),\n            },\n        ],\n        directionMap: {\n            east: { x: 1, y: 0 },\n            south: { x: 0, y: 1 },\n            west: { x: -1, y: 0 },\n            north: { x: 0, y: -1 },\n        },\n        // A penalty received for direction change\n        penaltiesGenerator: (angle) => {\n            if (angle == 45 || angle == 90 || angle == 180)\n                return mStep / 2;\n            return 0;\n        },\n        // If a function is provided, it's used to route the link while dragging an end\n        // i.e. function(from, to, opts) { return []; }\n        draggingRoute: null,\n        previousDirAngle: 0,\n    };\n    /**\n     * Map of obstacles\n     * Helper structure to identify whether a point lies in an obstacle.\n     */\n    class ObstacleMap {\n        constructor(opt) {\n            this.options = opt;\n            this.mapGridSize = 100;\n            this.map = new Map();\n        }\n        // Builds a map of all elements for quicker obstacle queries\n        // The svg is divided to  cells, where each of them holds an information which\n        // elements belong to it. When we query whether a point is in an obstacle we don't need\n        // to go through all obstacles, we check only those in a particular cell.\n        build(source, target) {\n            const graph = source?.view.graph || target?.view.graph;\n            if (!graph)\n                return;\n            return Array.from(graph.getView().getCellStates())\n                .filter((s) => s.cell && s.cell.isVertex() && !s.cell.isEdge())\n                .map((s) => getCellAbsoluteBounds(s))\n                .map((bbox) => (bbox ? moveAndExpand(bbox, this.options.paddingBox) : null))\n                .forEach((bbox) => {\n                if (!bbox)\n                    return;\n                const origin = snapPointToGrid(new Point(bbox.x, bbox.y), this.mapGridSize);\n                const corner = snapPointToGrid(new Point(bbox.x + bbox.width, bbox.y + bbox.height), this.mapGridSize);\n                for (let x = origin.x; x <= corner.x; x += this.mapGridSize) {\n                    for (let y = origin.y; y <= corner.y; y += this.mapGridSize) {\n                        const gridKey = x + '@' + y;\n                        const rectArr = this.map.get(gridKey) || [];\n                        if (!this.map.has(gridKey))\n                            this.map.set(gridKey, rectArr);\n                        rectArr.push(bbox);\n                    }\n                }\n            });\n        }\n        isPointAccessible(point) {\n            const mapKey = pointToString(snapPointToGrid(point.clone(), this.mapGridSize));\n            const obstacles = this.map.get(mapKey);\n            if (obstacles) {\n                return obstacles.every((obstacle) => !isPointInRectangle(obstacle, point));\n            }\n            return true;\n        }\n    }\n    class SortedSet {\n        constructor() {\n            this.items = [];\n            this.hash = new Map();\n        }\n        add(key, value) {\n            const hashItem = this.hash.get(key);\n            if (hashItem) {\n                hashItem.value = value;\n                this.items.splice(this.items.indexOf(key), 1);\n            }\n            else {\n                this.hash.set(key, {\n                    value,\n                    open: true,\n                });\n            }\n            this.items.push(key);\n            this.items.sort((i1, i2) => {\n                const hashItem1 = this.hash.get(i1);\n                const hashItem2 = this.hash.get(i2);\n                if (!hashItem1 || !hashItem2)\n                    return 0;\n                return hashItem1.value - hashItem2.value;\n            });\n        }\n        remove(key) {\n            const hashItem = this.hash.get(key);\n            if (hashItem)\n                hashItem.open = false;\n        }\n        isOpen(key) {\n            const hashItem = this.hash.get(key);\n            return hashItem && hashItem.open == true;\n        }\n        isClose(key) {\n            const hashItem = this.hash.get(key);\n            return hashItem && hashItem.open == false;\n        }\n        isEmpty() {\n            return this.items.length == 0;\n        }\n        pop() {\n            const key = this.items.shift();\n            if (key)\n                this.remove(key);\n            return key;\n        }\n    }\n    function reconstructRoute(parents, endPoint, startCenter, endCenter) {\n        const route = [];\n        let previousDirection = normalizePoint(getDifferencePoint(endCenter, endPoint));\n        let current = endPoint;\n        let parent;\n        while (parents[pointToString(current)]) {\n            parent = parents[pointToString(current)];\n            if (!parent)\n                continue;\n            const direction = normalizePoint(getDifferencePoint(current, parent));\n            // Add point in when direction change\n            if (!direction.equals(previousDirection)) {\n                route.unshift(current);\n                previousDirection = direction;\n            }\n            current = parent;\n        }\n        const startDirection = normalizePoint(getDifferencePoint(current, startCenter));\n        if (!startDirection.equals(previousDirection)) {\n            route.unshift(current);\n        }\n        return route;\n    }\n    function getRectPoints(bbox, directions, opt) {\n        const step = ManhattanConnectorConfig.step;\n        const center = getRectangleCenter(bbox);\n        const res = [];\n        for (const direction of directions) {\n            const directionPoint = opt.directionMap[direction];\n            const x = (directionPoint.x * bbox.width) / 2;\n            const y = (directionPoint.y * bbox.height) / 2;\n            const point = movePoint(center.clone(), x, y);\n            if (isPointInRectangle(bbox, point)) {\n                movePoint(point, directionPoint.x * step, directionPoint.y * step);\n            }\n            res.push(snapPointToGrid(point, step));\n        }\n        return res;\n    }\n    function normalizeAngle(angle) {\n        return (angle % 360) + (angle < 0 ? 360 : 0);\n    }\n    function getDirectionAngle(start, end, directionLength) {\n        const q = 360 / directionLength;\n        return Math.floor(normalizeAngle(getPointTheta(start, end) + q / 2) / q) * q;\n    }\n    function getDirectionChange(angle1, angle2) {\n        const dirChange = Math.abs(angle1 - angle2);\n        return dirChange > 180 ? 360 - dirChange : dirChange;\n    }\n    function estimateCost(from, endPoints) {\n        let min = Infinity;\n        for (let i = 0, len = endPoints.length; i < len; i++) {\n            const cost = getManhattanDistance(from, endPoints[i]);\n            if (cost < min)\n                min = cost;\n        }\n        return min;\n    }\n    function alignPointToCell(point, edgeState, cellState, isSourceCell) {\n        const cellBounds = getCellAbsoluteBounds(cellState);\n        const y = isSourceCell ? edgeState.style.exitY : edgeState.style.entryY;\n        const onlyHorizontalDirections = isSourceCell\n            ? ManhattanConnectorConfig.startDirections.every((d) => d != 'north' && d != 'south')\n            : ManhattanConnectorConfig.endDirections.every((d) => d != 'north' && d != 'south');\n        if (y != undefined && onlyHorizontalDirections) {\n            const cellHeight = cellBounds?.height || 0;\n            point.y =\n                cellBounds?.y != undefined\n                    ? cellBounds?.y + cellHeight * y\n                    : point.y - cellHeight / 2 + cellHeight * y;\n        }\n        const x = isSourceCell ? edgeState.style.exitX : edgeState.style.entryX;\n        const onlyVerticalDirections = isSourceCell\n            ? ManhattanConnectorConfig.startDirections.every((d) => d != 'west' && d != 'east')\n            : ManhattanConnectorConfig.endDirections.every((d) => d != 'west' && d != 'east');\n        if (x != undefined && onlyVerticalDirections) {\n            const cellWidth = cellBounds?.width || 0;\n            point.x =\n                cellBounds?.x != undefined\n                    ? cellBounds?.x + cellWidth * x\n                    : point.x - cellWidth / 2 + cellWidth * (x || 0);\n        }\n    }\n    function findRoute(start, end, obstacleMap, opt) {\n        // Calculate start points and end points\n        const step = ManhattanConnectorConfig.step;\n        const startPoints = getRectPoints(start, ManhattanConnectorConfig.startDirections, opt).filter((p) => obstacleMap.isPointAccessible(p));\n        const startCenter = snapPointToGrid(getRectangleCenter(start), step);\n        const endPoints = getRectPoints(end, ManhattanConnectorConfig.endDirections, opt).filter((p) => obstacleMap.isPointAccessible(p));\n        const endCenter = snapPointToGrid(getRectangleCenter(end), step);\n        if (startPoints.length > 0 && endPoints.length > 0) {\n            // The set of possible  points to be evaluated, initially containing the start points.\n            const openSet = new SortedSet();\n            // Keeps predecessor of given element.\n            const parents = {};\n            // Cost from start to a point along best known path.\n            const costs = {};\n            startPoints.forEach((p) => {\n                const key = pointToString(p);\n                openSet.add(key, estimateCost(p, endPoints));\n                costs[key] = 0;\n            });\n            let loopsRemain = ManhattanConnectorConfig.maxLoops;\n            const endPointsKeys = endPoints.map((p) => pointToString(p));\n            let currentDirectionAngle;\n            let previousDirectionAngle;\n            // Main route finding loop\n            while (!openSet.isEmpty() && loopsRemain > 0) {\n                const currentKey = openSet.pop();\n                if (currentKey == undefined) {\n                    continue;\n                }\n                const currentPoint = toPointFromString(currentKey);\n                const currentCost = costs[currentKey];\n                previousDirectionAngle = currentDirectionAngle;\n                currentDirectionAngle = parents[currentKey]\n                    ? getDirectionAngle(parents[currentKey], currentPoint, opt.directions.length)\n                    : opt.previousDirAngle != 0\n                        ? opt.previousDirAngle\n                        : getDirectionAngle(startCenter, currentPoint, opt.directions.length);\n                // if get the endpoint\n                if (endPointsKeys.indexOf(currentKey) >= 0) {\n                    // stop route to enter the end point in opposite direction.\n                    const directionChangedAngle = getDirectionChange(currentDirectionAngle, getDirectionAngle(currentPoint, endCenter, opt.directions.length));\n                    if (currentPoint.equals(endCenter) || directionChangedAngle < 180) {\n                        opt.previousDirAngle = currentDirectionAngle;\n                        return reconstructRoute(parents, currentPoint, startCenter, endCenter);\n                    }\n                }\n                // Go over all possible directions and find neighbors.\n                for (let i = 0; i < opt.directions.length; i++) {\n                    const direction = opt.directions[i];\n                    const directionChangedAngle = getDirectionChange(currentDirectionAngle, direction.angle);\n                    if (previousDirectionAngle &&\n                        directionChangedAngle > ManhattanConnectorConfig.maxAllowedDirectionChange) {\n                        continue;\n                    }\n                    const neighborPoint = movePoint(currentPoint.clone(), direction.offsetX, direction.offsetY);\n                    const neighborKey = pointToString(neighborPoint);\n                    if (openSet.isClose(neighborKey) ||\n                        !obstacleMap.isPointAccessible(neighborPoint)) {\n                        continue;\n                    }\n                    const costFromStart = currentCost + direction.cost + opt.penaltiesGenerator(directionChangedAngle);\n                    if (!openSet.isOpen(neighborKey) || costFromStart < costs[neighborKey]) {\n                        // Neighbor point has not been processed yet or the cost of the path\n                        // from start is lesser than previously calcluated.\n                        parents[neighborKey] = currentPoint;\n                        costs[neighborKey] = costFromStart;\n                        openSet.add(neighborKey, costFromStart + estimateCost(neighborPoint, endPoints));\n                    }\n                }\n                loopsRemain--;\n            }\n            return null;\n        }\n        return null;\n    }\n    function router(state, source, target, points, result, opt) {\n        // If edge is dragged after calculation, points will be filled, so fallback to SegmentConnector\n        if ((points != null && points.length > 0) || source == null || target == null) {\n            SegmentConnector(state, source, target, points, result);\n            return;\n        }\n        let sourceBBox = getCellAbsoluteBounds(source);\n        sourceBBox = sourceBBox ? moveAndExpand(sourceBBox, opt.paddingBox) : undefined;\n        let targetBBox = getCellAbsoluteBounds(target);\n        targetBBox = targetBBox ? moveAndExpand(targetBBox, opt.paddingBox) : undefined;\n        const obstacleMap = new ObstacleMap(opt);\n        obstacleMap.build(source, target);\n        if (!sourceBBox || !targetBBox) {\n            // Fallback to OrthogonalConnector\n            return OrthogonalConnector(state, source, target, points, result);\n        }\n        const routePoints = findRoute(sourceBBox, targetBBox, obstacleMap, opt);\n        if (routePoints == null || routePoints.length == 0) {\n            // Fallback to OrthogonalConnector\n            return OrthogonalConnector(state, source, target, points, result);\n        }\n        if (state.style) {\n            if (state.visibleSourceState && routePoints.length > 0) {\n                // If there are at least one point, align it to source cell\n                alignPointToCell(routePoints[0], state, state.visibleSourceState, true);\n            }\n            if (state.visibleTargetState && routePoints.length > 1) {\n                // If there are more than one point, align last point to target cell\n                alignPointToCell(routePoints[routePoints.length - 1], state, state.visibleTargetState, false);\n            }\n        }\n        // Scaling and translating result points\n        const scale = state.view.scale;\n        routePoints.forEach((pt) => result.push(new Point(Math.round((pt.x + state.view.translate.x) * scale * 10) / 10, Math.round((pt.y + state.view.translate.y) * scale * 10) / 10)));\n    }\n    router(state, source, target, points, result, config);\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\n/**\n * This perimeter is registered under `ellipsePerimeter` in {@link PerimeterRegistry} when using {@link Graph} or calling {@link registerDefaultPerimeters}.\n *\n * @category Perimeter\n */\nexport const EllipsePerimeter = (bounds, _vertex, next, orthogonal = false) => {\n    const { x } = bounds;\n    const { y } = bounds;\n    const a = bounds.width / 2;\n    const b = bounds.height / 2;\n    const cx = x + a;\n    const cy = y + b;\n    const px = next.x;\n    const py = next.y;\n    // Calculates straight line equation through\n    // point and ellipse center y = d * x + h\n    const dx = parseInt(String(px - cx));\n    const dy = parseInt(String(py - cy));\n    if (dx === 0 && dy !== 0) {\n        return new Point(cx, cy + (b * dy) / Math.abs(dy));\n    }\n    if (dx === 0 && dy === 0) {\n        return new Point(px, py);\n    }\n    if (orthogonal) {\n        if (py >= y && py <= y + bounds.height) {\n            const ty = py - cy;\n            let tx = Math.sqrt(a * a * (1 - (ty * ty) / (b * b))) || 0;\n            if (px <= x) {\n                tx = -tx;\n            }\n            return new Point(cx + tx, py);\n        }\n        if (px >= x && px <= x + bounds.width) {\n            const tx = px - cx;\n            let ty = Math.sqrt(b * b * (1 - (tx * tx) / (a * a))) || 0;\n            if (py <= y) {\n                ty = -ty;\n            }\n            return new Point(px, cy + ty);\n        }\n    }\n    // Calculates intersection\n    const d = dy / dx;\n    const h = cy - d * cx;\n    const e = a * a * d * d + b * b;\n    const f = -2 * cx * e;\n    const g = a * a * d * d * cx * cx + b * b * cx * cx - a * a * b * b;\n    const det = Math.sqrt(f * f - 4 * e * g);\n    // Two solutions (perimeter points)\n    const xout1 = (-f + det) / (2 * e);\n    const xout2 = (-f - det) / (2 * e);\n    const yout1 = d * xout1 + h;\n    const yout2 = d * xout2 + h;\n    const dist1 = Math.sqrt(Math.pow(xout1 - px, 2) + Math.pow(yout1 - py, 2));\n    const dist2 = Math.sqrt(Math.pow(xout2 - px, 2) + Math.pow(yout2 - py, 2));\n    // Correct solution\n    let xout = 0;\n    let yout = 0;\n    if (dist1 < dist2) {\n        xout = xout1;\n        yout = yout1;\n    }\n    else {\n        xout = xout2;\n        yout = yout2;\n    }\n    return new Point(xout, yout);\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\nimport { intersection } from '../../../util/mathUtils';\n/**\n * This perimeter is registered under `hexagonPerimeter` in {@link PerimeterRegistry} when using {@link Graph} or calling {@link registerDefaultPerimeters}.\n *\n * @category Perimeter\n */\nexport const HexagonPerimeter = (bounds, vertex, next, orthogonal = false) => {\n    const { x } = bounds;\n    const { y } = bounds;\n    const w = bounds.width;\n    const h = bounds.height;\n    const cx = bounds.getCenterX();\n    const cy = bounds.getCenterY();\n    const px = next.x;\n    const py = next.y;\n    const dx = px - cx;\n    const dy = py - cy;\n    const alpha = -Math.atan2(dy, dx);\n    const pi = Math.PI;\n    const pi2 = Math.PI / 2;\n    let result = new Point(cx, cy);\n    const direction = vertex?.style?.direction ?? 'east';\n    const vertical = direction === 'north' || direction === 'south';\n    let a = new Point();\n    let b = new Point();\n    // Only consider corrects quadrants for the orthogonal case.\n    if ((px < x && py < y) ||\n        (px < x && py > y + h) ||\n        (px > x + w && py < y) ||\n        (px > x + w && py > y + h)) {\n        orthogonal = false;\n    }\n    if (orthogonal) {\n        if (vertical) {\n            // Special cases where intersects with hexagon corners\n            if (px === cx) {\n                if (py <= y) {\n                    return new Point(cx, y);\n                }\n                if (py >= y + h) {\n                    return new Point(cx, y + h);\n                }\n            }\n            else if (px < x) {\n                if (py === y + h / 4) {\n                    return new Point(x, y + h / 4);\n                }\n                if (py === y + (3 * h) / 4) {\n                    return new Point(x, y + (3 * h) / 4);\n                }\n            }\n            else if (px > x + w) {\n                if (py === y + h / 4) {\n                    return new Point(x + w, y + h / 4);\n                }\n                if (py === y + (3 * h) / 4) {\n                    return new Point(x + w, y + (3 * h) / 4);\n                }\n            }\n            else if (px === x) {\n                if (py < cy) {\n                    return new Point(x, y + h / 4);\n                }\n                if (py > cy) {\n                    return new Point(x, y + (3 * h) / 4);\n                }\n            }\n            else if (px === x + w) {\n                if (py < cy) {\n                    return new Point(x + w, y + h / 4);\n                }\n                if (py > cy) {\n                    return new Point(x + w, y + (3 * h) / 4);\n                }\n            }\n            if (py === y) {\n                return new Point(cx, y);\n            }\n            if (py === y + h) {\n                return new Point(cx, y + h);\n            }\n            if (px < cx) {\n                if (py > y + h / 4 && py < y + (3 * h) / 4) {\n                    a = new Point(x, y);\n                    b = new Point(x, y + h);\n                }\n                else if (py < y + h / 4) {\n                    a = new Point(x - Math.floor(0.5 * w), y + Math.floor(0.5 * h));\n                    b = new Point(x + w, y - Math.floor(0.25 * h));\n                }\n                else if (py > y + (3 * h) / 4) {\n                    a = new Point(x - Math.floor(0.5 * w), y + Math.floor(0.5 * h));\n                    b = new Point(x + w, y + Math.floor(1.25 * h));\n                }\n            }\n            else if (px > cx) {\n                if (py > y + h / 4 && py < y + (3 * h) / 4) {\n                    a = new Point(x + w, y);\n                    b = new Point(x + w, y + h);\n                }\n                else if (py < y + h / 4) {\n                    a = new Point(x, y - Math.floor(0.25 * h));\n                    b = new Point(x + Math.floor(1.5 * w), y + Math.floor(0.5 * h));\n                }\n                else if (py > y + (3 * h) / 4) {\n                    a = new Point(x + Math.floor(1.5 * w), y + Math.floor(0.5 * h));\n                    b = new Point(x, y + Math.floor(1.25 * h));\n                }\n            }\n        }\n        else {\n            // Special cases where intersects with hexagon corners\n            if (py === cy) {\n                if (px <= x) {\n                    return new Point(x, y + h / 2);\n                }\n                if (px >= x + w) {\n                    return new Point(x + w, y + h / 2);\n                }\n            }\n            else if (py < y) {\n                if (px === x + w / 4) {\n                    return new Point(x + w / 4, y);\n                }\n                if (px === x + (3 * w) / 4) {\n                    return new Point(x + (3 * w) / 4, y);\n                }\n            }\n            else if (py > y + h) {\n                if (px === x + w / 4) {\n                    return new Point(x + w / 4, y + h);\n                }\n                if (px === x + (3 * w) / 4) {\n                    return new Point(x + (3 * w) / 4, y + h);\n                }\n            }\n            else if (py === y) {\n                if (px < cx) {\n                    return new Point(x + w / 4, y);\n                }\n                if (px > cx) {\n                    return new Point(x + (3 * w) / 4, y);\n                }\n            }\n            else if (py === y + h) {\n                if (px < cx) {\n                    return new Point(x + w / 4, y + h);\n                }\n                if (py > cy) {\n                    return new Point(x + (3 * w) / 4, y + h);\n                }\n            }\n            if (px === x) {\n                return new Point(x, cy);\n            }\n            if (px === x + w) {\n                return new Point(x + w, cy);\n            }\n            if (py < cy) {\n                if (px > x + w / 4 && px < x + (3 * w) / 4) {\n                    a = new Point(x, y);\n                    b = new Point(x + w, y);\n                }\n                else if (px < x + w / 4) {\n                    a = new Point(x - Math.floor(0.25 * w), y + h);\n                    b = new Point(x + Math.floor(0.5 * w), y - Math.floor(0.5 * h));\n                }\n                else if (px > x + (3 * w) / 4) {\n                    a = new Point(x + Math.floor(0.5 * w), y - Math.floor(0.5 * h));\n                    b = new Point(x + Math.floor(1.25 * w), y + h);\n                }\n            }\n            else if (py > cy) {\n                if (px > x + w / 4 && px < x + (3 * w) / 4) {\n                    a = new Point(x, y + h);\n                    b = new Point(x + w, y + h);\n                }\n                else if (px < x + w / 4) {\n                    a = new Point(x - Math.floor(0.25 * w), y);\n                    b = new Point(x + Math.floor(0.5 * w), y + Math.floor(1.5 * h));\n                }\n                else if (px > x + (3 * w) / 4) {\n                    a = new Point(x + Math.floor(0.5 * w), y + Math.floor(1.5 * h));\n                    b = new Point(x + Math.floor(1.25 * w), y);\n                }\n            }\n        }\n        let tx = cx;\n        let ty = cy;\n        if (px >= x && px <= x + w) {\n            tx = px;\n            if (py < cy) {\n                ty = y + h;\n            }\n            else {\n                ty = y;\n            }\n        }\n        else if (py >= y && py <= y + h) {\n            ty = py;\n            if (px < cx) {\n                tx = x + w;\n            }\n            else {\n                tx = x;\n            }\n        }\n        result = intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);\n    }\n    else {\n        if (vertical) {\n            const beta = Math.atan2(h / 4, w / 2);\n            // Special cases where intersects with hexagon corners\n            if (alpha === beta) {\n                return new Point(x + w, y + Math.floor(0.25 * h));\n            }\n            if (alpha === pi2) {\n                return new Point(x + Math.floor(0.5 * w), y);\n            }\n            if (alpha === pi - beta) {\n                return new Point(x, y + Math.floor(0.25 * h));\n            }\n            if (alpha === -beta) {\n                return new Point(x + w, y + Math.floor(0.75 * h));\n            }\n            if (alpha === -pi2) {\n                return new Point(x + Math.floor(0.5 * w), y + h);\n            }\n            if (alpha === -pi + beta) {\n                return new Point(x, y + Math.floor(0.75 * h));\n            }\n            if (alpha < beta && alpha > -beta) {\n                a = new Point(x + w, y);\n                b = new Point(x + w, y + h);\n            }\n            else if (alpha > beta && alpha < pi2) {\n                a = new Point(x, y - Math.floor(0.25 * h));\n                b = new Point(x + Math.floor(1.5 * w), y + Math.floor(0.5 * h));\n            }\n            else if (alpha > pi2 && alpha < pi - beta) {\n                a = new Point(x - Math.floor(0.5 * w), y + Math.floor(0.5 * h));\n                b = new Point(x + w, y - Math.floor(0.25 * h));\n            }\n            else if ((alpha > pi - beta && alpha <= pi) ||\n                (alpha < -pi + beta && alpha >= -pi)) {\n                a = new Point(x, y);\n                b = new Point(x, y + h);\n            }\n            else if (alpha < -beta && alpha > -pi2) {\n                a = new Point(x + Math.floor(1.5 * w), y + Math.floor(0.5 * h));\n                b = new Point(x, y + Math.floor(1.25 * h));\n            }\n            else if (alpha < -pi2 && alpha > -pi + beta) {\n                a = new Point(x - Math.floor(0.5 * w), y + Math.floor(0.5 * h));\n                b = new Point(x + w, y + Math.floor(1.25 * h));\n            }\n        }\n        else {\n            const beta = Math.atan2(h / 2, w / 4);\n            // Special cases where intersects with hexagon corners\n            if (alpha === beta) {\n                return new Point(x + Math.floor(0.75 * w), y);\n            }\n            if (alpha === pi - beta) {\n                return new Point(x + Math.floor(0.25 * w), y);\n            }\n            if (alpha === pi || alpha === -pi) {\n                return new Point(x, y + Math.floor(0.5 * h));\n            }\n            if (alpha === 0) {\n                return new Point(x + w, y + Math.floor(0.5 * h));\n            }\n            if (alpha === -beta) {\n                return new Point(x + Math.floor(0.75 * w), y + h);\n            }\n            if (alpha === -pi + beta) {\n                return new Point(x + Math.floor(0.25 * w), y + h);\n            }\n            if (alpha > 0 && alpha < beta) {\n                a = new Point(x + Math.floor(0.5 * w), y - Math.floor(0.5 * h));\n                b = new Point(x + Math.floor(1.25 * w), y + h);\n            }\n            else if (alpha > beta && alpha < pi - beta) {\n                a = new Point(x, y);\n                b = new Point(x + w, y);\n            }\n            else if (alpha > pi - beta && alpha < pi) {\n                a = new Point(x - Math.floor(0.25 * w), y + h);\n                b = new Point(x + Math.floor(0.5 * w), y - Math.floor(0.5 * h));\n            }\n            else if (alpha < 0 && alpha > -beta) {\n                a = new Point(x + Math.floor(0.5 * w), y + Math.floor(1.5 * h));\n                b = new Point(x + Math.floor(1.25 * w), y);\n            }\n            else if (alpha < -beta && alpha > -pi + beta) {\n                a = new Point(x, y + h);\n                b = new Point(x + w, y + h);\n            }\n            else if (alpha < -pi + beta && alpha > -pi) {\n                a = new Point(x - Math.floor(0.25 * w), y);\n                b = new Point(x + Math.floor(0.5 * w), y + Math.floor(1.5 * h));\n            }\n        }\n        result = intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);\n    }\n    if (result == null) {\n        return new Point(cx, cy);\n    }\n    return result;\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\n/**\n * Describes a rectangular perimeter for the given bounds.\n *\n * This perimeter is registered under `rectanglePerimeter` in {@link PerimeterRegistry} when using {@link Graph} or calling {@link registerDefaultPerimeters}.\n *\n * @category Perimeter\n */\nexport const RectanglePerimeter = (bounds, _vertex, next, orthogonal = false) => {\n    const cx = bounds.getCenterX();\n    const cy = bounds.getCenterY();\n    const dx = next.x - cx;\n    const dy = next.y - cy;\n    const alpha = Math.atan2(dy, dx);\n    const p = new Point(0, 0);\n    const pi = Math.PI;\n    const pi2 = Math.PI / 2;\n    const beta = pi2 - alpha;\n    const t = Math.atan2(bounds.height, bounds.width);\n    if (alpha < -pi + t || alpha > pi - t) {\n        // Left edge\n        p.x = bounds.x;\n        p.y = cy - (bounds.width * Math.tan(alpha)) / 2;\n    }\n    else if (alpha < -t) {\n        // Top Edge\n        p.y = bounds.y;\n        p.x = cx - (bounds.height * Math.tan(beta)) / 2;\n    }\n    else if (alpha < t) {\n        // Right Edge\n        p.x = bounds.x + bounds.width;\n        p.y = cy + (bounds.width * Math.tan(alpha)) / 2;\n    }\n    else {\n        // Bottom Edge\n        p.y = bounds.y + bounds.height;\n        p.x = cx + (bounds.height * Math.tan(beta)) / 2;\n    }\n    if (orthogonal) {\n        if (next.x >= bounds.x && next.x <= bounds.x + bounds.width) {\n            p.x = next.x;\n        }\n        else if (next.y >= bounds.y && next.y <= bounds.y + bounds.height) {\n            p.y = next.y;\n        }\n        if (next.x < bounds.x) {\n            p.x = bounds.x;\n        }\n        else if (next.x > bounds.x + bounds.width) {\n            p.x = bounds.x + bounds.width;\n        }\n        if (next.y < bounds.y) {\n            p.y = bounds.y;\n        }\n        else if (next.y > bounds.y + bounds.height) {\n            p.y = bounds.y + bounds.height;\n        }\n    }\n    return p;\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\nimport { intersection } from '../../../util/mathUtils';\n/**\n * This perimeter is registered under `rhombusPerimeter` in {@link PerimeterRegistry} when using {@link Graph} or calling {@link registerDefaultPerimeters}.\n *\n * @category Perimeter\n */\nexport const RhombusPerimeter = (bounds, _vertex, next, orthogonal = false) => {\n    const { x } = bounds;\n    const { y } = bounds;\n    const w = bounds.width;\n    const h = bounds.height;\n    const cx = x + w / 2;\n    const cy = y + h / 2;\n    const px = next.x;\n    const py = next.y;\n    // Special case for intersecting the diamond's corners\n    if (cx === px) {\n        if (cy > py) {\n            return new Point(cx, y); // top\n        }\n        return new Point(cx, y + h); // bottom\n    }\n    if (cy === py) {\n        if (cx > px) {\n            return new Point(x, cy); // left\n        }\n        return new Point(x + w, cy); // right\n    }\n    let tx = cx;\n    let ty = cy;\n    if (orthogonal) {\n        if (px >= x && px <= x + w) {\n            tx = px;\n        }\n        else if (py >= y && py <= y + h) {\n            ty = py;\n        }\n    }\n    // In which quadrant will the intersection be?\n    // set the slope and offset of the border line accordingly\n    if (px < cx) {\n        if (py < cy) {\n            return intersection(px, py, tx, ty, cx, y, x, cy);\n        }\n        return intersection(px, py, tx, ty, cx, y + h, x, cy);\n    }\n    if (py < cy) {\n        return intersection(px, py, tx, ty, cx, y, x + w, cy);\n    }\n    return intersection(px, py, tx, ty, cx, y + h, x + w, cy);\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\nimport { intersection } from '../../../util/mathUtils';\n/**\n * This perimeter is registered under `trianglePerimeter` in {@link PerimeterRegistry} when using {@link Graph} or calling {@link registerDefaultPerimeters}.\n *\n * @category Perimeter\n */\nexport const TrianglePerimeter = (bounds, vertex, next, orthogonal = false) => {\n    const direction = vertex != null ? vertex.style.direction : null;\n    const vertical = direction === 'north' || direction === 'south';\n    const { x } = bounds;\n    const { y } = bounds;\n    const w = bounds.width;\n    const h = bounds.height;\n    let cx = x + w / 2;\n    let cy = y + h / 2;\n    let start = new Point(x, y);\n    let corner = new Point(x + w, cy);\n    let end = new Point(x, y + h);\n    if (direction === 'north') {\n        start = end;\n        corner = new Point(cx, y);\n        end = new Point(x + w, y + h);\n    }\n    else if (direction === 'south') {\n        corner = new Point(cx, y + h);\n        end = new Point(x + w, y);\n    }\n    else if (direction === 'west') {\n        start = new Point(x + w, y);\n        corner = new Point(x, cy);\n        end = new Point(x + w, y + h);\n    }\n    let dx = next.x - cx;\n    let dy = next.y - cy;\n    const alpha = vertical ? Math.atan2(dx, dy) : Math.atan2(dy, dx);\n    const t = vertical ? Math.atan2(w, h) : Math.atan2(h, w);\n    let base = false;\n    if (direction === 'north' || direction === 'west') {\n        base = alpha > -t && alpha < t;\n    }\n    else {\n        base = alpha < -Math.PI + t || alpha > Math.PI - t;\n    }\n    let result = null;\n    if (base) {\n        if (orthogonal &&\n            ((vertical && next.x >= start.x && next.x <= end.x) ||\n                (!vertical && next.y >= start.y && next.y <= end.y))) {\n            if (vertical) {\n                result = new Point(next.x, start.y);\n            }\n            else {\n                result = new Point(start.x, next.y);\n            }\n        }\n        else if (direction === 'north') {\n            result = new Point(x + w / 2 + (h * Math.tan(alpha)) / 2, y + h);\n        }\n        else if (direction === 'south') {\n            result = new Point(x + w / 2 - (h * Math.tan(alpha)) / 2, y);\n        }\n        else if (direction === 'west') {\n            result = new Point(x + w, y + h / 2 + (w * Math.tan(alpha)) / 2);\n        }\n        else {\n            result = new Point(x, y + h / 2 - (w * Math.tan(alpha)) / 2);\n        }\n    }\n    else {\n        if (orthogonal) {\n            const pt = new Point(cx, cy);\n            if (next.y >= y && next.y <= y + h) {\n                pt.x = vertical ? cx : direction === 'west' ? x + w : x;\n                pt.y = next.y;\n            }\n            else if (next.x >= x && next.x <= x + w) {\n                pt.x = next.x;\n                pt.y = !vertical ? cy : direction === 'north' ? y + h : y;\n            }\n            // Compute angle\n            dx = next.x - pt.x;\n            dy = next.y - pt.y;\n            cx = pt.x;\n            cy = pt.y;\n        }\n        if ((vertical && next.x <= x + w / 2) || (!vertical && next.y <= y + h / 2)) {\n            result = intersection(next.x, next.y, cx, cy, start.x, start.y, corner.x, corner.y);\n        }\n        else {\n            result = intersection(next.x, next.y, cx, cy, corner.x, corner.y, end.x, end.y);\n        }\n    }\n    if (result == null) {\n        result = new Point(cx, cy);\n    }\n    return result;\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nconst isClassicOrClassicThin = (type) => type === 'classic' || type === 'classicThin';\nconst isDiamond = (type) => type === 'diamond';\n/**\n * Generally used to create the \"classic\" and \"block\" marker factory methods.\n *\n * Here is an example the registration of a factory edge marker function with `createArrow`:\n * ```js\n * EdgeMarkerRegistry.add('classic', EdgeMarker.createArrow(2));\n * EdgeMarkerRegistry.add('blockThin', EdgeMarker.createArrow(3));\n * ```\n *\n * @since 0.18.0\n */\nexport const createArrow = (widthFactor) => (canvas, _shape, type, pe, unitX, unitY, size, _source, sw, filled) => {\n    // The angle of the forward facing arrow sides against the x axis is\n    // 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n    // only half the strokewidth is processed ).\n    const endOffsetX = unitX * sw * 1.118;\n    const endOffsetY = unitY * sw * 1.118;\n    unitX *= size + sw;\n    unitY *= size + sw;\n    const pt = pe.clone();\n    pt.x -= endOffsetX;\n    pt.y -= endOffsetY;\n    const f = !isClassicOrClassicThin(type) ? 1 : 3 / 4;\n    pe.x += -unitX * f - endOffsetX;\n    pe.y += -unitY * f - endOffsetY;\n    return () => {\n        canvas.begin();\n        canvas.moveTo(pt.x, pt.y);\n        canvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n        if (isClassicOrClassicThin(type)) {\n            canvas.lineTo(pt.x - (unitX * 3) / 4, pt.y - (unitY * 3) / 4);\n        }\n        canvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n        canvas.close();\n        if (filled) {\n            canvas.fillAndStroke();\n        }\n        else {\n            canvas.stroke();\n        }\n    };\n};\n/**\n * Generally used to create the \"open\" and \"open thin\" marker factory methods.\n *\n * Here is an example the registration of a factory edge marker function with `createOpenArrow`:\n * ```js\n * EdgeMarkerRegistry.add('open', createOpenArrow(2));\n * ```\n *\n * @since 0.18.0\n */\nexport const createOpenArrow = (widthFactor) => (canvas, _shape, _type, pe, unitX, unitY, size, _source, sw, _filled) => {\n    // The angle of the forward facing arrow sides against the x axis is\n    // 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n    // only half the strokewidth is processed ).\n    const endOffsetX = unitX * sw * 1.118;\n    const endOffsetY = unitY * sw * 1.118;\n    unitX *= size + sw;\n    unitY *= size + sw;\n    const pt = pe.clone();\n    pt.x -= endOffsetX;\n    pt.y -= endOffsetY;\n    pe.x += -endOffsetX * 2;\n    pe.y += -endOffsetY * 2;\n    return () => {\n        canvas.begin();\n        canvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n        canvas.lineTo(pt.x, pt.y);\n        canvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n        canvas.stroke();\n    };\n};\n/**\n * @since 0.18.0\n */\nexport const oval = (canvas, _shape, _type, pe, unitX, unitY, size, _source, _sw, filled) => {\n    const a = size / 2;\n    const pt = pe.clone();\n    pe.x -= unitX * a;\n    pe.y -= unitY * a;\n    return () => {\n        canvas.ellipse(pt.x - a, pt.y - a, size, size);\n        if (filled) {\n            canvas.fillAndStroke();\n        }\n        else {\n            canvas.stroke();\n        }\n    };\n};\n/**\n * Generally used to create the \"diamond\" and \"diamond thin\" marker factory methods.\n *\n * ```js\n * EdgeMarkerRegistry.add('diamond', diamond);\n * EdgeMarkerRegistry.add('diamondThin', diamond);\n * ```\n *\n * @since 0.18.0\n */\nexport const diamond = (canvas, _shape, type, pe, unitX, unitY, size, _source, sw, filled) => {\n    // The angle of the forward facing arrow sides against the x axis is\n    // 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n    // only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n    // Note these values and the tk variable below are dependent, update\n    // both together (saves trig hard coding it).\n    const swFactor = isDiamond(type) ? 0.7071 : 0.9862;\n    const endOffsetX = unitX * sw * swFactor;\n    const endOffsetY = unitY * sw * swFactor;\n    unitX *= size + sw;\n    unitY *= size + sw;\n    const pt = pe.clone();\n    pt.x -= endOffsetX;\n    pt.y -= endOffsetY;\n    pe.x += -unitX - endOffsetX;\n    pe.y += -unitY - endOffsetY;\n    // thickness factor for diamond\n    const tk = isDiamond(type) ? 2 : 3.4;\n    return () => {\n        canvas.begin();\n        canvas.moveTo(pt.x, pt.y);\n        canvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n        canvas.lineTo(pt.x - unitX, pt.y - unitY);\n        canvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n        canvas.close();\n        if (filled) {\n            canvas.fillAndStroke();\n        }\n        else {\n            canvas.stroke();\n        }\n    };\n};\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Base implementation for all registries storing \"style\" configuration.\n * @private\n * @since 0.20.0\n */\nexport class BaseRegistry {\n    constructor() {\n        this.values = new Map();\n    }\n    add(name, value) {\n        this.values.set(name, value);\n    }\n    get(name) {\n        return this.values.get(name) ?? null;\n    }\n    getName(value) {\n        // Currently, the code performs a linear search through all entries.\n        // This implementation is straightforward and works well for small registries, but could become a performance bottleneck if the registry grows large.\n        // For the current use case of style registries, this is likely acceptable since the number of registered styles is typically small.\n        // If performance becomes an issue, consider maintaining a reverse lookup map.\n        for (const [name, style] of this.values.entries()) {\n            if (style === value) {\n                return name;\n            }\n        }\n        return null;\n    }\n    clear() {\n        this.values.clear();\n    }\n}\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { isNullish } from '../../../internal/utils';\nimport { BaseRegistry } from '../../../internal/BaseRegistry';\n/**\n * @private\n */\nclass EdgeStyleRegistryImpl extends BaseRegistry {\n    constructor() {\n        super(...arguments);\n        this.handlerMapping = new Map();\n        this.orthogonalStates = new Map();\n    }\n    add(name, edgeStyle, metaData) {\n        super.add(name, edgeStyle);\n        metaData?.handlerKind && this.handlerMapping.set(edgeStyle, metaData.handlerKind);\n        !isNullish(metaData?.isOrthogonal) &&\n            this.orthogonalStates.set(edgeStyle, metaData.isOrthogonal);\n    }\n    isOrthogonal(edgeStyle) {\n        return this.orthogonalStates.get(edgeStyle) ?? false;\n    }\n    getHandlerKind(edgeStyle) {\n        return this.handlerMapping.get(edgeStyle) ?? 'default';\n    }\n    clear() {\n        super.clear();\n        this.handlerMapping.clear();\n        this.orthogonalStates.clear();\n    }\n}\n/**\n * A registry that stores the {@link EdgeStyle}s and their configuration.\n *\n * @since 0.20.0\n * @category Style\n * @category Configuration\n */\nexport const EdgeStyleRegistry = new EdgeStyleRegistryImpl();\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { DEFAULT_VALID_COLOR, HIGHLIGHT_OPACITY, HIGHLIGHT_STROKEWIDTH, } from '../../util/Constants';\nimport InternalEvent from '../event/InternalEvent';\nimport Rectangle from '../geometry/Rectangle';\n/**\n * A helper class to highlight cells. Here is an example for a given cell.\n *\n * ```javascript\n * var highlight = new mxCellHighlight(graph, '#ff0000', 2);\n * highlight.highlight(graph.view.getState(cell)));\n * ```\n */\nclass CellHighlight {\n    constructor(graph, highlightColor, strokeWidth, dashed) {\n        this.strokeWidth = 0;\n        this.dashed = false;\n        this.opacity = 100;\n        this.shape = null;\n        /**\n         * Specifies if the highlights should appear on top of everything else in the overlay pane.\n         * @default false\n         */\n        this.keepOnTop = false;\n        /**\n         * Reference to the {@link CellState}.\n         * @default null\n         */\n        this.state = null;\n        /**\n         * Specifies the spacing between the highlight for vertices and the vertex.\n         * @default 2\n         */\n        this.spacing = 2;\n        this.graph = graph;\n        this.highlightColor = highlightColor ?? DEFAULT_VALID_COLOR;\n        this.strokeWidth = strokeWidth ?? HIGHLIGHT_STROKEWIDTH;\n        this.dashed = dashed ?? false;\n        this.opacity = HIGHLIGHT_OPACITY;\n        // Updates the marker if the graph changes\n        this.repaintHandler = () => {\n            // Updates reference to state\n            if (this.state) {\n                const tmp = this.graph.view.getState(this.state.cell);\n                if (!tmp) {\n                    this.hide();\n                }\n                else {\n                    this.state = tmp;\n                    this.repaint();\n                }\n            }\n        };\n        this.graph.getView().addListener(InternalEvent.SCALE, this.repaintHandler);\n        this.graph.getView().addListener(InternalEvent.TRANSLATE, this.repaintHandler);\n        this.graph\n            .getView()\n            .addListener(InternalEvent.SCALE_AND_TRANSLATE, this.repaintHandler);\n        this.graph.getDataModel().addListener(InternalEvent.CHANGE, this.repaintHandler);\n        // Hides the marker if the current root changes\n        this.resetHandler = () => {\n            this.hide();\n        };\n        this.graph.getView().addListener(InternalEvent.DOWN, this.resetHandler);\n        this.graph.getView().addListener(InternalEvent.UP, this.resetHandler);\n    }\n    /**\n     * Sets the color of the rectangle used to highlight drop targets.\n     *\n     * @param {string} color - String that represents the new highlight color.\n     */\n    setHighlightColor(color) {\n        this.highlightColor = color;\n        if (this.shape) {\n            this.shape.stroke = color;\n        }\n    }\n    /**\n     * Creates and returns the highlight shape for the given state.\n     */\n    drawHighlight() {\n        this.shape = this.createShape();\n        this.repaint();\n        if (this.shape) {\n            const node = this.shape.node;\n            if (!this.keepOnTop && node?.parentNode?.firstChild !== node && node.parentNode) {\n                node.parentNode.insertBefore(node, node.parentNode.firstChild);\n            }\n        }\n    }\n    /**\n     * Creates and returns the highlight shape for the given state.\n     */\n    createShape() {\n        if (!this.state)\n            return null;\n        const shape = this.graph.cellRenderer.createShape(this.state);\n        shape.svgStrokeTolerance = this.graph.getEventTolerance();\n        shape.points = this.state.absolutePoints;\n        shape.apply(this.state);\n        shape.stroke = this.highlightColor;\n        shape.opacity = this.opacity;\n        shape.isDashed = this.dashed;\n        shape.isShadow = false;\n        shape.dialect = 'svg';\n        shape.init(this.graph.getView().getOverlayPane());\n        InternalEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n        if (this.graph.dialect !== 'svg') {\n            shape.pointerEvents = false;\n        }\n        else {\n            shape.svgPointerEvents = 'stroke';\n        }\n        return shape;\n    }\n    /**\n     * Updates the highlight after a change of the model or view.\n     */\n    getStrokeWidth(state = null) {\n        return this.strokeWidth;\n    }\n    /**\n     * Updates the highlight after a change of the model or view.\n     */\n    repaint() {\n        if (this.state && this.shape) {\n            this.shape.scale = this.state.view.scale;\n            if (this.state.cell.isEdge()) {\n                this.shape.strokeWidth = this.getStrokeWidth();\n                this.shape.points = this.state.absolutePoints;\n                this.shape.outline = false;\n            }\n            else {\n                this.shape.bounds = new Rectangle(this.state.x - this.spacing, this.state.y - this.spacing, this.state.width + 2 * this.spacing, this.state.height + 2 * this.spacing);\n                this.shape.rotation = this.state.style.rotation ?? 0;\n                this.shape.strokeWidth = this.getStrokeWidth() / this.state.view.scale;\n                this.shape.outline = true;\n            }\n            // Uses cursor from shape in highlight\n            if (this.state.shape) {\n                this.shape.setCursor(this.state.shape.getCursor());\n            }\n            this.shape.redraw();\n        }\n    }\n    /**\n     * Resets the state of the cell marker.\n     */\n    hide() {\n        this.highlight(null);\n    }\n    /**\n     * Marks the {@link arkedState} and fires a {@link ark} event.\n     */\n    highlight(state = null) {\n        if (this.state !== state) {\n            if (this.shape) {\n                this.shape.destroy();\n                this.shape = null;\n            }\n            this.state = state;\n            if (this.state) {\n                this.drawHighlight();\n            }\n        }\n    }\n    /**\n     * Returns true if this highlight is at the given position.\n     */\n    isHighlightAt(x, y) {\n        let hit = false;\n        if (this.shape && document.elementFromPoint) {\n            let elt = document.elementFromPoint(x, y);\n            while (elt) {\n                if (elt === this.shape.node) {\n                    hit = true;\n                    break;\n                }\n                elt = elt.parentNode;\n            }\n        }\n        return hit;\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes.\n     */\n    destroy() {\n        const graph = this.graph;\n        graph.getView().removeListener(this.resetHandler);\n        graph.getView().removeListener(this.repaintHandler);\n        graph.getDataModel().removeListener(this.repaintHandler);\n        if (this.shape) {\n            this.shape.destroy();\n            this.shape = null;\n        }\n    }\n}\nexport default CellHighlight;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from '../event/EventSource';\nimport { DEFAULT_HOTSPOT, DEFAULT_INVALID_COLOR, DEFAULT_VALID_COLOR, MAX_HOTSPOT_SIZE, MIN_HOTSPOT_SIZE, NONE, } from '../../util/Constants';\nimport CellHighlight from './CellHighlight';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport { intersectsHotspot } from '../../util/mathUtils';\n/**\n * A helper class to process mouse locations and highlight cells.\n *\n * Helper class to highlight cells. To add a cell marker to an existing graph\n * for highlighting all cells, the following code is used:\n *\n * ```javascript\n * const marker = new CellMarker(graph);\n * graph.addMouseListener({\n *   mouseDown: ()=> {},\n *   mouseMove: (sender, me)=>\n *   {\n *     marker.process(me);\n *   },\n *   mouseUp: ()=> {}\n * });\n * ```\n *\n * **Event: {@link InternalEvent.MARK}**\n *\n * Fires after a cell has been marked or unmarked. The `state` property contains the marked <CellState> or null if no state is marked.\n */\nclass CellMarker extends EventSource {\n    /**\n     * Constructs a new cell marker.\n     *\n     * @param graph Reference to the enclosing {@link AbstractGraph}.\n     * @param validColor Optional marker color for valid states. Default is {@link DEFAULT_VALID_COLOR}.\n     * @param invalidColor Optional marker color for invalid states. Default is {@link DEFAULT_INVALID_COLOR}.\n     * @param hotspot Portion of the width and height where a state intersects a given coordinate pair. A value of 0 means always highlight. Default is {@link DEFAULT_HOTSPOT}.\n     */\n    constructor(graph, validColor = DEFAULT_VALID_COLOR, invalidColor = DEFAULT_INVALID_COLOR, hotspot = DEFAULT_HOTSPOT) {\n        super();\n        /**\n         * Specifies if the marker is enabled.\n         * @default true\n         */\n        this.enabled = true;\n        /**\n         * Specifies the portion of the width and height that should trigger a highlight.\n         *\n         * The area around the center of the cell to be marked is used as the hotspot. Possible values are between 0 and 1.\n         * @default DEFAULT_HOTSPOT\n         */\n        this.hotspot = DEFAULT_HOTSPOT;\n        /**\n         * Specifies if the hotspot is enabled.\n         * @default false\n         */\n        this.hotspotEnabled = false;\n        /**\n         * Holds the current marker color.\n         */\n        this.currentColor = NONE;\n        /**\n         * Holds the marked {@link CellState} if it is valid.\n         */\n        this.validState = null;\n        /**\n         * Holds the marked {@link CellState}.\n         */\n        this.markedState = null;\n        this.graph = graph;\n        this.validColor = validColor;\n        this.invalidColor = invalidColor;\n        this.hotspot = hotspot;\n        this.highlight = new CellHighlight(graph);\n    }\n    /**\n     * Enables or disables event handling.\n     * This implementation updates {@link enabled}.\n     *\n     * @param enabled Boolean that specifies the new enabled state.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n    }\n    /**\n     * Returns true if events are handled.\n     * This implementation returns {@link enabled}.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Sets the {@link hotspot}.\n     */\n    setHotspot(hotspot) {\n        this.hotspot = hotspot;\n    }\n    /**\n     * Returns the {@link hotspot}.\n     */\n    getHotspot() {\n        return this.hotspot;\n    }\n    /**\n     * Specifies whether the hotspot should be used in <intersects>.\n     */\n    setHotspotEnabled(enabled) {\n        this.hotspotEnabled = enabled;\n    }\n    /**\n     * Returns true if hotspot is used in <intersects>.\n     */\n    isHotspotEnabled() {\n        return this.hotspotEnabled;\n    }\n    /**\n     * Returns true if {@link validState} is not `null`.\n     */\n    hasValidState() {\n        return !!this.validState;\n    }\n    /**\n     * Returns the {@link validState}.\n     */\n    getValidState() {\n        return this.validState;\n    }\n    /**\n     * Returns the {@link markedState}.\n     */\n    getMarkedState() {\n        return this.markedState;\n    }\n    /**\n     * Resets the state of the cell marker.\n     */\n    reset() {\n        this.validState = null;\n        if (this.markedState) {\n            this.markedState = null;\n            this.unmark();\n        }\n    }\n    /**\n     * Processes the given event and cell and marks the state returned by {@link getState} with the color returned by {@link getMarkerColor}.\n     * If the markerColor is not `null`, then the state is stored in {@link markedState}.\n     * If {@link isValidState} returns `true`, then the state is stored in {@link validState} regardless of the marker color.\n     * The state is returned regardless of the marker color and valid state.\n     */\n    process(me) {\n        let state = null;\n        if (this.isEnabled()) {\n            state = this.getState(me);\n            this.setCurrentState(state, me);\n        }\n        return state;\n    }\n    /**\n     * Sets and marks the current valid state.\n     */\n    setCurrentState(state, me, color) {\n        const isValid = state ? this.isValidState(state) : false;\n        color = color ?? this.getMarkerColor(me.getEvent(), state, isValid);\n        if (isValid) {\n            this.validState = state;\n        }\n        else {\n            this.validState = null;\n        }\n        if (state !== this.markedState || color !== this.currentColor) {\n            this.currentColor = color;\n            if (state && this.currentColor !== NONE) {\n                this.markedState = state;\n                this.mark();\n            }\n            else if (this.markedState) {\n                this.markedState = null;\n                this.unmark();\n            }\n        }\n    }\n    /**\n     * Marks the given cell using the given color, or {@link validColor} if no color is specified.\n     */\n    markCell(cell, color) {\n        const state = this.graph.getView().getState(cell);\n        if (state) {\n            this.currentColor = color ?? this.validColor;\n            this.markedState = state;\n            this.mark();\n        }\n    }\n    /**\n     * Marks the {@link markedState} and fires a {@link InternalEvent.MARK} event.\n     */\n    mark() {\n        this.highlight.setHighlightColor(this.currentColor);\n        this.highlight.highlight(this.markedState);\n        this.fireEvent(new EventObject(InternalEvent.MARK, 'state', this.markedState));\n    }\n    /**\n     * Hides the marker and fires a {@link InternalEvent.MARK} event.\n     */\n    unmark() {\n        this.mark();\n    }\n    /**\n     * Returns true if the given {@link CellState} is a valid state.\n     * If this returns `true`, then the state is stored in {@link validState}.\n     * The return value of this method is used as the argument for {@link getMarkerColor}.\n     */\n    isValidState(state) {\n        return true;\n    }\n    /**\n     * Returns the {@link validColor} or {@link invalidColor} depending on the value of {@link isValid}.\n     * The given {@link CellState} is ignored by this implementation.\n     */\n    getMarkerColor(evt, state, isValid) {\n        return isValid ? this.validColor : this.invalidColor;\n    }\n    /**\n     * Uses {@link getCell}, {@link getStateToMark} and {@link intersects} to return the {@link CellState} for the given {@link MouseEvent}.\n     */\n    getState(me) {\n        const view = this.graph.getView();\n        const cell = this.getCell(me);\n        if (!cell)\n            return null;\n        const state = this.getStateToMark(view.getState(cell));\n        return state && this.intersects(state, me) ? state : null;\n    }\n    /**\n     * Returns the {@link Cell} for the given event and cell.\n     * This implementation returns the given cell.\n     */\n    getCell(me) {\n        return me.getCell();\n    }\n    /**\n     * Returns the {@link CellState} to be marked for the given {@link CellState} under the mouse.\n     * This implementation returns the given state.\n     */\n    getStateToMark(state) {\n        return state;\n    }\n    /**\n     * Returns `true` if the given coordinate pair intersects the given state.\n     * This returns `true` if the {@link hotspot} is `0` or the coordinates are inside the hotspot for the given cell state.\n     */\n    intersects(state, me) {\n        const x = me.getGraphX();\n        const y = me.getGraphY();\n        if (this.hotspotEnabled) {\n            return intersectsHotspot(state, x, y, this.hotspot, MIN_HOTSPOT_SIZE, MAX_HOTSPOT_SIZE);\n        }\n        return true;\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes.\n     */\n    destroy() {\n        this.highlight.destroy();\n    }\n}\nexport default CellMarker;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Converts relative and absolute URLs to absolute URLs with protocol and domain.\n */\nclass UrlConverter {\n    constructor() {\n        /**\n         * Specifies if the converter is enabled. Default is true.\n         */\n        this.enabled = true;\n        /**\n         * Specifies the base URL to be used as a prefix for relative URLs.\n         */\n        this.baseUrl = null;\n        /**\n         * Specifies the base domain to be used as a prefix for absolute URLs.\n         */\n        this.baseDomain = null;\n        // Empty constructor\n    }\n    /**\n     * Private helper function to update the base URL.\n     */\n    updateBaseUrl() {\n        this.baseDomain = `${location.protocol}//${location.host}`;\n        this.baseUrl = this.baseDomain + location.pathname;\n        const tmp = this.baseUrl.lastIndexOf('/');\n        // Strips filename etc\n        if (tmp > 0) {\n            this.baseUrl = this.baseUrl.substring(0, tmp + 1);\n        }\n    }\n    /**\n     * Returns <enabled>.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Sets <enabled>.\n     */\n    setEnabled(value) {\n        this.enabled = value;\n    }\n    /**\n     * Returns <baseUrl>.\n     */\n    getBaseUrl() {\n        return this.baseUrl;\n    }\n    /**\n     * Sets <baseUrl>.\n     */\n    setBaseUrl(value) {\n        this.baseUrl = value;\n    }\n    /**\n     * Returns <baseDomain>.\n     */\n    getBaseDomain() {\n        return this.baseDomain;\n    }\n    /**\n     * Sets <baseDomain>.\n     */\n    setBaseDomain(value) {\n        this.baseDomain = value;\n    }\n    /**\n     * Returns true if the given URL is relative.\n     */\n    isRelativeUrl(url) {\n        return (url &&\n            url.substring(0, 2) !== '//' &&\n            url.substring(0, 7) !== 'http://' &&\n            url.substring(0, 8) !== 'https://' &&\n            url.substring(0, 10) !== 'data:image' &&\n            url.substring(0, 7) !== 'file://');\n    }\n    /**\n     * Converts the given URL to an absolute URL with protol and domain.\n     * Relative URLs are first converted to absolute URLs.\n     */\n    convert(url) {\n        if (this.isEnabled() && this.isRelativeUrl(url)) {\n            if (!this.getBaseUrl()) {\n                this.updateBaseUrl();\n            }\n            if (url.charAt(0) === '/') {\n                url = this.getBaseDomain() + url;\n            }\n            else {\n                url = this.getBaseUrl() + url;\n            }\n        }\n        return url;\n    }\n}\nexport default UrlConverter;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { arcToCurves, getRotatedPoint } from '../../util/mathUtils';\nimport { DEFAULT_FONTFAMILY, DEFAULT_FONTSIZE, NONE } from '../../util/Constants';\nimport UrlConverter from '../../util/UrlConverter';\nimport Point from '../geometry/Point';\nimport { clone } from '../../util/cloneUtils';\nimport { StyleDefaultsConfig } from '../../util/config';\n/**\n * Base class for all canvases.\n *\n * The following methods make up the public interface of the canvas 2D for all painting in mxGraph:\n *\n * - {@link save}, {@link restore}\n * - {@link scale}, {@link translate}, {@link rotate}\n * - {@link setAlpha}, {@link setFillAlpha}, {@link setStrokeAlpha}, {@link setFillColor}, {@link setGradient},\n *   {@link setStrokeColor}, {@link setStrokeWidth}, {@link setDashed}, {@link setDashPattern}, {@link setLineCap},\n *   {@link setLineJoin}, {@link setMiterLimit}\n * - {@link setFontColor}, {@link setFontBackgroundColor}, {@link setFontBorderColor}, {@link setFontSize},\n *   {@link setFontFamily}, {@link setFontStyle}\n * - {@link setShadow}, {@link setShadowColor}, {@link setShadowAlpha}, {@link setShadowOffset}\n * - {@link rect}, {@link roundrect}, {@link ellipse}, {@link image}, {@link text}\n * - {@link begin}, {@link moveTo}, {@link lineTo}, {@link quadTo}, {@link curveTo}\n * - {@link stroke}, {@link fill}, {@link fillAndStroke}\n *\n * {@link arcTo} is an additional method for drawing paths.\n * This is a synthetic method, meaning that it is turned into a sequence of curves by default.\n * Subclasses may add native support for arcs.\n *\n * All color values of {@link NONE} will be converted to null in the state.\n */\nclass AbstractCanvas2D {\n    constructor() {\n        /**\n         * Holds the current state.\n         */\n        this.state = this.createState();\n        /**\n         * Stack of states.\n         */\n        this.states = [];\n        /**\n         * Holds the current path as an array.\n         */\n        this.path = [];\n        /**\n         * Switch for rotation of HTML. Default is false.\n         */\n        this.rotateHtml = true;\n        /**\n         * Holds the last x coordinate.\n         */\n        this.lastX = 0;\n        /**\n         * Holds the last y coordinate.\n         */\n        this.lastY = 0;\n        /**\n         * Contains the string used for moving in paths. Default is 'M'.\n         */\n        this.moveOp = 'M';\n        /**\n         * Contains the string used for moving in paths. Default is 'L'.\n         */\n        this.lineOp = 'L';\n        /**\n         * Contains the string used for quadratic paths. Default is 'Q'.\n         */\n        this.quadOp = 'Q';\n        /**\n         * Contains the string used for bezier curves. Default is 'C'.\n         */\n        this.curveOp = 'C';\n        /**\n         * Holds the operator for closing curves. Default is 'Z'.\n         */\n        this.closeOp = 'Z';\n        /**\n         * Boolean value that specifies if events should be handled. Default is false.\n         */\n        this.pointerEvents = false;\n        // from Polyline (maybe from other shapes also)\n        this.pointerEventsValue = null;\n        /**\n         * Adds the given operation to the path.\n         */\n        this.addOp = (op, ...args) => {\n            this.path.push(op);\n            if (args.length > 1) {\n                const s = this.state;\n                for (let i = 1; i < args.length; i += 2) {\n                    this.lastX = args[i - 1];\n                    this.lastY = args[i];\n                    this.path.push(this.format((this.lastX + s.dx) * s.scale));\n                    this.path.push(this.format((this.lastY + s.dy) * s.scale));\n                }\n            }\n        };\n        this.converter = this.createUrlConverter();\n        this.reset();\n    }\n    /**\n     * Create a new <UrlConverter> and returns it.\n     */\n    createUrlConverter() {\n        return new UrlConverter();\n    }\n    /**\n     * Resets the state of this canvas.\n     */\n    reset() {\n        this.state = this.createState();\n        this.states = [];\n    }\n    /**\n     * Creates the state of the this canvas.\n     */\n    createState() {\n        return {\n            dx: 0,\n            dy: 0,\n            scale: 1,\n            alpha: 1,\n            fillAlpha: 1,\n            strokeAlpha: 1,\n            fillColor: NONE,\n            gradientFillAlpha: 1,\n            gradientColor: NONE,\n            gradientAlpha: 1,\n            gradientDirection: 'east',\n            strokeColor: NONE,\n            strokeWidth: 1,\n            dashed: false,\n            dashPattern: '3 3',\n            fixDash: false,\n            lineCap: 'flat',\n            lineJoin: 'miter',\n            miterLimit: 10,\n            fontColor: '#000000',\n            fontBackgroundColor: NONE,\n            fontBorderColor: NONE,\n            fontSize: DEFAULT_FONTSIZE,\n            fontFamily: DEFAULT_FONTFAMILY,\n            fontStyle: 0,\n            shadow: false,\n            shadowColor: StyleDefaultsConfig.shadowColor,\n            shadowAlpha: StyleDefaultsConfig.shadowOpacity,\n            shadowDx: StyleDefaultsConfig.shadowOffsetX,\n            shadowDy: StyleDefaultsConfig.shadowOffsetY,\n            rotation: 0,\n            rotationCx: 0,\n            rotationCy: 0,\n        };\n    }\n    /**\n     * Rounds all numbers to integers.\n     */\n    format(value) {\n        return Math.round(value);\n    }\n    /**\n     * Rotates the given point and returns the result as an {@link Point}.\n     */\n    rotatePoint(x, y, theta, cx, cy) {\n        const rad = theta * (Math.PI / 180);\n        return getRotatedPoint(new Point(x, y), Math.cos(rad), Math.sin(rad), new Point(cx, cy));\n    }\n    /**\n     * Saves the current state.\n     */\n    save() {\n        this.states.push(this.state);\n        this.state = clone(this.state);\n    }\n    /**\n     * Restores the current state.\n     */\n    restore() {\n        const state = this.states.pop();\n        if (state)\n            this.state = state;\n    }\n    /**\n     * Sets the current link. Hook for subclassers.\n     */\n    setLink(link) {\n        // nop\n    }\n    /**\n     * Scales the current state.\n     */\n    scale(value) {\n        this.state.scale *= value;\n        if (this.state.strokeWidth !== null)\n            this.state.strokeWidth *= value;\n    }\n    /**\n     * Translates the current state.\n     */\n    translate(dx, dy) {\n        this.state.dx += dx;\n        this.state.dy += dy;\n    }\n    /**\n     * Rotates the current state.\n     */\n    rotate(theta, flipH, flipV, cx, cy) {\n        // nop\n    }\n    /**\n     * Sets the current alpha.\n     */\n    setAlpha(value) {\n        this.state.alpha = value;\n    }\n    /**\n     * Sets the current solid fill alpha.\n     */\n    setFillAlpha(value) {\n        this.state.fillAlpha = value;\n    }\n    /**\n     * Sets the current stroke alpha.\n     */\n    setStrokeAlpha(value) {\n        this.state.strokeAlpha = value;\n    }\n    /**\n     * Sets the current fill color.\n     */\n    setFillColor(value) {\n        this.state.fillColor = value ?? NONE;\n        this.state.gradientColor = NONE;\n    }\n    /**\n     * Sets the current gradient.\n     */\n    setGradient(color1, color2, x, y, w, h, direction, alpha1 = 1, alpha2 = 1) {\n        const s = this.state;\n        s.fillColor = color1;\n        s.gradientFillAlpha = alpha1;\n        s.gradientColor = color2;\n        s.gradientAlpha = alpha2;\n        s.gradientDirection = direction;\n    }\n    /**\n     * Sets the current stroke color.\n     */\n    setStrokeColor(value) {\n        this.state.strokeColor = value ?? NONE;\n    }\n    /**\n     * Sets the current stroke width.\n     */\n    setStrokeWidth(value) {\n        this.state.strokeWidth = value;\n    }\n    /**\n     * Enables or disables dashed lines.\n     */\n    setDashed(value, fixDash = false) {\n        this.state.dashed = value;\n        this.state.fixDash = fixDash;\n    }\n    /**\n     * Sets the current dash pattern.\n     */\n    setDashPattern(value) {\n        this.state.dashPattern = value;\n    }\n    /**\n     * Sets the current line cap.\n     */\n    setLineCap(value) {\n        this.state.lineCap = value;\n    }\n    /**\n     * Sets the current line join.\n     */\n    setLineJoin(value) {\n        this.state.lineJoin = value;\n    }\n    /**\n     * Sets the current miter limit.\n     */\n    setMiterLimit(value) {\n        this.state.miterLimit = value;\n    }\n    /**\n     * Sets the current font color.\n     */\n    setFontColor(value) {\n        this.state.fontColor = value ?? NONE;\n    }\n    /**\n     * Sets the current font background color.\n     */\n    setFontBackgroundColor(value) {\n        this.state.fontBackgroundColor = value ?? NONE;\n    }\n    /**\n     * Sets the current font border color.\n     */\n    setFontBorderColor(value) {\n        this.state.fontBorderColor = value ?? NONE;\n    }\n    /**\n     * Sets the current font size.\n     */\n    setFontSize(value) {\n        this.state.fontSize = value;\n    }\n    /**\n     * Sets the current font family.\n     */\n    setFontFamily(value) {\n        this.state.fontFamily = value;\n    }\n    /**\n     * Sets the current font style.\n     */\n    setFontStyle(value) {\n        this.state.fontStyle = value;\n    }\n    /**\n     * Enables or disables and configures the current shadow.\n     */\n    setShadow(enabled) {\n        this.state.shadow = enabled;\n    }\n    /**\n     * Sets the current shadow color.\n     *\n     * @param value Hexadecimal representation of the color or `none`.\n     */\n    setShadowColor(value) {\n        this.state.shadowColor = value ?? NONE;\n    }\n    /**\n     * Sets the current shadow alpha.\n     *\n     * @param value Number that represents the new alpha. Possible values are between 1 (opaque) and 0 (transparent).\n     */\n    setShadowAlpha(value) {\n        this.state.shadowAlpha = value;\n    }\n    /**\n     * Sets the current shadow offset.\n     *\n     * @param dx Number that represents the horizontal offset of the shadow.\n     * @param dy Number that represents the vertical offset of the shadow.\n     */\n    setShadowOffset(dx, dy) {\n        this.state.shadowDx = dx;\n        this.state.shadowDy = dy;\n    }\n    /**\n     * Starts a new path.\n     */\n    begin() {\n        this.lastX = 0;\n        this.lastY = 0;\n        this.path = [];\n    }\n    /**\n     *  Moves the current path the given coordinates.\n     */\n    moveTo(x, y) {\n        this.addOp(this.moveOp, x, y);\n    }\n    /**\n     * Draws a line to the given coordinates. Uses moveTo with the op argument.\n     */\n    lineTo(x, y) {\n        this.addOp(this.lineOp, x, y);\n    }\n    /**\n     * Adds a quadratic curve to the current path.\n     */\n    quadTo(x1, y1, x2, y2) {\n        this.addOp(this.quadOp, x1, y1, x2, y2);\n    }\n    /**\n     * Adds a bezier curve to the current path.\n     */\n    curveTo(x1, y1, x2, y2, x3, y3) {\n        this.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);\n    }\n    /**\n     * Adds the given arc to the current path. This is a synthetic operation that\n     * is broken down into curves.\n     * @param rx: The x distance between the current position\n     *            and the center of the ellipse around which to arc\n     * @param ry: The y distance between the current position\n     *            and the center of the ellipse around which to arc\n     * @param x: The x position of the end point of the arc\n     * @param y: The y position of the end point of the arc\n     */\n    arcTo(rx, ry, angle, largeArcFlag, sweepFlag, x, y) {\n        const curves = arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);\n        if (curves != null) {\n            for (let i = 0; i < curves.length; i += 6) {\n                this.curveTo(curves[i], curves[i + 1], curves[i + 2], curves[i + 3], curves[i + 4], curves[i + 5]);\n            }\n        }\n    }\n    /**\n     * Closes the current path.\n     */\n    close(x1, y1, x2, y2, x3, y3) {\n        this.addOp(this.closeOp);\n    }\n}\nexport default AbstractCanvas2D;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2017, JGraph Ltd\nCopyright (c) 2006-2017, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../geometry/Rectangle';\nimport Dictionary from '../../util/Dictionary';\n/**\n * Creates a temporary set of cell states.\n */\nclass TemporaryCellStates {\n    constructor(view, scale = 1, cells, isCellVisibleFn = null, getLinkForCellState = null) {\n        this.view = view;\n        // Stores the previous state\n        this.oldValidateCellState = view.validateCellState;\n        this.oldBounds = view.getGraphBounds();\n        this.oldStates = view.getStates();\n        this.oldScale = view.getScale();\n        this.oldDoRedrawShape = view.graph.cellRenderer.doRedrawShape;\n        // Overrides doRedrawShape and paint shape to add links on shapes\n        if (getLinkForCellState != null) {\n            view.graph.cellRenderer.doRedrawShape = (state) => {\n                const shape = state?.shape;\n                const oldPaint = shape.paint;\n                shape.paint = (c) => {\n                    const link = getLinkForCellState(state);\n                    if (link != null) {\n                        c.setLink(link);\n                    }\n                    oldPaint.apply(shape, [c]);\n                    if (link != null) {\n                        c.setLink(null);\n                    }\n                };\n                this.oldDoRedrawShape.apply(view.graph.cellRenderer, [state]);\n                shape.paint = oldPaint;\n            };\n        }\n        // Overrides validateCellState to ignore invisible cells\n        view.validateCellState = (cell, recurse) => {\n            if (cell == null || isCellVisibleFn == null || isCellVisibleFn(cell)) {\n                return this.oldValidateCellState.apply(view, [cell, recurse]);\n            }\n            return null;\n        };\n        // Creates space for new states\n        view.setStates(new Dictionary());\n        view.setScale(scale);\n        view.resetValidationState();\n        let bbox = null;\n        // Validates the vertices and edges without adding them to\n        // the model so that the original cells are not modified\n        for (const cell of cells) {\n            const bounds = view.getBoundingBox(view.validateCellState(view.validateCell(cell)));\n            if (bbox == null) {\n                bbox = bounds;\n            }\n            else {\n                bbox.add(bounds);\n            }\n        }\n        view.setGraphBounds(bbox || new Rectangle());\n    }\n    destroy() {\n        const view = this.view;\n        view.setScale(this.oldScale);\n        view.setStates(this.oldStates);\n        view.setGraphBounds(this.oldBounds);\n        view.validateCellState = this.oldValidateCellState;\n        view.graph.cellRenderer.doRedrawShape = this.oldDoRedrawShape;\n    }\n}\nexport default TemporaryCellStates;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2020, JGraph Ltd\nCopyright (c) 2006-2020, draw.io AG\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { write } from './domUtils';\n/**\n * This class provides a cross-browser abstraction for Ajax requests. It is an XML HTTP request wrapper.\n *\n * See also {@link get}, {@link getAll}, {@link post} and {@link load}.\n *\n * ### Encoding\n *\n * For encoding parameter values, the built-in encodeURIComponent JavaScript\n * method must be used. For automatic encoding of post data in {@link Editor} the\n * {@link Editor.escapePostData} switch can be set to true (default). The encoding\n * will be carried out using the conte type of the page. That is, the page\n * containing the editor should contain a meta tag in the header, e.g.\n * ```html\n * <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n * ```\n *\n * @example\n * ```js\n * const onload = function(req) {\n *   window.alert(req.getDocumentElement());\n * }\n *\n * const onerror = function(req) {\n *   window.alert('Error');\n * }\n * new MaxXmlRequest(url, 'key=value').send(onload, onerror);\n * ```\n *\n * ### Sending requests\n *\n * Sends an asynchronous POST request to the specified URL.\n *\n * @example\n * ```js\n * const req = new MaxXmlRequest(url, 'key=value', 'POST', false);\n * req.send();\n * window.alert(req.getDocumentElement());\n * ```\n *\n * Sends a synchronous POST request to the specified URL.\n *\n * @example\n * ```js\n * const encoder = new Codec();\n * const result = encoder.encode(graph.getDataModel());\n * const xml = encodeURIComponent(xmlUtils.getXml(result));\n * new MaxXmlRequest(url, `xml=${xml}`).send();\n * ```\n *\n * Sends an encoded graph model to the specified URL using xml as the\n * parameter name. The parameter can then be retrieved in C# as follows:\n *\n * ```csharp\n * string xml = HttpUtility.UrlDecode(context.Request.Params[\"xml\"]);\n * ```\n *\n * Or in Java as follows:\n *\n * ```java\n * String xml = URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\");\n * ```\n *\n * Note that the linefeed should only be replaced if the XML is processed in Java, for example when creating an image.\n */\nexport default class MaxXmlRequest {\n    constructor(url, params = null, method = 'POST', async = true, username = null, password = null) {\n        /**\n         * Boolean indicating if the request is binary. This option is ignored in IE.\n         * In all other browsers the requested mime type is set to\n         * text/plain; charset=x-user-defined. Default is false.\n         *\n         * @default false\n         */\n        this.binary = false;\n        /**\n         * Specifies if withCredentials should be used in HTML5-compliant browsers. Default is false.\n         *\n         * @default false\n         */\n        this.withCredentials = false;\n        /**\n         * Holds the inner, browser-specific request object.\n         */\n        this.request = null;\n        /**\n         * Specifies if request values should be decoded as URIs before setting the\n         * textarea value in {@link simulate}. Defaults to false for backwards compatibility,\n         * to avoid another decode on the server this should be set to true.\n         */\n        this.decodeSimulateValues = false;\n        this.url = url;\n        this.params = params;\n        this.method = method || 'POST';\n        this.async = async;\n        this.username = username;\n        this.password = password;\n    }\n    /**\n     * Returns {@link binary}.\n     */\n    isBinary() {\n        return this.binary;\n    }\n    /**\n     * Sets {@link binary}.\n     *\n     * @param value\n     */\n    setBinary(value) {\n        this.binary = value;\n    }\n    /**\n     * Returns the response as a string.\n     */\n    getText() {\n        return this.request.responseText;\n    }\n    /**\n     * Returns true if the response is ready.\n     */\n    isReady() {\n        return this.request.readyState === 4;\n    }\n    /**\n     * Returns the document element of the response XML document.\n     */\n    getDocumentElement() {\n        const doc = this.getXml();\n        if (doc != null) {\n            return doc.documentElement;\n        }\n        return null;\n    }\n    /**\n     * Returns the response as an XML document. Use {@link getDocumentElement} to get\n     * the document element of the XML document.\n     */\n    getXml() {\n        let xml = this.request.responseXML;\n        // Handles missing response headers in IE, the first condition handles\n        // the case where responseXML is there, but using its nodes leads to\n        // type errors in the CellCodec when putting the nodes into a new\n        // document. This happens in IE9 standards mode and with XML user\n        // objects only, as they are used directly as values in cells.\n        if (xml == null || xml.documentElement == null) {\n            xml = new DOMParser().parseFromString(this.request.responseText, 'text/xml');\n        }\n        return xml;\n    }\n    /**\n     * Returns the status as a number, e.g. 404 for \"Not found\" or 200 for \"OK\".\n     * Note: The NS_ERROR_NOT_AVAILABLE for invalid responses cannot be caught.\n     */\n    getStatus() {\n        return this.request?.status;\n    }\n    /**\n     * Creates and returns the inner {@link request} object.\n     */\n    create() {\n        const req = new XMLHttpRequest();\n        // TODO: Check for overrideMimeType required here?\n        if (this.isBinary() && req.overrideMimeType) {\n            req.overrideMimeType('text/plain; charset=x-user-defined');\n        }\n        return req;\n    }\n    /**\n     * Send the {@link request} to the target URL using the specified functions to process the response asynchronously.\n     *\n     * Note: Due to technical limitations, `onerror` is currently ignored.\n     *\n     * @param onload Function to be invoked if a successful response was received.\n     * @param onerror Function to be called on any error. Unused in this implementation, intended for overridden function.\n     * @param timeout Optional timeout in ms before calling ontimeout.\n     * @param ontimeout Optional function to execute on timeout.\n     */\n    send(onload = null, onerror = null, timeout = null, ontimeout = null) {\n        this.request = this.create();\n        if (this.request != null) {\n            if (onload != null) {\n                this.request.onreadystatechange = () => {\n                    if (this.isReady()) {\n                        onload(this);\n                        this.request.onreadystatechange = null;\n                    }\n                };\n            }\n            this.request.open(this.method, this.url, this.async, this.username, this.password);\n            this.setRequestHeaders(this.request, this.params);\n            if (window.XMLHttpRequest && this.withCredentials) {\n                this.request.withCredentials = 'true';\n            }\n            if (window.XMLHttpRequest && timeout != null && ontimeout != null) {\n                this.request.timeout = timeout;\n                this.request.ontimeout = ontimeout;\n            }\n            this.request.send(this.params);\n        }\n    }\n    /**\n     * Sets the headers for the given request and parameters. This sets the\n     * content-type to application/x-www-form-urlencoded if any params exist.\n     *\n     * @example\n     * ```JavaScript\n     * request.setRequestHeaders = function(request, params)\n     * {\n     *   if (params != null)\n     *   {\n     *     request.setRequestHeader('Content-Type',\n     *             'multipart/form-data');\n     *     request.setRequestHeader('Content-Length',\n     *             params.length);\n     *   }\n     * };\n     * ```\n     *\n     * Use the code above before calling {@link send} if you require a\n     * multipart/form-data request.\n     *\n     * @param request\n     * @param params\n     */\n    setRequestHeaders(request, params) {\n        if (params != null) {\n            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        }\n    }\n    /**\n     * Creates and posts a request to the given target URL using a dynamically\n     * created form inside the given document.\n     *\n     * @param doc Document that contains the form element.\n     * @param target Target to send the form result to.\n     */\n    simulate(doc, target = null) {\n        doc = doc || document;\n        let old = null;\n        if (doc === document) {\n            old = window.onbeforeunload;\n            window.onbeforeunload = null;\n        }\n        const form = doc.createElement('form');\n        form.setAttribute('method', this.method);\n        form.setAttribute('action', this.url);\n        if (target != null) {\n            form.setAttribute('target', target);\n        }\n        form.style.display = 'none';\n        form.style.visibility = 'hidden';\n        const params = this.params;\n        const pars = params.indexOf('&') > 0 ? params.split('&') : params.split(' ');\n        // Adds the parameters as text areas to the form\n        for (let i = 0; i < pars.length; i += 1) {\n            const pos = pars[i].indexOf('=');\n            if (pos > 0) {\n                const name = pars[i].substring(0, pos);\n                let value = pars[i].substring(pos + 1);\n                if (this.decodeSimulateValues) {\n                    value = decodeURIComponent(value);\n                }\n                const textarea = doc.createElement('textarea');\n                textarea.setAttribute('wrap', 'off');\n                textarea.setAttribute('name', name);\n                write(textarea, value);\n                form.appendChild(textarea);\n            }\n        }\n        doc.body.appendChild(form);\n        form.submit();\n        if (form.parentNode != null) {\n            form.parentNode.removeChild(form);\n        }\n        if (old != null) {\n            window.onbeforeunload = old;\n        }\n    }\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2020, JGraph Ltd\nCopyright (c) 2006-2020, draw.io AG\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport MaxXmlRequest from './MaxXmlRequest';\n/**\n * Loads the specified URL *synchronously* and returns the {@link MaxXmlRequest}.\n * Throws an exception if the file cannot be loaded.\n * See {@link get} for  an asynchronous implementation.\n *\n * Example:\n *\n * ```javascript\n * try {\n *   const req = load(filename);\n *   cont root = req.getDocumentElement();\n *   // Process XML DOM...\n * } catch (e) {\n *   console.error(`Cannot load $filename`, e);\n * }\n * ```\n *\n * @param url URL to get the data from.\n */\nexport const load = (url) => {\n    const req = new MaxXmlRequest(url, null, 'GET', false);\n    req.send();\n    return req;\n};\n/**\n * Loads the specified URL *asynchronously* and invokes the given functions depending on the request status.\n * Returns the {@link MaxXmlRequest} in use.\n * Both functions take the {@link MaxXmlRequest} as the only parameter.\n * See {@link load} for a synchronous implementation.\n *\n * Example:\n *\n * ```javascript\n * get(url, (req) => {\n *    const node = req.getDocumentElement();\n *    // Process XML DOM...\n * });\n * ```\n *\n * So for example, to load a diagram into an existing graph model, the following code is used.\n *\n * ```javascript\n * get(url, (req) => {\n *   const node = req.getDocumentElement();\n *   const dec = new Codec(node.ownerDocument);\n *   dec.decode(node, graph.getDataModel());\n * });\n * ```\n *\n * @param url URL to get the data from.\n * @param onload Optional function to execute for a successful response.\n * @param onerror Optional function to execute on error.\n * @param binary Optional boolean parameter that specifies if the request is binary.\n * @param timeout Optional timeout in ms before calling ontimeout.\n * @param ontimeout Optional function to execute on timeout.\n * @param headers Optional with headers, eg. {'Authorization': 'token xyz'}\n */\nexport const get = (url, onload = null, onerror = null, binary = false, timeout = null, ontimeout = null, headers = null) => {\n    const req = new MaxXmlRequest(url, null, 'GET');\n    const { setRequestHeaders } = req;\n    if (headers) {\n        req.setRequestHeaders = (request, params) => {\n            setRequestHeaders.apply(this, [request, params]);\n            for (const key in headers) {\n                request.setRequestHeader(key, headers[key]);\n            }\n        };\n    }\n    if (binary != null) {\n        req.setBinary(binary);\n    }\n    req.send(onload, onerror, timeout, ontimeout);\n    return req;\n};\n/**\n * Loads the URLs in the given array *asynchronously* and invokes the given function\n * if all requests returned with a valid 2xx status. The error handler is invoked\n * once on the first error or invalid response.\n *\n * @param urls Array of URLs to be loaded.\n * @param onload Callback with array of {@link MaxXmlRequest}s.\n * @param onerror Optional function to execute on error.\n */\nexport const getAll = (urls, onload, onerror) => {\n    let remain = urls.length;\n    const result = [];\n    let errors = 0;\n    const err = () => {\n        if (errors == 0 && onerror != null) {\n            onerror();\n        }\n        errors++;\n    };\n    for (let i = 0; i < urls.length; i += 1) {\n        ((url, index) => {\n            get(url, (req) => {\n                const status = req.getStatus();\n                if (status < 200 || status > 299) {\n                    err();\n                }\n                else {\n                    result[index] = req;\n                    remain--;\n                    if (remain == 0) {\n                        onload(result);\n                    }\n                }\n            }, err);\n        })(urls[i], i);\n    }\n    if (remain == 0) {\n        onload(result);\n    }\n};\n/**\n * Posts the specified params to the given URL *asynchronously* and invokes the given functions depending on the request status.\n * Returns the {@link MaxXmlRequest} in use.\n * Both functions take the {@link MaxXmlRequest} as the only parameter.\n * Make sure to use encodeURIComponent for the parameter values.\n *\n * Example:\n *\n * ```javascript\n * post(url, 'key=value', (req) => {\n *   alert('Ready: ' + req.isReady() + ' Status: ' + req.getStatus());\n *  // Process req.getDocumentElement() using DOM API if OK...\n * });\n * ```\n *\n * @param url URL to get the data from.\n * @param params Parameters for the post request.\n * @param onload Optional function to execute for a successful response.\n * @param onerror Optional function to execute on error.\n */\nexport const post = (url, params = null, onload, onerror = null) => {\n    return new MaxXmlRequest(url, params).send(onload, onerror);\n};\n/**\n * Submits the given parameters to the specified URL using {@link MaxXmlRequest.simulate} and returns the {@link MaxXmlRequest}.\n * Make sure to use encodeURIComponent for the parameter values.\n *\n * @param url URL to get the data from.\n * @param params Parameters for the form.\n * @param doc Document to create the form in.\n * @param target Target to send the form result to.\n */\nexport const submit = (url, params, doc, target) => {\n    return new MaxXmlRequest(url, params).simulate(doc, target);\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectIdentity from '../util/ObjectIdentity';\nimport { GlobalConfig } from '../util/config';\nimport Geometry from '../view/geometry/Geometry';\nimport Point from '../view/geometry/Point';\nimport { isInteger, isNumeric } from '../util/mathUtils';\nimport { getTextContent } from '../util/domUtils';\nimport { load } from '../util/requestUtils';\nimport { doEval, isElement } from '../internal/utils';\n/**\n * Generic codec for JavaScript objects that implements a mapping between\n * JavaScript objects and XML nodes that maps each field or element to an\n * attribute or child node, and vice versa.\n *\n * ### Atomic Values\n *\n * Consider the following example.\n *\n * ```javascript\n * const obj = new Object();\n * obj.foo = \"Foo\";\n * obj.bar = \"Bar\";\n * ```\n *\n * This object is encoded into an XML node using the following.\n *\n * ```javascript\n * const enc = new Codec();\n * const node = enc.encode(obj);\n * ```\n *\n * The output of the encoding may be viewed using {@link GlobalConfig.logger} as follows.\n *\n * ```javascript\n * GlobalConfig.logger.show();\n * GlobalConfig.logger.debug(mxUtils.getPrettyXml(node));\n * ```\n *\n * Finally, the result of the encoding looks as follows.\n *\n * ```javascript\n * <Object foo=\"Foo\" bar=\"Bar\"/>\n * ```\n *\n * In the above output, the foo and bar fields have been mapped to attributes\n * with the same names, and the name of the constructor was used for the\n * node name.\n *\n * ### Booleans\n *\n * Since booleans are numbers in JavaScript, all boolean values are encoded\n * into 1 for true and 0 for false. The decoder also accepts the string true\n * and false for boolean values.\n *\n * ### Objects\n *\n * The above scheme is applied to all atomic fields, that is, to all non-object\n * fields of an object. For object fields, a child node is created with a\n * special attribute that contains the field name. This special attribute is\n * called \"as\" and hence, as is a reserved word that should not be used for a\n * field name.\n *\n * Consider the following example where foo is an object and bar is an atomic\n * property of foo.\n *\n * ```javascript\n * const obj = {foo: {bar: \"Bar\"}};\n * ```\n *\n * This will be mapped to the following XML structure by ObjectCodec.\n *\n * ```javascript\n * <Object>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Object>\n * ```\n *\n * In the above output, the inner Object node contains the as-attribute that\n * specifies the field name in the enclosing object. That is, the field foo was\n * mapped to a child node with an as-attribute that has the value foo.\n *\n * ### Arrays\n *\n * Arrays are special objects that are either associative, in which case each\n * key, value pair is treated like a field where the key is the field name, or\n * they are a sequence of atomic values and objects, which is mapped to a\n * sequence of child nodes. For object elements, the above scheme is applied\n * without the use of the special as-attribute for creating each child. For\n * atomic elements, a special add-node is created with the value stored in the\n * value-attribute.\n *\n * For example, the following array contains one atomic value and one object\n * with a field called bar. Furthermore, it contains two associative entries\n * called bar with an atomic value, and foo with an object value.\n *\n * ```javascript\n * const obj = [\"Bar\", {bar: \"Bar\"}];\n * obj[\"bar\"] = \"Bar\";\n * obj[\"foo\"] = {bar: \"Bar\"};\n * ```\n *\n * This array is represented by the following XML nodes.\n *\n * ```javascript\n * <Array bar=\"Bar\">\n *   <add value=\"Bar\"/>\n *   <Object bar=\"Bar\"/>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Array>\n * ```\n *\n * The Array node name is the name of the constructor. The additional\n * as-attribute in the last child contains the key of the associative entry,\n * whereas the second last child is part of the array sequence and does not\n * have an as-attribute.\n *\n * ### References\n *\n * Objects may be represented as child nodes or attributes with ID values,\n * which are used to look up the object in a table within {@link Codec}. The\n * {@link isReference} function is in charge of deciding if a specific field should\n * be encoded as a reference or not. Its default implementation returns true if\n * the field name is in {@link idrefs}, an array of strings that is used to configure\n * the {@link ObjectCodec}.\n *\n * Using this approach, the mapping does not guarantee that the referenced\n * object itself exists in the document. The fields that are encoded as\n * references must be carefully chosen to make sure all referenced objects\n * exist in the document, or may be resolved by some other means if necessary.\n *\n * For example, in the case of the graph model all cells are stored in a tree\n * whose root is referenced by the model's root field. A tree is a structure\n * that is well suited for an XML representation, however, the additional edges\n * in the graph model have a reference to a source and target cell, which are\n * also contained in the tree. To handle this case, the source and target cell\n * of an edge are treated as references, whereas the children are treated as\n * objects. Since all cells are contained in the tree and no edge references a\n * source or target outside the tree, this setup makes sure all referenced\n * objects are contained in the document.\n *\n * In the case of a tree structure we must further avoid infinite recursion by\n * ignoring the parent reference of each child. This is done by returning true\n * in {@link isExcluded}, whose default implementation uses the array of excluded\n * field names passed to the ObjectCodec constructor.\n *\n * References are only used for cells in mxGraph. For defining other\n * referencable object types, the codec must be able to work out the ID of an\n * object. This is done by implementing {@link Codec.reference}. For decoding a\n * reference, the XML node with the respective id-attribute is fetched from the\n * document, decoded, and stored in a lookup table for later reference. For\n * looking up external objects, {@link Codec.lookup} may be implemented.\n *\n * ### Expressions\n *\n * For decoding JavaScript expressions, the add-node may be used with a text\n * content that contains the JavaScript expression. For example, the following\n * creates a field called foo in the enclosing object and assigns it the value\n * of `MyConstant.PROP`.\n *\n * ```javascript\n * <Object>\n *   <add as=\"foo\">MyConstant.PROP</add>\n * </Object>\n * ```\n *\n * The resulting object has a field called foo with the value \"myValue\" (assuming that `MyConstant.PROP=myValue`).\n * Its XML representation looks as follows.\n *\n * ```javascript\n * <Object foo=\"left\"/>\n * ```\n *\n * This means the expression is evaluated at decoding time and the result of\n * the evaluation is stored in the respective field. Valid expressions are all\n * JavaScript expressions, including function definitions, which are mapped to\n * functions on the resulting object.\n *\n * Expressions are only evaluated if {@link allowEval} is true.\n *\n * @category Serialization with Codecs\n */\nclass ObjectCodec {\n    constructor(template, exclude = [], idrefs = [], mapping = {}) {\n        this.template = template;\n        this.exclude = exclude;\n        this.idrefs = idrefs;\n        this.mapping = mapping;\n        this.reverse = {};\n        for (const i in this.mapping) {\n            this.reverse[this.mapping[i]] = i;\n        }\n    }\n    /**\n     * Returns the name used for the node names and lookup of the codec when\n     * classes are encoded and nodes are decoded. For classes to work with\n     * this the codec registry automatically adds an alias for the classname\n     * if that is different from what this returns.\n     *\n     * The default implementation returns the classname of the template class if no name is set.\n     */\n    getName() {\n        return this.name ?? this.template.constructor.name;\n    }\n    setName(name) {\n        this.name = name;\n    }\n    /**\n     * Returns a new instance of the template for this codec.\n     */\n    cloneTemplate() {\n        return new this.template.constructor();\n    }\n    /**\n     * Returns the field name for the given attribute name.\n     * Looks up the value in the {@link reverse} mapping or returns\n     * the input if there is no reverse mapping for the\n     * given name.\n     */\n    getFieldName(attributename) {\n        if (attributename != null) {\n            const mapped = this.reverse[attributename];\n            if (mapped != null) {\n                attributename = mapped;\n            }\n        }\n        return attributename;\n    }\n    /**\n     * Returns the attribute name for the given field name.\n     * Looks up the value in the {@link mapping} or returns\n     * the input if there is no mapping for the\n     * given name.\n     */\n    getAttributeName(fieldname) {\n        if (fieldname != null) {\n            const mapped = this.mapping[fieldname];\n            if (mapped != null) {\n                fieldname = mapped;\n            }\n        }\n        return fieldname;\n    }\n    /**\n     * Returns true if the given attribute is to be ignored by the codec. This\n     * implementation returns true if the given field name is in {@link exclude} or\n     * if the field name equals {@link ObjectIdentity.FIELD_NAME}.\n     *\n     * @param obj Object instance that contains the field.\n     * @param attr Fieldname of the field.\n     * @param value Value of the field.\n     * @param write Boolean indicating if the field is being encoded or decoded.\n     * Write is true if the field is being encoded, else it is being decoded.\n     */\n    isExcluded(obj, attr, value, write) {\n        return attr == ObjectIdentity.FIELD_NAME || this.exclude.indexOf(attr) >= 0;\n    }\n    /**\n     * Returns true if the given field name is to be treated\n     * as a textual reference (ID). This implementation returns\n     * true if the given field name is in {@link idrefs}.\n     *\n     * @param obj Object instance that contains the field.\n     * @param attr Field name of the field.\n     * @param value Value of the field.\n     * @param write Boolean indicating if the field is being encoded or decoded.\n     * Write is true if the field is being encoded, else it is being decoded.\n     */\n    isReference(obj, attr, value, write) {\n        return this.idrefs.indexOf(attr) >= 0;\n    }\n    /**\n     * Encodes the specified object and returns a node\n     * representing then given object. Calls {@link beforeEncode}\n     * after creating the node and {@link afterEncode} with the\n     * resulting node after processing.\n     *\n     * Enc is a reference to the calling encoder. It is used\n     * to encode complex objects and create references.\n     *\n     * This implementation encodes all variables of an\n     * object according to the following rules:\n     *\n     * - If the variable name is in {@link exclude} then it is ignored.\n     * - If the variable name is in {@link idrefs} then {@link Codec.getId}\n     * is used to replace the object with its ID.\n     * - The variable name is mapped using {@link mapping}.\n     * - If obj is an array and the variable name is numeric\n     * (ie. an index) then it is not encoded.\n     * - If the value is an object, then the codec is used to\n     * create a child node with the variable name encoded into\n     * the \"as\" attribute.\n     * - Else, if {@link encodeDefaults} is true or the value differs\n     * from the template value, then ...\n     * - ... if obj is not an array, then the value is mapped to\n     * an attribute.\n     * - ... else if obj is an array, the value is mapped to an\n     * add child with a value attribute or a text child node,\n     * if the value is a function.\n     *\n     * If no ID exists for a variable in {@link idrefs} or if an object\n     * cannot be encoded, a warning is issued using {@link GlobalConfig.logger}.\n     *\n     * Returns the resulting XML node that represents the given\n     * object.\n     *\n     * @param enc {@link Codec} that controls the encoding process.\n     * @param obj Object to be encoded.\n     */\n    encode(enc, obj) {\n        const node = enc.document.createElement(this.getName());\n        obj = this.beforeEncode(enc, obj, node);\n        this.encodeObject(enc, obj, node);\n        return this.afterEncode(enc, obj, node);\n    }\n    /**\n     * Encodes the value of each member in then given obj into the given node using\n     * {@link encodeValue}.\n     *\n     * @param enc {@link Codec} that controls the encoding process.\n     * @param obj Object to be encoded.\n     * @param node XML node that contains the encoded object.\n     */\n    encodeObject(enc, obj, node) {\n        enc.setAttribute(node, 'id', enc.getId(obj));\n        for (const i in obj) {\n            let name = i;\n            const value = obj[name];\n            if (value != null && !this.isExcluded(obj, name, value, true)) {\n                if (isInteger(name)) {\n                    name = null;\n                }\n                this.encodeValue(enc, obj, name, value, node);\n            }\n        }\n    }\n    /**\n     * Converts the given value according to the mappings\n     * and id-refs in this codec and uses {@link writeAttribute}\n     * to write the attribute into the given node.\n     *\n     * @param enc {@link Codec} that controls the encoding process.\n     * @param obj Object whose property is going to be encoded.\n     * @param name XML node that contains the encoded object.\n     * @param value Value of the property to be encoded.\n     * @param node XML node that contains the encoded object.\n     */\n    encodeValue(enc, obj, name, value, node) {\n        if (value != null) {\n            // TODO: What is the case where `name` can be `null`? =========================================================================\n            if (name != null && this.isReference(obj, name, value, true)) {\n                const tmp = enc.getId(value);\n                if (tmp == null) {\n                    GlobalConfig.logger.warn(`ObjectCodec.encode: No ID for ${this.getName()}.${name}=${value}`);\n                    return; // exit\n                }\n                value = tmp;\n            }\n            // Checks if the value is a default value and\n            // the name is correct\n            if (name == null || enc.encodeDefaults || this.template[name] != value) {\n                name = this.getAttributeName(name);\n                this.writeAttribute(enc, obj, name, value, node);\n            }\n        }\n    }\n    /**\n     * Writes the given value into node using {@link writePrimitiveAttribute}\n     * or {@link writeComplexAttribute} depending on the type of the value.\n     */\n    writeAttribute(enc, obj, name, value, node) {\n        if (typeof value !== 'object' /* primitive type */) {\n            this.writePrimitiveAttribute(enc, obj, name, value, node);\n        } /* complex type */\n        else {\n            this.writeComplexAttribute(enc, obj, name, value, node);\n        }\n    }\n    /**\n     * Writes the given value as an attribute of the given node.\n     */\n    writePrimitiveAttribute(enc, obj, name, value, node) {\n        value = this.convertAttributeToXml(enc, obj, name, value, node); // TODO: params don't seem to match - is this a bug? ===================================\n        if (name == null) {\n            const child = enc.document.createElement('add');\n            if (typeof value === 'function') {\n                child.appendChild(enc.document.createTextNode(value));\n            }\n            else {\n                enc.setAttribute(child, 'value', value);\n            }\n            node.appendChild(child);\n        }\n        else if (typeof value !== 'function') {\n            enc.setAttribute(node, name, value);\n        }\n    }\n    /**\n     * Writes the given value as a child node of the given node.\n     */\n    writeComplexAttribute(enc, obj, name, value, node) {\n        const child = enc.encode(value);\n        if (child != null) {\n            if (name != null) {\n                child.setAttribute('as', name);\n            }\n            node.appendChild(child);\n        }\n        else {\n            GlobalConfig.logger.warn(`ObjectCodec.encode: No node for ${this.getName()}.${name}: ${value}`);\n        }\n    }\n    /**\n     * Converts true to \"1\" and false to \"0\" is {@link isBooleanAttribute} returns true.\n     * All other values are not converted.\n     *\n     * @param enc {@link Codec} that controls the encoding process.\n     * @param obj Objec to convert the attribute for.\n     * @param name Name of the attribute to be converted.\n     * @param value Value to be converted.\n     */\n    convertAttributeToXml(enc, obj, name, value, node) {\n        // Makes sure to encode boolean values as numeric values\n        if (this.isBooleanAttribute(enc, obj, name, value)) {\n            // Checks if the value is true (do not use the value as is, because\n            // this would check if the value is not null, so 0 would be true)\n            value = value == true ? '1' : '0';\n        }\n        return value;\n    }\n    /**\n     * Returns true if the given object attribute is a boolean value.\n     *\n     * @param enc {@link Codec} that controls the encoding process.\n     * @param obj Object to convert the attribute for.\n     * @param name Name of the attribute to be converted.\n     * @param value Value of the attribute to be converted.\n     */\n    isBooleanAttribute(enc, obj, name, value) {\n        return typeof value.length === 'undefined' && (value == true || value == false);\n    }\n    /**\n     * Converts booleans and numeric values to the respective types. Values are\n     * numeric if {@link isNumericAttribute} returns true.\n     *\n     * @param dec {@link Codec} that controls the decoding process.\n     * @param attr XML attribute to be converted.\n     * @param obj Objec to convert the attribute for.\n     */\n    convertAttributeFromXml(dec, attr, obj) {\n        let { value } = attr;\n        if (this.isNumericAttribute(dec, attr, obj)) {\n            value = parseFloat(value);\n            if (Number.isNaN(value) || !Number.isFinite(value)) {\n                value = 0;\n            }\n        }\n        return value;\n    }\n    /**\n     * Returns true if the given XML attribute is or should be a numeric value.\n     *\n     * @param dec {@link Codec} that controls the decoding process.\n     * @param attr XML attribute to be converted.\n     * @param obj Object to convert the attribute for.\n     */\n    isNumericAttribute(dec, attr, obj) {\n        // Handles known numeric attributes for generic objects\n        return ((obj.constructor === Geometry &&\n            (attr.name === 'x' ||\n                attr.name === 'y' ||\n                attr.name === 'width' ||\n                attr.name === 'height')) ||\n            (obj.constructor === Point && (attr.name === 'x' || attr.name === 'y')) ||\n            isNumeric(attr.value));\n    }\n    /**\n     * Hook for subclassers to pre-process the object before\n     * encoding. This returns the input object. The return\n     * value of this function is used in {@link encode} to perform\n     * the default encoding into the given node.\n     *\n     * @param enc {@link Codec} that controls the encoding process.\n     * @param obj Object to be encoded.\n     * @param node XML node to encode the object into.\n     */\n    beforeEncode(enc, obj, node) {\n        return obj;\n    }\n    /**\n     * Hook for subclassers to post-process the node\n     * for the given object after encoding and return the\n     * post-processed node. This implementation returns\n     * the input node. The return value of this method\n     * is returned to the encoder from {@link encode}.\n     *\n     * @param enc {@link Codec} that controls the encoding process.\n     * @param obj Object to be encoded.\n     * @param node XML node that represents the default encoding.\n     */\n    afterEncode(enc, obj, node) {\n        return node;\n    }\n    /**\n     * Parses the given node into the object or returns a new object\n     * representing the given node.\n     *\n     * Dec is a reference to the calling decoder. It is used to decode\n     * complex objects and resolve references.\n     *\n     * If a node has an id attribute then the object cache is checked for the\n     * object. If the object is not yet in the cache then it is constructed\n     * using the constructor of {@link template} and cached in {@link Codec.objects}.\n     *\n     * This implementation decodes all attributes and childs of a node\n     * according to the following rules:\n     *\n     * - If the variable name is in {@link exclude} or if the attribute name is \"id\"\n     * or \"as\" then it is ignored.\n     * - If the variable name is in {@link idrefs} then {@link Codec.getObject} is used\n     * to replace the reference with an object.\n     * - The variable name is mapped using a reverse {@link mapping}.\n     * - If the value has a child node, then the codec is used to create a\n     * child object with the variable name taken from the \"as\" attribute.\n     * - If the object is an array and the variable name is empty then the\n     * value or child object is appended to the array.\n     * - If an add child has no value or the object is not an array then\n     * the child text content is evaluated using {@link eval}.\n     *\n     * For add nodes where the object is not an array and the variable name\n     * is defined, the default mechanism is used, allowing to override/add\n     * methods as follows:\n     *\n     * ```javascript\n     * <Object>\n     *   <add as=\"hello\"><![CDATA[\n     *     function(arg1) {\n     *       mxUtils.alert('Hello '+arg1);\n     *     }\n     *   ]]></add>\n     * </Object>\n     * ```\n     *\n     * If no object exists for an ID in {@link idrefs} a warning is issued\n     * using {@link GlobalConfig.logger}.\n     *\n     * Returns the resulting object that represents the given XML node\n     * or the object given to the method as the into parameter.\n     *\n     * @param dec {@link Codec} that controls the decoding process.\n     * @param node XML node to be decoded.\n     * @param into Optional object to encode the node into.\n     */\n    decode(dec, node, into) {\n        const id = node.getAttribute('id');\n        let obj = dec.objects[id];\n        if (obj == null) {\n            obj = into || this.cloneTemplate();\n            if (id != null) {\n                dec.putObject(id, obj);\n            }\n        }\n        const _node = this.beforeDecode(dec, node, obj);\n        this.decodeNode(dec, _node, obj);\n        return this.afterDecode(dec, _node, obj);\n    }\n    /**\n     * Calls {@link decodeAttributes} and {@link decodeChildren} for the given node.\n     *\n     * @param dec {@link Codec} that controls the decoding process.\n     * @param node XML node to be decoded.\n     * @param obj Objec to encode the node into.\n     */\n    decodeNode(dec, node, obj) {\n        if (node != null) {\n            this.decodeAttributes(dec, node, obj);\n            this.decodeChildren(dec, node, obj);\n        }\n    }\n    /**\n     * Decodes all attributes of the given node using {@link decodeAttribute}.\n     *\n     * @param dec {@link Codec} that controls the decoding process.\n     * @param node XML node to be decoded.\n     * @param obj Object to encode the node into.\n     */\n    decodeAttributes(dec, node, obj) {\n        const attrs = node.attributes;\n        if (attrs != null) {\n            for (let i = 0; i < attrs.length; i += 1) {\n                this.decodeAttribute(dec, attrs[i], obj);\n            }\n        }\n    }\n    /**\n     * Returns true if the given attribute should be ignored. This implementation\n     * returns true if the attribute name is \"as\" or \"id\".\n     *\n     * @param dec {@link Codec} that controls the decoding process.\n     * @param attr XML attribute to be decoded.\n     * @param obj Objec to encode the attribute into.\n     */\n    isIgnoredAttribute(dec, attr, obj) {\n        return attr.nodeName === 'as' || attr.nodeName === 'id';\n    }\n    /**\n     * Reads the given attribute into the specified object.\n     *\n     * @param dec {@link Codec} that controls the decoding process.\n     * @param attr XML attribute to be decoded.\n     * @param obj Objec to encode the attribute into.\n     */\n    decodeAttribute(dec, attr, obj) {\n        if (!this.isIgnoredAttribute(dec, attr, obj)) {\n            const name = attr.nodeName;\n            // Converts the string true and false to their boolean values.\n            // This may require an additional check on the obj to see if\n            // the existing field is a boolean value or uninitialized, in\n            // which case we may want to convert true and false to a string.\n            let value = this.convertAttributeFromXml(dec, attr, obj);\n            const fieldname = this.getFieldName(name);\n            if (this.isReference(obj, fieldname, value, false)) {\n                const tmp = dec.getObject(value);\n                if (tmp == null) {\n                    GlobalConfig.logger.warn(`ObjectCodec.decode: No object for ${this.getName()}.${name}=${value}`);\n                    return; // exit\n                }\n                value = tmp;\n            }\n            if (!this.isExcluded(obj, name, value, false)) {\n                obj[name] = value;\n            }\n        }\n    }\n    /**\n     * Decodes all children of the given node using {@link decodeChild}.\n     *\n     * @param dec {@link Codec} that controls the decoding process.\n     * @param node XML node to be decoded.\n     * @param obj Objec to encode the node into.\n     */\n    decodeChildren(dec, node, obj) {\n        let child = node.firstChild;\n        while (child) {\n            const tmp = child.nextSibling;\n            if (isElement(child) && !this.processInclude(dec, child, obj)) {\n                this.decodeChild(dec, child, obj);\n            }\n            child = tmp;\n        }\n    }\n    /**\n     * Reads the specified child into the given object.\n     *\n     * @param dec {@link Codec} that controls the decoding process.\n     * @param child XML child element to be decoded.\n     * @param obj Objec to encode the node into.\n     */\n    decodeChild(dec, child, obj) {\n        const fieldname = this.getFieldName(child.getAttribute('as'));\n        if (fieldname == null || !this.isExcluded(obj, fieldname, child, false)) {\n            const template = this.getFieldTemplate(obj, fieldname, child);\n            let value = null;\n            if (child.nodeName === 'add') {\n                value = child.getAttribute('value');\n                if (value == null && ObjectCodec.allowEval) {\n                    value = doEval(getTextContent(child));\n                }\n            }\n            else {\n                value = dec.decode(child, template);\n            }\n            try {\n                this.addObjectValue(obj, fieldname, value, template);\n            }\n            catch (e) {\n                throw new Error(`${e.message} for ${child.nodeName}`);\n            }\n        }\n    }\n    /**\n     * Returns the template instance for the given field. This returns the\n     * value of the field, null if the value is an array or an empty collection\n     * if the value is a collection. The value is then used to populate the\n     * field for a new instance. For strongly typed languages it may be\n     * required to override this to return the correct collection instance\n     * based on the encoded child.\n     */\n    getFieldTemplate(obj, fieldname, child) {\n        let template = obj[fieldname];\n        // Non-empty arrays are replaced completely\n        if (template instanceof Array && template.length > 0) {\n            template = null;\n        }\n        return template;\n    }\n    /**\n     * Sets the decoded child node as a value of the given object. If the\n     * object is a map, then the value is added with the given field name as a\n     * key. If the field name is not empty, then setFieldValue is called or\n     * else, if the object is a collection, the value is added to the\n     * collection. For strongly typed languages it may be required to\n     * override this with the correct code to add an entry to an object.\n     */\n    addObjectValue(obj, fieldname, value, template) {\n        if (value != null && value !== template) {\n            if (fieldname != null && fieldname.length > 0) {\n                obj[fieldname] = value;\n            }\n            else {\n                obj.push(value);\n            }\n        }\n    }\n    /**\n     * Returns true if the given node is an include directive and\n     * executes the include by decoding the XML document. Returns\n     * false if the given node is not an include directive.\n     *\n     * @param dec {@link Codec} that controls the encoding/decoding process.\n     * @param node XML node to be checked.\n     * @param into Optional object to pass-thru to the codec.\n     */\n    processInclude(dec, node, into) {\n        if (node.nodeName === 'include') {\n            const name = node.getAttribute('name');\n            if (name != null) {\n                try {\n                    const xml = load(name).getDocumentElement();\n                    if (xml != null) {\n                        dec.decode(xml, into);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Hook for subclassers to pre-process the node for\n     * the specified object and return the node to be\n     * used for further processing by {@link decode}.\n     * The object is created based on the template in the\n     * calling method and is never null. This implementation\n     * returns the input node. The return value of this\n     * function is used in {@link decode} to perform\n     * the default decoding into the given object.\n     *\n     * @param dec {@link Codec} that controls the decoding process.\n     * @param node XML node to be decoded.\n     * @param obj Object to encode the node into.\n     */\n    beforeDecode(dec, node, obj) {\n        return node;\n    }\n    /**\n     * Hook for subclassers to post-process the object after\n     * decoding. This implementation returns the given object\n     * without any changes. The return value of this method\n     * is returned to the decoder from {@link decode}.\n     *\n     * @param dec {@link Codec} that controls the encoding process.\n     * @param node XML node to be decoded.\n     * @param obj Object that represents the default decoding.\n     */\n    afterDecode(dec, node, obj) {\n        return obj;\n    }\n}\n/**\n * Static global switch that specifies if expressions in arrays are allowed.\n *\n * **WARNING**: Enabling this switch carries a possible security risk.\n *\n * @default false\n */\nObjectCodec.allowEval = false;\nexport default ObjectCodec;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from './ObjectCodec';\n/**\n * Singleton class that acts as a global registry for codecs.\n *\n * ### Adding a Codec\n *\n * 1. Define a default codec with a new instance of the object to be handled.\n *\n *     ```javascript\n *     const codec = new ObjectCodec(new GraphDataModel());\n *     ```\n *\n * 2. Define the functions required for encoding and decoding objects.\n *\n *     ```javascript\n *     codec.encode = function(enc, obj) { ... }\n *     codec.decode = function(dec: Codec, node: Element, into: any): any { ... }\n *     ```\n *\n * 3. Register the codec in the CodecRegistry.\n *\n *     ```javascript\n *     CodecRegistry.register(codec);\n *     ```\n *\n * {@link ObjectCodec.decode} may be used to either create a new instance of an object or to configure an existing instance,\n * in which case the into argument points to the existing object. In this case, we say the codec \"configures\" the object.\n *\n * @category Serialization with Codecs\n */\nclass CodecRegistry {\n    /**\n     * Registers a new codec and associates the name of the codec via {@link ObjectCodec.getName} with the codec object.\n     *\n     * @param codec ObjectCodec to be registered.\n     * @param registerAlias if `true`, register an alias if the codec name doesn't match the name of the constructor of {@link ObjectCodec.template}.\n     */\n    static register(codec, registerAlias = true) {\n        if (codec != null) {\n            const name = codec.getName();\n            CodecRegistry.codecs[name] = codec;\n            const classname = codec.template.constructor.name;\n            if (registerAlias && classname !== name) {\n                CodecRegistry.addAlias(classname, name);\n            }\n        }\n        return codec;\n    }\n    /**\n     * Adds an alias for mapping a classname to a codec name.\n     */\n    static addAlias(classname, codecname) {\n        CodecRegistry.aliases[classname] = codecname;\n    }\n    /**\n     * Returns a codec that handles objects that are constructed using the given constructor or a codec registered under the provided name.\n     *\n     * When passing a name, the method first check if an alias exists for the name, and if so, it uses it to retrieve the codec.\n     *\n     * If there is no registered Codec, the method tries to register a new Codec using the provided constructor.\n     *\n     * @param constructorOrName JavaScript constructor function of the Codec or Codec name.\n     */\n    static getCodec(constructorOrName) {\n        if (constructorOrName == null) {\n            return null;\n        }\n        let codec = null;\n        // Equivalent of calling import { getFunctionName } from '../util/StringUtils';\n        let name = typeof constructorOrName === 'string' ? constructorOrName : constructorOrName.name;\n        const tmp = CodecRegistry.aliases[name];\n        if (tmp != null) {\n            name = tmp;\n        }\n        codec = CodecRegistry.codecs[name] ?? null;\n        // Registers a new default codec for the given constructor if no codec has been previously defined.\n        if (codec == null) {\n            try {\n                codec = new ObjectCodec(new constructorOrName());\n                CodecRegistry.register(codec);\n            }\n            catch (e) {\n                // ignore\n            }\n        }\n        return codec;\n    }\n    /**\n     * First try to get the codec by the name it is registered with. If it doesn't exist, use the alias eventually declared\n     * to get the codec.\n     * @param name the name of the codec that is willing to be retrieved.\n     */\n    static getCodecByName(name) {\n        let codec = CodecRegistry.codecs[name];\n        if (!codec) {\n            const alias = CodecRegistry.aliases[name];\n            if (alias) {\n                codec = CodecRegistry.codecs[alias];\n            }\n        }\n        return codec ?? null;\n    }\n}\nCodecRegistry.codecs = {};\n/**\n * Maps from classnames to codec names.\n */\nCodecRegistry.aliases = {};\nexport default CodecRegistry;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CellPath from '../view/cell/CellPath';\nimport CodecRegistry from './CodecRegistry';\nimport Cell from '../view/cell/Cell';\nimport { GlobalConfig } from '../util/config';\nimport { getFunctionName } from '../util/StringUtils';\nimport { importNode, isNode } from '../util/domUtils';\nimport { isElement } from '../internal/utils';\nconst createXmlDocument = () => {\n    return document.implementation.createDocument('', '', null);\n};\n/**\n * XML codec for JavaScript object graphs. See {@link ObjectCodec} for a\n * description of the general encoding/decoding scheme. This class uses the\n * codecs registered in {@link CodecRegistry} for encoding/decoding each object.\n *\n * ### References\n *\n * In order to resolve references, especially forward references, the Codec\n * constructor must be given the document that contains the referenced\n * elements.\n *\n * ### Examples\n *\n * The following code is used to encode a graph model.\n *\n * ```javascript\n * const encoder = new Codec();\n * const result = encoder.encode(graph.getDataModel());\n * const xml = xmlUtils.getXml(result);\n * ```\n *\n * **WARN**: as of version 0.6.0, the codecs provided by maxGraph are no longer registered by default, they **MUST** be registered before\n * performing `encode` or `decode`. For instance, you can use the {@link registerAllCodecs} function (or other related functions)\n * to register the codecs.\n *\n * #### Example\n *\n * Using the code below, an XML document is decoded into an existing model. The\n * document may be obtained using {@link parseXml} for parsing an XML string.\n *\n * ```javascript\n * const doc = xmlUtils.parseXml(xmlString);\n * const codec = new Codec(doc);\n * codec.decode(doc.documentElement, graph.getDataModel());\n * ```\n *\n * #### Example\n *\n * This example demonstrates parsing a list of isolated cells into an existing\n * graph model. Note that the cells do not have a parent reference so they can\n * be added anywhere in the cell hierarchy after parsing.\n *\n * ```javascript\n * const xml = `<GraphDataModel>\n *   <root>\n *     <Cell id=\"2\" value=\"Hello,\" vertex=\"1\">\n *       <Geometry _x=\"20\" _y=\"20\" _width=\"80\" _height=\"30\" as=\"geometry\"/>\n *     </Cell>\n *     <Cell id=\"3\" value=\"World!\" vertex=\"1\">\n *       <Geometry _x=\"200\" _y=\"150\" _width=\"80\" _height=\"30\" as=\"geometry\"/>\n *     </Cell>\n *     <Cell id=\"4\" value=\"\" edge=\"1\" source=\"2\" target=\"3\">\n *       <Geometry relative=\"1\" as=\"geometry\"/>\n *     </Cell>\n *   </root>\n * </GraphDataModel>\n * `;\n * const doc = xmlUtils.parseXml(xml);\n * const codec = new Codec(doc);\n * let elt = doc.documentElement.firstChild;\n * const cells = [];\n *\n * while (elt != null) {\n *   cells.push(codec.decode(elt));\n *   elt = elt.nextSibling;\n * }\n * graph.addCells(cells);\n * ```\n *\n * #### Example\n *\n * Using the following code, the selection cells of a graph are encoded and the\n * output is displayed in a dialog box.\n *\n * ```javascript\n * const enc = new Codec();\n * const cells = graph.getSelectionCells();\n * const xml = xmlUtils.getPrettyXml(enc.encode(cells));\n * ```\n *\n * Newlines in the XML can be converted to <br>, in which case a '<br>' argument\n * must be passed to {@link getXml} as the second argument.\n *\n * ### Debugging\n *\n * For debugging, I/O you can use the following code to get the sequence of\n * encoded objects:\n *\n * ```javascript\n * const oldEncode = encode;\n * encode(obj)\n * {\n *   GlobalConfig.logger.show();\n *   GlobalConfig.logger.debug('Codec.encode: obj=' + StringUtils.getFunctionName(obj.constructor));\n *\n *   return oldEncode.apply(this, arguments);\n * };\n * ```\n *\n * Note that the I/O system adds object codecs for new object automatically. For\n * decoding those objects, the constructor should be written as follows:\n *\n * ```javascript\n * var MyObj(name)\n * {\n *   // ...\n * };\n * ```\n *\n * @category Serialization with Codecs\n */\nclass Codec {\n    constructor(document = createXmlDocument()) {\n        /**\n         * Lookup table for resolving IDs to elements.\n         */\n        this.elements = null; // TODO why not { [key: string]: Element } | null\n        /**\n         * Specifies if default values should be encoded. Default is false.\n         */\n        this.encodeDefaults = false;\n        this.document = document;\n        this.objects = {};\n    }\n    /**\n     * Associates the given object with the given ID and returns the given object.\n     *\n     * @param id ID for the object to be associated with.\n     * @param obj Object to be associated with the ID.\n     */\n    putObject(id, obj) {\n        this.objects[id] = obj;\n        return obj;\n    }\n    /**\n     * Returns the decoded object for the element with the specified ID in\n     * {@link document}. If the object is not known then {@link lookup} is used to find an\n     * object. If no object is found, then the element with the respective ID\n     * from the document is parsed using {@link decode}.\n     */\n    getObject(id) {\n        let obj = null;\n        if (id != null) {\n            obj = this.objects[id];\n            if (obj == null) {\n                obj = this.lookup(id);\n                if (obj == null) {\n                    const node = this.getElementById(id);\n                    if (node != null) {\n                        obj = this.decode(node);\n                    }\n                }\n            }\n        }\n        return obj;\n    }\n    /**\n     * Hook for subclassers to implement a custom lookup mechanism for cell IDs.\n     * This implementation always returns null.\n     *\n     * Example:\n     *\n     * ```javascript\n     * const codec = new Codec();\n     * codec.lookup(id)\n     * {\n     *   return model.getCell(id);\n     * };\n     * ```\n     *\n     * @param id ID of the object to be returned.\n     */\n    lookup(id) {\n        return null;\n    }\n    /**\n     * Returns the element with the given ID from {@link document}.\n     *\n     * @param id String that contains the ID.\n     */\n    getElementById(id) {\n        this.updateElements();\n        return this.elements[id];\n    }\n    updateElements() {\n        if (this.elements == null) {\n            this.elements = {};\n            if (this.document.documentElement != null) {\n                this.addElement(this.document.documentElement);\n            }\n        }\n    }\n    /**\n     * Adds the given element to {@link elements} if it has an ID.\n     */\n    addElement(node) {\n        if (isElement(node)) {\n            const id = node.getAttribute('id');\n            if (id != null) {\n                if (this.elements[id] == null) {\n                    this.elements[id] = node;\n                }\n                else if (this.elements[id] !== node) {\n                    throw new Error(`${id}: Duplicate ID`);\n                }\n            }\n        }\n        let nodeChild = node.firstChild;\n        while (nodeChild != null) {\n            this.addElement(nodeChild);\n            nodeChild = nodeChild.nextSibling;\n        }\n    }\n    /**\n     * Returns the ID of the specified object. This implementation\n     * calls {@link reference} first and if that returns null handles\n     * the object as an {@link Cell} by returning their IDs using\n     * {@link Cell.getId}. If no ID exists for the given cell, then\n     * an on-the-fly ID is generated using {@link CellPath.create}.\n     *\n     * @param obj Object to return the ID for.\n     */\n    getId(obj) {\n        let id = null;\n        if (obj != null) {\n            id = this.reference(obj);\n            if (id == null && obj instanceof Cell) {\n                id = obj.getId();\n                if (id == null) {\n                    // Uses an on-the-fly Id\n                    id = CellPath.create(obj);\n                    if (id.length === 0) {\n                        id = 'root';\n                    }\n                }\n            }\n        }\n        return id;\n    }\n    /**\n     * Hook for subclassers to implement a custom method\n     * for retrieving IDs from objects. This implementation\n     * always returns null.\n     *\n     * Example:\n     *\n     * ```javascript\n     * const codec = new Codec();\n     * codec.reference(obj)\n     * {\n     *   return obj.getCustomId();\n     * };\n     * ```\n     *\n     * @param obj Object whose ID should be returned.\n     */\n    reference(obj) {\n        return null;\n    }\n    /**\n     * Encodes the specified object and returns the resulting XML node.\n     *\n     * @param obj Object to be encoded.\n     */\n    encode(obj) {\n        let node = null;\n        if (obj != null && obj.constructor != null) {\n            const enc = CodecRegistry.getCodec(obj.constructor);\n            if (enc != null) {\n                node = enc.encode(this, obj);\n            }\n            else if (isNode(obj)) {\n                node = importNode(this.document, obj, true);\n            }\n            else {\n                GlobalConfig.logger.warn(`Codec.encode: No codec for ${getFunctionName(obj.constructor)}`);\n            }\n        }\n        return node;\n    }\n    /**\n     * Decodes the given XML node. The optional \"into\"\n     * argument specifies an existing object to be\n     * used. If no object is given, then a new instance\n     * is created using the constructor from the codec.\n     *\n     * The function returns the passed in object or\n     * the new instance if no object was given.\n     *\n     * @param node XML node to be decoded.\n     * @param into Optional object to be decoded into.\n     */\n    decode(node, into) {\n        this.updateElements();\n        let obj = null;\n        if (isElement(node)) {\n            const dec = CodecRegistry.getCodecByName(node.nodeName);\n            if (dec != null) {\n                obj = dec.decode(this, node, into);\n            }\n            else {\n                obj = node.cloneNode(true);\n                obj.removeAttribute('as');\n            }\n        }\n        return obj;\n    }\n    /**\n     * Encoding of cell hierarchies is built-into the core, but\n     * is a higher-level function that needs to be explicitely\n     * used by the respective object encoders (eg. {@link ModelCodec},\n     * {@link ChildChangeCodec} and {@link RootChangeCodec}). This\n     * implementation writes the given cell and its children as a\n     * (flat) sequence into the given node. The children are not\n     * encoded if the optional includeChildren is false. The\n     * function is in charge of adding the result into the\n     * given node and has no return value.\n     *\n     * @param cell {@link mxCell} to be encoded.\n     * @param node Parent XML node to add the encoded cell into.\n     * @param includeChildren Optional boolean indicating if the\n     * function should include all descendents. Default is true.\n     */\n    encodeCell(cell, node, includeChildren) {\n        const appendMe = this.encode(cell);\n        if (appendMe) {\n            node.appendChild(appendMe);\n        }\n        if (includeChildren == null || includeChildren) {\n            const childCount = cell.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                this.encodeCell(cell.getChildAt(i), node);\n            }\n        }\n    }\n    /**\n     * Returns true if the given codec is a cell codec. This uses\n     * {@link CellCodec.isCellCodec} to check if the codec is of the\n     * given type.\n     */\n    isCellCodec(codec) {\n        if (codec != null && 'isCellCodec' in codec) {\n            return codec.isCellCodec();\n        }\n        return false;\n    }\n    /**\n     * Decodes cells that have been encoded using inversion, ie.\n     * where the user object is the enclosing node in the XML,\n     * and restores the group and graph structure in the cells.\n     * Returns a new {@link Cell} instance that represents the\n     * given node.\n     *\n     * @param node XML node that contains the cell data.\n     * @param restoreStructures Optional boolean indicating whether\n     * the graph structure should be restored by calling insert\n     * and insertEdge on the parent and terminals, respectively.\n     * Default is `true`.\n     */\n    decodeCell(node, restoreStructures = true) {\n        if (!isElement(node)) {\n            return null;\n        }\n        // Tries to find a codec for the given node name. If that does\n        // not return a codec then the node is the user object (an XML node\n        // that contains the mxCell, aka inversion).\n        let decoder = CodecRegistry.getCodec(node.nodeName);\n        // Tries to find the codec for the cell inside the user object.\n        // This assumes all node names inside the user object are either\n        // not registered or they correspond to a class for cells.\n        if (!this.isCellCodec(decoder)) {\n            let child = node.firstChild;\n            while (child != null && !this.isCellCodec(decoder)) {\n                decoder = CodecRegistry.getCodec(child.nodeName);\n                child = child.nextSibling;\n            }\n        }\n        if (!this.isCellCodec(decoder)) {\n            decoder = CodecRegistry.getCodec(Cell);\n        }\n        const cell = decoder?.decode(this, node);\n        if (restoreStructures) {\n            this.insertIntoGraph(cell);\n        }\n        return cell;\n    }\n    /**\n     * Inserts the given cell into its parent and terminal cells.\n     */\n    insertIntoGraph(cell) {\n        const { parent } = cell;\n        const source = cell.getTerminal(true);\n        const target = cell.getTerminal(false);\n        // Fixes possible inconsistencies during insert into graph\n        cell.setTerminal(null, false);\n        cell.setTerminal(null, true);\n        cell.parent = null;\n        if (parent != null) {\n            if (parent === cell) {\n                throw new Error(`${parent.id}: Self Reference`);\n            }\n            else {\n                parent.insert(cell);\n            }\n        }\n        if (source != null) {\n            source.insertEdge(cell, true);\n        }\n        if (target != null) {\n            target.insertEdge(cell, false);\n        }\n    }\n    /**\n     * Sets the attribute on the specified node to value. This is a\n     * helper method that makes sure the attribute and value arguments\n     * are not null.\n     *\n     * @param node XML node to set the attribute for.\n     * @param attribute The name of the attribute to be set.\n     * @param value New value of the attribute.\n     */\n    setAttribute(node, attribute, value) {\n        if (attribute != null && value != null) {\n            node.setAttribute(attribute, value);\n        }\n    }\n}\nexport default Codec;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { NODE_TYPE, NS_SVG } from './Constants';\nimport Point from '../view/geometry/Point';\nimport { htmlEntities, trim } from './StringUtils';\nimport TemporaryCellStates from '../view/cell/TemporaryCellStates';\nimport { getTextContent } from './domUtils';\nimport Codec from '../serialization/Codec';\nimport { isElement } from '../internal/utils';\n/**\n * Returns a new, empty XML document.\n */\nexport const createXmlDocument = () => {\n    return document.implementation.createDocument('', '', null);\n};\nexport const parseXml = (xmlString) => {\n    return new DOMParser().parseFromString(xmlString, 'text/xml');\n};\nexport const getViewXml = (graph, scale = 1, cells = null, x0 = 0, y0 = 0) => {\n    if (cells == null) {\n        const model = graph.getDataModel();\n        cells = [model.getRoot()];\n    }\n    const view = graph.getView();\n    let result = null;\n    // Disables events on the view\n    const eventsEnabled = view.isEventsEnabled();\n    view.setEventsEnabled(false);\n    // Workaround for label bounds not taken into account for image export.\n    // Creates a temporary draw pane which is used for rendering the text.\n    // Text rendering is required for finding the bounds of the labels.\n    const { drawPane } = view;\n    const { overlayPane } = view;\n    if (graph.dialect === 'svg') {\n        view.drawPane = document.createElementNS(NS_SVG, 'g');\n        view.canvas.appendChild(view.drawPane);\n        // Redirects cell overlays into temporary container\n        view.overlayPane = document.createElementNS(NS_SVG, 'g');\n        view.canvas.appendChild(view.overlayPane);\n    }\n    else {\n        view.drawPane = view.drawPane.cloneNode(false);\n        view.canvas.appendChild(view.drawPane);\n        // Redirects cell overlays into temporary container\n        view.overlayPane = view.overlayPane.cloneNode(false);\n        view.canvas.appendChild(view.overlayPane);\n    }\n    // Resets the translation\n    const translate = view.getTranslate();\n    view.translate = new Point(x0, y0);\n    // Creates the temporary cell states in the view\n    const temp = new TemporaryCellStates(graph.getView(), scale, cells);\n    try {\n        const enc = new Codec();\n        result = enc.encode(graph.getView());\n    }\n    finally {\n        temp.destroy();\n        view.translate = translate;\n        view.canvas.removeChild(view.drawPane);\n        view.canvas.removeChild(view.overlayPane);\n        view.drawPane = drawPane;\n        view.overlayPane = overlayPane;\n        view.setEventsEnabled(eventsEnabled);\n    }\n    return result;\n};\n/**\n * Returns the XML content of the specified node.\n *\n * All `\\n` are then replaced with the linefeed parameter value.\n *\n * @param node DOM node to return the XML for.\n * @param linefeed Optional string that linefeed are converted into. Default is `&#xa;`.\n */\nexport const getXml = (node, linefeed = '&#xa;') => {\n    const xmlSerializer = new XMLSerializer();\n    let xml = xmlSerializer.serializeToString(node);\n    // Replaces linefeed with HTML Entities.\n    xml = xml.replace(/\\n/g, linefeed);\n    return xml;\n};\n/**\n * Returns a pretty printed string that represents the XML tree for the\n * given node. This method should only be used to print XML for reading,\n * use <getXml> instead to obtain a string for processing.\n *\n * @param node DOM node to return the XML for.\n * @param tab Optional string that specifies the indentation for one level.\n * @param indent Optional string that represents the current indentation.\n * @param newline Optional string that represents a linefeed.\n * @param ns Optional string that represents the target namespace URI.\n */\nexport const getPrettyXml = (node, tab = '  ', indent = '', newline = '\\n', ns = null) => {\n    const result = [];\n    if (node != null) {\n        if (node.namespaceURI != null && node.namespaceURI !== ns) {\n            ns = node.namespaceURI;\n            if (node.getAttribute('xmlns') == null) {\n                node.setAttribute('xmlns', node.namespaceURI);\n            }\n        }\n        if (node.nodeType === NODE_TYPE.DOCUMENT) {\n            result.push(getPrettyXml(node.documentElement, tab, indent, newline, ns));\n        }\n        else if (node.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT) {\n            let tmp = node.firstChild;\n            if (tmp != null) {\n                while (tmp != null) {\n                    result.push(getPrettyXml(tmp, tab, indent, newline, ns));\n                    tmp = tmp.nextSibling;\n                }\n            }\n        }\n        else if (node.nodeType === NODE_TYPE.COMMENT) {\n            const value = getTextContent(node);\n            if (value.length > 0) {\n                result.push(`${indent}<!--${value}-->${newline}`);\n            }\n        }\n        else if (node.nodeType === NODE_TYPE.TEXT) {\n            const value = trim(getTextContent(node));\n            if (value && value.length > 0) {\n                result.push(indent + htmlEntities(value, false) + newline);\n            }\n        }\n        else if (node.nodeType === NODE_TYPE.CDATA) {\n            const value = getTextContent(node);\n            if (value.length > 0) {\n                result.push(`${indent}<![CDATA[${value}]]${newline}`);\n            }\n        }\n        else {\n            result.push(`${indent}<${node.nodeName}`);\n            // Creates the string with the node attributes\n            // and converts all HTML entities in the values\n            const attrs = node.attributes;\n            if (attrs != null) {\n                for (let i = 0; i < attrs.length; i += 1) {\n                    const val = htmlEntities(attrs[i].value);\n                    result.push(` ${attrs[i].nodeName}=\"${val}\"`);\n                }\n            }\n            // Recursively creates the XML string for each child\n            // node and appends it here with an indentation\n            let tmp = node.firstChild;\n            if (tmp != null) {\n                result.push(`>${newline}`);\n                while (tmp != null) {\n                    result.push(getPrettyXml(tmp, tab, indent + tab, newline, ns));\n                    tmp = tmp.nextSibling;\n                }\n                result.push(`${indent}</${node.nodeName}>${newline}`);\n            }\n            else {\n                result.push(` />${newline}`);\n            }\n        }\n    }\n    return result.join('');\n};\n/**\n * Returns the first node where attr equals value.\n * This implementation does not use XPath.\n */\nexport const findNode = (node, attr, value) => {\n    if (isElement(node)) {\n        const tmp = node.getAttribute(attr);\n        if (tmp && tmp === value) {\n            return node;\n        }\n    }\n    node = node.firstChild;\n    while (node) {\n        const result = findNode(node, attr, value);\n        if (result) {\n            return result;\n        }\n        node = node.nextSibling;\n    }\n    return null;\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { isNullish, matchBinaryMask } from '../../internal/utils';\nimport { mod } from '../../util/mathUtils';\nimport { getAlignmentAsPoint } from '../../util/styleUtils';\nimport Client from '../../Client';\nimport { ABSOLUTE_LINE_HEIGHT, DEFAULT_FONTFAMILY, DEFAULT_FONTSIZE, FONT_STYLE_MASK, LINE_HEIGHT, NONE, NS_SVG, NS_XLINK, WORD_WRAP, } from '../../util/Constants';\nimport Rectangle from '../geometry/Rectangle';\nimport AbstractCanvas2D from './AbstractCanvas2D';\nimport { getXml } from '../../util/xmlUtils';\nimport { isNode, write } from '../../util/domUtils';\nimport { htmlEntities, trim } from '../../util/StringUtils';\n// Activates workaround for gradient ID resolution if base tag is used.\nconst useAbsoluteIds = typeof DOMParser === 'function' &&\n    !Client.IS_CHROMEAPP &&\n    !Client.IS_EDGE &&\n    document.getElementsByTagName('base').length > 0;\n/**\n * Extends {@link AbstractCanvas2D} to implement a canvas for SVG.\n * This canvas writes all calls as SVG output to the given SVG root node.\n *\n * ```javascript\n * const svgDoc = mxUtils.createXmlDocument();\n * const root = (svgDoc.createElementNS != null) ?\n * \t\tsvgDoc.createElementNS(mxConstants.NS_SVG, 'svg') : svgDoc.createElement('svg');\n *\n * if (svgDoc.createElementNS == null) {\n *   root.setAttribute('xmlns', constants.NS_SVG);\n *   root.setAttribute('xmlns:xlink', constants.NS_XLINK);\n * } else {\n *   root.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', constants.NS_XLINK);\n * }\n *\n * var bounds = graph.getGraphBounds();\n * root.setAttribute('width', (bounds.x + bounds.width + 4) + 'px');\n * root.setAttribute('height', (bounds.y + bounds.height + 4) + 'px');\n * root.setAttribute('version', '1.1');\n *\n * svgDoc.appendChild(root);\n *\n * var svgCanvas = new mxSvgCanvas2D(root);\n * ```\n *\n *\n * To disable anti-aliasing in the output, use the following code.\n * ```javascript\n * graph.view.canvas.ownerSVGElement.setAttribute('shape-rendering', 'crispEdges');\n * ```\n * Or set the respective attribute in the SVG element directly.\n */\nclass SvgCanvas2D extends AbstractCanvas2D {\n    constructor(root, styleEnabled) {\n        super();\n        this.defs = null;\n        this.styleEnabled = true;\n        /**\n         * Holds the current DOM node.\n         */\n        this.node = null;\n        /**\n         * Specifies if plain text output should match the vertical HTML alignment.\n         * @default true.\n         */\n        this.matchHtmlAlignment = true;\n        /**\n         * Specifies if text output should be enabled.\n         * @default true\n         */\n        this.textEnabled = true;\n        /**\n         * Specifies if use of foreignObject for HTML markup is allowed.\n         * @default true\n         */\n        this.foEnabled = true;\n        /**\n         * Specifies the fallback text for unsupported foreignObjects in exported documents.\n         * If this is set to `null` then no fallback text is added to the exported document.\n         * @default [Object]\n         */\n        this.foAltText = '[Object]';\n        /**\n         * Offset to be used for foreignObjects.\n         * @default 0\n         */\n        this.foOffset = 0;\n        /**\n         * Offset to be used for text elements.\n         * @default 0\n         */\n        this.textOffset = 0;\n        /**\n         * Offset to be used for image elements.\n         * @default 0\n         */\n        this.imageOffset = 0;\n        /**\n         * Adds transparent paths for strokes.\n         * @default 0\n         */\n        this.strokeTolerance = 0;\n        /**\n         * Minimum stroke width for output.\n         * @default 1\n         */\n        this.minStrokeWidth = 1;\n        /**\n         * Local counter for references in SVG export.\n         * @default 0\n         */\n        this.refCount = 0;\n        /**\n         * Correction factor for {@link LINE_HEIGHT} in HTML output.\n         * @default 1\n         */\n        this.lineHeightCorrection = 1;\n        /**\n         * Default value for active pointer events.\n         * @default all\n         */\n        this.pointerEventsValue = 'all';\n        /**\n         * Padding to be added for text that is not wrapped to account for differences in font metrics on different platforms in pixels.\n         * @default 10.\n         */\n        this.fontMetricsPadding = 10;\n        /**\n         * Specifies if offsetWidth and offsetHeight should be cached. This is used to speed up repaint of text in {@link updateText}.\n         * @default true\n         */\n        this.cacheOffsetSize = true;\n        this.originalRoot = null;\n        /**\n         * Reference to the container for the SVG content.\n         */\n        this.root = root;\n        /**\n         * Local cache of gradients for quick lookups.\n         */\n        this.gradients = {};\n        /**\n         * Reference to the defs section of the SVG document. Only for export.\n         */\n        this.defs = null;\n        /**\n         * Stores the value of styleEnabled passed to the constructor.\n         */\n        this.styleEnabled = styleEnabled != null ? styleEnabled : false;\n        let svg = null;\n        // Adds optional defs section for export\n        if (root.ownerDocument !== document) {\n            let node = root;\n            // Finds owner SVG element in XML DOM\n            while (node && node.nodeName !== 'svg') {\n                node = node.parentElement;\n            }\n            svg = node;\n        }\n        if (svg) {\n            // Tries to get existing defs section\n            const tmp = svg.getElementsByTagName('defs');\n            if (tmp.length > 0) {\n                this.defs = svg.getElementsByTagName('defs')[0];\n            }\n            // Adds defs section if none exists\n            if (!this.defs) {\n                this.defs = this.createElement('defs');\n                if (svg.firstChild != null) {\n                    svg.insertBefore(this.defs, svg.firstChild);\n                }\n                else {\n                    svg.appendChild(this.defs);\n                }\n            }\n            // Adds stylesheet\n            if (this.styleEnabled) {\n                this.defs.appendChild(this.createStyle());\n            }\n        }\n    }\n    /**\n     * Rounds all numbers to 2 decimal points.\n     */\n    format(value) {\n        return parseFloat(value.toFixed(2));\n    }\n    /**\n     * Returns the URL of the page without the hash part. This needs to use href to\n     * include any search part with no params (ie question mark alone). This is a\n     * workaround for the fact that window.location.search is empty if there is\n     * no search string behind the question mark.\n     */\n    getBaseUrl() {\n        let { href } = window.location;\n        const hash = href.lastIndexOf('#');\n        if (hash > 0) {\n            href = href.substring(0, hash);\n        }\n        return href;\n    }\n    /**\n     * Returns any offsets for rendering pixels.\n     */\n    reset() {\n        super.reset();\n        this.gradients = {};\n    }\n    end() {\n        return;\n    }\n    /**\n     * Creates the optional style section.\n     */\n    createStyle() {\n        const style = this.createElement('style');\n        style.setAttribute('type', 'text/css');\n        write(style, `svg{font-family:${DEFAULT_FONTFAMILY};font-size:${DEFAULT_FONTSIZE};fill:none;stroke-miterlimit:10}`);\n        return style;\n    }\n    /**\n     * Private helper function to create SVG elements\n     */\n    createElement(tagName, namespace) {\n        return this.root?.ownerDocument.createElementNS(namespace || NS_SVG, tagName);\n    }\n    /**\n     * Returns the alternate text string for the given foreignObject.\n     */\n    getAlternateText(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation) {\n        return !isNullish(str) ? this.foAltText : null;\n    }\n    /**\n     * Returns the alternate content for the given foreignObject.\n     */\n    createAlternateContent(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation) {\n        const text = this.getAlternateText(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n        const s = this.state;\n        if (!isNullish(text) && s.fontSize > 0) {\n            const dy = valign === 'top' ? 1 : valign === 'bottom' ? 0 : 0.3;\n            const anchor = align === 'right' ? 'end' : align === 'left' ? 'start' : 'middle';\n            const alt = this.createElement('text');\n            alt.setAttribute('x', String(Math.round(x + s.dx)));\n            alt.setAttribute('y', String(Math.round(y + s.dy + dy * s.fontSize)));\n            alt.setAttribute('fill', s.fontColor || 'black');\n            alt.setAttribute('font-family', s.fontFamily);\n            alt.setAttribute('font-size', `${Math.round(s.fontSize)}px`);\n            // Text-anchor start is default in SVG\n            anchor !== 'start' && alt.setAttribute('text-anchor', anchor);\n            const fontStyle = s.fontStyle;\n            matchBinaryMask(fontStyle, FONT_STYLE_MASK.BOLD) &&\n                alt.setAttribute('font-weight', 'bold');\n            matchBinaryMask(fontStyle, FONT_STYLE_MASK.ITALIC) &&\n                alt.setAttribute('font-style', 'italic');\n            const txtDecor = [];\n            matchBinaryMask(fontStyle, FONT_STYLE_MASK.UNDERLINE) && txtDecor.push('underline');\n            matchBinaryMask(fontStyle, FONT_STYLE_MASK.STRIKETHROUGH) &&\n                txtDecor.push('line-through');\n            txtDecor.length > 0 && alt.setAttribute('text-decoration', txtDecor.join(' '));\n            write(alt, text);\n            return alt;\n        }\n        return null;\n    }\n    /**\n     * Private helper function to create SVG elements\n     */\n    createGradientId(start, end, alpha1, alpha2, direction) {\n        // Removes illegal characters from gradient ID\n        if (start.charAt(0) === '#') {\n            start = start.substring(1);\n        }\n        if (end.charAt(0) === '#') {\n            end = end.substring(1);\n        }\n        // Workaround for gradient IDs not working in Safari 5 / Chrome 6\n        // if they contain uppercase characters\n        start = `${start.toLowerCase()}-${alpha1}`;\n        end = `${end.toLowerCase()}-${alpha2}`;\n        // Wrong gradient directions possible?\n        let dir = null;\n        if (direction == null || direction === 'south') {\n            dir = 's';\n        }\n        else if (direction === 'east') {\n            dir = 'e';\n        }\n        else {\n            const tmp = start;\n            start = end;\n            end = tmp;\n            if (direction === 'north') {\n                dir = 's';\n            }\n            else if (direction === 'west') {\n                dir = 'e';\n            }\n        }\n        return `mx-gradient-${start}-${end}-${dir}`;\n    }\n    /**\n     * Private helper function to create SVG elements\n     */\n    getSvgGradient(start, end, alpha1, alpha2, direction) {\n        const id = this.createGradientId(start, end, alpha1, alpha2, direction);\n        let gradient = this.gradients[id];\n        if (!gradient) {\n            const svg = this.root.ownerSVGElement;\n            let counter = 0;\n            let tmpId = `${id}-${counter}`;\n            if (svg) {\n                gradient = svg.ownerDocument.getElementById(tmpId);\n                while (gradient && gradient.ownerSVGElement !== svg) {\n                    tmpId = `${id}-${counter++}`;\n                    gradient = svg.ownerDocument.getElementById(tmpId);\n                }\n            }\n            else {\n                // Uses shorter IDs for export\n                tmpId = `id${++this.refCount}`;\n            }\n            if (!gradient) {\n                gradient = this.createSvgGradient(start, end, alpha1, alpha2, direction);\n                gradient.setAttribute('id', tmpId);\n                if (this.defs) {\n                    this.defs.appendChild(gradient);\n                }\n                else if (svg) {\n                    svg.appendChild(gradient);\n                }\n            }\n            this.gradients[id] = gradient;\n        }\n        return gradient.getAttribute('id');\n    }\n    /**\n     * Creates the given SVG gradient.\n     */\n    createSvgGradient(start, end, alpha1, alpha2, direction) {\n        const gradient = this.createElement('linearGradient');\n        gradient.setAttribute('x1', '0%');\n        gradient.setAttribute('y1', '0%');\n        gradient.setAttribute('x2', '0%');\n        gradient.setAttribute('y2', '0%');\n        if (direction == null || direction === 'south') {\n            gradient.setAttribute('y2', '100%');\n        }\n        else if (direction === 'east') {\n            gradient.setAttribute('x2', '100%');\n        }\n        else if (direction === 'north') {\n            gradient.setAttribute('y1', '100%');\n        }\n        else if (direction === 'west') {\n            gradient.setAttribute('x1', '100%');\n        }\n        let op = alpha1 < 1 ? `;stop-opacity:${alpha1}` : '';\n        let stop = this.createElement('stop');\n        stop.setAttribute('offset', '0%');\n        stop.setAttribute('style', `stop-color:${start}${op}`);\n        gradient.appendChild(stop);\n        op = alpha2 < 1 ? `;stop-opacity:${alpha2}` : '';\n        stop = this.createElement('stop');\n        stop.setAttribute('offset', '100%');\n        stop.setAttribute('style', `stop-color:${end}${op}`);\n        gradient.appendChild(stop);\n        return gradient;\n    }\n    /**\n     * Private helper function to create SVG elements\n     */\n    addNode(filled, stroked) {\n        const { node } = this;\n        const s = this.state;\n        if (node) {\n            if (node.nodeName === 'path') {\n                // Checks if the path is not empty\n                if (this.path && this.path.length > 0) {\n                    node.setAttribute('d', this.path.join(' '));\n                }\n                else {\n                    return;\n                }\n            }\n            if (filled && s.fillColor !== NONE) {\n                this.updateFill();\n            }\n            else if (!this.styleEnabled) {\n                // Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=814952\n                if (node.nodeName === 'ellipse' && Client.IS_FF) {\n                    node.setAttribute('fill', 'transparent');\n                }\n                else {\n                    node.setAttribute('fill', NONE);\n                }\n                // Sets the actual filled state for stroke tolerance\n                filled = false;\n            }\n            if (stroked && s.strokeColor !== NONE) {\n                this.updateStroke();\n            }\n            else if (!this.styleEnabled) {\n                node.setAttribute('stroke', NONE);\n            }\n            if (s.transform && s.transform.length > 0) {\n                node.setAttribute('transform', s.transform);\n            }\n            if (s.shadow) {\n                this.root.appendChild(this.createShadow(node));\n            }\n            // Adds stroke tolerance\n            if (this.strokeTolerance > 0 && !filled) {\n                this.root.appendChild(this.createTolerance(node));\n            }\n            // Adds pointer events\n            if (this.pointerEvents) {\n                node.setAttribute('pointer-events', this.pointerEventsValue);\n            }\n            // Enables clicks for nodes inside a link element\n            else if (!this.pointerEvents && !this.originalRoot) {\n                node.setAttribute('pointer-events', NONE);\n            }\n            // Removes invisible nodes from output if they don't handle events\n            if ((node.nodeName !== 'rect' &&\n                node.nodeName !== 'path' &&\n                node.nodeName !== 'ellipse') ||\n                (node.getAttribute('fill') !== NONE &&\n                    node.getAttribute('fill') !== 'transparent') ||\n                node.getAttribute('stroke') !== NONE ||\n                node.getAttribute('pointer-events') !== NONE) {\n                // LATER: Update existing DOM for performance\n                this.root.appendChild(node);\n            }\n            this.node = null;\n        }\n    }\n    /**\n     * Transfers the stroke attributes from <state> to <node>.\n     */\n    updateFill() {\n        const s = this.state;\n        if (s.alpha < 1 || s.fillAlpha < 1) {\n            this.node.setAttribute('fill-opacity', String(s.alpha * s.fillAlpha));\n        }\n        if (s.fillColor !== NONE) {\n            if (s.gradientColor !== NONE) {\n                const id = this.getSvgGradient(s.fillColor, s.gradientColor, s.gradientFillAlpha, s.gradientAlpha, s.gradientDirection);\n                if (this.root?.ownerDocument === document && useAbsoluteIds) {\n                    // Workaround for no fill with base tag in page (escape brackets)\n                    const base = this.getBaseUrl().replace(/([()])/g, '\\\\$1');\n                    this.node.setAttribute('fill', `url(${base}#${id})`);\n                }\n                else {\n                    this.node.setAttribute('fill', `url(#${id})`);\n                }\n            }\n            else {\n                this.node.setAttribute('fill', s.fillColor.toLowerCase());\n            }\n        }\n    }\n    /**\n     * Returns the current stroke width (>= 1), ie. max(1, this.format(this.state.strokeWidth * this.state.scale)).\n     */\n    getCurrentStrokeWidth() {\n        return Math.max(this.minStrokeWidth, Math.max(0.01, this.format(this.state.strokeWidth * this.state.scale)));\n    }\n    /**\n     * Transfers the stroke attributes from {@link mxAbstractCanvas2D.state} to {@link node}.\n     */\n    updateStroke() {\n        const s = this.state;\n        if (s.strokeColor && s.strokeColor !== NONE) {\n            this.node.setAttribute('stroke', s.strokeColor.toLowerCase());\n        }\n        if (s.alpha < 1 || s.strokeAlpha < 1) {\n            this.node.setAttribute('stroke-opacity', String(s.alpha * s.strokeAlpha));\n        }\n        const sw = this.getCurrentStrokeWidth();\n        if (sw !== 1) {\n            this.node.setAttribute('stroke-width', String(sw));\n        }\n        if (this.node.nodeName === 'path') {\n            this.updateStrokeAttributes();\n        }\n        if (s.dashed) {\n            this.node.setAttribute('stroke-dasharray', this.createDashPattern((s.fixDash ? 1 : s.strokeWidth) * s.scale));\n        }\n    }\n    /**\n     * Transfers the stroke attributes from {@link mxAbstractCanvas2D.state} to {@link node}.\n     */\n    updateStrokeAttributes() {\n        const s = this.state;\n        // Linejoin miter is default in SVG\n        if (s.lineJoin && s.lineJoin !== 'miter') {\n            this.node.setAttribute('stroke-linejoin', s.lineJoin);\n        }\n        if (s.lineCap) {\n            // flat is called butt in SVG\n            let value = s.lineCap;\n            if (value === 'flat') {\n                value = 'butt';\n            }\n            // Linecap butt is default in SVG\n            if (value !== 'butt') {\n                this.node.setAttribute('stroke-linecap', value);\n            }\n        }\n        // Miterlimit 10 is default in our document\n        if (s.miterLimit != null && (!this.styleEnabled || s.miterLimit !== 10)) {\n            this.node.setAttribute('stroke-miterlimit', String(s.miterLimit));\n        }\n    }\n    /**\n     * Creates the SVG dash pattern for the given state.\n     */\n    createDashPattern(scale) {\n        const pat = [];\n        if (typeof this.state.dashPattern === 'string') {\n            const dash = this.state.dashPattern.split(' ');\n            if (dash.length > 0) {\n                for (let i = 0; i < dash.length; i += 1) {\n                    pat[i] = Number(dash[i]) * scale;\n                }\n            }\n        }\n        return pat.join(' ');\n    }\n    /**\n     * Creates a hit detection tolerance shape for the given node.\n     */\n    createTolerance(node) {\n        const tol = node.cloneNode(true);\n        const sw = parseFloat(tol.getAttribute('stroke-width') || '1') + this.strokeTolerance;\n        tol.setAttribute('pointer-events', 'stroke');\n        tol.setAttribute('visibility', 'hidden');\n        tol.removeAttribute('stroke-dasharray');\n        tol.setAttribute('stroke-width', String(sw));\n        tol.setAttribute('fill', 'none');\n        tol.setAttribute('stroke', 'white');\n        return tol;\n    }\n    /**\n     * Creates a shadow for the given node.\n     */\n    createShadow(node) {\n        const shadow = node.cloneNode(true);\n        const s = this.state;\n        // Firefox uses transparent for no fill in ellipses\n        if (shadow.getAttribute('fill') !== 'none' &&\n            (!Client.IS_FF || shadow.getAttribute('fill') !== 'transparent')) {\n            shadow.setAttribute('fill', s.shadowColor);\n        }\n        if (shadow.getAttribute('stroke') !== 'none' &&\n            s.shadowColor &&\n            s.shadowColor !== NONE) {\n            shadow.setAttribute('stroke', s.shadowColor);\n        }\n        shadow.setAttribute('transform', `translate(${this.format(s.shadowDx * s.scale)},${this.format(s.shadowDy * s.scale)})${s.transform || ''}`);\n        shadow.setAttribute('opacity', String(s.shadowAlpha));\n        return shadow;\n    }\n    /**\n     * Experimental implementation for hyperlinks.\n     */\n    setLink(link) {\n        if (!link) {\n            this.root = this.originalRoot;\n        }\n        else {\n            this.originalRoot = this.root;\n            const node = this.createElement('a');\n            // Workaround for implicit namespace handling in HTML5 export, IE adds NS1 namespace so use code below\n            // in all IE versions except quirks mode. KNOWN: Adds xlink namespace to each image tag in output.\n            if (node.setAttributeNS == null || this.root.ownerDocument !== document) {\n                node.setAttribute('xlink:href', link);\n            }\n            else {\n                node.setAttributeNS(NS_XLINK, 'xlink:href', link);\n            }\n            this.root.appendChild(node);\n            this.root = node;\n        }\n    }\n    /**\n     * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n     */\n    rotate(theta, flipH, flipV, cx, cy) {\n        if (theta !== 0 || flipH || flipV) {\n            const s = this.state;\n            cx += s.dx;\n            cy += s.dy;\n            cx *= s.scale;\n            cy *= s.scale;\n            s.transform = s.transform || '';\n            // This implementation uses custom scale/translate and built-in rotation\n            // Rotation state is part of the AffineTransform in state.transform\n            if (flipH && flipV) {\n                theta += 180;\n            }\n            else if (flipH !== flipV) {\n                const tx = flipH ? cx : 0;\n                const sx = flipH ? -1 : 1;\n                const ty = flipV ? cy : 0;\n                const sy = flipV ? -1 : 1;\n                s.transform +=\n                    `translate(${this.format(tx)},${this.format(ty)})` +\n                        `scale(${this.format(sx)},${this.format(sy)})` +\n                        `translate(${this.format(-tx)},${this.format(-ty)})`;\n            }\n            if (flipH ? !flipV : flipV) {\n                theta *= -1;\n            }\n            if (theta !== 0) {\n                s.transform += `rotate(${this.format(theta)},${this.format(cx)},${this.format(cy)})`;\n            }\n            s.rotation += theta;\n            s.rotationCx = cx;\n            s.rotationCy = cy;\n        }\n    }\n    /**\n     * Extends superclass to create path.\n     */\n    begin() {\n        super.begin();\n        this.node = this.createElement('path');\n    }\n    /**\n     * Private helper function to create SVG elements\n     */\n    rect(x, y, w, h) {\n        const s = this.state;\n        const n = this.createElement('rect');\n        n.setAttribute('x', String(this.format((x + s.dx) * s.scale)));\n        n.setAttribute('y', String(this.format((y + s.dy) * s.scale)));\n        n.setAttribute('width', String(this.format(w * s.scale)));\n        n.setAttribute('height', String(this.format(h * s.scale)));\n        this.node = n;\n    }\n    /**\n     * Private helper function to create SVG elements\n     */\n    roundrect(x, y, w, h, dx, dy) {\n        this.rect(x, y, w, h);\n        if (dx > 0) {\n            this.node.setAttribute('rx', String(this.format(dx * this.state.scale)));\n        }\n        if (dy > 0) {\n            this.node.setAttribute('ry', String(this.format(dy * this.state.scale)));\n        }\n    }\n    /**\n     * Private helper function to create SVG elements\n     */\n    ellipse(x, y, w, h) {\n        const s = this.state;\n        const n = this.createElement('ellipse');\n        // No rounding for consistent output with 1.x\n        n.setAttribute('cx', String(this.format((x + w / 2 + s.dx) * s.scale)));\n        n.setAttribute('cy', String(this.format((y + h / 2 + s.dy) * s.scale)));\n        n.setAttribute('rx', String((w / 2) * s.scale));\n        n.setAttribute('ry', String((h / 2) * s.scale));\n        this.node = n;\n    }\n    /**\n     * Private helper function to create SVG elements\n     */\n    image(x, y, w, h, src, aspect = true, flipH = false, flipV = false) {\n        src = this.converter.convert(src);\n        const s = this.state;\n        x += s.dx;\n        y += s.dy;\n        const node = this.createElement('image');\n        node.setAttribute('x', String(this.format(x * s.scale) + this.imageOffset));\n        node.setAttribute('y', String(this.format(y * s.scale) + this.imageOffset));\n        node.setAttribute('width', String(this.format(w * s.scale)));\n        node.setAttribute('height', String(this.format(h * s.scale)));\n        // Workaround for missing namespace support\n        if (!node.setAttributeNS) {\n            node.setAttribute('xlink:href', src);\n        }\n        else {\n            node.setAttributeNS(NS_XLINK, 'xlink:href', src);\n        }\n        if (!aspect) {\n            node.setAttribute('preserveAspectRatio', 'none');\n        }\n        if (s.alpha < 1 || s.fillAlpha < 1) {\n            node.setAttribute('opacity', String(s.alpha * s.fillAlpha));\n        }\n        let tr = this.state.transform || '';\n        if (flipH || flipV) {\n            let sx = 1;\n            let sy = 1;\n            let dx = 0;\n            let dy = 0;\n            if (flipH) {\n                sx = -1;\n                dx = -w - 2 * x;\n            }\n            if (flipV) {\n                sy = -1;\n                dy = -h - 2 * y;\n            }\n            // Adds image transformation to existing transform\n            tr += `scale(${sx},${sy})translate(${dx * s.scale},${dy * s.scale})`;\n        }\n        if (tr.length > 0) {\n            node.setAttribute('transform', tr);\n        }\n        if (!this.pointerEvents) {\n            node.setAttribute('pointer-events', 'none');\n        }\n        this.root.appendChild(node);\n    }\n    /**\n     * Converts the given HTML string to XHTML.\n     */\n    convertHtml(val) {\n        const doc = new DOMParser().parseFromString(val, 'text/html');\n        if (doc != null) {\n            val = new XMLSerializer().serializeToString(doc.body);\n            // Extracts body content from DOM\n            if (val.substring(0, 5) === '<body') {\n                val = val.substring(val.indexOf('>', 5) + 1);\n            }\n            if (val.substring(val.length - 7, val.length) === '</body>') {\n                val = val.substring(0, val.length - 7);\n            }\n        }\n        return val;\n    }\n    /**\n     * Private helper function to create SVG elements\n     * Note: signature changed in mxgraph 4.1.0\n     */\n    createDiv(str) {\n        let val = str;\n        if (!isNode(val)) {\n            val = `<div><div>${this.convertHtml(val)}</div></div>`;\n        }\n        if (document.createElementNS) {\n            const div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n            if (isNode(val)) {\n                const n = val;\n                const div2 = document.createElement('div');\n                const div3 = div2.cloneNode(false);\n                // Creates a copy for export\n                if (this.root.ownerDocument !== document) {\n                    div2.appendChild(n.cloneNode(true));\n                }\n                else {\n                    div2.appendChild(n);\n                }\n                div3.appendChild(div2);\n                div.appendChild(div3);\n            }\n            else {\n                div.innerHTML = val;\n            }\n            return div;\n        }\n        if (isNode(val)) {\n            val = `<div><div>${getXml(val)}</div></div>`;\n        }\n        val = `<div xmlns=\"http://www.w3.org/1999/xhtml\">${val}</div>`;\n        // NOTE: FF 3.6 crashes if content CSS contains \"height:100%\"\n        return new DOMParser().parseFromString(val, 'text/xml').documentElement;\n    }\n    /**\n     * Updates existing DOM nodes for text rendering. LATER: Merge common parts with text function below.\n     */\n    updateText(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node) {\n        if (node && node.firstChild && node.firstChild.firstChild) {\n            this.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node.firstChild);\n        }\n    }\n    /**\n     * Creates a foreignObject for the given string and adds it to the given root.\n     */\n    addForeignObject(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir, div, root) {\n        const group = this.createElement('g');\n        const fo = this.createElement('foreignObject');\n        // Workarounds for print clipping and static position in Safari\n        fo.setAttribute('style', 'overflow: visible; text-align: left;');\n        fo.setAttribute('pointer-events', 'none');\n        fo.appendChild(div);\n        group.appendChild(fo);\n        this.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, group);\n        // Alternate content if foreignObject not supported\n        if (this.root?.ownerDocument !== document) {\n            const alt = this.createAlternateContent(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n            if (alt != null) {\n                fo.setAttribute('requiredFeatures', 'http://www.w3.org/TR/SVG11/feature#Extensibility');\n                const sw = this.createElement('switch');\n                sw.appendChild(fo);\n                sw.appendChild(alt);\n                group.appendChild(sw);\n            }\n        }\n        root.appendChild(group);\n    }\n    /**\n     * Updates existing DOM nodes for text rendering.\n     */\n    updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, g) {\n        const s = this.state.scale;\n        SvgCanvas2D.createCss(w + 2, h, align, valign, wrap, overflow, clip, this.state.fontBackgroundColor != null ? this.state.fontBackgroundColor : null, this.state.fontBorderColor != null ? this.state.fontBorderColor : null, `display: flex; align-items: unsafe ${valign === 'top' ? 'flex-start' : valign === 'bottom' ? 'flex-end' : 'center'}; ` +\n            `justify-content: unsafe ${align === 'left' ? 'flex-start' : align === 'right' ? 'flex-end' : 'center'}; `, this.getTextCss(), s, (dx, dy, flex, item, block) => {\n            x += this.state.dx;\n            y += this.state.dy;\n            const fo = g.firstChild;\n            const div = fo.firstChild;\n            const box = div.firstChild;\n            const text = box.firstChild;\n            const r = (this.rotateHtml ? this.state.rotation : 0) + (rotation != null ? rotation : 0);\n            let t = (this.foOffset !== 0 ? `translate(${this.foOffset} ${this.foOffset})` : '') +\n                (s !== 1 ? `scale(${s})` : '');\n            text.setAttribute('style', block);\n            box.setAttribute('style', item);\n            // Workaround for clipping in Webkit with scrolling and zoom\n            fo.setAttribute('width', `${Math.ceil((1 / Math.min(1, s)) * 100)}%`);\n            fo.setAttribute('height', `${Math.ceil((1 / Math.min(1, s)) * 100)}%`);\n            const yp = Math.round(y + dy);\n            // Allows for negative values which are causing problems with\n            // transformed content where the top edge of the foreignObject\n            // limits the text box being moved further up in the diagram.\n            // KNOWN: Possible clipping problems with zoom and scrolling\n            // but this is normally not used with scrollbars as the\n            // coordinates are always positive with scrollbars.\n            // Margin-top is ignored in Safari and no negative values allowed\n            // for padding.\n            if (yp < 0) {\n                fo.setAttribute('y', String(yp));\n            }\n            else {\n                fo.removeAttribute('y');\n                flex += `padding-top: ${yp}px; `;\n            }\n            div.setAttribute('style', `${flex}margin-left: ${Math.round(x + dx)}px;`);\n            t += r !== 0 ? `rotate(${r} ${x} ${y})` : '';\n            // Output allows for reflow but Safari cannot use absolute position,\n            // transforms or opacity. https://bugs.webkit.org/show_bug.cgi?id=23113\n            if (t !== '') {\n                g.setAttribute('transform', t);\n            }\n            else {\n                g.removeAttribute('transform');\n            }\n            if (this.state.alpha !== 1) {\n                g.setAttribute('opacity', String(this.state.alpha));\n            }\n            else {\n                g.removeAttribute('opacity');\n            }\n        });\n    }\n    /**\n     * Private helper function to create SVG elements\n     */\n    getTextCss() {\n        const s = this.state;\n        const lh = ABSOLUTE_LINE_HEIGHT\n            ? `${s.fontSize * LINE_HEIGHT}px`\n            : LINE_HEIGHT * this.lineHeightCorrection;\n        let css = `display: inline-block; font-size: ${s.fontSize}px; ` +\n            `font-family: ${s.fontFamily}; color: ${s.fontColor}; line-height: ${lh}; pointer-events: ${this.pointerEvents ? this.pointerEventsValue : 'none'}; `;\n        const fontStyle = s.fontStyle;\n        matchBinaryMask(fontStyle, FONT_STYLE_MASK.BOLD) && (css += 'font-weight: bold; ');\n        matchBinaryMask(fontStyle, FONT_STYLE_MASK.ITALIC) && (css += 'font-style: italic; ');\n        const txtDecor = [];\n        matchBinaryMask(fontStyle, FONT_STYLE_MASK.UNDERLINE) && txtDecor.push('underline');\n        matchBinaryMask(fontStyle, FONT_STYLE_MASK.STRIKETHROUGH) &&\n            txtDecor.push('line-through');\n        txtDecor.length > 0 && (css += `text-decoration: ${txtDecor.join(' ')}; `);\n        return css;\n    }\n    /**\n     * Paints the given text. Possible values for format are empty string for plain\n     * text and html for HTML markup. Note that HTML markup is only supported if\n     * foreignObject is supported and <foEnabled> is true. (This means IE9 and later\n     * does currently not support HTML text as part of shapes.)\n     */\n    text(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation = 0, dir) {\n        if (this.textEnabled && str != null) {\n            rotation = rotation != null ? rotation : 0;\n            if (this.foEnabled && format === 'html') {\n                const div = this.createDiv(str);\n                // Ignores invalid XHTML labels\n                if (div != null) {\n                    if (dir != null) {\n                        div.setAttribute('dir', dir);\n                    }\n                    this.addForeignObject(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir, div, this.root);\n                }\n            }\n            else {\n                this.plainText(x + this.state.dx, y + this.state.dy, w, h, str, align, valign, wrap, overflow, clip, rotation, dir);\n            }\n        }\n    }\n    /**\n     * Creates a clip for the given coordinates.\n     */\n    createClip(x, y, w, h) {\n        x = Math.round(x);\n        y = Math.round(y);\n        w = Math.round(w);\n        h = Math.round(h);\n        const id = `mx-clip-${x}-${y}-${w}-${h}`;\n        let counter = 0;\n        let tmp = `${id}-${counter}`;\n        // Resolves ID conflicts\n        while (document.getElementById(tmp) != null) {\n            tmp = `${id}-${++counter}`;\n        }\n        const clip = this.createElement('clipPath');\n        clip.setAttribute('id', tmp);\n        const rect = this.createElement('rect');\n        rect.setAttribute('x', String(x));\n        rect.setAttribute('y', String(y));\n        rect.setAttribute('width', String(w));\n        rect.setAttribute('height', String(h));\n        clip.appendChild(rect);\n        return clip;\n    }\n    /**\n     * Paints the given text. Possible values for format are empty string for\n     * plain text and html for HTML markup.\n     */\n    plainText(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation = 0, dir) {\n        const s = this.state;\n        const size = s.fontSize;\n        const node = this.createElement('g');\n        let tr = s.transform || '';\n        this.updateFont(node);\n        // Ignores pointer events\n        if (!this.pointerEvents && this.originalRoot == null) {\n            node.setAttribute('pointer-events', 'none');\n        }\n        // Non-rotated text\n        if (rotation !== 0) {\n            tr += `rotate(${rotation},${this.format(x * s.scale)},${this.format(y * s.scale)})`;\n        }\n        if (dir != null) {\n            node.setAttribute('direction', dir);\n        }\n        if (clip && w > 0 && h > 0) {\n            let cx = x;\n            let cy = y;\n            if (align === 'center') {\n                cx -= w / 2;\n            }\n            else if (align === 'right') {\n                cx -= w;\n            }\n            if (overflow !== 'fill') {\n                if (valign === 'middle') {\n                    cy -= h / 2;\n                }\n                else if (valign === 'bottom') {\n                    cy -= h;\n                }\n            }\n            // LATER: Remove spacing from clip rectangle\n            const c = this.createClip(cx * s.scale - 2, cy * s.scale - 2, w * s.scale + 4, h * s.scale + 4);\n            if (this.defs != null) {\n                this.defs.appendChild(c);\n            }\n            else {\n                // Makes sure clip is removed with referencing node\n                this.root.appendChild(c);\n            }\n            if (!Client.IS_CHROMEAPP &&\n                !Client.IS_EDGE &&\n                this.root.ownerDocument === document) {\n                // Workaround for potential base tag\n                const base = this.getBaseUrl().replace(/([()])/g, '\\\\$1');\n                node.setAttribute('clip-path', `url(${base}#${c.getAttribute('id')})`);\n            }\n            else {\n                node.setAttribute('clip-path', `url(#${c.getAttribute('id')})`);\n            }\n        }\n        // Default is left\n        const anchor = align === 'right' ? 'end' : align === 'center' ? 'middle' : 'start';\n        // Text-anchor start is default in SVG\n        if (anchor !== 'start') {\n            node.setAttribute('text-anchor', anchor);\n        }\n        if (!this.styleEnabled || size !== DEFAULT_FONTSIZE) {\n            node.setAttribute('font-size', `${size * s.scale}px`);\n        }\n        if (tr.length > 0) {\n            node.setAttribute('transform', tr);\n        }\n        if (s.alpha < 1) {\n            node.setAttribute('opacity', String(s.alpha));\n        }\n        const lines = str.split('\\n');\n        const lh = Math.round(size * LINE_HEIGHT);\n        const textHeight = size + (lines.length - 1) * lh;\n        let cy = y + size - 1;\n        if (valign === 'middle') {\n            if (overflow === 'fill') {\n                cy -= h / 2;\n            }\n            else {\n                const dy = (this.matchHtmlAlignment && clip && h > 0\n                    ? Math.min(textHeight, h)\n                    : textHeight) / 2;\n                cy -= dy;\n            }\n        }\n        else if (valign === 'bottom') {\n            if (overflow === 'fill') {\n                cy -= h;\n            }\n            else {\n                const dy = this.matchHtmlAlignment && clip && h > 0 ? Math.min(textHeight, h) : textHeight;\n                cy -= dy + 1;\n            }\n        }\n        for (let i = 0; i < lines.length; i += 1) {\n            const line = trim(lines[i]);\n            // Workaround for bounding box of empty lines and spaces\n            if (line) {\n                const text = this.createElement('text');\n                // LATER: Match horizontal HTML alignment\n                text.setAttribute('x', String(this.format(x * s.scale) + this.textOffset));\n                text.setAttribute('y', String(this.format(cy * s.scale) + this.textOffset));\n                write(text, line);\n                node.appendChild(text);\n            }\n            cy += lh;\n        }\n        this.root.appendChild(node);\n        this.addTextBackground(node, str, x, y, w, overflow === 'fill' ? h : textHeight, align, valign, overflow);\n    }\n    /**\n     * Updates the text properties for the given node. (NOTE: For this to work in\n     * IE, the given node must be a text or tspan element.)\n     */\n    updateFont(node) {\n        const s = this.state;\n        if (s.fontColor && s.fontColor !== NONE) {\n            node.setAttribute('fill', s.fontColor);\n        }\n        if (!this.styleEnabled || s.fontFamily !== DEFAULT_FONTFAMILY) {\n            node.setAttribute('font-family', s.fontFamily);\n        }\n        const fontStyle = s.fontStyle;\n        matchBinaryMask(fontStyle, FONT_STYLE_MASK.BOLD) &&\n            node.setAttribute('font-weight', 'bold');\n        matchBinaryMask(fontStyle, FONT_STYLE_MASK.ITALIC) &&\n            node.setAttribute('font-style', 'italic');\n        const txtDecor = [];\n        matchBinaryMask(fontStyle, FONT_STYLE_MASK.UNDERLINE) && txtDecor.push('underline');\n        matchBinaryMask(fontStyle, FONT_STYLE_MASK.STRIKETHROUGH) &&\n            txtDecor.push('line-through');\n        txtDecor.length > 0 && node.setAttribute('text-decoration', txtDecor.join(' '));\n    }\n    /**\n     * Background color and border\n     */\n    addTextBackground(node, str, x, y, w, h, align, valign, overflow) {\n        const s = this.state;\n        if (s.fontBackgroundColor != null || s.fontBorderColor != null) {\n            let bbox = null;\n            if (overflow === 'fill' || overflow === 'width') {\n                if (align === 'center') {\n                    x -= w / 2;\n                }\n                else if (align === 'right') {\n                    x -= w;\n                }\n                if (valign === 'middle') {\n                    y -= h / 2;\n                }\n                else if (valign === 'bottom') {\n                    y -= h;\n                }\n                bbox = new Rectangle((x + 1) * s.scale, y * s.scale, (w - 2) * s.scale, (h + 2) * s.scale);\n                // @ts-ignore check for getBBox\n            }\n            else if (node.getBBox != null && this.root.ownerDocument === document) {\n                // Uses getBBox only if inside document for correct size\n                try {\n                    // @ts-ignore getBBox exists\n                    bbox = node.getBBox();\n                    bbox = new Rectangle(bbox.x, bbox.y + 1, bbox.width, bbox.height + 0);\n                }\n                catch (e) {\n                    // Ignores NS_ERROR_FAILURE in FF if container display is none.\n                }\n            }\n            if (bbox == null || bbox.width === 0 || bbox.height === 0) {\n                // Computes size if not in document or no getBBox available\n                const div = document.createElement('div');\n                // Wrapping and clipping can be ignored here\n                div.style.lineHeight = ABSOLUTE_LINE_HEIGHT\n                    ? `${s.fontSize * LINE_HEIGHT}px`\n                    : String(LINE_HEIGHT);\n                div.style.fontSize = `${s.fontSize}px`;\n                div.style.fontFamily = s.fontFamily;\n                div.style.whiteSpace = 'nowrap';\n                div.style.position = 'absolute';\n                div.style.visibility = 'hidden';\n                div.style.display = 'inline-block';\n                matchBinaryMask(s.fontStyle, FONT_STYLE_MASK.BOLD) &&\n                    (div.style.fontWeight = 'bold');\n                matchBinaryMask(s.fontStyle, FONT_STYLE_MASK.ITALIC) &&\n                    (div.style.fontStyle = 'italic');\n                str = htmlEntities(str, false);\n                div.innerHTML = str.replace(/\\n/g, '<br/>');\n                document.body.appendChild(div);\n                const w = div.offsetWidth;\n                const h = div.offsetHeight;\n                document.body.removeChild(div);\n                if (align === 'center') {\n                    x -= w / 2;\n                }\n                else if (align === 'right') {\n                    x -= w;\n                }\n                if (valign === 'middle') {\n                    y -= h / 2;\n                }\n                else if (valign === 'bottom') {\n                    y -= h;\n                }\n                bbox = new Rectangle((x + 1) * s.scale, (y + 2) * s.scale, w * s.scale, (h + 1) * s.scale);\n            }\n            if (bbox != null) {\n                const n = this.createElement('rect');\n                n.setAttribute('fill', s.fontBackgroundColor || 'none');\n                n.setAttribute('stroke', s.fontBorderColor || 'none');\n                n.setAttribute('x', String(Math.floor(bbox.x - 1)));\n                n.setAttribute('y', String(Math.floor(bbox.y - 1)));\n                n.setAttribute('width', String(Math.ceil(bbox.width + 2)));\n                n.setAttribute('height', String(Math.ceil(bbox.height)));\n                const sw = s.fontBorderColor ? Math.max(1, this.format(s.scale)) : 0;\n                n.setAttribute('stroke-width', String(sw));\n                // Workaround for crisp rendering - only required if not exporting\n                if (this.root?.ownerDocument === document && mod(sw, 2) === 1) {\n                    n.setAttribute('transform', 'translate(0.5, 0.5)');\n                }\n                node.insertBefore(n, node.firstChild);\n            }\n        }\n    }\n    /**\n     * Paints the outline of the current path.\n     */\n    stroke() {\n        this.addNode(false, true);\n    }\n    /**\n     * Fills the current path.\n     */\n    fill() {\n        this.addNode(true, false);\n    }\n    /**\n     * Fills and paints the outline of the current path.\n     */\n    fillAndStroke() {\n        this.addNode(true, true);\n    }\n}\n/**\n * Updates existing DOM nodes for text rendering.\n */\nSvgCanvas2D.createCss = (w, h, align, valign, wrap, overflow, clip, bg, border, flex, block, scale, callback) => {\n    let item = `box-sizing: border-box; font-size: 0; text-align: ${align === 'left' ? 'left' : align === 'right' ? 'right' : 'center'}; `;\n    const pt = getAlignmentAsPoint(align, valign);\n    let ofl = 'overflow: hidden; ';\n    let fw = 'width: 1px; ';\n    let fh = 'height: 1px; ';\n    let dx = pt.x * w;\n    let dy = pt.y * h;\n    if (clip) {\n        fw = `width: ${Math.round(w)}px; `;\n        item += `max-height: ${Math.round(h)}px; `;\n        dy = 0;\n    }\n    else if (overflow === 'fill') {\n        fw = `width: ${Math.round(w)}px; `;\n        fh = `height: ${Math.round(h)}px; `;\n        block += 'width: 100%; height: 100%; ';\n        item += fw + fh;\n    }\n    else if (overflow === 'width') {\n        fw = `width: ${Math.round(w)}px; `;\n        block += 'width: 100%; ';\n        item += fw;\n        dy = 0;\n        if (h > 0) {\n            item += `max-height: ${Math.round(h)}px; `;\n        }\n    }\n    else {\n        ofl = '';\n        dy = 0;\n    }\n    let bgc = '';\n    if (bg) {\n        bgc += `background-color: ${bg}; `;\n    }\n    if (border) {\n        bgc += `border: 1px solid ${border}; `;\n    }\n    if (ofl == '' || clip) {\n        block += bgc;\n    }\n    else {\n        item += bgc;\n    }\n    if (wrap && w > 0) {\n        block += `white-space: normal; word-wrap: ${WORD_WRAP}; `;\n        fw = `width: ${Math.round(w)}px; `;\n        if (ofl !== '' && overflow !== 'fill') {\n            dy = 0;\n        }\n    }\n    else {\n        block += 'white-space: nowrap; ';\n        if (ofl === '') {\n            dx = 0;\n        }\n    }\n    callback(dx, dy, flex + fw + fh, item + ofl, block, ofl);\n};\nexport default SvgCanvas2D;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../geometry/Rectangle';\nimport { isNullish } from '../../internal/utils';\nimport { getBoundingBox, getDirectedBounds, mod } from '../../util/mathUtils';\nimport { LINE_ARCSIZE, NONE, NS_SVG, RECTANGLE_ROUNDING_FACTOR, } from '../../util/Constants';\nimport Point from '../geometry/Point';\nimport SvgCanvas2D from '../canvas/SvgCanvas2D';\nimport InternalEvent from '../event/InternalEvent';\nimport Client from '../../Client';\nimport { StyleDefaultsConfig } from '../../util/config';\n/**\n * Base class for all shapes.\n * A shape in mxGraph is a separate implementation for SVG, VML and HTML.\n * Which implementation to use is controlled by the dialect property which\n * is assigned from within the mxCellRenderer when the shape is created.\n * The dialect must be assigned for a shape, and it does normally depend on\n * the browser and the configuration of the graph (see mxGraph rendering hint).\n *\n * For each supported shape in SVG and VML, a corresponding shape exists in\n * mxGraph, namely for text, image, rectangle, rhombus, ellipse and polyline.\n * The other shapes are a combination of these shapes (eg. label and swimlane)\n * or they consist of one or more (filled) path objects (eg. actor and cylinder).\n * The HTML implementation is optional but may be required for a HTML-only view\n * of the graph.\n *\n * ### Custom Shapes\n * To extend from this class, the basic code looks as follows.\n * In the special case where the custom shape consists only of one filled region\n * or one filled region and an additional stroke the mxActor and mxCylinder\n * should be subclassed, respectively.\n * ```javascript\n * function CustomShape() { }\n *\n * CustomShape.prototype = new mxShape();\n * CustomShape.prototype.constructor = CustomShape;\n * ```\n * To register a custom shape in an existing graph instance, one must register the\n * shape under a new name in the graph’s cell renderer as follows:\n * ```javascript\n * mxCellRenderer.registerShape('customShape', CustomShape);\n * ```\n * The second argument is the name of the constructor.\n * In order to use the shape you can refer to the given name above in a stylesheet.\n * For example, to change the shape for the default vertex style, the following code\n * is used:\n * ```javascript\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style.shape = 'customShape';\n * ```\n *\n * @category Shape\n */\nclass Shape {\n    constructor(stencil = null) {\n        /**\n         * Switch to preserve image aspect.\n         * @default false\n         */\n        this.preserveImageAspect = false;\n        this.overlay = null;\n        this.indicator = null;\n        this.indicatorShape = null;\n        // Assigned in mxCellHighlight\n        this.opacity = 100;\n        this.isDashed = false;\n        this.fill = NONE;\n        this.gradient = NONE;\n        this.gradientDirection = 'east';\n        this.fillOpacity = 100;\n        this.strokeOpacity = 100;\n        this.stroke = NONE;\n        this.strokeWidth = 1;\n        this.spacing = 0;\n        this.startSize = 1;\n        this.endSize = 1;\n        this.startArrow = NONE;\n        this.endArrow = NONE;\n        this.direction = 'east';\n        this.flipH = false;\n        this.flipV = false;\n        this.isShadow = false;\n        this.isRounded = false;\n        this.rotation = 0;\n        this.cursor = '';\n        this.verticalTextRotation = 0;\n        this.oldGradients = {};\n        this.glass = false;\n        /**\n         * Holds the dialect in which the shape is to be painted.\n         */\n        this.dialect = null;\n        /**\n         * Holds the scale in which the shape is being painted.\n         */\n        this.scale = 1;\n        /**\n         * Rendering hint for configuring the canvas.\n         */\n        this.antiAlias = true;\n        /**\n         * Minimum stroke width for SVG output.\n         */\n        this.minSvgStrokeWidth = 1;\n        /**\n         * Holds the {@link Rectangle} that specifies the bounds of this shape.\n         */\n        this.bounds = null;\n        /**\n         * Holds the array of <Point> that specify the points of this shape.\n         */\n        this.points = [];\n        /**\n         * Optional reference to the corresponding <CellState>.\n         */\n        this.state = null;\n        /**\n         * Optional reference to the style of the corresponding <CellState>.\n         */\n        this.style = null;\n        /**\n         * Contains the bounding box of the shape, that is, the smallest rectangle\n         * that includes all pixels of the shape.\n         */\n        this.boundingBox = null;\n        /**\n         * Holds the {@link StencilShape} that defines the shape.\n         */\n        this.stencil = null;\n        /**\n         * Event-tolerance for SVG strokes (in px).\n         * This is only passed to the canvas in {@link createSvgCanvas} if {@link pointerEvents} is `true`.\n         * @default 8\n         */\n        this.svgStrokeTolerance = 8;\n        /**\n         * Specifies if pointer events should be handled. Default is true.\n         */\n        this.pointerEvents = true;\n        this.originalPointerEvents = null;\n        /**\n         * Specifies if pointer events should be handled. Default is true.\n         */\n        this.svgPointerEvents = 'all';\n        /**\n         * Specifies if pointer events outside of shape should be handled. Default\n         * is false.\n         */\n        this.shapePointerEvents = false;\n        /**\n         * Specifies if pointer events outside of stencils should be handled. Default\n         * is false. Set this to true for backwards compatibility with the 1.x branch.\n         */\n        this.stencilPointerEvents = false;\n        /**\n         * Specifies if the shape should be drawn as an outline. This disables all\n         * fill colors and can be used to disable other drawing states that should\n         * not be painted for outlines. Default is false. This should be set before\n         * calling <apply>.\n         */\n        this.outline = false;\n        /**\n         * Specifies if the shape is visible. Default is true.\n         */\n        this.visible = true;\n        /**\n         * Allows to use the SVG bounding box in SVG. Default is false for performance\n         * reasons.\n         */\n        this.useSvgBoundingBox = true;\n        this.image = null;\n        this.imageSrc = null;\n        this.indicatorColor = NONE;\n        this.indicatorStrokeColor = NONE;\n        this.indicatorGradientColor = NONE;\n        this.indicatorDirection = 'east';\n        this.indicatorImageSrc = null;\n        // `stencil` is not null when instantiated directly,\n        // but can be null when instantiated through a child class.\n        if (stencil) {\n            this.stencil = stencil;\n        }\n        // moved from init()\n        this.node = this.create();\n    }\n    /**\n     * Initializes the shape by creaing the DOM node using <create>\n     * and adding it into the given container.\n     *\n     * @param container DOM node that will contain the shape.\n     */\n    init(container) {\n        if (!this.node.parentNode) {\n            container.appendChild(this.node);\n        }\n    }\n    /**\n     * Sets the styles to their default values.\n     */\n    initStyles() {\n        this.strokeWidth = 1;\n        this.rotation = 0;\n        this.opacity = 100;\n        this.fillOpacity = 100;\n        this.strokeOpacity = 100;\n        this.flipH = false;\n        this.flipV = false;\n    }\n    /**\n     * Returns true if HTML is allowed for this shape. This implementation always\n     * returns false.\n     */\n    isHtmlAllowed() {\n        return false;\n    }\n    /**\n     * Returns 0, or 0.5 if <strokewidth> % 2 == 1.\n     */\n    getSvgScreenOffset() {\n        const sw = this.stencil && this.stencil.strokeWidthValue !== 'inherit'\n            ? Number(this.stencil.strokeWidthValue)\n            : (this.strokeWidth ?? 0);\n        return mod(Math.max(1, Math.round(sw * this.scale)), 2) === 1 ? 0.5 : 0;\n    }\n    /**\n     * Creates and returns the DOM node for the shape.\n     * This implementation assumes that `maxGraph` produces SVG elements.\n     */\n    create() {\n        return document.createElementNS(NS_SVG, 'g');\n    }\n    redraw() {\n        this.updateBoundsFromPoints();\n        if (this.visible && this.checkBounds()) {\n            this.node.style.visibility = 'visible';\n            this.clear();\n            this.redrawShape();\n            this.updateBoundingBox();\n        }\n        else {\n            this.node.style.visibility = 'hidden';\n            this.boundingBox = null;\n        }\n    }\n    /**\n     * Removes all child nodes and resets all CSS.\n     */\n    clear() {\n        while (this.node.lastChild) {\n            this.node.removeChild(this.node.lastChild);\n        }\n    }\n    /**\n     * Updates the bounds based on the points.\n     */\n    updateBoundsFromPoints() {\n        const pts = this.points;\n        if (pts.length > 0 && pts[0]) {\n            this.bounds = new Rectangle(Math.round(pts[0].x), Math.round(pts[0].y), 1, 1);\n            for (const pt of pts) {\n                if (pt) {\n                    this.bounds.add(new Rectangle(Math.round(pt.x), Math.round(pt.y), 1, 1));\n                }\n            }\n        }\n    }\n    /**\n     * Returns the {@link Rectangle} for the label bounds of this shape, based on the\n     * given scaled and translated bounds of the shape. This method should not\n     * change the rectangle in-place. This implementation returns the given rect.\n     */\n    getLabelBounds(rect) {\n        const d = this.style?.direction ?? 'east';\n        let bounds = rect.clone();\n        // Normalizes argument for getLabelMargins hook\n        if (d !== 'south' &&\n            d !== 'north' &&\n            this.state &&\n            this.state.text &&\n            this.state.text.isPaintBoundsInverted()) {\n            bounds = bounds.clone();\n            [bounds.width, bounds.height] = [bounds.height, bounds.width];\n        }\n        let labelMargins = this.getLabelMargins(bounds);\n        if (labelMargins) {\n            labelMargins = labelMargins.clone();\n            let flipH = this.style?.flipH ?? false;\n            let flipV = this.style?.flipV ?? false;\n            // Handles special case for vertical labels\n            if (this.state && this.state.text && this.state.text.isPaintBoundsInverted()) {\n                const tmp = labelMargins.x;\n                labelMargins.x = labelMargins.height;\n                labelMargins.height = labelMargins.width;\n                labelMargins.width = labelMargins.y;\n                labelMargins.y = tmp;\n                [flipH, flipV] = [flipV, flipH];\n            }\n            return getDirectedBounds(rect, labelMargins, this.style, flipH, flipV);\n        }\n        return rect;\n    }\n    /**\n     * Returns the scaled top, left, bottom and right margin to be used for\n     * computing the label bounds as an {@link Rectangle}, where the bottom and right\n     * margin are defined in the width and height of the rectangle, respectively.\n     */\n    getLabelMargins(rect) {\n        return null;\n    }\n    /**\n     * Returns true if the bounds are not null and all of its variables are numeric.\n     */\n    checkBounds() {\n        return (!Number.isNaN(this.scale) &&\n            Number.isFinite(this.scale) &&\n            this.scale > 0 &&\n            this.bounds &&\n            !Number.isNaN(this.bounds.x) &&\n            !Number.isNaN(this.bounds.y) &&\n            !Number.isNaN(this.bounds.width) &&\n            !Number.isNaN(this.bounds.height) &&\n            this.bounds.width > 0 &&\n            this.bounds.height > 0);\n    }\n    /**\n     * Updates the SVG or VML shape.\n     */\n    redrawShape() {\n        const canvas = this.createCanvas();\n        if (canvas) {\n            // Specifies if events should be handled\n            canvas.pointerEvents = this.pointerEvents;\n            this.beforePaint(canvas);\n            this.paint(canvas);\n            this.afterPaint(canvas);\n            if (this.node !== canvas.root && canvas.root) {\n                // Forces parsing in IE8 standards mode - slow! avoid\n                this.node.insertAdjacentHTML('beforeend', canvas.root.outerHTML);\n            }\n            this.destroyCanvas(canvas);\n        }\n    }\n    /**\n     * Creates a new canvas for drawing this shape. May return null.\n     */\n    createCanvas() {\n        const canvas = this.createSvgCanvas();\n        if (canvas && this.outline) {\n            canvas.setStrokeWidth(this.strokeWidth);\n            canvas.setStrokeColor(this.stroke);\n            if (this.isDashed) {\n                canvas.setDashed(this.isDashed);\n            }\n            canvas.setStrokeWidth = () => {\n                return;\n            };\n            canvas.setStrokeColor = () => {\n                return;\n            };\n            canvas.setFillColor = () => {\n                return;\n            };\n            canvas.setGradient = () => {\n                return;\n            };\n            canvas.setDashed = () => {\n                return;\n            };\n            canvas.text = () => {\n                return;\n            };\n        }\n        return canvas;\n    }\n    /**\n     * Creates and returns an {@link SvgCanvas2D} for rendering this shape.\n     */\n    createSvgCanvas() {\n        if (!this.node)\n            return null;\n        const canvas = new SvgCanvas2D(this.node, false);\n        canvas.strokeTolerance = this.pointerEvents ? this.svgStrokeTolerance : 0;\n        canvas.pointerEventsValue = this.svgPointerEvents;\n        const off = this.getSvgScreenOffset();\n        if (off !== 0) {\n            this.node.setAttribute('transform', `translate(${off},${off})`);\n        }\n        else {\n            this.node.removeAttribute('transform');\n        }\n        canvas.minStrokeWidth = this.minSvgStrokeWidth;\n        if (!this.antiAlias) {\n            // Rounds all numbers in the SVG output to integers\n            canvas.format = (value) => {\n                return Math.round(value);\n            };\n        }\n        return canvas;\n    }\n    /**\n     * Destroys the given canvas which was used for drawing. This implementation\n     * increments the reference counts on all shared gradients used in the canvas.\n     */\n    destroyCanvas(canvas) {\n        // Manages reference counts\n        if (canvas instanceof SvgCanvas2D) {\n            // Increments ref counts\n            for (const key in canvas.gradients) {\n                const gradient = canvas.gradients[key];\n                if (gradient) {\n                    gradient.mxRefCount = (gradient.mxRefCount || 0) + 1;\n                }\n            }\n            this.releaseSvgGradients(this.oldGradients);\n            this.oldGradients = canvas.gradients;\n        }\n    }\n    /**\n     * Invoked before paint is called.\n     */\n    beforePaint(c) {\n        return;\n    }\n    /**\n     * Invokes after paint was called.\n     */\n    afterPaint(c) {\n        return;\n    }\n    /**\n     * Generic rendering code.\n     */\n    paint(c) {\n        let strokeDrawn = false;\n        if (c && this.outline) {\n            const { stroke } = c;\n            c.stroke = (...args) => {\n                strokeDrawn = true;\n                stroke.apply(c, args);\n            };\n            const { fillAndStroke } = c;\n            c.fillAndStroke = (...args) => {\n                strokeDrawn = true;\n                fillAndStroke.apply(c, args);\n            };\n        }\n        // Scale is passed-through to canvas\n        const s = this.scale;\n        const bounds = this.bounds;\n        if (bounds) {\n            let x = bounds.x / s;\n            let y = bounds.y / s;\n            let w = bounds.width / s;\n            let h = bounds.height / s;\n            if (this.isPaintBoundsInverted()) {\n                const t = (w - h) / 2;\n                x += t;\n                y -= t;\n                const tmp = w;\n                w = h;\n                h = tmp;\n            }\n            this.updateTransform(c, x, y, w, h);\n            this.configureCanvas(c, x, y, w, h);\n            // Adds background rectangle to capture events\n            let bg = null;\n            if ((!this.stencil && this.points.length === 0 && this.shapePointerEvents) ||\n                (this.stencil && this.stencilPointerEvents)) {\n                const bb = this.createBoundingBox();\n                if (bb && this.node) {\n                    bg = this.createTransparentSvgRectangle(bb.x, bb.y, bb.width, bb.height);\n                    this.node.appendChild(bg);\n                }\n            }\n            if (this.stencil) {\n                this.stencil.drawShape(c, this, x, y, w, h);\n            }\n            else {\n                // Stencils have separate strokewidth\n                c.setStrokeWidth(this.strokeWidth);\n                if (this.points.length > 0) {\n                    // Paints edge shape\n                    const pts = [];\n                    for (let i = 0; i < this.points.length; i += 1) {\n                        const p = this.points[i];\n                        if (p) {\n                            pts.push(new Point(p.x / s, p.y / s));\n                        }\n                    }\n                    this.paintEdgeShape(c, pts);\n                }\n                else {\n                    // Paints vertex shape\n                    this.paintVertexShape(c, x, y, w, h);\n                }\n            }\n            if (bg && c.state && !isNullish(c.state.transform)) {\n                bg.setAttribute('transform', c.state.transform);\n            }\n            // Draws highlight rectangle if no stroke was used\n            if (c && this.outline && !strokeDrawn) {\n                c.rect(x, y, w, h);\n                c.stroke();\n            }\n        }\n    }\n    /**\n     * Sets the state of the canvas for drawing the shape.\n     */\n    configureCanvas(c, x, y, w, h) {\n        let dash = null;\n        if (this.style && this.style.dashPattern != null) {\n            dash = this.style.dashPattern;\n        }\n        c.setAlpha(this.opacity / 100);\n        c.setFillAlpha(this.fillOpacity / 100);\n        c.setStrokeAlpha(this.strokeOpacity / 100);\n        // Sets alpha, colors and gradients\n        if (this.isShadow) {\n            c.setShadow(this.isShadow);\n        }\n        // Dash pattern\n        if (this.isDashed) {\n            c.setDashed(this.isDashed, this.style?.fixDash ?? false);\n        }\n        if (dash) {\n            c.setDashPattern(dash);\n        }\n        if (this.fill !== NONE && this.gradient !== NONE) {\n            const b = this.getGradientBounds(c, x, y, w, h);\n            c.setGradient(this.fill, this.gradient, b.x, b.y, b.width, b.height, this.gradientDirection);\n        }\n        else {\n            c.setFillColor(this.fill);\n        }\n        c.setStrokeColor(this.stroke);\n    }\n    /**\n     * Returns the bounding box for the gradient box for this shape.\n     */\n    getGradientBounds(c, x, y, w, h) {\n        return new Rectangle(x, y, w, h);\n    }\n    /**\n     * Sets the scale and rotation on the given canvas.\n     */\n    updateTransform(c, x, y, w, h) {\n        // NOTE: Currently, scale is implemented in state and canvas. This will\n        // move to canvas in a later version, so that the states are unscaled\n        // and untranslated and do not need an update after zooming or panning.\n        c.scale(this.scale);\n        c.rotate(this.getShapeRotation(), this.flipH, this.flipV, x + w / 2, y + h / 2);\n    }\n    /**\n     * Paints the vertex shape.\n     */\n    paintVertexShape(c, x, y, w, h) {\n        this.paintBackground(c, x, y, w, h);\n        if (!this.outline || !this.style || !(this.style.backgroundOutline ?? false)) {\n            c.setShadow(false);\n            this.paintForeground(c, x, y, w, h);\n        }\n    }\n    /**\n     * Hook for subclassers. This implementation is empty.\n     */\n    paintBackground(c, x, y, w, h) {\n        return;\n    }\n    /**\n     * Hook for subclassers. This implementation is empty.\n     */\n    paintForeground(c, x, y, w, h) {\n        return;\n    }\n    /**\n     * Hook for subclassers. This implementation is empty.\n     */\n    paintEdgeShape(c, pts) {\n        return;\n    }\n    /**\n     * Returns the arc size for the given dimension.\n     */\n    getArcSize(w, h) {\n        let r = 0;\n        if (this.style?.absoluteArcSize ?? false) {\n            r = Math.min(w / 2, Math.min(h / 2, (this.style?.arcSize ?? LINE_ARCSIZE) / 2));\n        }\n        else {\n            const f = (this.style?.arcSize ?? RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n            r = Math.min(w * f, h * f);\n        }\n        return r;\n    }\n    /**\n     * Paints the glass gradient effect.\n     */\n    paintGlassEffect(c, x, y, w, h, arc) {\n        const sw = Math.ceil((this.strokeWidth ?? 0) / 2);\n        const size = 0.4;\n        c.setGradient('#ffffff', '#ffffff', x, y, w, h * 0.6, 'south', 0.9, 0.1);\n        c.begin();\n        arc += 2 * sw;\n        if (this.isRounded) {\n            c.moveTo(x - sw + arc, y - sw);\n            c.quadTo(x - sw, y - sw, x - sw, y - sw + arc);\n            c.lineTo(x - sw, y + h * size);\n            c.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n            c.lineTo(x + w + sw, y - sw + arc);\n            c.quadTo(x + w + sw, y - sw, x + w + sw - arc, y - sw);\n        }\n        else {\n            c.moveTo(x - sw, y - sw);\n            c.lineTo(x - sw, y + h * size);\n            c.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n            c.lineTo(x + w + sw, y - sw);\n        }\n        c.close();\n        c.fill();\n    }\n    /**\n     * Paints the given points with rounded corners.\n     */\n    addPoints(c, pts, rounded = false, arcSize, close = false, exclude = [], initialMove = true) {\n        if (pts.length > 0) {\n            const pe = pts[pts.length - 1];\n            // Adds virtual waypoint in the center between start and end point\n            if (close && rounded) {\n                pts = pts.slice();\n                const p0 = pts[0];\n                const wp = new Point(pe.x + (p0.x - pe.x) / 2, pe.y + (p0.y - pe.y) / 2);\n                pts.splice(0, 0, wp);\n            }\n            let pt = pts[0];\n            let i = 1;\n            // Draws the line segments\n            if (initialMove) {\n                c.moveTo(pt.x, pt.y);\n            }\n            else {\n                c.lineTo(pt.x, pt.y);\n            }\n            while (i < (close ? pts.length : pts.length - 1)) {\n                let tmp = pts[mod(i, pts.length)];\n                let dx = pt.x - tmp.x;\n                let dy = pt.y - tmp.y;\n                if (rounded && (dx !== 0 || dy !== 0) && exclude.indexOf(i - 1) < 0) {\n                    // Draws a line from the last point to the current\n                    // point with a spacing of size off the current point\n                    // into direction of the last point\n                    let dist = Math.sqrt(dx * dx + dy * dy);\n                    const nx1 = (dx * Math.min(arcSize, dist / 2)) / dist;\n                    const ny1 = (dy * Math.min(arcSize, dist / 2)) / dist;\n                    const x1 = tmp.x + nx1;\n                    const y1 = tmp.y + ny1;\n                    c.lineTo(x1, y1);\n                    // Draws a curve from the last point to the current\n                    // point with a spacing of size off the current point\n                    // into direction of the next point\n                    let next = pts[mod(i + 1, pts.length)];\n                    // Uses next non-overlapping point\n                    while (i < pts.length - 2 &&\n                        Math.round(next.x - tmp.x) === 0 &&\n                        Math.round(next.y - tmp.y) === 0) {\n                        next = pts[mod(i + 2, pts.length)];\n                        i++;\n                    }\n                    dx = next.x - tmp.x;\n                    dy = next.y - tmp.y;\n                    dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n                    const nx2 = (dx * Math.min(arcSize, dist / 2)) / dist;\n                    const ny2 = (dy * Math.min(arcSize, dist / 2)) / dist;\n                    const x2 = tmp.x + nx2;\n                    const y2 = tmp.y + ny2;\n                    c.quadTo(tmp.x, tmp.y, x2, y2);\n                    tmp = new Point(x2, y2);\n                }\n                else {\n                    c.lineTo(tmp.x, tmp.y);\n                }\n                pt = tmp;\n                i += 1;\n            }\n            if (close) {\n                c.close();\n            }\n            else {\n                c.lineTo(pe.x, pe.y);\n            }\n        }\n    }\n    /**\n     * Resets all styles.\n     */\n    resetStyles() {\n        this.initStyles();\n        this.spacing = 0;\n        this.fill = NONE;\n        this.gradient = NONE;\n        this.gradientDirection = 'east';\n        this.stroke = NONE;\n        this.startSize = 1;\n        this.endSize = 1;\n        this.startArrow = NONE;\n        this.endArrow = NONE;\n        this.direction = 'east';\n        this.isShadow = false;\n        this.isDashed = false;\n        this.isRounded = false;\n        this.glass = false;\n    }\n    /**\n     * Applies the style of the given <CellState> to the shape. This\n     * implementation assigns the following styles to local fields:\n     *\n     * - <'fillColor'> => fill\n     * - <'gradientColor'> => gradient\n     * - <'gradientDirection'> => gradientDirection\n     * - <'opacity'> => opacity\n     * - {@link Constants#STYLE_FILL_OPACITY} => fillOpacity\n     * - {@link Constants#STYLE_STROKE_OPACITY} => strokeOpacity\n     * - <'strokeColor'> => stroke\n     * - <'strokeWidth'> => strokewidth\n     * - <'shadow'> => isShadow\n     * - <'dashed'> => isDashed\n     * - <'spacing'> => spacing\n     * - <'startSize'> => startSize\n     * - <'endSize'> => endSize\n     * - <'rounded'> => isRounded\n     * - <'startArrow'> => startArrow\n     * - <'endArrow'> => endArrow\n     * - <'rotation'> => rotation\n     * - <'direction'> => direction\n     * - <'glass'> => glass\n     *\n     * This keeps a reference to the <style>. If you need to keep a reference to\n     * the cell, you can override this method and store a local reference to\n     * state.cell or the <CellState> itself. If <outline> should be true, make\n     * sure to set it before calling this method.\n     *\n     * @param state <CellState> of the corresponding cell.\n     */\n    apply(state) {\n        this.state = state;\n        this.style = state.style;\n        if (this.style) {\n            this.fill = this.style.fillColor ?? this.fill;\n            this.gradient = this.style.gradientColor ?? this.gradient;\n            this.gradientDirection = this.style.gradientDirection ?? this.gradientDirection;\n            this.opacity = this.style.opacity ?? this.opacity;\n            this.fillOpacity = this.style.fillOpacity ?? this.fillOpacity;\n            this.strokeOpacity = this.style.strokeOpacity ?? this.strokeOpacity;\n            this.stroke = this.style.strokeColor ?? this.stroke;\n            this.strokeWidth = this.style.strokeWidth ?? this.strokeWidth;\n            this.spacing = this.style.spacing ?? this.spacing;\n            this.startSize = this.style.startSize ?? this.startSize;\n            this.endSize = this.style.endSize ?? this.endSize;\n            this.startArrow = this.style.startArrow ?? this.startArrow;\n            this.endArrow = this.style.endArrow ?? this.endArrow;\n            this.rotation = this.style.rotation ?? this.rotation;\n            this.direction = this.style.direction ?? this.direction;\n            this.flipH = !!this.style.flipH;\n            this.flipV = !!this.style.flipV;\n            if (this.direction === 'north' || this.direction === 'south') {\n                const tmp = this.flipH;\n                this.flipH = this.flipV;\n                this.flipV = tmp;\n            }\n            this.isShadow = this.style.shadow ?? this.isShadow;\n            this.isDashed = this.style.dashed ?? this.isDashed;\n            this.isRounded = this.style.rounded ?? this.isRounded;\n            this.glass = this.style.glass ?? this.glass;\n        }\n    }\n    /**\n     * Sets the cursor on the given shape.\n     *\n     * @param cursor The cursor to be used.\n     */\n    setCursor(cursor) {\n        this.cursor = cursor;\n        this.node.style.cursor = cursor;\n    }\n    /**\n     * Returns the current cursor.\n     */\n    getCursor() {\n        return this.cursor;\n    }\n    /**\n     * Hook for subclassers.\n     */\n    isRoundable(c, x, y, w, h) {\n        return false;\n    }\n    /**\n     * Updates the <boundingBox> for this shape using <createBoundingBox> and\n     * <augmentBoundingBox> and stores the result in <boundingBox>.\n     */\n    updateBoundingBox() {\n        // Tries to get bounding box from SVG subsystem\n        // LATER: Use getBoundingClientRect for fallback in VML\n        if (this.useSvgBoundingBox && this.node.ownerSVGElement) {\n            try {\n                const b = this.node.getBBox();\n                if (b.width > 0 && b.height > 0) {\n                    this.boundingBox = new Rectangle(b.x, b.y, b.width, b.height);\n                    // Adds strokeWidth\n                    this.boundingBox.grow(((this.strokeWidth ?? 0) * this.scale) / 2);\n                    return;\n                }\n            }\n            catch (e) {\n                // fallback to code below\n            }\n        }\n        if (this.bounds) {\n            let bbox = this.createBoundingBox();\n            if (bbox) {\n                this.augmentBoundingBox(bbox);\n                const rot = this.getShapeRotation();\n                if (rot !== 0) {\n                    bbox = getBoundingBox(bbox, rot);\n                }\n            }\n            this.boundingBox = bbox;\n        }\n    }\n    /**\n     * Returns a new rectangle that represents the bounding box of the bare shape\n     * with no shadows or strokewidths.\n     */\n    createBoundingBox() {\n        if (!this.bounds)\n            return null;\n        const bb = this.bounds.clone();\n        if ((this.stencil && (this.direction === 'north' || this.direction === 'south')) ||\n            this.isPaintBoundsInverted()) {\n            bb.rotate90();\n        }\n        return bb;\n    }\n    /**\n     * Augments the bounding box with the strokewidth and shadow offsets.\n     */\n    augmentBoundingBox(bbox) {\n        if (this.isShadow) {\n            bbox.width += Math.ceil(StyleDefaultsConfig.shadowOffsetX * this.scale);\n            bbox.height += Math.ceil(StyleDefaultsConfig.shadowOffsetX * this.scale);\n        }\n        // Adds strokeWidth\n        bbox.grow(((this.strokeWidth ?? 0) * this.scale) / 2);\n    }\n    /**\n     * Returns true if the bounds should be inverted.\n     */\n    isPaintBoundsInverted() {\n        // Stencil implements inversion via aspect\n        return !this.stencil && (this.direction === 'north' || this.direction === 'south');\n    }\n    /**\n     * Returns the rotation from the style.\n     */\n    getRotation() {\n        return this.rotation ?? 0;\n    }\n    /**\n     * Returns the rotation for the text label.\n     */\n    getTextRotation() {\n        let rot = this.getRotation();\n        if (!(this.style?.horizontal ?? true)) {\n            rot += this.verticalTextRotation || -90; // WARNING WARNING!!!! ===============================================================================================\n        }\n        return rot;\n    }\n    /**\n     * Returns the actual rotation of the shape.\n     */\n    getShapeRotation() {\n        let rot = this.getRotation();\n        if (this.direction === 'north') {\n            rot += 270;\n        }\n        else if (this.direction === 'west') {\n            rot += 180;\n        }\n        else if (this.direction === 'south') {\n            rot += 90;\n        }\n        return rot;\n    }\n    /**\n     * Adds a transparent rectangle that catches all events.\n     */\n    createTransparentSvgRectangle(x, y, w, h) {\n        const rect = document.createElementNS(NS_SVG, 'rect');\n        rect.setAttribute('x', String(x));\n        rect.setAttribute('y', String(y));\n        rect.setAttribute('width', String(w));\n        rect.setAttribute('height', String(h));\n        rect.setAttribute('fill', NONE);\n        rect.setAttribute('stroke', NONE);\n        rect.setAttribute('pointer-events', 'all');\n        return rect;\n    }\n    redrawHtmlShape() {\n        return;\n    }\n    /**\n     * Sets a transparent background CSS style to catch all events.\n     *\n     * Paints the line shape.\n     */\n    setTransparentBackgroundImage(node) {\n        node.style.backgroundImage = `url('${Client.imageBasePath}/transparent.gif')`;\n    }\n    /**\n     * Paints the line shape.\n     */\n    releaseSvgGradients(grads) {\n        for (const key in grads) {\n            const gradient = grads[key];\n            if (gradient) {\n                gradient.mxRefCount = (gradient.mxRefCount || 0) - 1;\n                if (gradient.mxRefCount === 0 && gradient.parentNode) {\n                    gradient.parentNode.removeChild(gradient);\n                }\n            }\n        }\n    }\n    /**\n     * Destroys the shape by removing it from the DOM and releasing the DOM\n     * node associated with the shape using {@link Event#release}.\n     */\n    destroy() {\n        InternalEvent.release(this.node);\n        if (this.node.parentNode) {\n            this.node.parentNode.removeChild(this.node);\n        }\n        this.node.innerHTML = '';\n        // Decrements refCount and removes unused\n        this.releaseSvgGradients(this.oldGradients);\n        this.oldGradients = {};\n    }\n}\nexport default Shape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\n/**\n * Extends {@link Shape} to implement an ellipse shape.\n *\n * This shape is registered under `ellipse` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * @category Vertex Shapes\n */\nclass EllipseShape extends Shape {\n    constructor(bounds, fill, stroke, strokeWidth = 1) {\n        super();\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n    }\n    /**\n     * Paints the ellipse shape.\n     */\n    paintVertexShape(c, x, y, w, h) {\n        c.ellipse(x, y, w, h);\n        c.fillAndStroke();\n    }\n}\nexport default EllipseShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { LINE_ARCSIZE, NONE, RECTANGLE_ROUNDING_FACTOR } from '../../../util/Constants';\nimport Shape from '../Shape';\n/**\n * Extends {@link Shape} to implement a rectangle shape.\n *\n * This shape is registered under `rectangle` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * @category Vertex Shapes\n */\nclass RectangleShape extends Shape {\n    constructor(bounds, fill, stroke, strokeWidth = 1) {\n        super();\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n    }\n    /**\n     * Returns true for non-rounded, non-rotated shapes with no glass gradient.\n     */\n    isHtmlAllowed() {\n        let events = true;\n        if (this.style && this.style.pointerEvents != null) {\n            events = this.style.pointerEvents;\n        }\n        return (!this.isRounded &&\n            !this.glass &&\n            this.rotation === 0 &&\n            (events || this.fill !== NONE));\n    }\n    /**\n     * Generic background painting implementation.\n     */\n    paintBackground(c, x, y, w, h) {\n        let events = true;\n        if (this.style && this.style.pointerEvents != null) {\n            events = this.style.pointerEvents;\n        }\n        if (events || this.fill !== NONE || this.stroke !== NONE) {\n            if (!events && this.fill === NONE) {\n                c.pointerEvents = false;\n            }\n            if (this.isRounded) {\n                let r = 0;\n                if (this.style?.absoluteArcSize ?? false) {\n                    r = Math.min(w / 2, Math.min(h / 2, (this.style?.arcSize ?? LINE_ARCSIZE) / 2));\n                }\n                else {\n                    const f = (this.style?.arcSize ?? RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n                    r = Math.min(w * f, h * f);\n                }\n                c.roundrect(x, y, w, h, r, r);\n            }\n            else {\n                c.rect(x, y, w, h);\n            }\n            c.fillAndStroke();\n        }\n    }\n    /**\n     * Adds roundable support.\n     */\n    isRoundable(c, x, y, w, h) {\n        return true;\n    }\n    /**\n     * Generic background painting implementation.\n     */\n    paintForeground(c, x, y, w, h) {\n        if (this.glass && !this.outline && this.fill !== NONE) {\n            this.paintGlassEffect(c, x, y, w, h, this.getArcSize(w + this.strokeWidth, h + this.strokeWidth));\n        }\n    }\n}\nexport default RectangleShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport RectangleShape from './RectangleShape';\nimport { NONE } from '../../../util/Constants';\n/**\n * Extends {@link RectangleShape} to implement an image shape.\n *\n * This shape is registered under `image` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * @category Vertex Shapes\n */\nclass ImageShape extends RectangleShape {\n    constructor(bounds, imageSrc, fill = '#FFFFFF', stroke = '#000000', strokeWidth = 1) {\n        super(bounds, fill, stroke, strokeWidth);\n        this.imageSrc = imageSrc;\n        this.shadow = false;\n        this.preserveImageAspect = true;\n    }\n    /**\n     * Disables offset in IE9 for crisper image output.\n     */\n    getSvgScreenOffset() {\n        return 0;\n    }\n    /**\n     * Overrides to replace the fill and stroke colors with the respective values from {@link imageBackground} and {@link imageBorder}.\n     *\n     * Applies the style of the given {@link CellState} to the shape. This implementation assigns the following styles to local fields:\n     *\n     * - {@link imageBackground} => fill\n     * - {@link imageBorder} => stroke\n     *\n     * @param {CellState} state   {@link CellState} of the corresponding cell.\n     */\n    apply(state) {\n        super.apply(state);\n        this.fill = NONE;\n        this.stroke = NONE;\n        this.gradient = NONE;\n        if (this.style && this.style.imageAspect != null) {\n            this.preserveImageAspect = this.style.imageAspect;\n        }\n    }\n    /**\n     * Returns true if HTML is allowed for this shape. This implementation always\n     * returns false.\n     */\n    isHtmlAllowed() {\n        return !this.preserveImageAspect;\n    }\n    /**\n     * Disables inherited roundable support.\n     */\n    isRoundable(c, x, y, w, h) {\n        return false;\n    }\n    /**\n     * Generic background painting implementation.\n     */\n    paintVertexShape(c, x, y, w, h) {\n        if (this.imageSrc) {\n            const fill = this.style?.imageBackground ?? NONE;\n            const stroke = this.style?.imageBorder ?? NONE;\n            if (fill !== NONE) {\n                // Stroke rendering required for shadow\n                c.setFillColor(fill);\n                c.setStrokeColor(stroke);\n                c.rect(x, y, w, h);\n                c.fillAndStroke();\n            }\n            // FlipH/V are implicit via mxShape.updateTransform\n            c.image(x, y, w, h, this.imageSrc, this.preserveImageAspect, false, false);\n            if (stroke !== NONE) {\n                c.setShadow(false);\n                c.setStrokeColor(stroke);\n                c.rect(x, y, w, h);\n                c.stroke();\n            }\n        }\n        else {\n            this.paintBackground(c, x, y, w, h);\n        }\n    }\n}\nexport default ImageShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Defines an object that contains the constraints about how to connect one side of an edge to its terminal.\n */\nclass ConnectionConstraint {\n    constructor(point, perimeter = true, name = null, dx = 0, dy = 0) {\n        /**\n         * Boolean that specifies if the point should be projected onto the perimeter\n         * of the terminal.\n         */\n        this.perimeter = true;\n        /**\n         * Optional string that specifies the name of the constraint.\n         */\n        this.name = null;\n        /**\n         * Optional float that specifies the horizontal offset of the constraint.\n         */\n        this.dx = 0;\n        /**\n         * Optional float that specifies the vertical offset of the constraint.\n         */\n        this.dy = 0;\n        this.point = point;\n        this.perimeter = perimeter;\n        this.name = name;\n        this.dx = dx;\n        this.dy = dy;\n    }\n}\nexport default ConnectionConstraint;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Image from '../image/ImageBox';\nimport Client from '../../Client';\nimport { DEFAULT_VALID_COLOR, HIGHLIGHT_OPACITY, HIGHLIGHT_SIZE, HIGHLIGHT_STROKEWIDTH, } from '../../util/Constants';\nimport InternalEvent from '../event/InternalEvent';\nimport { intersects } from '../../util/mathUtils';\nimport Rectangle from '../geometry/Rectangle';\nimport ImageShape from '../shape/node/ImageShape';\nimport RectangleShape from '../shape/node/RectangleShape';\nimport { isShiftDown } from '../../util/EventUtils';\n/**\n * Handles constraints on connection targets. This class is in charge of\n * showing fixed points when the mouse is over a vertex and handles constraints\n * to establish new connections.\n *\n */\nclass ConstraintHandler {\n    constructor(graph) {\n        /**\n         * {@link Image} to be used as the image for fixed connection points.\n         */\n        this.pointImage = new Image(`${Client.imageBasePath}/point.gif`, 5, 5);\n        this.currentFocus = null;\n        this.currentFocusArea = null;\n        this.focusIcons = [];\n        this.constraints = null;\n        this.currentConstraint = null;\n        this.focusHighlight = null;\n        this.focusPoints = [];\n        this.currentPoint = null;\n        /**\n         * Specifies if events are handled. Default is true.\n         */\n        this.enabled = true;\n        /**\n         * Specifies the color for the highlight. Default is {@link DEFAULT_VALID_COLOR}.\n         */\n        this.highlightColor = DEFAULT_VALID_COLOR;\n        this.mouseleaveHandler = null;\n        this.graph = graph;\n        // Adds a graph model listener to update the current focus on changes\n        this.resetHandler = () => {\n            if (this.currentFocus && !this.graph.view.getState(this.currentFocus.cell)) {\n                this.reset();\n            }\n            else {\n                this.redraw();\n            }\n        };\n        this.graph.model.addListener(InternalEvent.CHANGE, this.resetHandler);\n        this.graph.view.addListener(InternalEvent.SCALE_AND_TRANSLATE, this.resetHandler);\n        this.graph.view.addListener(InternalEvent.TRANSLATE, this.resetHandler);\n        this.graph.view.addListener(InternalEvent.SCALE, this.resetHandler);\n        this.graph.addListener(InternalEvent.ROOT, this.resetHandler);\n    }\n    /**\n     * Returns true if events are handled. This implementation\n     * returns {@link enabled}.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Enables or disables event handling. This implementation\n     * updates {@link enabled}.\n     *\n     * @param {boolean} enabled - Boolean that specifies the new enabled state.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n    }\n    /**\n     * Resets the state of this handler.\n     */\n    reset() {\n        for (let i = 0; i < this.focusIcons.length; i += 1) {\n            this.focusIcons[i].destroy();\n        }\n        this.focusIcons = [];\n        if (this.focusHighlight) {\n            this.focusHighlight.destroy();\n            this.focusHighlight = null;\n        }\n        this.currentConstraint = null;\n        this.currentFocusArea = null;\n        this.currentPoint = null;\n        this.currentFocus = null;\n        this.focusPoints = [];\n    }\n    /**\n     * Returns the tolerance to be used for intersecting connection points. This\n     * implementation returns {@link mxGraph.tolerance}.\n     *\n     * @param me {@link mxMouseEvent} whose tolerance should be returned.\n     */\n    getTolerance(me) {\n        return this.graph.getEventTolerance();\n    }\n    /**\n     * Returns the tolerance to be used for intersecting connection points.\n     */\n    getImageForConstraint(state, constraint, point) {\n        return this.pointImage;\n    }\n    /**\n     * Returns true if the given {@link mxMouseEvent} should be ignored in {@link update}. This\n     * implementation always returns false.\n     */\n    isEventIgnored(me, source = false) {\n        return false;\n    }\n    /**\n     * Returns true if the given state should be ignored. This always returns false.\n     */\n    isStateIgnored(state, source = false) {\n        return false;\n    }\n    /**\n     * Destroys the {@link focusIcons} if they exist.\n     */\n    destroyIcons() {\n        for (let i = 0; i < this.focusIcons.length; i += 1) {\n            this.focusIcons[i].destroy();\n        }\n        this.focusIcons = [];\n        this.focusPoints = [];\n    }\n    /**\n     * Destroys the {@link focusHighlight} if one exists.\n     */\n    destroyFocusHighlight() {\n        if (this.focusHighlight) {\n            this.focusHighlight.destroy();\n            this.focusHighlight = null;\n        }\n    }\n    /**\n     * Returns true if the current focused state should not be changed for the given event.\n     * This returns true if shift and alt are pressed.\n     */\n    isKeepFocusEvent(me) {\n        return isShiftDown(me.getEvent());\n    }\n    /**\n     * Returns the cell for the given event.\n     */\n    getCellForEvent(me, point) {\n        let cell = me.getCell();\n        // Gets cell under actual point if different from event location\n        if (!cell && point && (me.getGraphX() !== point.x || me.getGraphY() !== point.y)) {\n            cell = this.graph.getCellAt(point.x, point.y);\n        }\n        // Uses connectable parent vertex if one exists\n        if (cell && !cell.isConnectable()) {\n            const parent = cell.getParent();\n            if (parent && parent.isVertex() && parent.isConnectable()) {\n                cell = parent;\n            }\n        }\n        if (cell) {\n            return this.graph.isCellLocked(cell) ? null : cell;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Updates the state of this handler based on the given {@link mxMouseEvent}.\n     * Source is a boolean indicating if the cell is a source or target.\n     */\n    update(me, source, existingEdge, point) {\n        if (this.isEnabled() && !this.isEventIgnored(me)) {\n            // Lazy installation of mouseleave handler\n            if (!this.mouseleaveHandler && this.graph.container) {\n                this.mouseleaveHandler = () => {\n                    this.reset();\n                };\n                InternalEvent.addListener(this.graph.container, 'mouseleave', this.resetHandler);\n            }\n            const tol = this.getTolerance(me);\n            const x = point ? point.x : me.getGraphX();\n            const y = point ? point.y : me.getGraphY();\n            const grid = new Rectangle(x - tol, y - tol, 2 * tol, 2 * tol);\n            const mouse = new Rectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol);\n            const state = this.graph.view.getState(this.getCellForEvent(me, point));\n            // Keeps focus icons visible while over vertex bounds and no other cell under mouse or shift is pressed\n            if (!this.isKeepFocusEvent(me) &&\n                (!this.currentFocusArea ||\n                    !this.currentFocus ||\n                    state ||\n                    !this.currentFocus.cell.isVertex() ||\n                    !intersects(this.currentFocusArea, mouse)) &&\n                state !== this.currentFocus) {\n                this.currentFocusArea = null;\n                this.currentFocus = null;\n                this.setFocus(me, state, source);\n            }\n            this.currentConstraint = null;\n            this.currentPoint = null;\n            let minDistSq = null;\n            let tmp;\n            if (this.focusIcons.length > 0 &&\n                this.constraints &&\n                (!state || this.currentFocus === state)) {\n                const cx = mouse.getCenterX();\n                const cy = mouse.getCenterY();\n                for (let i = 0; i < this.focusIcons.length; i += 1) {\n                    const dx = cx - this.focusIcons[i].bounds.getCenterX();\n                    const dy = cy - this.focusIcons[i].bounds.getCenterY();\n                    tmp = dx * dx + dy * dy;\n                    if ((this.intersects(this.focusIcons[i], mouse, source, existingEdge) ||\n                        (point &&\n                            this.intersects(this.focusIcons[i], grid, source, existingEdge))) &&\n                        (minDistSq === null || tmp < minDistSq)) {\n                        this.currentConstraint = this.constraints[i];\n                        this.currentPoint = this.focusPoints[i];\n                        minDistSq = tmp;\n                        tmp = this.focusIcons[i].bounds.clone();\n                        tmp.grow(HIGHLIGHT_SIZE + 1);\n                        tmp.width -= 1;\n                        tmp.height -= 1;\n                        if (!this.focusHighlight) {\n                            const hl = this.createHighlightShape();\n                            hl.dialect = 'svg';\n                            hl.pointerEvents = false;\n                            hl.init(this.graph.getView().getOverlayPane());\n                            this.focusHighlight = hl;\n                            const getState = () => {\n                                return this.currentFocus ? this.currentFocus : state;\n                            };\n                            InternalEvent.redirectMouseEvents(hl.node, this.graph, getState);\n                        }\n                        this.focusHighlight.bounds = tmp;\n                        this.focusHighlight.redraw();\n                    }\n                }\n            }\n            if (!this.currentConstraint) {\n                this.destroyFocusHighlight();\n            }\n        }\n        else {\n            this.currentConstraint = null;\n            this.currentFocus = null;\n            this.currentPoint = null;\n        }\n    }\n    /**\n     * Transfers the focus to the given state as a source or target terminal. If\n     * the handler is not enabled then the outline is painted, but the constraints\n     * are ignored.\n     */\n    redraw() {\n        if (this.currentFocus && this.constraints && this.focusIcons.length > 0) {\n            const state = this.graph.view.getState(this.currentFocus.cell);\n            this.currentFocus = state;\n            this.currentFocusArea = new Rectangle(state.x, state.y, state.width, state.height);\n            for (let i = 0; i < this.constraints.length; i += 1) {\n                const cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n                const img = this.getImageForConstraint(state, this.constraints[i], cp);\n                const bounds = new Rectangle(Math.round(cp.x - img.width / 2), Math.round(cp.y - img.height / 2), img.width, img.height);\n                this.focusIcons[i].bounds = bounds;\n                this.focusIcons[i].redraw();\n                this.currentFocusArea.add(this.focusIcons[i].bounds);\n                this.focusPoints[i] = cp;\n            }\n        }\n    }\n    /**\n     * Transfers the focus to the given state as a source or target terminal. If\n     * the handler is not enabled then the outline is painted, but the constraints\n     * are ignored.\n     */\n    setFocus(me, state, source) {\n        this.constraints =\n            state && !this.isStateIgnored(state, source) && state.cell.isConnectable()\n                ? this.isEnabled()\n                    ? (this.graph.getAllConnectionConstraints(state, source) ?? [])\n                    : []\n                : null;\n        // Only uses cells which have constraints\n        if (this.constraints && state) {\n            this.currentFocus = state;\n            this.currentFocusArea = new Rectangle(state.x, state.y, state.width, state.height);\n            for (let i = 0; i < this.focusIcons.length; i += 1) {\n                this.focusIcons[i].destroy();\n            }\n            this.focusIcons = [];\n            this.focusPoints = [];\n            for (let i = 0; i < this.constraints.length; i += 1) {\n                const cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n                const img = this.getImageForConstraint(state, this.constraints[i], cp);\n                const { src } = img;\n                const bounds = new Rectangle(Math.round(cp.x - img.width / 2), Math.round(cp.y - img.height / 2), img.width, img.height);\n                const icon = new ImageShape(bounds, src);\n                icon.dialect = this.graph.dialect !== 'svg' ? 'mixedHtml' : 'svg';\n                icon.preserveImageAspect = false;\n                icon.init(this.graph.getView().getDecoratorPane());\n                // Move the icon behind all other overlays\n                if (icon.node.previousSibling) {\n                    icon.node.parentNode?.insertBefore(icon.node, icon.node.parentNode.firstChild);\n                }\n                const getState = () => {\n                    return this.currentFocus ? this.currentFocus : state;\n                };\n                icon.redraw();\n                InternalEvent.redirectMouseEvents(icon.node, this.graph, getState);\n                this.currentFocusArea.add(icon.bounds);\n                this.focusIcons.push(icon);\n                this.focusPoints.push(cp);\n            }\n            this.currentFocusArea.grow(this.getTolerance(me));\n        }\n        else {\n            this.destroyIcons();\n            this.destroyFocusHighlight();\n        }\n    }\n    /**\n     * Create the shape used to paint the highlight.\n     *\n     * Returns true if the given icon intersects the given point.\n     */\n    createHighlightShape() {\n        const hl = new RectangleShape(new Rectangle(), this.highlightColor, this.highlightColor, HIGHLIGHT_STROKEWIDTH);\n        hl.opacity = HIGHLIGHT_OPACITY;\n        return hl;\n    }\n    /**\n     * Returns true if the given icon intersects the given rectangle.\n     */\n    intersects(icon, mouse, source, existingEdge) {\n        return intersects(icon.bounds, mouse);\n    }\n    /**\n     * Destroy this handler.\n     */\n    onDestroy() {\n        this.reset();\n        this.graph.model.removeListener(this.resetHandler);\n        this.graph.view.removeListener(this.resetHandler);\n        this.graph.removeListener(this.resetHandler);\n        if (this.mouseleaveHandler && this.graph.container) {\n            InternalEvent.removeListener(this.graph.container, 'mouseleave', this.mouseleaveHandler);\n            this.mouseleaveHandler = null;\n        }\n    }\n}\nexport default ConstraintHandler;\n","/*\nCopyright 2024-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { CONNECT_HANDLE_FILLCOLOR, EDGE_SELECTION_COLOR, EDGE_SELECTION_DASHED, EDGE_SELECTION_STROKEWIDTH, HANDLE_FILLCOLOR, HANDLE_SIZE, HANDLE_STROKECOLOR, LABEL_HANDLE_FILLCOLOR, LABEL_HANDLE_SIZE, VERTEX_SELECTION_COLOR, VERTEX_SELECTION_DASHED, VERTEX_SELECTION_STROKEWIDTH, } from '../../util/Constants';\nimport { shallowCopy } from '../../internal/clone-utils';\n/**\n * Global configuration for {@link EdgeHandler} (including subclasses).\n *\n * @experimental Subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.14.0\n * @category Configuration\n */\nexport const EdgeHandlerConfig = {\n    addBendOnShiftClickEnabled: false,\n    connectFillColor: CONNECT_HANDLE_FILLCOLOR,\n    cursorBend: 'crosshair',\n    cursorMovable: 'move',\n    cursorTerminal: 'pointer',\n    cursorVirtualBend: 'crosshair',\n    handleShape: 'square',\n    removeBendOnShiftClickEnabled: false,\n    selectionColor: EDGE_SELECTION_COLOR,\n    selectionDashed: EDGE_SELECTION_DASHED,\n    selectionStrokeWidth: EDGE_SELECTION_STROKEWIDTH,\n    virtualBendOpacity: 20,\n    virtualBendsEnabled: false,\n};\nconst defaultEdgeHandlerConfig = { ...EdgeHandlerConfig };\n/**\n * Resets {@link EdgeHandlerConfig} to default values.\n *\n * @experimental Subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.14.0\n * @category Configuration\n */\nexport const resetEdgeHandlerConfig = () => {\n    shallowCopy(defaultEdgeHandlerConfig, EdgeHandlerConfig);\n};\n/**\n * Global configuration for handles, used {@link VertexHandler} and {@link EdgeHandler} (including subclasses).\n *\n * @experimental Subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.14.0\n * @category Configuration\n */\nexport const HandleConfig = {\n    /**\n     * Defines the default color to be used for the handle fill color. Use `none` for no color.\n     * @default {@link HANDLE_FILLCOLOR}\n     */\n    fillColor: HANDLE_FILLCOLOR,\n    /**\n     * Defines the cursor to be used for the label handle.\n     * @default 'default'\n     * @since 0.20.0\n     */\n    labelCursor: 'default',\n    /**\n     * Defines the color to be used for the label handle fill color. Use `none` for no color.\n     * @default {@link LABEL_HANDLE_FILLCOLOR}\n     */\n    labelFillColor: LABEL_HANDLE_FILLCOLOR,\n    /**\n     * Defines the default size for label handles.\n     * @default {@link LABEL_HANDLE_SIZE}\n     */\n    labelSize: LABEL_HANDLE_SIZE,\n    /**\n     * Defines the default size for handles.\n     * @default {@link HANDLE_SIZE}\n     */\n    size: HANDLE_SIZE,\n    /**\n     * Defines the default color to be used for the handle stroke color. Use `none` for no color.\n     * @default {@link HANDLE_STROKECOLOR}\n     */\n    strokeColor: HANDLE_STROKECOLOR,\n};\nconst defaultHandleConfig = { ...HandleConfig };\n/**\n * Resets {@link HandleConfig} to default values.\n *\n * @experimental Subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.14.0\n * @category Configuration\n */\nexport const resetHandleConfig = () => {\n    shallowCopy(defaultHandleConfig, HandleConfig);\n};\n/**\n * Global configuration for {@link VertexHandler}.\n *\n * @experimental Subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.12.0\n * @category Configuration\n */\nexport const VertexHandlerConfig = {\n    /**\n     * Defines the cursor for a movable vertex.\n     * @since 0.20.0\n     */\n    cursorMovable: 'move',\n    /**\n     * Enable rotation handle\n     * @default false\n     */\n    rotationEnabled: false,\n    /**\n     * Defines the default color to be used for the selection border of vertices. Use `none` for no color.\n     * @default {@link VERTEX_SELECTION_COLOR}\n     * @since 0.14.0\n     */\n    selectionColor: VERTEX_SELECTION_COLOR,\n    /**\n     * Defines the default stroke width to be used for vertex selections.\n     * @default {@link VERTEX_SELECTION_STROKEWIDTH}\n     * @since 0.14.0\n     */\n    selectionStrokeWidth: VERTEX_SELECTION_STROKEWIDTH,\n    /**\n     * Defines the default dashed state to be used for the vertex selection border.\n     * @default {@link VERTEX_SELECTION_DASHED}\n     * @since 0.14.0\n     */\n    selectionDashed: VERTEX_SELECTION_DASHED,\n};\nconst defaultVertexHandlerConfig = { ...VertexHandlerConfig };\n/**\n * Resets {@link VertexHandlerConfig} to default values.\n *\n * @experimental Subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.14.0\n * @category Configuration\n */\nexport const resetVertexHandlerConfig = () => {\n    shallowCopy(defaultVertexHandlerConfig, VertexHandlerConfig);\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CellMarker from '../cell/CellMarker';\nimport Point from '../geometry/Point';\nimport { DEFAULT_HOTSPOT, DEFAULT_INVALID_COLOR, DEFAULT_VALID_COLOR, HIGHLIGHT_STROKEWIDTH, LOCKED_HANDLE_FILLCOLOR, NONE, OUTLINE_HIGHLIGHT_COLOR, OUTLINE_HIGHLIGHT_STROKEWIDTH, } from '../../util/Constants';\nimport { contains, findNearestSegment, intersects, ptSegDistSq, } from '../../util/mathUtils';\nimport { convertPoint, getOffset, setOpacity } from '../../util/styleUtils';\nimport EllipseShape from '../shape/node/EllipseShape';\nimport ImageShape from '../shape/node/ImageShape';\nimport RectangleShape from '../shape/node/RectangleShape';\nimport ConnectionConstraint from '../other/ConnectionConstraint';\nimport InternalEvent from '../event/InternalEvent';\nimport ConstraintHandler from './ConstraintHandler';\nimport Rectangle from '../geometry/Rectangle';\nimport Client from '../../Client';\nimport { EdgeStyle } from '../style/builtin-style-elements';\nimport { getClientX, getClientY, isAltDown, isMouseEvent, isShiftDown, } from '../../util/EventUtils';\nimport { equalPoints } from '../../util/arrayUtils';\nimport { EdgeHandlerConfig, HandleConfig } from './config';\n/**\n * Graph event handler that reconnects edges, modifies control points and the edge label location.\n *\n * Uses {@link CellMarker} for finding and highlighting new source and target vertices.\n *\n * This handler is automatically created in {@link AbstractGraph.createHandler} for each selected edge.\n *\n * Some elements of this handler and its subclasses can be configured using {@link EdgeHandlerConfig}.\n */\nclass EdgeHandler {\n    constructor(state) {\n        /**\n         * Holds the current validation error while a connection is being changed.\n         */\n        this.error = null;\n        /**\n         * Holds the {@link Shape}s that represent the points.\n         */\n        this.bends = [];\n        /**\n         * Specifies if cloning by control-drag is enabled.\n         * @default true\n         */\n        this.cloneEnabled = true;\n        /**\n         * Specifies if removing bends by double click is enabled.\n         * @default false\n         */\n        this.dblClickRemoveEnabled = false;\n        /**\n         * Specifies if removing bends by dropping them on other bends is enabled.\n         * @default false\n         */\n        this.mergeRemoveEnabled = false;\n        /**\n         * Specifies if removing bends by creating straight segments should be enabled.\n         * If enabled, this can be overridden by holding down the alt key while moving.\n         * @default false\n         */\n        this.straightRemoveEnabled = false;\n        /**\n         * Specifies if the parent should be highlighted if a child cell is selected.\n         * @default false\n         */\n        this.parentHighlightEnabled = false;\n        /**\n         * Specifies if bends should be added to the graph container.\n         * This is updated in {@link constructor} based on whether the edge or one of its terminals has an HTML label in the container.\n         */\n        this.preferHtml = false;\n        /**\n         * Specifies if the bounds of handles should be used for hit-detection in IE.\n         * @default true\n         */\n        this.allowHandleBoundsCheck = true;\n        /**\n         * Specifies if waypoints should snap to the routing centers of terminals.\n         * @default false\n         */\n        this.snapToTerminals = false;\n        /**\n         * Optional {@link Image} to be used as handles.\n         * @default null\n         */\n        this.handleImage = null;\n        this.labelHandleImage = null;\n        /**\n         * Optional tolerance for hit-detection in {@link getHandleForEvent}.\n         * @default 0\n         */\n        this.tolerance = 0;\n        /**\n         * Specifies if connections to the outline of a highlighted target should be\n         * enabled. This will allow to place the connection point along the outline of\n         * the highlighted target.\n         * @default false\n         */\n        this.outlineConnect = false;\n        /**\n         * Specifies if the label handle should be moved if it intersects with another\n         * handle. Uses {@link checkLabelHandle} for checking and moving.\n         * @default false\n         */\n        this.manageLabelHandle = false;\n        this.currentPoint = null;\n        this.parentHighlight = null;\n        this.index = null;\n        this.isSource = false;\n        this.isTarget = false;\n        this.isLabel = false;\n        this.points = [];\n        this.snapPoint = null;\n        this.abspoints = [];\n        this.startX = 0;\n        this.startY = 0;\n        this.outline = true;\n        this.active = true;\n        // `state.shape` must exists.\n        this.state = state;\n        this.graph = this.state.view.graph;\n        this.marker = this.createMarker();\n        this.constraintHandler = new ConstraintHandler(this.graph);\n        // Clones the original points from the cell\n        // and makes sure at least one point exists\n        this.points = [];\n        // Uses the absolute points of the state\n        // for the initial configuration and preview\n        this.abspoints = this.getSelectionPoints(this.state);\n        this.shape = this.createSelectionShape(this.abspoints);\n        this.shape.dialect = this.graph.dialect !== 'svg' ? 'mixedHtml' : 'svg';\n        this.shape.init(this.graph.getView().getOverlayPane());\n        this.shape.pointerEvents = false;\n        this.shape.setCursor(EdgeHandlerConfig.cursorMovable);\n        InternalEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n        // Updates preferHtml\n        this.preferHtml =\n            this.state.text != null && this.state.text.node.parentNode === this.graph.container;\n        if (!this.preferHtml) {\n            // Checks source terminal\n            const sourceState = this.state.getVisibleTerminalState(true);\n            if (sourceState != null) {\n                this.preferHtml =\n                    sourceState.text != null &&\n                        sourceState.text.node.parentNode === this.graph.container;\n            }\n            if (!this.preferHtml) {\n                // Checks target terminal\n                const targetState = this.state.getVisibleTerminalState(false);\n                if (targetState != null) {\n                    this.preferHtml =\n                        targetState.text != null &&\n                            targetState.text.node.parentNode === this.graph.container;\n                }\n            }\n        }\n        const selectionHandler = this.graph.getPlugin('SelectionHandler');\n        // Creates bends for the non-routed absolute points\n        // or bends that don't correspond to points\n        if (selectionHandler &&\n            (this.graph.getSelectionCount() < selectionHandler.maxCells ||\n                selectionHandler.maxCells <= 0)) {\n            this.bends = this.createBends();\n            if (this.isVirtualBendsEnabled()) {\n                this.virtualBends = this.createVirtualBends();\n            }\n        }\n        // Adds a rectangular handle for the label position\n        this.label = new Point(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n        this.labelShape = this.createLabelHandleShape();\n        this.initBend(this.labelShape);\n        this.labelShape.setCursor(HandleConfig.labelCursor);\n        this.customHandles = this.createCustomHandles();\n        this.updateParentHighlight();\n        this.redraw();\n        // Handles escape keystrokes\n        this.escapeHandler = (_sender, _evt) => {\n            const dirty = this.index != null;\n            this.reset();\n            if (dirty) {\n                this.graph.cellRenderer.redraw(this.state, false, state.view.isRendering());\n            }\n        };\n        this.state.view.graph.addListener(InternalEvent.ESCAPE, this.escapeHandler);\n    }\n    /**\n     * Returns true if the parent highlight should be visible. This implementation\n     * always returns true.\n     */\n    isParentHighlightVisible() {\n        const parent = this.state.cell.getParent();\n        return parent ? !this.graph.isCellSelected(parent) : null;\n    }\n    /**\n     * Updates the highlight of the parent if {@link parentHighlightEnabled} is true.\n     */\n    updateParentHighlight() {\n        if (!this.isDestroyed()) {\n            const visible = this.isParentHighlightVisible();\n            const parent = this.state.cell.getParent();\n            const pstate = parent ? this.graph.view.getState(parent) : null;\n            if (this.parentHighlight) {\n                if (parent && parent.isVertex() && visible) {\n                    const b = this.parentHighlight.bounds;\n                    if (pstate &&\n                        b &&\n                        (b.x !== pstate.x ||\n                            b.y !== pstate.y ||\n                            b.width !== pstate.width ||\n                            b.height !== pstate.height)) {\n                        this.parentHighlight.bounds = Rectangle.fromRectangle(pstate);\n                        this.parentHighlight.redraw();\n                    }\n                }\n                else {\n                    if (pstate && pstate.parentHighlight === this.parentHighlight) {\n                        pstate.parentHighlight = null;\n                    }\n                    this.parentHighlight.destroy();\n                    this.parentHighlight = null;\n                }\n            }\n            else if (this.parentHighlightEnabled && visible) {\n                if (parent && parent.isVertex() && pstate && !pstate.parentHighlight) {\n                    this.parentHighlight = this.createParentHighlightShape(pstate);\n                    // VML dialect required here for event transparency in IE\n                    this.parentHighlight.dialect = 'svg';\n                    this.parentHighlight.pointerEvents = false;\n                    if (pstate.style.rotation) {\n                        this.parentHighlight.rotation = pstate.style.rotation;\n                    }\n                    this.parentHighlight.init(this.graph.getView().getOverlayPane());\n                    this.parentHighlight.redraw();\n                    // Shows highlight once per parent\n                    pstate.parentHighlight = this.parentHighlight;\n                }\n            }\n        }\n    }\n    /**\n     * Returns an array of custom handles. This implementation returns an empty array.\n     */\n    createCustomHandles() {\n        return [];\n    }\n    /**\n     * Returns true if virtual bends should be added. This returns true if\n     * {@link virtualBendsEnabled} is true and the current style allows and\n     * renders custom waypoints.\n     */\n    isVirtualBendsEnabled(evt) {\n        return (EdgeHandlerConfig.virtualBendsEnabled &&\n            (this.state.style.edgeStyle == null ||\n                this.state.style.edgeStyle === NONE ||\n                this.state.style.noEdgeStyle) &&\n            this.state.style.shape !== 'arrow');\n    }\n    /**\n     * Returns true if the given cell allows new connections to be created. This implementation\n     * always returns true.\n     */\n    isCellEnabled(cell) {\n        return true;\n    }\n    /**\n     * Returns true if the given event is a trigger to add a new Point. This\n     * implementation returns true if shift is pressed.\n     */\n    isAddPointEvent(evt) {\n        return isShiftDown(evt);\n    }\n    /**\n     * Returns true if the given event is a trigger to remove a point. This\n     * implementation returns true if shift is pressed.\n     */\n    isRemovePointEvent(evt) {\n        return isShiftDown(evt);\n    }\n    /**\n     * Returns the list of points that defines the selection stroke.\n     */\n    getSelectionPoints(state) {\n        return state.absolutePoints;\n    }\n    /**\n     * Creates the shape used to draw the selection border.\n     */\n    createParentHighlightShape(bounds) {\n        const shape = new RectangleShape(Rectangle.fromRectangle(bounds), NONE, this.getSelectionColor());\n        shape.strokeWidth = this.getSelectionStrokeWidth();\n        shape.isDashed = this.isSelectionDashed();\n        return shape;\n    }\n    /**\n     * Creates the shape used to draw the selection border.\n     */\n    createSelectionShape(points) {\n        const c = this.state.shape.constructor;\n        const shape = new c();\n        shape.outline = true;\n        shape.apply(this.state);\n        shape.isDashed = this.isSelectionDashed();\n        shape.stroke = this.getSelectionColor();\n        shape.isShadow = false;\n        return shape;\n    }\n    /**\n     * Returns {@link EdgeHandlerConfig.selectionColor}.\n     */\n    getSelectionColor() {\n        return EdgeHandlerConfig.selectionColor;\n    }\n    /**\n     * Returns {@link EdgeHandlerConfig.selectionStrokeWidth}.\n     */\n    getSelectionStrokeWidth() {\n        return EdgeHandlerConfig.selectionStrokeWidth;\n    }\n    /**\n     * Returns {@link EdgeHandlerConfig.selectionDashed}.\n     */\n    isSelectionDashed() {\n        return EdgeHandlerConfig.selectionDashed;\n    }\n    /**\n     * Returns true if the given cell is connectable. This is a hook to\n     * disable floating connections. This implementation returns true.\n     */\n    isConnectableCell(cell) {\n        return true;\n    }\n    /**\n     * Creates and returns the {@link CellMarker} used in {@link marker}.\n     */\n    getCellAt(x, y) {\n        return !this.outlineConnect ? this.graph.getCellAt(x, y) : null;\n    }\n    /**\n     * Creates and returns the {@link CellMarker} used in {@link marker}.\n     */\n    createMarker() {\n        return new EdgeHandlerCellMarker(this.graph, this);\n    }\n    /**\n     * Returns the error message or an empty string if the connection for the\n     * given source, target pair is not valid. Otherwise, it returns null. This\n     * implementation uses {@link AbstractGraph.getEdgeValidationError}.\n     *\n     * @param source {@link Cell} that represents the source terminal.\n     * @param target {@link Cell} that represents the target terminal.\n     */\n    validateConnection(source, target) {\n        return this.graph.getEdgeValidationError(this.state.cell, source, target);\n    }\n    /**\n     * Creates and returns the bends used for modifying the edge. This is\n     * typically an array of {@link RectangleShape}.\n     */\n    createBends() {\n        const { cell } = this.state;\n        const bends = [];\n        for (let i = 0; i < this.abspoints.length; i += 1) {\n            if (this.isHandleVisible(i)) {\n                const source = i === 0;\n                const target = i === this.abspoints.length - 1;\n                const terminal = source || target;\n                if (terminal || this.graph.isCellBendable(cell)) {\n                    ((index) => {\n                        const bend = this.createHandleShape(index);\n                        this.initBend(bend, () => {\n                            if (this.dblClickRemoveEnabled) {\n                                this.removePoint(this.state, index);\n                            }\n                        });\n                        if (this.isHandleEnabled(i)) {\n                            bend.setCursor(terminal ? EdgeHandlerConfig.cursorTerminal : EdgeHandlerConfig.cursorBend);\n                        }\n                        bends.push(bend);\n                        if (!terminal) {\n                            this.points.push(new Point(0, 0));\n                            bend.node.style.visibility = 'hidden';\n                        }\n                    })(i);\n                }\n            }\n        }\n        return bends;\n    }\n    /**\n     * Creates and returns the bends used for modifying the edge. This is\n     * typically an array of {@link RectangleShape}.\n     */\n    createVirtualBends() {\n        const { cell } = this.state;\n        const last = this.abspoints[0];\n        const bends = [];\n        if (this.graph.isCellBendable(cell)) {\n            for (let i = 1; i < this.abspoints.length; i += 1) {\n                ((bend) => {\n                    this.initBend(bend);\n                    bend.setCursor(EdgeHandlerConfig.cursorVirtualBend);\n                    bends.push(bend);\n                })(this.createHandleShape());\n            }\n        }\n        return bends;\n    }\n    /**\n     * Creates the shape used to display the given bend.\n     */\n    isHandleEnabled(index) {\n        return true;\n    }\n    /**\n     * Returns true if the handle at the given index is visible.\n     */\n    isHandleVisible(index) {\n        const source = this.state.getVisibleTerminalState(true);\n        const target = this.state.getVisibleTerminalState(false);\n        const geo = this.state.cell.getGeometry();\n        const edgeStyle = geo\n            ? this.graph.view.getEdgeStyle(this.state, geo.points || undefined, source, target)\n            : null;\n        return (edgeStyle !== EdgeStyle.EntityRelation ||\n            index === 0 ||\n            index === this.abspoints.length - 1);\n    }\n    /**\n     * Creates the shape used to display the given bend.\n     * Note that the index\n     * - may be `null` for special cases, such as when called from {@link ElbowEdgeHandler.createVirtualBend}.\n     * - is `null` for virtual handles.\n     *\n     * Only images and rectangles should be returned if support for HTML labels with not foreign objects is required.\n     */\n    createHandleShape(_index) {\n        if (this.handleImage) {\n            const shape = new ImageShape(new Rectangle(0, 0, this.handleImage.width, this.handleImage.height), this.handleImage.src);\n            // Allows HTML rendering of the images\n            shape.preserveImageAspect = false;\n            return shape;\n        }\n        let s = HandleConfig.size;\n        if (this.preferHtml) {\n            s -= 1;\n        }\n        const shapeConstructor = EdgeHandlerConfig.handleShape === 'circle' ? EllipseShape : RectangleShape;\n        return new shapeConstructor(new Rectangle(0, 0, s, s), HandleConfig.fillColor, HandleConfig.strokeColor);\n    }\n    /**\n     * Creates the shape used to display the label handle.\n     */\n    createLabelHandleShape() {\n        if (this.labelHandleImage) {\n            const shape = new ImageShape(new Rectangle(0, 0, this.labelHandleImage.width, this.labelHandleImage.height), this.labelHandleImage.src);\n            // Allows HTML rendering of the images\n            shape.preserveImageAspect = false;\n            return shape;\n        }\n        const s = HandleConfig.labelSize;\n        return new RectangleShape(new Rectangle(0, 0, s, s), HandleConfig.labelFillColor, HandleConfig.strokeColor);\n    }\n    /**\n     * Helper method to initialize the given bend.\n     *\n     * @param bend {@link Shape} that represents the bend to be initialized.\n     * @param dblClick Optional function to be called on double click.\n     */\n    initBend(bend, dblClick) {\n        if (this.preferHtml) {\n            bend.dialect = 'strictHtml';\n            bend.init(this.graph.container);\n        }\n        else {\n            bend.dialect = this.graph.dialect !== 'svg' ? 'mixedHtml' : 'svg';\n            bend.init(this.graph.getView().getOverlayPane());\n        }\n        InternalEvent.redirectMouseEvents(bend.node, this.graph, this.state, null, null, null, dblClick);\n        if (Client.IS_TOUCH) {\n            bend.node.setAttribute('pointer-events', 'none');\n        }\n    }\n    /**\n     * Returns the index of the handle for the given event.\n     */\n    getHandleForEvent(me) {\n        let result = null;\n        // Connection highlight may consume events before they reach sizer handle\n        const tol = !isMouseEvent(me.getEvent()) ? this.tolerance : 1;\n        const hit = this.allowHandleBoundsCheck && tol > 0\n            ? new Rectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol)\n            : null;\n        let minDistSq = Number.POSITIVE_INFINITY;\n        function checkShape(shape) {\n            if (shape &&\n                shape.bounds &&\n                shape.node &&\n                shape.node.style.display !== 'none' &&\n                shape.node.style.visibility !== 'hidden' &&\n                (me.isSource(shape) || (hit && intersects(shape.bounds, hit)))) {\n                const dx = me.getGraphX() - shape.bounds.getCenterX();\n                const dy = me.getGraphY() - shape.bounds.getCenterY();\n                const tmp = dx * dx + dy * dy;\n                if (tmp <= minDistSq) {\n                    minDistSq = tmp;\n                    return true;\n                }\n            }\n            return false;\n        }\n        if (this.isCustomHandleEvent(me) && this.customHandles) {\n            // Inverse loop order to match display order\n            for (let i = this.customHandles.length - 1; i >= 0; i--) {\n                if (checkShape(this.customHandles[i].shape)) {\n                    // LATER: Return reference to active shape\n                    return InternalEvent.CUSTOM_HANDLE - i;\n                }\n            }\n        }\n        if (me.isSource(this.state.text) || checkShape(this.labelShape)) {\n            result = InternalEvent.LABEL_HANDLE;\n        }\n        for (let i = 0; i < this.bends.length; i += 1) {\n            if (checkShape(this.bends[i])) {\n                result = i;\n            }\n        }\n        if (this.virtualBends && this.isAddVirtualBendEvent(me)) {\n            for (let i = 0; i < this.virtualBends.length; i += 1) {\n                if (checkShape(this.virtualBends[i])) {\n                    result = InternalEvent.VIRTUAL_HANDLE - i;\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns true if the given event allows virtual bends to be added. This\n     * implementation returns true.\n     */\n    isAddVirtualBendEvent(me) {\n        return true;\n    }\n    /**\n     * Returns true if the given event allows custom handles to be changed. This\n     * implementation returns true.\n     */\n    isCustomHandleEvent(me) {\n        return true;\n    }\n    /**\n     * Handles the event by checking if a special element of the handler\n     * was clicked, in which case the index parameter is non-null. The\n     * indices may be one of {@link InternalEvent.LABEL_HANDLE} or the number of the respective\n     * control point. The source and target points are used for reconnecting\n     * the edge.\n     */\n    mouseDown(_sender, me) {\n        const handle = this.getHandleForEvent(me);\n        if (handle !== null && this.bends[handle]) {\n            const b = this.bends[handle].bounds;\n            if (b)\n                this.snapPoint = new Point(b.getCenterX(), b.getCenterY());\n        }\n        if (EdgeHandlerConfig.addBendOnShiftClickEnabled &&\n            handle === null &&\n            this.isAddPointEvent(me.getEvent())) {\n            this.addPoint(this.state, me.getEvent());\n            me.consume();\n        }\n        else if (handle !== null && !me.isConsumed() && this.graph.isEnabled()) {\n            const cell = me.getCell();\n            if (EdgeHandlerConfig.removeBendOnShiftClickEnabled &&\n                this.isRemovePointEvent(me.getEvent())) {\n                this.removePoint(this.state, handle);\n            }\n            else if (handle !== InternalEvent.LABEL_HANDLE ||\n                (cell && this.graph.isLabelMovable(cell))) {\n                if (this.virtualBends && handle <= InternalEvent.VIRTUAL_HANDLE) {\n                    setOpacity(this.virtualBends[InternalEvent.VIRTUAL_HANDLE - handle].node, 100);\n                }\n                this.start(me.getX(), me.getY(), handle);\n            }\n            me.consume();\n        }\n    }\n    /**\n     * Starts the handling of the mouse gesture.\n     */\n    start(x, y, index) {\n        this.startX = x;\n        this.startY = y;\n        this.isSource = this.bends.length === 0 ? false : index === 0;\n        this.isTarget = this.bends.length === 0 ? false : index === this.bends.length - 1;\n        this.isLabel = index === InternalEvent.LABEL_HANDLE;\n        if (this.isSource || this.isTarget) {\n            const { cell } = this.state;\n            const terminal = cell.getTerminal(this.isSource);\n            if ((terminal == null && this.graph.isTerminalPointMovable(cell, this.isSource)) ||\n                (terminal != null &&\n                    this.graph.isCellDisconnectable(cell, terminal, this.isSource))) {\n                this.index = index;\n            }\n        }\n        else {\n            this.index = index;\n        }\n        // Hides other custom handles\n        if (this.index !== null &&\n            this.index <= InternalEvent.CUSTOM_HANDLE &&\n            this.index > InternalEvent.VIRTUAL_HANDLE) {\n            if (this.customHandles != null) {\n                for (let i = 0; i < this.customHandles.length; i += 1) {\n                    if (i !== InternalEvent.CUSTOM_HANDLE - this.index) {\n                        this.customHandles[i].setVisible(false);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Returns a clone of the current preview state for the given point and terminal.\n     */\n    clonePreviewState(point, terminal) {\n        return this.state.clone();\n    }\n    /**\n     * Returns the tolerance for the guides. Default value is\n     * gridSize * scale / 2.\n     */\n    getSnapToTerminalTolerance() {\n        return (this.graph.getGridSize() * this.graph.getView().scale) / 2;\n    }\n    /**\n     * Hook for subclassers do show details while the handler is active.\n     */\n    updateHint(me, point) {\n        return;\n    }\n    /**\n     * Hooks for subclassers to hide details when the handler gets inactive.\n     */\n    removeHint() {\n        return;\n    }\n    /**\n     * Hook for rounding the unscaled width or height. This uses Math.round.\n     */\n    roundLength(length) {\n        return Math.round(length);\n    }\n    /**\n     * Returns true if {@link snapToTerminals} is true and if alt is not pressed.\n     */\n    isSnapToTerminalsEvent(me) {\n        return this.snapToTerminals && !isAltDown(me.getEvent());\n    }\n    /**\n     * Returns the point for the given event.\n     */\n    getPointForEvent(me) {\n        const view = this.graph.getView();\n        const { scale } = view;\n        const point = new Point(this.roundLength(me.getGraphX() / scale) * scale, this.roundLength(me.getGraphY() / scale) * scale);\n        const tt = this.getSnapToTerminalTolerance();\n        let overrideX = false;\n        let overrideY = false;\n        if (tt > 0 && this.isSnapToTerminalsEvent(me)) {\n            const snapToPoint = (pt) => {\n                if (pt) {\n                    const { x } = pt;\n                    if (Math.abs(point.x - x) < tt) {\n                        point.x = x;\n                        overrideX = true;\n                    }\n                    const { y } = pt;\n                    if (Math.abs(point.y - y) < tt) {\n                        point.y = y;\n                        overrideY = true;\n                    }\n                }\n            };\n            // Temporary function\n            const snapToTerminal = (terminal) => {\n                if (terminal) {\n                    snapToPoint(new Point(view.getRoutingCenterX(terminal), view.getRoutingCenterY(terminal)));\n                }\n            };\n            snapToTerminal(this.state.getVisibleTerminalState(true));\n            snapToTerminal(this.state.getVisibleTerminalState(false));\n            for (let i = 0; i < this.state.absolutePoints.length; i += 1) {\n                snapToPoint(this.state.absolutePoints[i]);\n            }\n        }\n        if (this.graph.isGridEnabledEvent(me.getEvent())) {\n            const tr = view.translate;\n            if (!overrideX) {\n                point.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n            }\n            if (!overrideY) {\n                point.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n            }\n        }\n        return point;\n    }\n    /**\n     * Updates the given preview state taking into account the state of the constraint handler.\n     */\n    getPreviewTerminalState(me) {\n        this.constraintHandler.update(me, this.isSource, true, me.isSource(this.marker.highlight.shape) ? null : this.currentPoint);\n        if (this.constraintHandler.currentFocus && this.constraintHandler.currentConstraint) {\n            // Handles special case where grid is large and connection point is at actual point in which\n            // case the outline is not followed as long as we're < gridSize / 2 away from that point\n            if (this.marker.highlight &&\n                this.marker.highlight.shape &&\n                this.marker.highlight.state &&\n                this.marker.highlight.state.cell === this.constraintHandler.currentFocus.cell) {\n                // Direct repaint needed if cell already highlighted\n                if (this.marker.highlight.shape.stroke !== 'transparent') {\n                    this.marker.highlight.shape.stroke = 'transparent';\n                    this.marker.highlight.repaint();\n                }\n            }\n            else {\n                this.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n            }\n            const other = this.graph.view.getTerminalPort(this.state, this.graph.view.getState(this.state.cell.getTerminal(!this.isSource)), !this.isSource);\n            const otherCell = other ? other.cell : null;\n            const source = this.isSource ? this.constraintHandler.currentFocus.cell : otherCell;\n            const target = this.isSource ? otherCell : this.constraintHandler.currentFocus.cell;\n            // Updates the error message of the handler\n            this.error = this.validateConnection(source, target);\n            let result = null;\n            if (this.error === null) {\n                result = this.constraintHandler.currentFocus;\n            }\n            if (this.error !== null || (result && !this.isCellEnabled(result.cell))) {\n                this.constraintHandler.reset();\n            }\n            return result;\n        }\n        if (!this.graph.isIgnoreTerminalEvent(me.getEvent())) {\n            this.marker.process(me);\n            const state = this.marker.getValidState();\n            if (state && !this.isCellEnabled(state.cell)) {\n                this.constraintHandler.reset();\n                this.marker.reset();\n            }\n            return this.marker.getValidState();\n        }\n        this.marker.reset();\n        return null;\n    }\n    /**\n     * Updates the given preview state taking into account the state of the constraint handler.\n     *\n     * @param pt {@link Point} that contains the current pointer position.\n     * @param me Optional {@link MouseEvent} that contains the current event.\n     */\n    getPreviewPoints(pt, me) {\n        const geometry = this.state.cell.getGeometry();\n        if (!geometry)\n            return null;\n        let points = (geometry.points || []).slice();\n        const point = new Point(pt.x, pt.y);\n        let result = null;\n        if (!this.isSource && !this.isTarget && this.index !== null) {\n            this.convertPoint(point, false);\n            // Adds point from virtual bend\n            if (this.index <= InternalEvent.VIRTUAL_HANDLE) {\n                points.splice(InternalEvent.VIRTUAL_HANDLE - this.index, 0, point);\n            }\n            // Removes point if dragged on terminal point\n            if (!this.isSource && !this.isTarget) {\n                for (let i = 0; i < this.bends.length; i += 1) {\n                    if (i !== this.index) {\n                        const bend = this.bends[i];\n                        if (bend && contains(bend.bounds, pt.x, pt.y)) {\n                            if (this.index <= InternalEvent.VIRTUAL_HANDLE) {\n                                points.splice(InternalEvent.VIRTUAL_HANDLE - this.index, 1);\n                            }\n                            else {\n                                points.splice(this.index - 1, 1);\n                            }\n                            result = points;\n                        }\n                    }\n                }\n                // Removes point if user tries to straighten a segment\n                if (!result && this.straightRemoveEnabled && (!me || !isAltDown(me.getEvent()))) {\n                    const tol = this.graph.getEventTolerance() * this.graph.getEventTolerance();\n                    const abs = this.state.absolutePoints.slice();\n                    abs[this.index] = pt;\n                    // Handes special case where removing waypoint affects tolerance (flickering)\n                    const src = this.state.getVisibleTerminalState(true);\n                    if (src != null) {\n                        const c = this.graph.getConnectionConstraint(this.state, src, true);\n                        // Checks if point is not fixed\n                        if (c == null || this.graph.getConnectionPoint(src, c) == null) {\n                            abs[0] = new Point(src.view.getRoutingCenterX(src), src.view.getRoutingCenterY(src));\n                        }\n                    }\n                    const trg = this.state.getVisibleTerminalState(false);\n                    if (trg != null) {\n                        const c = this.graph.getConnectionConstraint(this.state, trg, false);\n                        // Checks if point is not fixed\n                        if (c == null || this.graph.getConnectionPoint(trg, c) == null) {\n                            abs[abs.length - 1] = new Point(trg.view.getRoutingCenterX(trg), trg.view.getRoutingCenterY(trg));\n                        }\n                    }\n                    const checkRemove = (idx, tmp) => {\n                        if (idx > 0 &&\n                            idx < abs.length - 1 &&\n                            ptSegDistSq(abs[idx - 1].x, abs[idx - 1].y, abs[idx + 1].x, abs[idx + 1].y, tmp.x, tmp.y) < tol) {\n                            points.splice(idx - 1, 1);\n                            result = points;\n                        }\n                    };\n                    // LATER: Check if other points can be removed if a segment is made straight\n                    checkRemove(this.index, pt);\n                }\n            }\n            // Updates existing point\n            if (result == null && this.index > InternalEvent.VIRTUAL_HANDLE) {\n                points[this.index - 1] = point;\n            }\n        }\n        else if (this.graph.isResetEdgesOnConnect()) {\n            points = [];\n        }\n        return result != null ? result : points;\n    }\n    /**\n     * Returns true if {@link outlineConnect} is true and the source of the event is the outline shape\n     * or shift is pressed.\n     */\n    isOutlineConnectEvent(me) {\n        if (!this.currentPoint)\n            return false;\n        const offset = getOffset(this.graph.container);\n        const evt = me.getEvent();\n        const clientX = getClientX(evt);\n        const clientY = getClientY(evt);\n        const doc = document.documentElement;\n        const left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n        const top = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n        const gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n        const gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n        return (this.outlineConnect &&\n            !isShiftDown(me.getEvent()) &&\n            (me.isSource(this.marker.highlight.shape) ||\n                (isAltDown(me.getEvent()) && me.getState() != null) ||\n                this.marker.highlight.isHighlightAt(clientX, clientY) ||\n                ((gridX !== clientX || gridY !== clientY) &&\n                    me.getState() == null &&\n                    this.marker.highlight.isHighlightAt(gridX, gridY))));\n    }\n    /**\n     * Updates the given preview state taking into account the state of the constraint handler.\n     */\n    updatePreviewState(edgeState, point, terminalState, me, outline = false) {\n        // Computes the points for the edge style and terminals\n        const sourceState = this.isSource\n            ? terminalState\n            : this.state.getVisibleTerminalState(true);\n        const targetState = this.isTarget\n            ? terminalState\n            : this.state.getVisibleTerminalState(false);\n        let sourceConstraint = this.graph.getConnectionConstraint(edgeState, sourceState, true);\n        let targetConstraint = this.graph.getConnectionConstraint(edgeState, targetState, false);\n        let constraint = this.constraintHandler.currentConstraint;\n        if (constraint == null && outline) {\n            if (terminalState != null) {\n                // Handles special case where mouse is on outline away from actual end point\n                // in which case the grid is ignored and mouse point is used instead\n                if (me.isSource(this.marker.highlight.shape)) {\n                    point = new Point(me.getGraphX(), me.getGraphY());\n                }\n                constraint = this.graph.getOutlineConstraint(point, terminalState, me);\n                this.constraintHandler.setFocus(me, terminalState, this.isSource);\n                this.constraintHandler.currentConstraint = constraint;\n                this.constraintHandler.currentPoint = point;\n            }\n            else {\n                constraint = new ConnectionConstraint(null);\n            }\n        }\n        if (this.outlineConnect &&\n            this.marker.highlight != null &&\n            this.marker.highlight.shape != null) {\n            const s = this.graph.view.scale;\n            if (this.constraintHandler.currentConstraint != null &&\n                this.constraintHandler.currentFocus != null) {\n                this.marker.highlight.shape.stroke = outline\n                    ? OUTLINE_HIGHLIGHT_COLOR\n                    : 'transparent';\n                this.marker.highlight.shape.strokeWidth = OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n                this.marker.highlight.repaint();\n            }\n            else if (this.marker.hasValidState()) {\n                const cell = me.getCell();\n                this.marker.highlight.shape.stroke =\n                    cell && cell.isConnectable() && this.marker.getValidState() !== me.getState()\n                        ? 'transparent'\n                        : DEFAULT_VALID_COLOR;\n                this.marker.highlight.shape.strokeWidth = HIGHLIGHT_STROKEWIDTH / s / s;\n                this.marker.highlight.repaint();\n            }\n        }\n        if (this.isSource) {\n            sourceConstraint = constraint;\n        }\n        else if (this.isTarget) {\n            targetConstraint = constraint;\n        }\n        if (this.isSource || this.isTarget) {\n            if (constraint != null && constraint.point != null) {\n                edgeState.style[this.isSource ? 'exitX' : 'entryX'] = constraint.point.x;\n                edgeState.style[this.isSource ? 'exitY' : 'entryY'] = constraint.point.y;\n            }\n            else {\n                delete edgeState.style[this.isSource ? 'exitX' : 'entryX'];\n                delete edgeState.style[this.isSource ? 'exitY' : 'entryY'];\n            }\n        }\n        edgeState.setVisibleTerminalState(sourceState, true);\n        edgeState.setVisibleTerminalState(targetState, false);\n        if (!this.isSource || sourceState != null) {\n            edgeState.view.updateFixedTerminalPoint(edgeState, sourceState, true, sourceConstraint);\n        }\n        if (!this.isTarget || targetState != null) {\n            edgeState.view.updateFixedTerminalPoint(edgeState, targetState, false, targetConstraint);\n        }\n        if ((this.isSource || this.isTarget) && terminalState == null) {\n            edgeState.setAbsoluteTerminalPoint(point, this.isSource);\n            if (this.marker.getMarkedState() == null) {\n                this.error = this.graph.isAllowDanglingEdges() ? null : '';\n            }\n        }\n        edgeState.view.updatePoints(edgeState, this.points, sourceState, targetState);\n        edgeState.view.updateFloatingTerminalPoints(edgeState, sourceState, targetState);\n    }\n    /**\n     * Handles the event by updating the preview.\n     */\n    mouseMove(_sender, me) {\n        if (this.index != null && this.marker != null) {\n            this.currentPoint = this.getPointForEvent(me);\n            this.error = null;\n            // Uses the current point from the constraint handler if available\n            if (!this.graph.isIgnoreTerminalEvent(me.getEvent()) &&\n                isShiftDown(me.getEvent()) &&\n                this.snapPoint != null) {\n                if (Math.abs(this.snapPoint.x - this.currentPoint.x) <\n                    Math.abs(this.snapPoint.y - this.currentPoint.y)) {\n                    this.currentPoint.x = this.snapPoint.x;\n                }\n                else {\n                    this.currentPoint.y = this.snapPoint.y;\n                }\n            }\n            if (this.index <= InternalEvent.CUSTOM_HANDLE &&\n                this.index > InternalEvent.VIRTUAL_HANDLE) {\n                if (this.customHandles != null) {\n                    this.customHandles[InternalEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n                    this.customHandles[InternalEvent.CUSTOM_HANDLE - this.index].positionChanged();\n                    if (this.shape != null && this.shape.node != null) {\n                        this.shape.node.style.display = 'none';\n                    }\n                }\n            }\n            else if (this.isLabel && this.label) {\n                this.label.x = this.currentPoint.x;\n                this.label.y = this.currentPoint.y;\n            }\n            else {\n                this.points = this.getPreviewPoints(this.currentPoint, me);\n                let terminalState = this.isSource || this.isTarget ? this.getPreviewTerminalState(me) : null;\n                if (this.constraintHandler.currentConstraint != null &&\n                    this.constraintHandler.currentFocus != null &&\n                    this.constraintHandler.currentPoint != null) {\n                    this.currentPoint = this.constraintHandler.currentPoint.clone();\n                }\n                else if (this.outlineConnect) {\n                    // Need to check outline before cloning terminal state\n                    const outline = this.isSource || this.isTarget ? this.isOutlineConnectEvent(me) : false;\n                    if (outline) {\n                        terminalState = this.marker.highlight.state;\n                    }\n                    else if (terminalState != null &&\n                        terminalState !== me.getState() &&\n                        me.getCell()?.isConnectable() &&\n                        this.marker.highlight.shape != null) {\n                        this.marker.highlight.shape.stroke = 'transparent';\n                        this.marker.highlight.repaint();\n                        terminalState = null;\n                    }\n                }\n                if (terminalState != null && !this.isCellEnabled(terminalState.cell)) {\n                    terminalState = null;\n                    this.marker.reset();\n                }\n                if (this.currentPoint) {\n                    const clone = this.clonePreviewState(this.currentPoint, terminalState != null ? terminalState.cell : null);\n                    this.updatePreviewState(clone, this.currentPoint, terminalState, me, this.outline);\n                    // Sets the color of the preview to valid or invalid, updates the\n                    // points of the preview and redraws\n                    const color = this.error == null ? this.marker.validColor : this.marker.invalidColor;\n                    this.setPreviewColor(color);\n                    this.abspoints = clone.absolutePoints;\n                    this.active = true;\n                    this.updateHint(me, this.currentPoint);\n                }\n            }\n            // This should go before calling isOutlineConnectEvent above. As a workaround\n            // we add an offset of gridSize to the hint to avoid problem with hit detection\n            // in highlight.isHighlightAt (which uses comonentFromPoint)\n            this.drawPreview();\n            InternalEvent.consume(me.getEvent());\n            me.consume();\n        }\n    }\n    /**\n     * Handles the event to applying the previewed changes on the edge by\n     * using {@link moveLabel}, {@link connect} or {@link changePoints}.\n     */\n    mouseUp(_sender, me) {\n        // Workaround for wrong event source in Webkit\n        if (this.index != null && this.marker != null) {\n            if (this.shape != null && this.shape.node != null) {\n                this.shape.node.style.display = '';\n            }\n            let edge = this.state.cell;\n            const { index } = this;\n            this.index = null;\n            // Ignores event if mouse has not been moved\n            if (me.getX() !== this.startX || me.getY() !== this.startY) {\n                const clone = !this.graph.isIgnoreTerminalEvent(me.getEvent()) &&\n                    this.graph.isCloneEvent(me.getEvent()) &&\n                    this.cloneEnabled &&\n                    this.graph.isCellsCloneable();\n                // Displays the reason for not carriying out the change\n                // if there is an error message with non-zero length\n                if (this.error != null) {\n                    if (this.error.length > 0) {\n                        this.graph.validationAlert(this.error);\n                    }\n                }\n                else if (index <= InternalEvent.CUSTOM_HANDLE &&\n                    index > InternalEvent.VIRTUAL_HANDLE) {\n                    if (this.customHandles != null) {\n                        const model = this.graph.getDataModel();\n                        model.beginUpdate();\n                        try {\n                            this.customHandles[InternalEvent.CUSTOM_HANDLE - index].execute(me);\n                            if (this.shape != null && this.shape.node != null) {\n                                this.shape.apply(this.state);\n                                this.shape.redraw();\n                            }\n                        }\n                        finally {\n                            model.endUpdate();\n                        }\n                    }\n                }\n                else if (this.isLabel && this.label) {\n                    this.moveLabel(this.state, this.label.x, this.label.y);\n                }\n                else if (this.isSource || this.isTarget) {\n                    let terminal = null;\n                    if (this.constraintHandler.currentConstraint != null &&\n                        this.constraintHandler.currentFocus != null) {\n                        terminal = this.constraintHandler.currentFocus.cell;\n                    }\n                    if (!terminal &&\n                        this.marker.hasValidState() &&\n                        this.marker.highlight != null &&\n                        this.marker.highlight.shape != null &&\n                        this.marker.highlight.shape.stroke !== 'transparent' &&\n                        this.marker.highlight.shape.stroke !== 'white') {\n                        terminal = this.marker.validState.cell;\n                    }\n                    if (terminal) {\n                        const model = this.graph.getDataModel();\n                        const parent = edge.getParent();\n                        model.beginUpdate();\n                        try {\n                            // Clones and adds the cell\n                            if (clone) {\n                                let geo = edge.getGeometry();\n                                const cloned = this.graph.cloneCell(edge);\n                                model.add(parent, cloned, parent.getChildCount());\n                                if (geo != null) {\n                                    geo = geo.clone();\n                                    model.setGeometry(cloned, geo);\n                                }\n                                const other = edge.getTerminal(!this.isSource);\n                                this.graph.connectCell(cloned, other, !this.isSource);\n                                edge = cloned;\n                            }\n                            edge = this.connect(edge, terminal, this.isSource, clone, me);\n                        }\n                        finally {\n                            model.endUpdate();\n                        }\n                    }\n                    else if (this.graph.isAllowDanglingEdges()) {\n                        const pt = this.abspoints[this.isSource ? 0 : this.abspoints.length - 1];\n                        pt.x = this.roundLength(pt.x / this.graph.view.scale - this.graph.view.translate.x);\n                        pt.y = this.roundLength(pt.y / this.graph.view.scale - this.graph.view.translate.y);\n                        const parent = edge.getParent();\n                        const pstate = parent ? this.graph.getView().getState(parent) : null;\n                        if (pstate != null) {\n                            pt.x -= pstate.origin.x;\n                            pt.y -= pstate.origin.y;\n                        }\n                        pt.x -= this.graph.getPanDx() / this.graph.view.scale;\n                        pt.y -= this.graph.getPanDy() / this.graph.view.scale;\n                        // Destroys and recreates this handler\n                        edge = this.changeTerminalPoint(edge, pt, this.isSource, clone);\n                    }\n                }\n                else if (this.active) {\n                    edge = this.changePoints(edge, this.points, clone);\n                }\n                else {\n                    this.graph.getView().invalidate(this.state.cell);\n                    this.graph.getView().validate(this.state.cell);\n                }\n            }\n            else if (this.graph.isToggleEvent(me.getEvent())) {\n                this.graph.selectCellForEvent(this.state.cell, me.getEvent());\n            }\n            // Resets the preview color the state of the handler if this\n            // handler has not been recreated\n            if (this.marker != null) {\n                this.reset();\n                // Updates the selection if the edge has been cloned\n                if (edge !== this.state.cell) {\n                    this.graph.setSelectionCell(edge);\n                }\n            }\n            me.consume();\n        }\n    }\n    /**\n     * Resets the state of this handler.\n     */\n    reset() {\n        if (this.active) {\n            this.refresh();\n        }\n        this.error = null;\n        this.index = null;\n        this.points = [];\n        this.snapPoint = null;\n        this.isLabel = false;\n        this.isSource = false;\n        this.isTarget = false;\n        this.active = false;\n        if (this.marker) {\n            this.marker.reset();\n        }\n        this.constraintHandler.reset();\n        if (this.customHandles) {\n            for (let i = 0; i < this.customHandles.length; i += 1) {\n                this.customHandles[i].reset();\n            }\n        }\n        this.setPreviewColor(EdgeHandlerConfig.selectionColor);\n        this.removeHint();\n        this.redraw();\n    }\n    /**\n     * Sets the color of the preview to the given value.\n     */\n    setPreviewColor(color) {\n        this.shape.stroke = color;\n    }\n    /**\n     * Converts the given point in-place from screen to unscaled, untranslated\n     * graph coordinates and applies the grid. Returns the given, modified\n     * point instance.\n     *\n     * @param point {@link Point} to be converted.\n     * @param gridEnabled Boolean that specifies if the grid should be applied.\n     */\n    convertPoint(point, gridEnabled) {\n        const scale = this.graph.getView().getScale();\n        const tr = this.graph.getView().getTranslate();\n        if (gridEnabled) {\n            point.x = this.graph.snap(point.x);\n            point.y = this.graph.snap(point.y);\n        }\n        point.x = Math.round(point.x / scale - tr.x);\n        point.y = Math.round(point.y / scale - tr.y);\n        const parent = this.state.cell.getParent();\n        const pstate = parent ? this.graph.getView().getState(parent) : parent;\n        if (pstate) {\n            point.x -= pstate.origin.x;\n            point.y -= pstate.origin.y;\n        }\n        return point;\n    }\n    /**\n     * Changes the coordinates for the label of the given edge.\n     *\n     * @param edge {@link Cell} that represents the edge.\n     * @param x Integer that specifies the x-coordinate of the new location.\n     * @param y Integer that specifies the y-coordinate of the new location.\n     */\n    moveLabel(edgeState, x, y) {\n        const model = this.graph.getDataModel();\n        let geometry = edgeState.cell.getGeometry();\n        if (geometry != null) {\n            const { scale } = this.graph.getView();\n            geometry = geometry.clone();\n            if (geometry.relative) {\n                // Resets the relative location stored inside the geometry\n                let pt = this.graph.getView().getRelativePoint(edgeState, x, y);\n                geometry.x = Math.round(pt.x * 10000) / 10000;\n                geometry.y = Math.round(pt.y);\n                // Resets the offset inside the geometry to find the offset\n                // from the resulting point\n                geometry.offset = new Point(0, 0);\n                pt = this.graph.view.getPoint(edgeState, geometry);\n                geometry.offset = new Point(Math.round((x - pt.x) / scale), Math.round((y - pt.y) / scale));\n            }\n            else {\n                const points = edgeState.absolutePoints;\n                const p0 = points[0];\n                const pe = points[points.length - 1];\n                if (p0 != null && pe != null) {\n                    const cx = p0.x + (pe.x - p0.x) / 2;\n                    const cy = p0.y + (pe.y - p0.y) / 2;\n                    geometry.offset = new Point(Math.round((x - cx) / scale), Math.round((y - cy) / scale));\n                    geometry.x = 0;\n                    geometry.y = 0;\n                }\n            }\n            model.setGeometry(edgeState.cell, geometry);\n        }\n    }\n    /**\n     * Changes the terminal or terminal point of the given edge in the graph model.\n     *\n     * @param edge {@link Cell} that represents the edge to be reconnected.\n     * @param terminal {@link Cell} that represents the new terminal.\n     * @param isSource Boolean indicating if the new terminal is the source or target terminal.\n     * @param _isClone Boolean indicating if the new connection should be a clone of the old edge.\n     * @param _me {@link MouseEvent} that contains the mouse up event.\n     */\n    connect(edge, terminal, isSource, _isClone, _me) {\n        const parent = edge.getParent();\n        this.graph.batchUpdate(() => {\n            let constraint = this.constraintHandler.currentConstraint;\n            if (constraint == null) {\n                constraint = new ConnectionConstraint(null);\n            }\n            this.graph.connectCell(edge, terminal, isSource, constraint);\n        });\n        return edge;\n    }\n    /**\n     * Changes the terminal point of the given edge.\n     */\n    changeTerminalPoint(edge, point, isSource, clone) {\n        const model = this.graph.getDataModel();\n        model.batchUpdate(() => {\n            if (clone) {\n                const parent = edge.getParent();\n                const terminal = edge.getTerminal(!isSource);\n                edge = this.graph.cloneCell(edge);\n                model.add(parent, edge, parent.getChildCount());\n                model.setTerminal(edge, terminal, !isSource);\n            }\n            let geo = edge.getGeometry();\n            if (geo != null) {\n                geo = geo.clone();\n                geo.setTerminalPoint(point, isSource);\n                model.setGeometry(edge, geo);\n                this.graph.connectCell(edge, null, isSource, new ConnectionConstraint(null));\n            }\n        });\n        return edge;\n    }\n    /**\n     * Changes the control points of the given edge in the graph model.\n     */\n    changePoints(edge, points, clone) {\n        const model = this.graph.getDataModel();\n        model.batchUpdate(() => {\n            if (clone) {\n                const parent = edge.getParent();\n                const source = edge.getTerminal(true);\n                const target = edge.getTerminal(false);\n                edge = this.graph.cloneCell(edge);\n                model.add(parent, edge, parent.getChildCount());\n                model.setTerminal(edge, source, true);\n                model.setTerminal(edge, target, false);\n            }\n            let geo = edge.getGeometry();\n            if (geo != null) {\n                geo = geo.clone();\n                geo.points = points;\n                model.setGeometry(edge, geo);\n            }\n        });\n        return edge;\n    }\n    /**\n     * Adds a control point for the given state and event.\n     */\n    addPoint(state, evt) {\n        const pt = convertPoint(this.graph.container, getClientX(evt), getClientY(evt));\n        const gridEnabled = this.graph.isGridEnabledEvent(evt);\n        this.convertPoint(pt, gridEnabled);\n        this.addPointAt(state, pt.x, pt.y);\n        InternalEvent.consume(evt);\n    }\n    /**\n     * Adds a control point at the given point.\n     */\n    addPointAt(state, x, y) {\n        let geo = state.cell.getGeometry();\n        const pt = new Point(x, y);\n        if (geo != null) {\n            geo = geo.clone();\n            const t = this.graph.view.translate;\n            const s = this.graph.view.scale;\n            let offset = new Point(t.x * s, t.y * s);\n            const parent = this.state.cell.getParent();\n            if (parent && parent.isVertex()) {\n                const pState = this.graph.view.getState(parent);\n                if (pState)\n                    offset = new Point(pState.x, pState.y);\n            }\n            const index = findNearestSegment(state, pt.x * s + offset.x, pt.y * s + offset.y);\n            if (geo.points == null) {\n                geo.points = [pt];\n            }\n            else {\n                geo.points.splice(index, 0, pt);\n            }\n            this.graph.getDataModel().setGeometry(state.cell, geo);\n            this.refresh();\n            this.redraw();\n        }\n    }\n    /**\n     * Removes the control point at the given index from the given state.\n     */\n    removePoint(state, index) {\n        if (index > 0 && index < this.abspoints.length - 1) {\n            let geo = this.state.cell.getGeometry();\n            if (geo != null && geo.points != null) {\n                geo = geo.clone();\n                (geo.points || []).splice(index - 1, 1);\n                this.graph.getDataModel().setGeometry(state.cell, geo);\n                this.refresh();\n                this.redraw();\n            }\n        }\n    }\n    /**\n     * Returns the fillcolor for the handle at the given index.\n     */\n    getHandleFillColor(index) {\n        const isSource = index === 0;\n        const { cell } = this.state;\n        const terminal = cell.getTerminal(isSource);\n        let color = HandleConfig.fillColor;\n        if ((terminal != null && !this.graph.isCellDisconnectable(cell, terminal, isSource)) ||\n            (terminal == null && !this.graph.isTerminalPointMovable(cell, isSource))) {\n            color = LOCKED_HANDLE_FILLCOLOR;\n        }\n        else if (terminal != null &&\n            this.graph.isCellDisconnectable(cell, terminal, isSource)) {\n            color = EdgeHandlerConfig.connectFillColor;\n        }\n        return color;\n    }\n    /**\n     * Redraws the preview, and the bends- and label control points.\n     */\n    redraw(ignoreHandles) {\n        this.abspoints = this.state.absolutePoints.slice();\n        const g = this.state.cell.getGeometry();\n        if (g) {\n            const pts = g.points;\n            if (this.bends != null && this.bends.length > 0) {\n                if (pts != null) {\n                    if (this.points == null) {\n                        this.points = [];\n                    }\n                    for (let i = 1; i < this.bends.length - 1; i += 1) {\n                        if (this.bends[i] != null && this.abspoints[i] != null) {\n                            this.points[i - 1] = pts[i - 1];\n                        }\n                    }\n                }\n            }\n        }\n        this.drawPreview();\n        if (!ignoreHandles) {\n            this.redrawHandles();\n        }\n    }\n    /**\n     * Redraws the handles.\n     */\n    redrawHandles() {\n        const { cell } = this.state;\n        // Updates the handle for the label position\n        let b = this.labelShape.bounds;\n        this.label = new Point(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n        this.labelShape.bounds = new Rectangle(Math.round(this.label.x - b.width / 2), Math.round(this.label.y - b.height / 2), b.width, b.height);\n        // Shows or hides the label handle depending on the label\n        const lab = this.graph.getLabel(cell);\n        this.labelShape.visible =\n            lab != null && lab.length > 0 && this.graph.isLabelMovable(cell);\n        if (this.bends != null && this.bends.length > 0) {\n            const n = this.abspoints.length - 1;\n            const p0 = this.abspoints[0];\n            const x0 = p0.x;\n            const y0 = p0.y;\n            b = this.bends[0].bounds;\n            this.bends[0].bounds = new Rectangle(Math.floor(x0 - b.width / 2), Math.floor(y0 - b.height / 2), b.width, b.height);\n            this.bends[0].fill = this.getHandleFillColor(0);\n            this.bends[0].redraw();\n            if (this.manageLabelHandle) {\n                this.checkLabelHandle(this.bends[0].bounds);\n            }\n            const pe = this.abspoints[n];\n            const xn = pe.x;\n            const yn = pe.y;\n            const bn = this.bends.length - 1;\n            b = this.bends[bn].bounds;\n            this.bends[bn].bounds = new Rectangle(Math.floor(xn - b.width / 2), Math.floor(yn - b.height / 2), b.width, b.height);\n            this.bends[bn].fill = this.getHandleFillColor(bn);\n            this.bends[bn].redraw();\n            if (this.manageLabelHandle) {\n                this.checkLabelHandle(this.bends[bn].bounds);\n            }\n            this.redrawInnerBends(p0, pe);\n        }\n        if (this.virtualBends && this.virtualBends.length > 0) {\n            let last = this.abspoints[0];\n            for (let i = 0; i < this.virtualBends.length; i += 1) {\n                if (this.virtualBends[i] != null && this.abspoints[i + 1] != null) {\n                    const pt = this.abspoints[i + 1];\n                    const b = this.virtualBends[i];\n                    const x = last.x + (pt.x - last.x) / 2;\n                    const y = last.y + (pt.y - last.y) / 2;\n                    if (b.bounds) {\n                        b.bounds = new Rectangle(Math.floor(x - b.bounds.width / 2), Math.floor(y - b.bounds.height / 2), b.bounds.width, b.bounds.height);\n                        b.redraw();\n                    }\n                    setOpacity(b.node, EdgeHandlerConfig.virtualBendOpacity);\n                    last = pt;\n                    if (this.manageLabelHandle) {\n                        this.checkLabelHandle(b.bounds);\n                    }\n                }\n            }\n        }\n        this.labelShape.redraw();\n        if (this.customHandles) {\n            for (let i = 0; i < this.customHandles.length; i += 1) {\n                const shape = this.customHandles[i].shape;\n                if (shape) {\n                    const temp = shape.node.style.display;\n                    this.customHandles[i].redraw();\n                    shape.node.style.display = temp;\n                    // Hides custom handles during text editing\n                    shape.node.style.visibility = this.isCustomHandleVisible(this.customHandles[i])\n                        ? ''\n                        : 'hidden';\n                }\n            }\n        }\n    }\n    /**\n     * Returns true if the given custom handle is visible.\n     */\n    isCustomHandleVisible(handle) {\n        return !this.graph.isEditing() && this.state.view.graph.getSelectionCount() === 1;\n    }\n    /**\n     * Shortcut to {@link hideSizers}.\n     */\n    setHandlesVisible(visible) {\n        for (let i = 0; i < this.bends.length; i += 1) {\n            this.bends[i].node.style.display = visible ? '' : 'none';\n        }\n        if (this.virtualBends) {\n            for (let i = 0; i < this.virtualBends.length; i += 1) {\n                this.virtualBends[i].node.style.display = visible ? '' : 'none';\n            }\n        }\n        this.labelShape.node.style.display = visible ? '' : 'none';\n        if (this.customHandles) {\n            for (let i = 0; i < this.customHandles.length; i += 1) {\n                this.customHandles[i].setVisible(visible);\n            }\n        }\n    }\n    /**\n     * Updates and redraws the inner bends.\n     *\n     * @param p0 {@link Point} that represents the location of the first point.\n     * @param pe {@link Point} that represents the location of the last point.\n     */\n    redrawInnerBends(p0, pe) {\n        for (let i = 1; i < this.bends.length - 1; i += 1) {\n            if (this.bends[i] != null) {\n                if (this.abspoints[i] != null) {\n                    const { x } = this.abspoints[i];\n                    const { y } = this.abspoints[i];\n                    const b = this.bends[i].bounds;\n                    this.bends[i].node.style.visibility = 'visible';\n                    this.bends[i].bounds = new Rectangle(Math.round(x - b.width / 2), Math.round(y - b.height / 2), b.width, b.height);\n                    if (this.manageLabelHandle) {\n                        this.checkLabelHandle(this.bends[i].bounds);\n                    }\n                    else if (this.handleImage == null &&\n                        this.labelShape.visible &&\n                        intersects(this.bends[i].bounds, this.labelShape.bounds)) {\n                        const w = HandleConfig.size + 3;\n                        const h = w;\n                        this.bends[i].bounds = new Rectangle(Math.round(x - w / 2), Math.round(y - h / 2), w, h);\n                    }\n                    this.bends[i].redraw();\n                }\n                else {\n                    this.bends[i].destroy();\n                }\n            }\n        }\n    }\n    /**\n     * Checks if the label handle intersects the given bounds and moves it if it\n     * intersects.\n     */\n    checkLabelHandle(b) {\n        const b2 = this.labelShape.bounds;\n        if (intersects(b, b2)) {\n            if (b.getCenterY() < b2.getCenterY()) {\n                b2.y = b.y + b.height;\n            }\n            else {\n                b2.y = b.y - b2.height;\n            }\n        }\n    }\n    /**\n     * Redraws the preview.\n     */\n    drawPreview() {\n        try {\n            if (this.isLabel) {\n                const b = this.labelShape.bounds;\n                const bounds = new Rectangle(Math.round(this.label.x - b.width / 2), Math.round(this.label.y - b.height / 2), b.width, b.height);\n                if (!b.equals(bounds)) {\n                    this.labelShape.bounds = bounds;\n                    this.labelShape.redraw();\n                }\n            }\n            if (this.shape != null && !equalPoints(this.shape.points, this.abspoints)) {\n                this.shape.apply(this.state);\n                this.shape.points = this.abspoints.slice();\n                this.shape.scale = this.state.view.scale;\n                this.shape.isDashed = this.isSelectionDashed();\n                this.shape.stroke = this.getSelectionColor();\n                this.shape.strokeWidth =\n                    this.getSelectionStrokeWidth() / this.shape.scale / this.shape.scale;\n                this.shape.isShadow = false;\n                this.shape.redraw();\n            }\n            this.updateParentHighlight();\n        }\n        catch (e) {\n            // ignore\n        }\n    }\n    /**\n     * Refreshes the bends of this handler.\n     */\n    refresh() {\n        if (this.state != null) {\n            this.abspoints = this.getSelectionPoints(this.state);\n            this.points = [];\n            this.destroyBends(this.bends);\n            this.bends = this.createBends();\n            if (this.virtualBends) {\n                this.destroyBends(this.virtualBends);\n                this.virtualBends = this.createVirtualBends();\n            }\n            if (this.customHandles) {\n                this.destroyBends(this.customHandles);\n                this.customHandles = this.createCustomHandles();\n            }\n            // Puts label node on top of bends\n            if (this.labelShape != null &&\n                this.labelShape.node != null &&\n                this.labelShape.node.parentNode != null) {\n                this.labelShape.node.parentNode.appendChild(this.labelShape.node);\n            }\n        }\n    }\n    /**\n     * Returns true if {@link destroy} was called.\n     */\n    isDestroyed() {\n        return this.shape == null;\n    }\n    /**\n     * Destroys all elements in {@link bends}.\n     */\n    destroyBends(bends) {\n        if (bends != null) {\n            for (let i = 0; i < bends.length; i += 1) {\n                if (bends[i] != null) {\n                    bends[i].destroy();\n                }\n            }\n        }\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes. This does\n     * normally not need to be called as handlers are destroyed automatically\n     * when the corresponding cell is deselected.\n     */\n    onDestroy() {\n        this.state.view.graph.removeListener(this.escapeHandler);\n        this.marker.destroy();\n        // @ts-expect-error Can be null when destroyed.\n        this.marker = null;\n        this.shape.destroy();\n        // @ts-expect-error Can be null when destroyed.\n        this.shape = null;\n        if (this.parentHighlight) {\n            const parent = this.state.cell.getParent();\n            const pstate = parent ? this.graph.view.getState(parent) : null;\n            if (pstate && pstate.parentHighlight === this.parentHighlight) {\n                pstate.parentHighlight = null;\n            }\n            this.parentHighlight.destroy();\n            this.parentHighlight = null;\n        }\n        this.labelShape.destroy();\n        // @ts-expect-error Can be null when destroyed.\n        this.labelShape = null;\n        this.constraintHandler.onDestroy();\n        // @ts-expect-error Can be null when destroyed.\n        this.constraintHandler = null;\n        if (this.virtualBends) {\n            this.destroyBends(this.virtualBends);\n            this.virtualBends = [];\n        }\n        if (this.customHandles) {\n            this.destroyBends(this.customHandles);\n            this.customHandles = [];\n        }\n        this.destroyBends(this.bends);\n        this.bends = [];\n        this.removeHint();\n    }\n}\nclass EdgeHandlerCellMarker extends CellMarker {\n    constructor(graph, edgeHandler, validColor = DEFAULT_VALID_COLOR, invalidColor = DEFAULT_INVALID_COLOR, hotspot = DEFAULT_HOTSPOT) {\n        super(graph, validColor, invalidColor, hotspot);\n        // Only returns edges if they are connectable and never returns\n        // the edge that is currently being modified\n        this.getCell = (me) => {\n            let cell = super.getCell(me);\n            // Checks for cell at preview point (with grid)\n            if ((cell === this.edgeHandler.state.cell || !cell) &&\n                this.edgeHandler.currentPoint) {\n                cell = this.edgeHandler.graph.getCellAt(this.edgeHandler.currentPoint.x, this.edgeHandler.currentPoint.y);\n            }\n            // Uses connectable parent vertex if one exists\n            if (cell && !cell.isConnectable()) {\n                const parent = cell.getParent();\n                if (parent && parent.isVertex() && parent.isConnectable()) {\n                    cell = parent;\n                }\n            }\n            if (cell) {\n                if ((this.graph.isSwimlane(cell) &&\n                    this.edgeHandler.currentPoint &&\n                    this.graph.hitsSwimlaneContent(cell, this.edgeHandler.currentPoint.x, this.edgeHandler.currentPoint.y)) ||\n                    !this.edgeHandler.isConnectableCell(cell) ||\n                    cell === this.edgeHandler.state.cell ||\n                    (cell && !this.edgeHandler.graph.connectableEdges && cell.isEdge()) ||\n                    this.edgeHandler.state.cell.isAncestor(cell)) {\n                    cell = null;\n                }\n            }\n            if (cell && !cell.isConnectable()) {\n                cell = null;\n            }\n            return cell;\n        };\n        // Sets the highlight color according to validateConnection\n        this.isValidState = (state) => {\n            const cell = this.edgeHandler.state.cell.getTerminal(!this.edgeHandler.isSource);\n            const cellState = this.edgeHandler.graph.view.getState(cell);\n            const other = this.edgeHandler.graph.view.getTerminalPort(state, cellState, !this.edgeHandler.isSource);\n            const otherCell = other ? other.cell : null;\n            const source = this.edgeHandler.isSource ? state.cell : otherCell;\n            const target = this.edgeHandler.isSource ? otherCell : state.cell;\n            // Updates the error message of the handler\n            this.edgeHandler.error = this.edgeHandler.validateConnection(source, target);\n            return !this.edgeHandler.error;\n        };\n        this.edgeHandler = edgeHandler;\n    }\n}\nexport default EdgeHandler;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../geometry/Rectangle';\nimport { NONE } from '../../util/Constants';\nimport InternalEvent from '../event/InternalEvent';\nimport RectangleShape from '../shape/node/RectangleShape';\nimport ImageShape from '../shape/node/ImageShape';\nimport EllipseShape from '../shape/node/EllipseShape';\nimport Point from '../geometry/Point';\nimport { getRotatedPoint, intersects, mod, toRadians } from '../../util/mathUtils';\nimport Client from '../../Client';\nimport { isMouseEvent, isShiftDown } from '../../util/EventUtils';\nimport { HandleConfig, VertexHandlerConfig } from './config';\n/**\n * Event handler for resizing cells.\n *\n * This handler is automatically created in {@link AbstractGraph.createHandler}.\n *\n * Some elements of this handler and its subclasses can be configured using {@link EdgeHandlerConfig}.\n */\nclass VertexHandler {\n    /**\n     * Specifies if a rotation handle should be visible.\n     *\n     * This implementation returns {@link VertexHandlerConfig.rotationEnabled}.\n     * @since 0.12.0\n     */\n    isRotationEnabled() {\n        return VertexHandlerConfig.rotationEnabled;\n    }\n    /**\n     * Constructs an event handler that allows to resize vertices and groups.\n     *\n     * @param state {@link CellState} of the cell to be resized.\n     */\n    constructor(state) {\n        this.sizers = [];\n        /**\n         * Specifies if only one sizer handle at the bottom, right corner should be used.\n         * @default false\n         */\n        this.singleSizer = false;\n        /**\n         * Holds the index of the current handle.\n         */\n        this.index = null;\n        /**\n         * Specifies if the bounds of handles should be used for hit-detection in IE or if {@link tolerance} > 0.\n         * @default true\n         */\n        this.allowHandleBoundsCheck = true;\n        /**\n         * Optional {@link Image} to be used as handles.\n         * @default null\n         */\n        this.handleImage = null;\n        /**\n         * If handles are currently visible.\n         * @default true\n         */\n        this.handlesVisible = true;\n        /**\n         * Optional tolerance for hit-detection in {@link getHandleForEvent}.\n         * @default 0\n         */\n        this.tolerance = 0;\n        /**\n         * Specifies if the parent should be highlighted if a child cell is selected.\n         * @default false\n         */\n        this.parentHighlightEnabled = false;\n        /**\n         * Specifies if rotation steps should be \"rasterized\" depending on the distance to the handle.\n         * @default true\n         */\n        this.rotationRaster = true;\n        /**\n         * Specifies the cursor for the rotation handle.\n         * @default 'crosshair'.\n         */\n        this.rotationCursor = 'crosshair';\n        /**\n         * Specifies if resize should change the cell in-place. This is an experimental\n         * feature for non-touch devices.\n         * @default false\n         */\n        this.livePreview = false;\n        /**\n         * Specifies if the live preview should be moved to the front.\n         * @default false\n         */\n        this.movePreviewToFront = false;\n        /**\n         * Specifies if sizers should be hidden and spaced if the vertex is small.\n         * @default false\n         */\n        this.manageSizers = false;\n        /**\n         * Specifies if the size of groups should be constrained by the children.\n         * @default false\n         */\n        this.constrainGroupByChildren = false;\n        /**\n         * Vertical spacing for rotation icon.\n         * @default -16\n         */\n        this.rotationHandleVSpacing = -16;\n        /**\n         * The horizontal offset for the handles. This is updated in {@link redrawHandles}\n         * if {@link manageSizers} is `true` and the sizers are offset horizontally.\n         */\n        this.horizontalOffset = 0;\n        /**\n         * The horizontal offset for the handles. This is updated in <redrawHandles>\n         * if {@link manageSizers} is true and the sizers are offset vertically.\n         */\n        this.verticalOffset = 0;\n        this.minBounds = null;\n        this.x0 = 0;\n        this.y0 = 0;\n        this.customHandles = [];\n        this.inTolerance = false;\n        this.startX = 0;\n        this.startY = 0;\n        this.rotationShape = null;\n        this.currentAlpha = null;\n        this.startAngle = 0;\n        this.startDist = 0;\n        this.ghostPreview = null;\n        this.livePreviewActive = false;\n        this.childOffsetX = 0;\n        this.childOffsetY = 0;\n        this.parentState = null;\n        this.parentHighlight = null;\n        this.unscaledBounds = null;\n        this.preview = null;\n        this.labelShape = null;\n        this.edgeHandlers = [];\n        this.EMPTY_POINT = new Point();\n        this.state = state;\n        this.graph = this.state.view.graph;\n        this.selectionBounds = this.getSelectionBounds(this.state);\n        this.bounds = new Rectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n        this.selectionBorder = this.createSelectionShape(this.bounds);\n        // VML dialect required here for event transparency in IE\n        this.selectionBorder.dialect = 'svg';\n        this.selectionBorder.pointerEvents = false;\n        this.selectionBorder.rotation = this.state.style.rotation ?? 0;\n        this.selectionBorder.init(this.graph.getView().getOverlayPane());\n        InternalEvent.redirectMouseEvents(this.selectionBorder.node, this.graph, this.state);\n        if (this.graph.isCellMovable(this.state.cell)) {\n            this.selectionBorder.setCursor(VertexHandlerConfig.cursorMovable);\n        }\n        const selectionHandler = this.getSelectionHandler();\n        // Adds the sizer handles\n        if (selectionHandler &&\n            (selectionHandler.maxCells <= 0 ||\n                this.graph.getSelectionCount() < selectionHandler.maxCells)) {\n            const resizable = this.graph.isCellResizable(this.state.cell);\n            this.sizers = [];\n            if (resizable ||\n                (this.graph.isLabelMovable(this.state.cell) &&\n                    this.state.width >= 2 &&\n                    this.state.height >= 2)) {\n                let i = 0;\n                if (resizable) {\n                    if (!this.singleSizer) {\n                        this.sizers.push(this.createSizer('nw-resize', i++));\n                        this.sizers.push(this.createSizer('n-resize', i++));\n                        this.sizers.push(this.createSizer('ne-resize', i++));\n                        this.sizers.push(this.createSizer('w-resize', i++));\n                        this.sizers.push(this.createSizer('e-resize', i++));\n                        this.sizers.push(this.createSizer('sw-resize', i++));\n                        this.sizers.push(this.createSizer('s-resize', i++));\n                    }\n                    this.sizers.push(this.createSizer('se-resize', i++));\n                }\n                const geo = this.state.cell.getGeometry();\n                if (geo != null &&\n                    !geo.relative &&\n                    !this.graph.isSwimlane(this.state.cell) &&\n                    this.graph.isLabelMovable(this.state.cell)) {\n                    // Marks this as the label handle for getHandleForEvent\n                    this.labelShape = this.createSizer(HandleConfig.labelCursor, InternalEvent.LABEL_HANDLE, HandleConfig.labelSize, HandleConfig.labelFillColor);\n                    this.sizers.push(this.labelShape);\n                }\n            }\n            else if (this.graph.isCellMovable(this.state.cell) &&\n                !this.graph.isCellResizable(this.state.cell) &&\n                this.state.width < 2 &&\n                this.state.height < 2) {\n                this.labelShape = this.createSizer(VertexHandlerConfig.cursorMovable, InternalEvent.LABEL_HANDLE, undefined, HandleConfig.labelFillColor);\n                this.sizers.push(this.labelShape);\n            }\n        }\n        // Adds the rotation handler\n        if (this.isRotationHandleVisible()) {\n            this.rotationShape = this.createSizer(this.rotationCursor, InternalEvent.ROTATION_HANDLE, HandleConfig.size + 3, HandleConfig.fillColor);\n            this.sizers.push(this.rotationShape);\n        }\n        this.customHandles = this.createCustomHandles();\n        this.redraw();\n        if (this.constrainGroupByChildren) {\n            this.updateMinBounds();\n        }\n        // Handles escape keystrokes\n        this.escapeHandler = (_sender, _evt) => {\n            if (this.livePreview && this.index != null) {\n                // Redraws the live preview\n                this.state.view.graph.cellRenderer.redraw(this.state, true);\n                // Redraws connected edges\n                this.state.view.invalidate(this.state.cell);\n                this.state.invalid = false;\n                this.state.view.validate();\n            }\n            this.reset();\n        };\n        this.state.view.graph.addListener(InternalEvent.ESCAPE, this.escapeHandler);\n    }\n    getSelectionHandler() {\n        return this.graph.getPlugin('SelectionHandler');\n    }\n    /**\n     * Returns `true` if the rotation handle should be showing.\n     */\n    isRotationHandleVisible() {\n        const selectionHandler = this.getSelectionHandler();\n        const selectionHandlerCheck = selectionHandler\n            ? selectionHandler.maxCells <= 0 ||\n                this.graph.getSelectionCount() < selectionHandler.maxCells\n            : true;\n        return (this.graph.isEnabled() &&\n            this.isRotationEnabled() &&\n            this.graph.isCellRotatable(this.state.cell) &&\n            selectionHandlerCheck);\n    }\n    /**\n     * Returns `true` if the aspect ratio if the cell should be maintained.\n     */\n    isConstrainedEvent(me) {\n        return isShiftDown(me.getEvent()) || this.state.style.aspect === 'fixed';\n    }\n    /**\n     * Returns `true` if the center of the vertex should be maintained during the resize.\n     */\n    isCenteredEvent(state, me) {\n        return false;\n    }\n    /**\n     * Returns an array of custom handles.\n     *\n     * This implementation returns an empty array.\n     */\n    createCustomHandles() {\n        return [];\n    }\n    /**\n     * Initializes the shapes required for this vertex handler.\n     */\n    updateMinBounds() {\n        const children = this.graph.getChildCells(this.state.cell);\n        if (children.length > 0) {\n            this.minBounds = this.graph.view.getBounds(children);\n            if (this.minBounds) {\n                const s = this.state.view.scale;\n                const t = this.state.view.translate;\n                this.minBounds.x -= this.state.x;\n                this.minBounds.y -= this.state.y;\n                this.minBounds.x /= s;\n                this.minBounds.y /= s;\n                this.minBounds.width /= s;\n                this.minBounds.height /= s;\n                this.x0 = this.state.x / s - t.x;\n                this.y0 = this.state.y / s - t.y;\n            }\n        }\n    }\n    /**\n     * Returns the Rectangle that defines the bounds of the selection border.\n     */\n    getSelectionBounds(state) {\n        return new Rectangle(Math.round(state.x), Math.round(state.y), Math.round(state.width), Math.round(state.height));\n    }\n    /**\n     * Creates the shape used to draw the selection border.\n     */\n    createParentHighlightShape(bounds) {\n        return this.createSelectionShape(bounds);\n    }\n    /**\n     * Creates the shape used to draw the selection border.\n     */\n    createSelectionShape(bounds) {\n        const shape = new RectangleShape(Rectangle.fromRectangle(bounds), NONE, this.getSelectionColor());\n        shape.strokeWidth = this.getSelectionStrokeWidth();\n        shape.isDashed = this.isSelectionDashed();\n        return shape;\n    }\n    /**\n     * Returns {@link VertexHandlerConfig.selectionColor}.\n     */\n    getSelectionColor() {\n        return VertexHandlerConfig.selectionColor;\n    }\n    /**\n     * Returns {@link VertexHandlerConfig.selectionStrokeWidth}.\n     */\n    getSelectionStrokeWidth() {\n        return VertexHandlerConfig.selectionStrokeWidth;\n    }\n    /**\n     * Returns {@link VertexHandlerConfig.selectionDashed}.\n     */\n    isSelectionDashed() {\n        return VertexHandlerConfig.selectionDashed;\n    }\n    /**\n     * Creates a sizer handle for the specified cursor and index and returns\n     * the new {@link RectangleShape} that represents the handle.\n     */\n    createSizer(cursor, index, size = HandleConfig.size, fillColor = HandleConfig.fillColor) {\n        const bounds = new Rectangle(0, 0, size, size);\n        const sizer = this.createSizerShape(bounds, index, fillColor);\n        if (sizer.bounds &&\n            sizer.isHtmlAllowed() &&\n            this.state.text &&\n            this.state.text.node.parentNode === this.graph.container) {\n            sizer.bounds.height -= 1;\n            sizer.bounds.width -= 1;\n            sizer.dialect = 'strictHtml';\n            sizer.init(this.graph.container);\n        }\n        else {\n            sizer.dialect = this.graph.dialect !== 'svg' ? 'mixedHtml' : 'svg';\n            sizer.init(this.graph.getView().getOverlayPane());\n        }\n        InternalEvent.redirectMouseEvents(sizer.node, this.graph, this.state);\n        if (this.graph.isEnabled()) {\n            sizer.setCursor(cursor);\n        }\n        if (!this.isSizerVisible(index)) {\n            sizer.visible = false;\n        }\n        return sizer;\n    }\n    /**\n     * Returns `true` if the sizer for the given index is visible.\n     *\n     * This implementation returns `true` for all given indices.\n     */\n    isSizerVisible(_index) {\n        return true;\n    }\n    /**\n     * Creates the shape used for the sizer handle for the specified bounds an\n     * index. Only images and rectangles should be returned if support for HTML\n     * labels with not foreign objects is required.\n     */\n    createSizerShape(bounds, index, fillColor = HandleConfig.fillColor) {\n        if (this.handleImage) {\n            bounds = new Rectangle(bounds.x, bounds.y, this.handleImage.width, this.handleImage.height);\n            const shape = new ImageShape(bounds, this.handleImage.src);\n            // Allows HTML rendering of the images\n            shape.preserveImageAspect = false;\n            return shape;\n        }\n        const strokeColor = HandleConfig.strokeColor;\n        if (index === InternalEvent.ROTATION_HANDLE) {\n            return new EllipseShape(bounds, fillColor, strokeColor);\n        }\n        return new RectangleShape(bounds, fillColor, strokeColor);\n    }\n    /**\n     * Helper method to create an {@link Rectangle} around the given center point\n     * with a width and height of 2*s or 6, if no s is given.\n     */\n    moveSizerTo(shape, x, y) {\n        if (shape && shape.bounds) {\n            shape.bounds.x = Math.floor(x - shape.bounds.width / 2);\n            shape.bounds.y = Math.floor(y - shape.bounds.height / 2);\n            // Fixes visible inactive handles in VML\n            if (shape.node && shape.node.style.display !== 'none') {\n                shape.redraw();\n            }\n        }\n    }\n    /**\n     * Returns the index of the handle for the given event. This returns the index\n     * of the sizer from where the event originated or {@link InternalEvent.LABEL_HANDLE}.\n     */\n    getHandleForEvent(me) {\n        // Connection highlight may consume events before they reach sizer handle\n        const tol = !isMouseEvent(me.getEvent()) ? this.tolerance : 1;\n        const hit = this.allowHandleBoundsCheck && tol > 0\n            ? new Rectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol)\n            : null;\n        const checkShape = (shape) => {\n            const st = shape && shape.constructor !== ImageShape && this.allowHandleBoundsCheck\n                ? shape.strokeWidth + shape.svgStrokeTolerance\n                : null;\n            const real = st\n                ? new Rectangle(me.getGraphX() - Math.floor(st / 2), me.getGraphY() - Math.floor(st / 2), st, st)\n                : hit;\n            return (shape &&\n                shape.bounds &&\n                (me.isSource(shape) ||\n                    (real &&\n                        intersects(shape.bounds, real) &&\n                        shape.node.style.display !== 'none' &&\n                        shape.node.style.visibility !== 'hidden')));\n        };\n        if (checkShape(this.rotationShape)) {\n            return InternalEvent.ROTATION_HANDLE;\n        }\n        if (checkShape(this.labelShape)) {\n            return InternalEvent.LABEL_HANDLE;\n        }\n        for (let i = 0; i < this.sizers.length; i += 1) {\n            if (checkShape(this.sizers[i])) {\n                return i;\n            }\n        }\n        if (this.customHandles != null && this.isCustomHandleEvent(me)) {\n            // Inverse loop order to match display order\n            for (let i = this.customHandles.length - 1; i >= 0; i--) {\n                if (checkShape(this.customHandles[i].shape)) {\n                    // LATER: Return reference to active shape\n                    return InternalEvent.CUSTOM_HANDLE - i;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns `true` if the given event allows custom handles to be changed.\n     *\n     * This implementation returns `true`.\n     */\n    isCustomHandleEvent(me) {\n        return true;\n    }\n    /**\n     * Handles the event if a handle has been clicked. By consuming the\n     * event all subsequent events of the gesture are redirected to this\n     * handler.\n     */\n    mouseDown(_sender, me) {\n        if (!me.isConsumed() && this.graph.isEnabled()) {\n            const handle = this.getHandleForEvent(me);\n            if (handle) {\n                this.start(me.getGraphX(), me.getGraphY(), handle);\n                me.consume();\n            }\n        }\n    }\n    /**\n     * Called if {@link livePreview} is enabled to check if a border should be painted.\n     *\n     * This implementation returns `true` if the shape is transparent.\n     */\n    isLivePreviewBorder() {\n        return (this.state.shape &&\n            this.state.shape.fill === NONE &&\n            this.state.shape.stroke === NONE);\n    }\n    /**\n     * Starts the handling of the mouse gesture.\n     */\n    start(x, y, index) {\n        this.livePreviewActive = this.livePreview && this.state.cell.getChildCount() === 0;\n        this.inTolerance = true;\n        this.childOffsetX = 0;\n        this.childOffsetY = 0;\n        this.index = index;\n        this.startX = x;\n        this.startY = y;\n        if (this.index <= InternalEvent.CUSTOM_HANDLE && this.isGhostPreview()) {\n            this.ghostPreview = this.createGhostPreview();\n        }\n        else {\n            // Saves reference to parent state\n            const parent = this.state.cell.getParent();\n            if (this.state.view.currentRoot !== parent &&\n                parent &&\n                (parent.isVertex() || parent.isEdge())) {\n                this.parentState = this.state.view.graph.view.getState(parent);\n            }\n            // Creates a preview that can be on top of any HTML label\n            this.selectionBorder.node.style.display =\n                index === InternalEvent.ROTATION_HANDLE ? 'inline' : 'none';\n            // Creates the border that represents the new bounds\n            if (!this.livePreviewActive || this.isLivePreviewBorder()) {\n                this.preview = this.createSelectionShape(this.bounds);\n                if (!(Client.IS_SVG && (this.state.style.rotation ?? 0) != 0) &&\n                    this.state.text != null &&\n                    this.state.text.node.parentNode === this.graph.container) {\n                    this.preview.dialect = 'strictHtml';\n                    this.preview.init(this.graph.container);\n                }\n                else {\n                    this.preview.dialect = 'svg';\n                    this.preview.init(this.graph.view.getOverlayPane());\n                }\n            }\n            if (index === InternalEvent.ROTATION_HANDLE) {\n                // With the rotation handle in a corner, need the angle and distance\n                const pos = this.getRotationHandlePosition();\n                const dx = pos.x - this.state.getCenterX();\n                const dy = pos.y - this.state.getCenterY();\n                this.startAngle = dx !== 0 ? (Math.atan(dy / dx) * 180) / Math.PI + 90 : 0;\n                this.startDist = Math.sqrt(dx * dx + dy * dy);\n            }\n            // Prepares the handles for live preview\n            if (this.livePreviewActive) {\n                this.hideSizers();\n                if (index === InternalEvent.ROTATION_HANDLE && this.rotationShape) {\n                    this.rotationShape.node.style.display = '';\n                }\n                else if (index === InternalEvent.LABEL_HANDLE && this.labelShape) {\n                    this.labelShape.node.style.display = '';\n                }\n                else if (this.sizers[index]) {\n                    this.sizers[index].node.style.display = '';\n                }\n                else if (index <= InternalEvent.CUSTOM_HANDLE) {\n                    this.customHandles[InternalEvent.CUSTOM_HANDLE - index].setVisible(true);\n                }\n                // Gets the array of connected edge handlers for redrawing\n                const edges = this.state.cell.getEdges();\n                this.edgeHandlers = [];\n                const selectionCellsHandler = this.graph.getPlugin('SelectionCellsHandler');\n                for (let i = 0; i < edges.length; i += 1) {\n                    const handler = selectionCellsHandler?.getHandler(edges[i]);\n                    if (handler) {\n                        this.edgeHandlers.push(handler);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Starts the handling of the mouse gesture.\n     */\n    createGhostPreview() {\n        const shape = this.graph.cellRenderer.createShape(this.state);\n        shape.init(this.graph.view.getOverlayPane());\n        shape.scale = this.state.view.scale;\n        shape.bounds = this.bounds;\n        shape.outline = true;\n        return shape;\n    }\n    /**\n     * Shortcut to {@link hideSizers}.\n     */\n    setHandlesVisible(visible) {\n        this.handlesVisible = visible;\n        for (let i = 0; i < this.sizers.length; i += 1) {\n            this.sizers[i].node.style.display = visible ? '' : 'none';\n        }\n        for (let i = 0; i < this.customHandles.length; i += 1) {\n            this.customHandles[i].setVisible(visible);\n        }\n    }\n    /**\n     * Hides all sizers except.\n     *\n     * Starts the handling of the mouse gesture.\n     */\n    hideSizers() {\n        this.setHandlesVisible(false);\n    }\n    /**\n     * Checks if the coordinates for the given event are within the\n     * {@link AbstractGraph.tolerance}. If the event is a mouse event then the tolerance is\n     * ignored.\n     */\n    checkTolerance(me) {\n        if (this.inTolerance && this.startX !== null && this.startY !== null) {\n            if (isMouseEvent(me.getEvent()) ||\n                Math.abs(me.getGraphX() - this.startX) > this.graph.getEventTolerance() ||\n                Math.abs(me.getGraphY() - this.startY) > this.graph.getEventTolerance()) {\n                this.inTolerance = false;\n            }\n        }\n    }\n    /**\n     * Hook for subclasses do show details while the handler is active.\n     */\n    updateHint(me) {\n        return;\n    }\n    /**\n     * Hooks for subclasses to hide details when the handler gets inactive.\n     */\n    removeHint() {\n        return;\n    }\n    /**\n     * Hook for rounding the angle. This uses {@link Math.round}.\n     */\n    roundAngle(angle) {\n        return Math.round(angle * 10) / 10;\n    }\n    /**\n     * Hook for rounding the unscaled width or height. This uses {@link Math.round}.\n     */\n    roundLength(length) {\n        return Math.round(length * 100) / 100;\n    }\n    /**\n     * Handles the event by updating the preview.\n     */\n    mouseMove(_sender, me) {\n        if (!me.isConsumed() && this.index != null) {\n            // Checks tolerance for ignoring single clicks\n            this.checkTolerance(me);\n            if (!this.inTolerance) {\n                if (this.index <= InternalEvent.CUSTOM_HANDLE) {\n                    if (this.customHandles != null) {\n                        this.customHandles[InternalEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n                        this.customHandles[InternalEvent.CUSTOM_HANDLE - this.index].active = true;\n                        if (this.ghostPreview != null) {\n                            this.ghostPreview.apply(this.state);\n                            this.ghostPreview.strokeWidth =\n                                this.getSelectionStrokeWidth() /\n                                    this.ghostPreview.scale /\n                                    this.ghostPreview.scale;\n                            this.ghostPreview.isDashed = this.isSelectionDashed();\n                            this.ghostPreview.stroke = this.getSelectionColor();\n                            this.ghostPreview.redraw();\n                            if (this.selectionBounds != null) {\n                                this.selectionBorder.node.style.display = 'none';\n                            }\n                        }\n                        else {\n                            if (this.movePreviewToFront) {\n                                this.moveToFront();\n                            }\n                            this.customHandles[InternalEvent.CUSTOM_HANDLE - this.index].positionChanged();\n                        }\n                    }\n                }\n                else if (this.index === InternalEvent.LABEL_HANDLE) {\n                    this.moveLabel(me);\n                }\n                else {\n                    if (this.index === InternalEvent.ROTATION_HANDLE) {\n                        this.rotateVertex(me);\n                    }\n                    else {\n                        this.resizeVertex(me);\n                    }\n                    this.updateHint(me);\n                }\n            }\n            me.consume();\n        }\n        // Workaround for disabling the connect highlight when over handle\n        else if (!this.graph.isMouseDown && this.getHandleForEvent(me)) {\n            me.consume(false);\n        }\n    }\n    /**\n     * Returns `true` if a ghost preview should be used for custom handles.\n     */\n    isGhostPreview() {\n        return this.state.cell.getChildCount() > 0;\n    }\n    /**\n     * Moves the vertex.\n     */\n    moveLabel(me) {\n        const point = new Point(me.getGraphX(), me.getGraphY());\n        const tr = this.graph.view.translate;\n        const { scale } = this.graph.view;\n        if (this.graph.isGridEnabledEvent(me.getEvent())) {\n            point.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n            point.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n        }\n        const index = this.rotationShape ? this.sizers.length - 2 : this.sizers.length - 1;\n        this.moveSizerTo(this.sizers[index], point.x, point.y);\n    }\n    /**\n     * Rotates the vertex.\n     */\n    rotateVertex(me) {\n        const point = new Point(me.getGraphX(), me.getGraphY());\n        let dx = this.state.x + this.state.width / 2 - point.x;\n        let dy = this.state.y + this.state.height / 2 - point.y;\n        this.currentAlpha =\n            dx !== 0 ? (Math.atan(dy / dx) * 180) / Math.PI + 90 : dy < 0 ? 180 : 0;\n        if (dx > 0) {\n            this.currentAlpha -= 180;\n        }\n        this.currentAlpha -= this.startAngle;\n        // Rotation raster\n        if (this.rotationRaster && this.graph.isGridEnabledEvent(me.getEvent())) {\n            let raster;\n            dx = point.x - this.state.getCenterX();\n            dy = point.y - this.state.getCenterY();\n            const dist = Math.sqrt(dx * dx + dy * dy);\n            if (dist - this.startDist < 2) {\n                raster = 15;\n            }\n            else if (dist - this.startDist < 25) {\n                raster = 5;\n            }\n            else {\n                raster = 1;\n            }\n            this.currentAlpha = Math.round(this.currentAlpha / raster) * raster;\n        }\n        else {\n            this.currentAlpha = this.roundAngle(this.currentAlpha);\n        }\n        this.selectionBorder.rotation = this.currentAlpha;\n        this.selectionBorder.redraw();\n        if (this.livePreviewActive) {\n            this.redrawHandles();\n        }\n    }\n    /**\n     * Resizes the vertex.\n     */\n    resizeVertex(me) {\n        const ct = new Point(this.state.getCenterX(), this.state.getCenterY());\n        const alpha = toRadians(this.state.style.rotation ?? 0);\n        const point = new Point(me.getGraphX(), me.getGraphY());\n        const tr = this.graph.view.translate;\n        const { scale } = this.graph.view;\n        let cos = Math.cos(-alpha);\n        let sin = Math.sin(-alpha);\n        let dx = point.x - this.startX;\n        let dy = point.y - this.startY;\n        // Rotates vector for mouse gesture\n        const tx = cos * dx - sin * dy;\n        const ty = sin * dx + cos * dy;\n        dx = tx;\n        dy = ty;\n        const geo = this.state.cell.getGeometry();\n        if (geo && this.index !== null) {\n            this.unscaledBounds = this.union(geo, dx / scale, dy / scale, this.index, this.graph.isGridEnabledEvent(me.getEvent()), 1, new Point(0, 0), this.isConstrainedEvent(me), this.isCenteredEvent(this.state, me));\n        }\n        // Keeps vertex within maximum graph or parent bounds\n        if (geo && !geo.relative) {\n            let max = this.graph.getMaximumGraphBounds();\n            // Handles child cells\n            if (max != null && this.parentState != null) {\n                max = Rectangle.fromRectangle(max);\n                max.x -= (this.parentState.x - tr.x * scale) / scale;\n                max.y -= (this.parentState.y - tr.y * scale) / scale;\n            }\n            if (this.graph.isConstrainChild(this.state.cell)) {\n                let tmp = this.graph.getCellContainmentArea(this.state.cell);\n                if (tmp != null) {\n                    const overlap = this.graph.getOverlap(this.state.cell);\n                    if (overlap > 0) {\n                        tmp = Rectangle.fromRectangle(tmp);\n                        tmp.x -= tmp.width * overlap;\n                        tmp.y -= tmp.height * overlap;\n                        tmp.width += 2 * tmp.width * overlap;\n                        tmp.height += 2 * tmp.height * overlap;\n                    }\n                    if (!max) {\n                        max = tmp;\n                    }\n                    else {\n                        max = Rectangle.fromRectangle(max);\n                        max.intersect(tmp);\n                    }\n                }\n            }\n            if (max && this.unscaledBounds) {\n                if (this.unscaledBounds.x < max.x) {\n                    this.unscaledBounds.width -= max.x - this.unscaledBounds.x;\n                    this.unscaledBounds.x = max.x;\n                }\n                if (this.unscaledBounds.y < max.y) {\n                    this.unscaledBounds.height -= max.y - this.unscaledBounds.y;\n                    this.unscaledBounds.y = max.y;\n                }\n                if (this.unscaledBounds.x + this.unscaledBounds.width > max.x + max.width) {\n                    this.unscaledBounds.width -=\n                        this.unscaledBounds.x + this.unscaledBounds.width - max.x - max.width;\n                }\n                if (this.unscaledBounds.y + this.unscaledBounds.height > max.y + max.height) {\n                    this.unscaledBounds.height -=\n                        this.unscaledBounds.y + this.unscaledBounds.height - max.y - max.height;\n                }\n            }\n        }\n        if (this.unscaledBounds) {\n            const old = this.bounds;\n            this.bounds = new Rectangle((this.parentState ? this.parentState.x : tr.x * scale) +\n                this.unscaledBounds.x * scale, (this.parentState ? this.parentState.y : tr.y * scale) +\n                this.unscaledBounds.y * scale, this.unscaledBounds.width * scale, this.unscaledBounds.height * scale);\n            if (geo && geo.relative && this.parentState) {\n                this.bounds.x += this.state.x - this.parentState.x;\n                this.bounds.y += this.state.y - this.parentState.y;\n            }\n            cos = Math.cos(alpha);\n            sin = Math.sin(alpha);\n            const c2 = new Point(this.bounds.getCenterX(), this.bounds.getCenterY());\n            dx = c2.x - ct.x;\n            dy = c2.y - ct.y;\n            const dx2 = cos * dx - sin * dy;\n            const dy2 = sin * dx + cos * dy;\n            const dx3 = dx2 - dx;\n            const dy3 = dy2 - dy;\n            const dx4 = this.bounds.x - this.state.x;\n            const dy4 = this.bounds.y - this.state.y;\n            const dx5 = cos * dx4 - sin * dy4;\n            const dy5 = sin * dx4 + cos * dy4;\n            this.bounds.x += dx3;\n            this.bounds.y += dy3;\n            // Rounds unscaled bounds to int\n            this.unscaledBounds.x = this.roundLength(this.unscaledBounds.x + dx3 / scale);\n            this.unscaledBounds.y = this.roundLength(this.unscaledBounds.y + dy3 / scale);\n            this.unscaledBounds.width = this.roundLength(this.unscaledBounds.width);\n            this.unscaledBounds.height = this.roundLength(this.unscaledBounds.height);\n            // Shifts the children according to parent offset\n            if (!this.state.cell.isCollapsed() && (dx3 !== 0 || dy3 !== 0)) {\n                this.childOffsetX = this.state.x - this.bounds.x + dx5;\n                this.childOffsetY = this.state.y - this.bounds.y + dy5;\n            }\n            else {\n                this.childOffsetX = 0;\n                this.childOffsetY = 0;\n            }\n            if (!old.equals(this.bounds)) {\n                if (this.livePreviewActive) {\n                    this.updateLivePreview(me);\n                }\n                if (this.preview != null) {\n                    this.drawPreview();\n                }\n                else {\n                    this.updateParentHighlight();\n                }\n            }\n        }\n    }\n    /**\n     * Repaints the live preview.\n     */\n    updateLivePreview(me) {\n        // TODO: Apply child offset to children in live preview\n        const { scale } = this.graph.view;\n        const tr = this.graph.view.translate;\n        // Saves current state\n        const tempState = this.state.clone();\n        // Temporarily changes size and origin\n        this.state.x = this.bounds.x;\n        this.state.y = this.bounds.y;\n        this.state.origin = new Point(this.state.x / scale - tr.x, this.state.y / scale - tr.y);\n        this.state.width = this.bounds.width;\n        this.state.height = this.bounds.height;\n        // Redraws cell and handles\n        let off = this.state.absoluteOffset;\n        off = new Point(off.x, off.y);\n        // Required to store and reset absolute offset for updating label position\n        this.state.absoluteOffset.x = 0;\n        this.state.absoluteOffset.y = 0;\n        const geo = this.state.cell.getGeometry();\n        if (geo != null) {\n            const offset = geo.offset || this.EMPTY_POINT;\n            if (offset != null && !geo.relative) {\n                this.state.absoluteOffset.x = this.state.view.scale * offset.x;\n                this.state.absoluteOffset.y = this.state.view.scale * offset.y;\n            }\n            this.state.view.updateVertexLabelOffset(this.state);\n        }\n        // Draws the live preview\n        this.state.view.graph.cellRenderer.redraw(this.state, true);\n        // Redraws connected edges TODO: Include child edges\n        this.state.view.invalidate(this.state.cell);\n        this.state.invalid = false;\n        this.state.view.validate();\n        this.redrawHandles();\n        // Moves live preview to front\n        if (this.movePreviewToFront) {\n            this.moveToFront();\n        }\n        // Hides folding icon\n        if (this.state.control != null && this.state.control.node != null) {\n            this.state.control.node.style.visibility = 'hidden';\n        }\n        // Restores current state\n        this.state.setState(tempState);\n    }\n    /**\n     * Handles the event by applying the changes to the geometry.\n     */\n    moveToFront() {\n        if ((this.state.text && this.state.text.node && this.state.text.node.nextSibling) ||\n            (this.state.shape &&\n                this.state.shape.node &&\n                this.state.shape.node.nextSibling &&\n                (!this.state.text || this.state.shape.node.nextSibling !== this.state.text.node))) {\n            if (this.state.shape && this.state.shape.node && this.state.shape.node.parentNode) {\n                this.state.shape.node.parentNode.appendChild(this.state.shape.node);\n            }\n            if (this.state.text && this.state.text.node && this.state.text.node.parentNode) {\n                this.state.text.node.parentNode.appendChild(this.state.text.node);\n            }\n        }\n    }\n    /**\n     * Handles the event by applying the changes to the geometry.\n     */\n    mouseUp(_sender, me) {\n        if (this.index != null && this.state != null) {\n            const point = new Point(me.getGraphX(), me.getGraphY());\n            const { index } = this;\n            this.index = null;\n            if (this.ghostPreview == null) {\n                // Required to restore order in case of no change\n                this.state.view.invalidate(this.state.cell, false, false);\n                this.state.view.validate();\n            }\n            this.graph.batchUpdate(() => {\n                if (index <= InternalEvent.CUSTOM_HANDLE) {\n                    if (this.customHandles != null) {\n                        // Creates style before changing cell state\n                        const style = this.state.view.graph.getCellStyle(this.state.cell);\n                        this.customHandles[InternalEvent.CUSTOM_HANDLE - index].active = false;\n                        this.customHandles[InternalEvent.CUSTOM_HANDLE - index].execute(me);\n                        // Sets style and apply on shape to force repaint and\n                        // check if execute has removed custom handles\n                        if (this.customHandles != null &&\n                            this.customHandles[InternalEvent.CUSTOM_HANDLE - index] != null) {\n                            this.state.style = style;\n                            this.customHandles[InternalEvent.CUSTOM_HANDLE - index].positionChanged();\n                        }\n                    }\n                }\n                else if (index === InternalEvent.ROTATION_HANDLE) {\n                    if (this.currentAlpha != null) {\n                        const delta = this.currentAlpha - (this.state.style.rotation ?? 0);\n                        if (delta !== 0) {\n                            this.rotateCell(this.state.cell, delta);\n                        }\n                    }\n                    else {\n                        this.rotateClick();\n                    }\n                }\n                else {\n                    const gridEnabled = this.graph.isGridEnabledEvent(me.getEvent());\n                    const alpha = toRadians(this.state.style.rotation ?? 0);\n                    const cos = Math.cos(-alpha);\n                    const sin = Math.sin(-alpha);\n                    let dx = point.x - this.startX;\n                    let dy = point.y - this.startY;\n                    // Rotates vector for mouse gesture\n                    const tx = cos * dx - sin * dy;\n                    const ty = sin * dx + cos * dy;\n                    dx = tx;\n                    dy = ty;\n                    const s = this.graph.view.scale;\n                    const recurse = this.isRecursiveResize(this.state, me);\n                    this.resizeCell(this.state.cell, this.roundLength(dx / s), this.roundLength(dy / s), index, gridEnabled, this.isConstrainedEvent(me), recurse);\n                }\n            });\n            me.consume();\n            this.reset();\n            this.redrawHandles();\n        }\n    }\n    /**\n     * Returns the `recursiveResize` status of the given state.\n     * @param state the given {@link CellState}. This implementation takes the value of this state.\n     * @param me the mouse event.\n     */\n    isRecursiveResize(state, me) {\n        return this.graph.isRecursiveResize(this.state);\n    }\n    /**\n     * Hook for subclasses to implement a single click on the rotation handle.\n     * This code is executed as part of the model transaction.\n     *\n     * This implementation is empty.\n     */\n    rotateClick() {\n        return;\n    }\n    /**\n     * Rotates the given cell and its children by the given angle in degrees.\n     *\n     * @param cell {@link Cell} to be rotated.\n     * @param angle Angle in degrees.\n     * @param parent if set, consider the parent in the rotation computation.\n     */\n    rotateCell(cell, angle, parent) {\n        if (angle !== 0) {\n            const model = this.graph.getDataModel();\n            if (cell.isVertex() || cell.isEdge()) {\n                if (!cell.isEdge()) {\n                    const style = this.graph.getCurrentCellStyle(cell);\n                    const total = (style.rotation ?? 0) + angle;\n                    this.graph.setCellStyles('rotation', total, [cell]);\n                }\n                let geo = cell.getGeometry();\n                if (geo && parent) {\n                    const pgeo = parent.getGeometry();\n                    if (pgeo != null && !parent.isEdge()) {\n                        geo = geo.clone();\n                        geo.rotate(angle, new Point(pgeo.width / 2, pgeo.height / 2));\n                        model.setGeometry(cell, geo);\n                    }\n                    if ((cell.isVertex() && !geo.relative) || cell.isEdge()) {\n                        // Recursive rotation\n                        const childCount = cell.getChildCount();\n                        for (let i = 0; i < childCount; i += 1) {\n                            this.rotateCell(cell.getChildAt(i), angle, cell);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Resets the state of this handler.\n     */\n    reset() {\n        if (this.index !== null && this.sizers[this.index].node.style.display === 'none') {\n            this.sizers[this.index].node.style.display = '';\n        }\n        this.index = null;\n        this.currentAlpha = null;\n        // TODO: Reset and redraw cell states for live preview\n        if (this.preview) {\n            this.preview.destroy();\n            this.preview = null;\n        }\n        if (this.ghostPreview) {\n            this.ghostPreview.destroy();\n            this.ghostPreview = null;\n        }\n        if (this.livePreviewActive) {\n            for (let i = 0; i < this.sizers.length; i += 1) {\n                this.sizers[i].node.style.display = '';\n            }\n            // Shows folding icon\n            if (this.state.control && this.state.control.node) {\n                this.state.control.node.style.visibility = '';\n            }\n        }\n        for (let i = 0; i < this.customHandles.length; i += 1) {\n            if (this.customHandles[i].active) {\n                this.customHandles[i].active = false;\n                this.customHandles[i].reset();\n            }\n            else {\n                this.customHandles[i].setVisible(true);\n            }\n        }\n        // Checks if handler has been destroyed\n        this.selectionBorder.node.style.display = 'inline';\n        this.selectionBounds = this.getSelectionBounds(this.state);\n        this.bounds = new Rectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n        this.drawPreview();\n        this.removeHint();\n        this.redrawHandles();\n        this.edgeHandlers = [];\n        this.handlesVisible = true;\n        this.unscaledBounds = null;\n    }\n    /**\n     * Uses the given vector to change the bounds of the given cell\n     * in the graph using {@link AbstractGraph.resizeCell}.\n     */\n    resizeCell(cell, dx, dy, index, gridEnabled, constrained, recurse) {\n        let geo = cell.getGeometry();\n        if (geo) {\n            if (index === InternalEvent.LABEL_HANDLE &&\n                this.labelShape &&\n                this.labelShape.bounds) {\n                const alpha = -toRadians(this.state.style.rotation ?? 0);\n                const cos = Math.cos(alpha);\n                const sin = Math.sin(alpha);\n                const { scale } = this.graph.view;\n                const pt = getRotatedPoint(new Point(Math.round((this.labelShape.bounds.getCenterX() - this.startX) / scale), Math.round((this.labelShape.bounds.getCenterY() - this.startY) / scale)), cos, sin);\n                geo = geo.clone();\n                if (geo.offset == null) {\n                    geo.offset = pt;\n                }\n                else {\n                    geo.offset.x += pt.x;\n                    geo.offset.y += pt.y;\n                }\n                this.graph.model.setGeometry(cell, geo);\n            }\n            else if (this.unscaledBounds) {\n                const { scale } = this.graph.view;\n                if (this.childOffsetX !== 0 || this.childOffsetY !== 0) {\n                    this.moveChildren(cell, Math.round(this.childOffsetX / scale), Math.round(this.childOffsetY / scale));\n                }\n                this.graph.resizeCell(cell, this.unscaledBounds, recurse);\n            }\n        }\n    }\n    /**\n     * Moves the children of the given cell by the given vector.\n     */\n    moveChildren(cell, dx, dy) {\n        const model = this.graph.getDataModel();\n        const childCount = cell.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            const child = cell.getChildAt(i);\n            let geo = child.getGeometry();\n            if (geo != null) {\n                geo = geo.clone();\n                geo.translate(dx, dy);\n                model.setGeometry(child, geo);\n            }\n        }\n    }\n    /**\n     * Returns the union of the given bounds and location for the specified\n     * handle index.\n     *\n     * To override this to limit the size of vertex via a minWidth/-Height style,\n     * the following code can be used.\n     *\n     * ```javascript\n     * let vertexHandlerUnion = union;\n     * union = (bounds, dx, dy, index, gridEnabled, scale, tr, constrained)=>\n     * {\n     *   let result = vertexHandlerUnion.apply(this, arguments);\n     *\n     *   result.width = Math.max(result.width, mxUtils.getNumber(this.state.style, 'minWidth', 0));\n     *   result.height = Math.max(result.height, mxUtils.getNumber(this.state.style, 'minHeight', 0));\n     *\n     *   return result;\n     * };\n     * ```\n     *\n     * The minWidth/-Height style can then be used as follows:\n     *\n     * ```javascript\n     * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'minWidth=100;minHeight=100;');\n     * ```\n     *\n     * To override this to update the height for a wrapped text if the width of a vertex is\n     * changed, the following can be used.\n     *\n     * ```javascript\n     * let mxVertexHandlerUnion = union;\n     * union = (bounds, dx, dy, index, gridEnabled, scale, tr, constrained)=>\n     * {\n     *   let result = mxVertexHandlerUnion.apply(this, arguments);\n     *   let s = this.state;\n     *\n     *   if (this.graph.isHtmlLabel(s.cell) && (index == 3 || index == 4) &&\n     *       s.text != null && s.style.whiteSpace == 'wrap')\n     *   {\n     *     let label = this.graph.getLabel(s.cell);\n     *     let fontSize = mxUtils.getNumber(s.style, 'fontSize', mxConstants.DEFAULT_FONTSIZE);\n     *     let ww = result.width / s.view.scale - s.text.spacingRight - s.text.spacingLeft\n     *\n     *     result.height = mxUtils.getSizeForString(label, fontSize, s.style.fontFamily, ww).height;\n     *   }\n     *\n     *   return result;\n     * };\n     * ```\n     */\n    union(bounds, dx, dy, index, gridEnabled, scale, tr, constrained, centered) {\n        gridEnabled = gridEnabled && this.graph.isGridEnabled();\n        if (this.singleSizer) {\n            let x = bounds.x + bounds.width + dx;\n            let y = bounds.y + bounds.height + dy;\n            if (gridEnabled) {\n                x = this.graph.snap(x / scale) * scale;\n                y = this.graph.snap(y / scale) * scale;\n            }\n            const rect = new Rectangle(bounds.x, bounds.y, 0, 0);\n            rect.add(new Rectangle(x, y, 0, 0));\n            return rect;\n        }\n        const w0 = bounds.width;\n        const h0 = bounds.height;\n        let left = bounds.x - tr.x * scale;\n        let right = left + w0;\n        let top = bounds.y - tr.y * scale;\n        let bottom = top + h0;\n        const cx = left + w0 / 2;\n        const cy = top + h0 / 2;\n        if (index > 4 /* Bottom Row */) {\n            bottom += dy;\n            if (gridEnabled) {\n                bottom = this.graph.snap(bottom / scale) * scale;\n            }\n            else {\n                bottom = Math.round(bottom / scale) * scale;\n            }\n        }\n        else if (index < 3 /* Top Row */) {\n            top += dy;\n            if (gridEnabled) {\n                top = this.graph.snap(top / scale) * scale;\n            }\n            else {\n                top = Math.round(top / scale) * scale;\n            }\n        }\n        if (index === 0 || index === 3 || index === 5 /* Left */) {\n            left += dx;\n            if (gridEnabled) {\n                left = this.graph.snap(left / scale) * scale;\n            }\n            else {\n                left = Math.round(left / scale) * scale;\n            }\n        }\n        else if (index === 2 || index === 4 || index === 7 /* Right */) {\n            right += dx;\n            if (gridEnabled) {\n                right = this.graph.snap(right / scale) * scale;\n            }\n            else {\n                right = Math.round(right / scale) * scale;\n            }\n        }\n        let width = right - left;\n        let height = bottom - top;\n        if (constrained) {\n            const geo = this.state.cell.getGeometry();\n            if (geo != null) {\n                const aspect = geo.width / geo.height;\n                if (index === 1 || index === 2 || index === 7 || index === 6) {\n                    width = height * aspect;\n                }\n                else {\n                    height = width / aspect;\n                }\n                if (index === 0) {\n                    left = right - width;\n                    top = bottom - height;\n                }\n            }\n        }\n        if (centered) {\n            width += width - w0;\n            height += height - h0;\n            const cdx = cx - (left + width / 2);\n            const cdy = cy - (top + height / 2);\n            left += cdx;\n            top += cdy;\n            right += cdx;\n            bottom += cdy;\n        }\n        // Flips over left side\n        if (width < 0) {\n            left += width;\n            width = Math.abs(width);\n        }\n        // Flips over top side\n        if (height < 0) {\n            top += height;\n            height = Math.abs(height);\n        }\n        const result = new Rectangle(left + tr.x * scale, top + tr.y * scale, width, height);\n        if (this.minBounds != null) {\n            result.width = Math.max(result.width, this.minBounds.x * scale +\n                this.minBounds.width * scale +\n                Math.max(0, this.x0 * scale - result.x));\n            result.height = Math.max(result.height, this.minBounds.y * scale +\n                this.minBounds.height * scale +\n                Math.max(0, this.y0 * scale - result.y));\n        }\n        return result;\n    }\n    /**\n     * Redraws the handles and the preview.\n     */\n    redraw(ignoreHandles) {\n        this.selectionBounds = this.getSelectionBounds(this.state);\n        this.bounds = new Rectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n        this.drawPreview();\n        if (!ignoreHandles) {\n            this.redrawHandles();\n        }\n    }\n    /**\n     * Returns the padding to be used for drawing handles for the current <bounds>.\n     */\n    getHandlePadding() {\n        // KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n        const result = new Point(0, 0);\n        let tol = this.tolerance;\n        if (this.sizers.length > 0 &&\n            this.sizers[0].bounds &&\n            (this.bounds.width < 2 * this.sizers[0].bounds.width + 2 * tol ||\n                this.bounds.height < 2 * this.sizers[0].bounds.height + 2 * tol)) {\n            tol /= 2;\n            result.x = this.sizers[0].bounds.width + tol;\n            result.y = this.sizers[0].bounds.height + tol;\n        }\n        return result;\n    }\n    /**\n     * Returns the bounds used to paint the resize handles.\n     */\n    getSizerBounds() {\n        return this.bounds;\n    }\n    /**\n     * Redraws the handles. To hide certain handles the following code can be used.\n     *\n     * ```javascript\n     * redrawHandles()\n     * {\n     *   mxVertexHandlerRedrawHandles.apply(this, arguments);\n     *\n     *   if (this.sizers != null && this.sizers.length > 7)\n     *   {\n     *     this.sizers[1].node.style.display = 'none';\n     *     this.sizers[6].node.style.display = 'none';\n     *   }\n     * };\n     * ```\n     */\n    redrawHandles() {\n        let s = this.getSizerBounds();\n        const tol = this.tolerance;\n        this.horizontalOffset = 0;\n        this.verticalOffset = 0;\n        for (let i = 0; i < this.customHandles.length; i += 1) {\n            const shape = this.customHandles[i].shape;\n            if (shape) {\n                const temp = shape.node.style.display;\n                this.customHandles[i].redraw();\n                shape.node.style.display = temp;\n                // Hides custom handles during text editing\n                shape.node.style.visibility =\n                    this.handlesVisible && this.isCustomHandleVisible(this.customHandles[i])\n                        ? ''\n                        : 'hidden';\n            }\n        }\n        if (this.sizers.length > 0 && this.sizers[0]) {\n            if (this.index === null && this.manageSizers && this.sizers.length >= 8) {\n                // KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n                const padding = this.getHandlePadding();\n                this.horizontalOffset = padding.x;\n                this.verticalOffset = padding.y;\n                if (this.horizontalOffset !== 0 || this.verticalOffset !== 0) {\n                    s = new Rectangle(s.x, s.y, s.width, s.height);\n                    s.x -= this.horizontalOffset / 2;\n                    s.width += this.horizontalOffset;\n                    s.y -= this.verticalOffset / 2;\n                    s.height += this.verticalOffset;\n                }\n                if (this.sizers.length >= 8) {\n                    if (this.sizers[0].bounds &&\n                        (s.width < 2 * this.sizers[0].bounds.width + 2 * tol ||\n                            s.height < 2 * this.sizers[0].bounds.height + 2 * tol)) {\n                        this.sizers[0].node.style.display = 'none';\n                        this.sizers[2].node.style.display = 'none';\n                        this.sizers[5].node.style.display = 'none';\n                        this.sizers[7].node.style.display = 'none';\n                    }\n                    else if (this.handlesVisible) {\n                        this.sizers[0].node.style.display = '';\n                        this.sizers[2].node.style.display = '';\n                        this.sizers[5].node.style.display = '';\n                        this.sizers[7].node.style.display = '';\n                    }\n                }\n            }\n            const r = s.x + s.width;\n            const b = s.y + s.height;\n            if (this.singleSizer) {\n                this.moveSizerTo(this.sizers[0], r, b);\n            }\n            else {\n                const cx = s.x + s.width / 2;\n                const cy = s.y + s.height / 2;\n                if (this.sizers.length >= 8) {\n                    const crs = [\n                        'nw-resize',\n                        'n-resize',\n                        'ne-resize',\n                        'e-resize',\n                        'se-resize',\n                        's-resize',\n                        'sw-resize',\n                        'w-resize',\n                    ];\n                    const alpha = toRadians(this.state.style.rotation ?? 0);\n                    const cos = Math.cos(alpha);\n                    const sin = Math.sin(alpha);\n                    const da = Math.round((alpha * 4) / Math.PI);\n                    const ct = new Point(s.getCenterX(), s.getCenterY());\n                    let pt = getRotatedPoint(new Point(s.x, s.y), cos, sin, ct);\n                    this.moveSizerTo(this.sizers[0], pt.x, pt.y);\n                    this.sizers[0].setCursor(crs[mod(0 + da, crs.length)]);\n                    pt.x = cx;\n                    pt.y = s.y;\n                    pt = getRotatedPoint(pt, cos, sin, ct);\n                    this.moveSizerTo(this.sizers[1], pt.x, pt.y);\n                    this.sizers[1].setCursor(crs[mod(1 + da, crs.length)]);\n                    pt.x = r;\n                    pt.y = s.y;\n                    pt = getRotatedPoint(pt, cos, sin, ct);\n                    this.moveSizerTo(this.sizers[2], pt.x, pt.y);\n                    this.sizers[2].setCursor(crs[mod(2 + da, crs.length)]);\n                    pt.x = s.x;\n                    pt.y = cy;\n                    pt = getRotatedPoint(pt, cos, sin, ct);\n                    this.moveSizerTo(this.sizers[3], pt.x, pt.y);\n                    this.sizers[3].setCursor(crs[mod(7 + da, crs.length)]);\n                    pt.x = r;\n                    pt.y = cy;\n                    pt = getRotatedPoint(pt, cos, sin, ct);\n                    this.moveSizerTo(this.sizers[4], pt.x, pt.y);\n                    this.sizers[4].setCursor(crs[mod(3 + da, crs.length)]);\n                    pt.x = s.x;\n                    pt.y = b;\n                    pt = getRotatedPoint(pt, cos, sin, ct);\n                    this.moveSizerTo(this.sizers[5], pt.x, pt.y);\n                    this.sizers[5].setCursor(crs[mod(6 + da, crs.length)]);\n                    pt.x = cx;\n                    pt.y = b;\n                    pt = getRotatedPoint(pt, cos, sin, ct);\n                    this.moveSizerTo(this.sizers[6], pt.x, pt.y);\n                    this.sizers[6].setCursor(crs[mod(5 + da, crs.length)]);\n                    pt.x = r;\n                    pt.y = b;\n                    pt = getRotatedPoint(pt, cos, sin, ct);\n                    this.moveSizerTo(this.sizers[7], pt.x, pt.y);\n                    this.sizers[7].setCursor(crs[mod(4 + da, crs.length)]);\n                    pt.x = cx + this.state.absoluteOffset.x;\n                    pt.y = cy + this.state.absoluteOffset.y;\n                    pt = getRotatedPoint(pt, cos, sin, ct);\n                    this.moveSizerTo(this.sizers[8], pt.x, pt.y);\n                }\n                else if (this.state.width >= 2 && this.state.height >= 2) {\n                    this.moveSizerTo(this.sizers[0], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n                }\n                else {\n                    this.moveSizerTo(this.sizers[0], this.state.x, this.state.y);\n                }\n            }\n        }\n        if (this.rotationShape) {\n            const alpha = toRadians(this.currentAlpha ?? this.state.style.rotation ?? 0);\n            const cos = Math.cos(alpha);\n            const sin = Math.sin(alpha);\n            const ct = new Point(this.state.getCenterX(), this.state.getCenterY());\n            const pt = getRotatedPoint(this.getRotationHandlePosition(), cos, sin, ct);\n            if (this.rotationShape.node != null) {\n                this.moveSizerTo(this.rotationShape, pt.x, pt.y);\n                // Hides rotation handle during text editing\n                this.rotationShape.node.style.visibility =\n                    this.state.view.graph.isEditing() || !this.handlesVisible ? 'hidden' : '';\n            }\n        }\n        if (this.selectionBorder != null) {\n            this.selectionBorder.rotation = this.state.style.rotation ?? 0;\n        }\n        if (this.edgeHandlers != null) {\n            for (let i = 0; i < this.edgeHandlers.length; i += 1) {\n                this.edgeHandlers[i].redraw();\n            }\n        }\n    }\n    /**\n     * Returns true if the given custom handle is visible.\n     */\n    isCustomHandleVisible(handle) {\n        return !this.graph.isEditing() && this.state.view.graph.getSelectionCount() === 1;\n    }\n    /**\n     * Returns an {@link Point} that defines the rotation handle position.\n     */\n    getRotationHandlePosition() {\n        return new Point(this.bounds.x + this.bounds.width / 2, this.bounds.y + this.rotationHandleVSpacing);\n    }\n    /**\n     * Returns `true` if the parent highlight should be visible.\n     *\n     * This implementation always returns `true`.\n     */\n    isParentHighlightVisible() {\n        const parent = this.state.cell.getParent();\n        return parent ? !this.graph.isCellSelected(parent) : false;\n    }\n    /**\n     * Updates the highlight of the parent if {@link parentHighlightEnabled} is `true`.\n     */\n    updateParentHighlight() {\n        if (!this.isDestroyed()) {\n            const visible = this.isParentHighlightVisible();\n            const parent = this.state.cell.getParent();\n            const pstate = parent ? this.graph.view.getState(parent) : null;\n            if (this.parentHighlight) {\n                if (parent && parent.isVertex() && visible) {\n                    const b = this.parentHighlight.bounds;\n                    if (pstate &&\n                        b &&\n                        (b.x !== pstate.x ||\n                            b.y !== pstate.y ||\n                            b.width !== pstate.width ||\n                            b.height !== pstate.height)) {\n                        this.parentHighlight.bounds = Rectangle.fromRectangle(pstate);\n                        this.parentHighlight.redraw();\n                    }\n                }\n                else {\n                    if (pstate != null && pstate.parentHighlight === this.parentHighlight) {\n                        pstate.parentHighlight = null;\n                    }\n                    this.parentHighlight.destroy();\n                    this.parentHighlight = null;\n                }\n            }\n            else if (this.parentHighlightEnabled && visible) {\n                if (parent &&\n                    parent.isVertex() &&\n                    pstate != null &&\n                    pstate.parentHighlight == null) {\n                    this.parentHighlight = this.createParentHighlightShape(pstate);\n                    // VML dialect required here for event transparency in IE\n                    this.parentHighlight.dialect = 'svg';\n                    this.parentHighlight.pointerEvents = false;\n                    this.parentHighlight.rotation = pstate.style.rotation ?? 0;\n                    this.parentHighlight.init(this.graph.getView().getOverlayPane());\n                    this.parentHighlight.redraw();\n                    // Shows highlight once per parent\n                    pstate.parentHighlight = this.parentHighlight;\n                }\n            }\n        }\n    }\n    /**\n     * Redraws the preview.\n     */\n    drawPreview() {\n        if (this.preview != null) {\n            this.preview.bounds = this.bounds;\n            if (this.preview.node.parentNode === this.graph.container) {\n                this.preview.bounds.width = Math.max(0, this.preview.bounds.width - 1);\n                this.preview.bounds.height = Math.max(0, this.preview.bounds.height - 1);\n            }\n            this.preview.rotation = this.state.style.rotation ?? 0;\n            this.preview.redraw();\n        }\n        this.selectionBorder.bounds = this.getSelectionBorderBounds();\n        this.selectionBorder.redraw();\n        this.updateParentHighlight();\n    }\n    /**\n     * Returns the bounds for the selection border.\n     */\n    getSelectionBorderBounds() {\n        return this.bounds;\n    }\n    /**\n     * Returns `true` if this handler was destroyed or not initialized.\n     */\n    isDestroyed() {\n        return this.selectionBorder == null;\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes.\n     */\n    onDestroy() {\n        this.state.view.graph.removeListener(this.escapeHandler);\n        this.escapeHandler = () => {\n            return;\n        };\n        if (this.preview) {\n            this.preview.destroy();\n            this.preview = null;\n        }\n        if (this.parentHighlight) {\n            const parent = this.state.cell.getParent();\n            const pstate = parent ? this.graph.view.getState(parent) : null;\n            if (pstate && pstate.parentHighlight === this.parentHighlight) {\n                pstate.parentHighlight = null;\n            }\n            this.parentHighlight.destroy();\n            this.parentHighlight = null;\n        }\n        if (this.ghostPreview) {\n            this.ghostPreview.destroy();\n            this.ghostPreview = null;\n        }\n        if (this.selectionBorder) {\n            this.selectionBorder.destroy();\n        }\n        this.labelShape = null;\n        this.removeHint();\n        for (let i = 0; i < this.sizers.length; i += 1) {\n            this.sizers[i].destroy();\n        }\n        this.sizers = [];\n        for (let i = 0; i < this.customHandles.length; i += 1) {\n            this.customHandles[i].destroy();\n        }\n        this.customHandles = [];\n    }\n}\nexport default VertexHandler;\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { GlobalConfig } from '../util/config';\n/**\n * @private\n */\nexport function isI18nEnabled() {\n    return GlobalConfig.i18n.isEnabled();\n}\n/**\n * @private\n */\nexport function translate(key, params, defaultValue) {\n    return GlobalConfig.i18n.get(key, params, defaultValue);\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EdgeHandler from './EdgeHandler';\nimport InternalEvent from '../event/InternalEvent';\nimport Point from '../geometry/Point';\nimport Rectangle from '../geometry/Rectangle';\nimport { intersects } from '../../util/mathUtils';\nimport { isConsumed } from '../../util/EventUtils';\nimport { EdgeHandlerConfig, HandleConfig } from './config';\nimport { isI18nEnabled, translate } from '../../internal/i18n-utils';\n/**\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses {@link CellMarker} for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in {@link AbstractGraph.createHandler}. It extends {@link EdgeHandler}.\n *\n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified {@link CellState}.\n *\n * @param state {@link CellState} of the cell to be modified.\n */\nclass ElbowEdgeHandler extends EdgeHandler {\n    constructor(state) {\n        super(state);\n        /**\n         * Specifies if a double click on the middle handle should call {@link AbstractGraph.flipEdge}.\n         * @default true\n         */\n        this.flipEnabled = true;\n        /**\n         * Specifies the resource key for the tooltip to be displayed on the single\n         * control point for routed edges. If the resource for this key does not\n         * exist then the value is used as the error message.\n         * @default 'doubleClickOrientation'.\n         */\n        this.doubleClickOrientationResource = isI18nEnabled() ? 'doubleClickOrientation' : '';\n    }\n    /**\n     * Overrides {@link EdgeHandler.createBends} to create custom bends.\n     */\n    createBends() {\n        const bends = [];\n        // Source\n        let bend = this.createHandleShape(0);\n        this.initBend(bend);\n        bend.setCursor(EdgeHandlerConfig.cursorTerminal);\n        bends.push(bend);\n        // Virtual\n        bends.push(this.createVirtualBend((evt) => {\n            if (!isConsumed(evt) && this.flipEnabled) {\n                this.graph.flipEdge(this.state.cell);\n                InternalEvent.consume(evt);\n            }\n        }));\n        this.points.push(new Point(0, 0));\n        // Target\n        bend = this.createHandleShape(2);\n        this.initBend(bend);\n        bend.setCursor(EdgeHandlerConfig.cursorTerminal);\n        bends.push(bend);\n        return bends;\n    }\n    /**\n     * Creates a virtual bend that supports double-clicking and calls {@link AbstractGraph.flipEdge}.\n     */\n    createVirtualBend(dblClickHandler) {\n        const bend = this.createHandleShape();\n        this.initBend(bend, dblClickHandler);\n        bend.setCursor(this.getCursorForBend());\n        if (!this.graph.isCellBendable(this.state.cell)) {\n            bend.node.style.display = 'none';\n        }\n        return bend;\n    }\n    /**\n     * Returns the cursor to be used for the bend.\n     */\n    getCursorForBend() {\n        return this.state.style.edgeStyle === 'topToBottomEdgeStyle' ||\n            (this.state.style.edgeStyle === 'elbowEdgeStyle' &&\n                this.state.style.elbow === 'vertical')\n            ? 'row-resize'\n            : 'col-resize';\n    }\n    /**\n     * Returns the tooltip for the given node.\n     */\n    getTooltipForNode(node) {\n        let tip = null;\n        if (this.bends != null &&\n            this.bends[1] != null &&\n            (node === this.bends[1].node || node.parentNode === this.bends[1].node)) {\n            tip = this.doubleClickOrientationResource;\n            tip = translate(tip) || tip;\n        }\n        return tip;\n    }\n    /**\n     * Converts the given point in-place from screen to unscaled, untranslated\n     * graph coordinates and applies the grid.\n     *\n     * @param point {@link Point} to be converted.\n     * @param gridEnabled Boolean that specifies if the grid should be applied.\n     */\n    convertPoint(point, gridEnabled) {\n        const scale = this.graph.getView().getScale();\n        const tr = this.graph.getView().getTranslate();\n        const { origin } = this.state;\n        if (gridEnabled) {\n            point.x = this.graph.snap(point.x);\n            point.y = this.graph.snap(point.y);\n        }\n        point.x = Math.round(point.x / scale - tr.x - origin.x);\n        point.y = Math.round(point.y / scale - tr.y - origin.y);\n        return point;\n    }\n    /**\n     * Updates and redraws the inner bends.\n     *\n     * @param p0 {@link Point} that represents the location of the first point.\n     * @param pe {@link Point} that represents the location of the last point.\n     */\n    redrawInnerBends(p0, pe) {\n        const g = this.state.cell.getGeometry();\n        const pts = this.state.absolutePoints;\n        let pt = null;\n        // Keeps the virtual bend on the edge shape\n        if (pts.length > 1) {\n            p0 = pts[1];\n            pe = pts[pts.length - 2];\n        }\n        else if (g.points != null && g.points.length > 0) {\n            pt = pts[0];\n        }\n        if (pt == null) {\n            pt = new Point(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n        }\n        else {\n            pt = new Point(this.graph.getView().scale *\n                (pt.x + this.graph.getView().translate.x + this.state.origin.x), this.graph.getView().scale *\n                (pt.y + this.graph.getView().translate.y + this.state.origin.y));\n        }\n        // Makes handle slightly bigger if the yellow  label handle\n        // exists and intersects this green handle\n        const b = this.bends[1].bounds;\n        let w = b.width;\n        let h = b.height;\n        let bounds = new Rectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);\n        if (this.manageLabelHandle) {\n            this.checkLabelHandle(bounds);\n        }\n        else if (this.handleImage == null &&\n            this.labelShape.visible &&\n            this.labelShape.bounds &&\n            intersects(bounds, this.labelShape.bounds)) {\n            w = HandleConfig.size + 3;\n            h = w;\n            bounds = new Rectangle(Math.floor(pt.x - w / 2), Math.floor(pt.y - h / 2), w, h);\n        }\n        this.bends[1].bounds = bounds;\n        this.bends[1].redraw();\n        if (this.manageLabelHandle) {\n            this.checkLabelHandle(this.bends[1].bounds);\n        }\n    }\n}\nexport default ElbowEdgeHandler;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport Rectangle from '../geometry/Rectangle';\nimport { contains } from '../../util/mathUtils';\nimport { setOpacity } from '../../util/styleUtils';\nimport ElbowEdgeHandler from './ElbowEdgeHandler';\nimport { EdgeHandlerConfig } from './config';\nclass EdgeSegmentHandler extends ElbowEdgeHandler {\n    constructor(state) {\n        super(state);\n        this.points = [];\n    }\n    /**\n     * Returns the current absolute points.\n     */\n    getCurrentPoints() {\n        let pts = this.state.absolutePoints;\n        // Special case for straight edges where we add a virtual middle handle for moving the edge\n        const tol = Math.max(1, this.graph.view.scale);\n        if ((pts.length === 2 && pts[0] && pts[1]) ||\n            (pts.length === 3 &&\n                pts[0] &&\n                pts[1] &&\n                pts[2] &&\n                ((Math.abs(pts[0].x - pts[1].x) < tol && Math.abs(pts[1].x - pts[2].x) < tol) ||\n                    (Math.abs(pts[0].y - pts[1].y) < tol && Math.abs(pts[1].y - pts[2].y) < tol)))) {\n            const cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n            const cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n            pts = [pts[0], new Point(cx, cy), new Point(cx, cy), pts[pts.length - 1]];\n        }\n        return pts;\n    }\n    /**\n     * Updates the given preview state taking into account the state of the constraint handler.\n     */\n    getPreviewPoints(point) {\n        if (this.isSource || this.isTarget) {\n            return super.getPreviewPoints(point);\n        }\n        const pts = this.getCurrentPoints();\n        let last = this.convertPoint(pts[0].clone(), false);\n        point = this.convertPoint(point.clone(), false);\n        let result = [];\n        for (let i = 1; i < pts.length; i += 1) {\n            const pt = this.convertPoint(pts[i].clone(), false);\n            if (i === this.index) {\n                if (Math.round(last.x - pt.x) === 0) {\n                    last.x = point.x;\n                    pt.x = point.x;\n                }\n                if (Math.round(last.y - pt.y) === 0) {\n                    last.y = point.y;\n                    pt.y = point.y;\n                }\n            }\n            if (i < pts.length - 1) {\n                result.push(pt);\n            }\n            last = pt;\n        }\n        // Replaces single point that intersects with source or target\n        if (result.length === 1) {\n            const source = this.state.getVisibleTerminalState(true);\n            const target = this.state.getVisibleTerminalState(false);\n            const scale = this.state.view.getScale();\n            const tr = this.state.view.getTranslate();\n            const x = result[0].x * scale + tr.x;\n            const y = result[0].y * scale + tr.y;\n            if ((source != null && contains(source, x, y)) ||\n                (target != null && contains(target, x, y))) {\n                result = [point, point];\n            }\n        }\n        return result;\n    }\n    /**\n     * Overridden to perform optimization of the edge style result.\n     */\n    updatePreviewState(edge, point, terminalState, me) {\n        super.updatePreviewState(edge, point, terminalState, me);\n        // Checks and corrects preview by running edge style again\n        if (!this.isSource && !this.isTarget) {\n            point = this.convertPoint(point.clone(), false);\n            const pts = edge.absolutePoints;\n            let pt0 = pts[0];\n            let pt1 = pts[1];\n            let result = [];\n            for (let i = 2; i < pts.length; i += 1) {\n                const pt2 = pts[i];\n                // Merges adjacent segments only if more than 2 to allow for straight edges\n                if ((Math.round(pt0.x - pt1.x) !== 0 || Math.round(pt1.x - pt2.x) !== 0) &&\n                    (Math.round(pt0.y - pt1.y) !== 0 || Math.round(pt1.y - pt2.y) !== 0)) {\n                    result.push(this.convertPoint(pt1.clone(), false));\n                }\n                pt0 = pt1;\n                pt1 = pt2;\n            }\n            const source = this.state.getVisibleTerminalState(true);\n            const target = this.state.getVisibleTerminalState(false);\n            const rpts = this.state.absolutePoints;\n            const end = pts[pts.length - 1];\n            // A straight line is represented by 3 handles\n            if (result.length === 0 &&\n                pts[0] &&\n                end &&\n                (Math.round(pts[0].x - end.x) === 0 || Math.round(pts[0].y - end.y) === 0)) {\n                result = [point, point];\n            }\n            // Handles special case of transitions from straight vertical to routed\n            else if (pts.length === 5 &&\n                result.length === 2 &&\n                source != null &&\n                target != null &&\n                rpts != null &&\n                Math.round(rpts[0].x - rpts[rpts.length - 1].x) === 0) {\n                const view = this.graph.getView();\n                const scale = view.getScale();\n                const tr = view.getTranslate();\n                let y0 = view.getRoutingCenterY(source) / scale - tr.y;\n                // Use fixed connection point y-coordinate if one exists\n                const sc = this.graph.getConnectionConstraint(edge, source, true);\n                if (sc != null) {\n                    const pt = this.graph.getConnectionPoint(source, sc);\n                    if (pt != null) {\n                        this.convertPoint(pt, false);\n                        y0 = pt.y;\n                    }\n                }\n                let ye = view.getRoutingCenterY(target) / scale - tr.y;\n                // Use fixed connection point y-coordinate if one exists\n                const tc = this.graph.getConnectionConstraint(edge, target, false);\n                if (tc) {\n                    const pt = this.graph.getConnectionPoint(target, tc);\n                    if (pt != null) {\n                        this.convertPoint(pt, false);\n                        ye = pt.y;\n                    }\n                }\n                result = [new Point(point.x, y0), new Point(point.x, ye)];\n            }\n            this.points = result;\n            // LATER: Check if points and result are different\n            edge.view.updateFixedTerminalPoints(edge, source, target);\n            edge.view.updatePoints(edge, this.points, source, target);\n            edge.view.updateFloatingTerminalPoints(edge, source, target);\n        }\n    }\n    /**\n     * Overriden to merge edge segments.\n     */\n    connect(edge, terminal, isSource, isClone, me) {\n        const model = this.graph.getDataModel();\n        let geo = edge.getGeometry();\n        let result = null;\n        // Merges adjacent edge segments\n        if (geo != null && geo.points != null && geo.points.length > 0) {\n            const pts = this.abspoints;\n            let pt0 = pts[0];\n            let pt1 = pts[1];\n            result = [];\n            for (let i = 2; i < pts.length; i += 1) {\n                const pt2 = pts[i];\n                // Merges adjacent segments only if more than 2 to allow for straight edges\n                if (pt0 &&\n                    pt1 &&\n                    pt2 &&\n                    (Math.round(pt0.x - pt1.x) !== 0 || Math.round(pt1.x - pt2.x) !== 0) &&\n                    (Math.round(pt0.y - pt1.y) !== 0 || Math.round(pt1.y - pt2.y) !== 0)) {\n                    result.push(this.convertPoint(pt1.clone(), false));\n                }\n                pt0 = pt1;\n                pt1 = pt2;\n            }\n        }\n        this.graph.batchUpdate(() => {\n            if (result != null) {\n                geo = edge.getGeometry();\n                if (geo != null) {\n                    geo = geo.clone();\n                    geo.points = result;\n                    model.setGeometry(edge, geo);\n                }\n            }\n            edge = super.connect(edge, terminal, isSource, isClone, me);\n        });\n        return edge;\n    }\n    /**\n     * Returns no tooltips.\n     */\n    getTooltipForNode(node) {\n        return null;\n    }\n    /**\n     * Adds custom bends for the center of each segment.\n     */\n    start(x, y, index) {\n        super.start(x, y, index);\n        if (this.bends != null &&\n            this.bends[index] != null &&\n            !this.isSource &&\n            !this.isTarget) {\n            setOpacity(this.bends[index].node, 100);\n        }\n    }\n    /**\n     * Adds custom bends for the center of each segment.\n     */\n    createBends() {\n        const bends = [];\n        // Source\n        let bend = this.createHandleShape(0);\n        this.initBend(bend);\n        bend.setCursor(EdgeHandlerConfig.cursorTerminal);\n        bends.push(bend);\n        const pts = this.getCurrentPoints();\n        // Waypoints (segment handles)\n        if (this.graph.isCellBendable(this.state.cell)) {\n            if (this.points == null) {\n                this.points = [];\n            }\n            for (let i = 0; i < pts.length - 1; i += 1) {\n                bend = this.createVirtualBend();\n                bends.push(bend);\n                let horizontal = Math.round(pts[i].x - pts[i + 1].x) === 0;\n                // Special case where dy is 0 as well\n                if (Math.round(pts[i].y - pts[i + 1].y) === 0 && i < pts.length - 2) {\n                    horizontal = Math.round(pts[i].x - pts[i + 2].x) === 0;\n                }\n                bend.setCursor(horizontal ? 'col-resize' : 'row-resize');\n                this.points.push(new Point(0, 0));\n            }\n        }\n        // Target\n        bend = this.createHandleShape(pts.length);\n        this.initBend(bend);\n        bend.setCursor(EdgeHandlerConfig.cursorTerminal);\n        bends.push(bend);\n        return bends;\n    }\n    /**\n     * Overridden to invoke <refresh> before the redraw.\n     */\n    redraw() {\n        this.refresh();\n        super.redraw();\n    }\n    /**\n     * Updates the position of the custom bends.\n     */\n    redrawInnerBends(p0, pe) {\n        if (this.graph.isCellBendable(this.state.cell)) {\n            const pts = this.getCurrentPoints();\n            if (pts != null && pts.length > 1) {\n                let straight = false;\n                // Puts handle in the center of straight edges\n                if (pts.length === 4 &&\n                    pts[0] &&\n                    pts[1] &&\n                    pts[2] &&\n                    pts[3] &&\n                    Math.round(pts[1].x - pts[2].x) === 0 &&\n                    Math.round(pts[1].y - pts[2].y) === 0) {\n                    straight = true;\n                    if (Math.round(pts[0].y - pts[pts.length - 1].y) === 0) {\n                        const cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n                        pts[1] = new Point(cx, pts[1].y);\n                        pts[2] = new Point(cx, pts[2].y);\n                    }\n                    else {\n                        const cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n                        pts[1] = new Point(pts[1].x, cy);\n                        pts[2] = new Point(pts[2].x, cy);\n                    }\n                }\n                for (let i = 0; i < pts.length - 1; i += 1) {\n                    if (this.bends[i + 1] != null) {\n                        p0 = pts[i];\n                        pe = pts[i + 1];\n                        const pt = new Point(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n                        const b = this.bends[i + 1].bounds;\n                        this.bends[i + 1].bounds = new Rectangle(Math.floor(pt.x - b.width / 2), Math.floor(pt.y - b.height / 2), b.width, b.height);\n                        this.bends[i + 1].redraw();\n                        if (this.manageLabelHandle) {\n                            this.checkLabelHandle(this.bends[i + 1].bounds);\n                        }\n                    }\n                }\n                if (straight) {\n                    setOpacity(this.bends[1].node, EdgeHandlerConfig.virtualBendOpacity);\n                    setOpacity(this.bends[3].node, EdgeHandlerConfig.virtualBendOpacity);\n                }\n            }\n        }\n    }\n}\nexport default EdgeSegmentHandler;\n","import Dictionary from './Dictionary';\nimport ObjectIdentity from './ObjectIdentity';\n/**\n * Returns all opposite vertices terminal for the given edges, only returning sources and/or targets as specified.\n * The result is returned as an array of {@link Cell}.\n *\n * @param edges Array of {Cell} that contain the edges to be examined.\n * @param {Cell} terminal  that specifies the known end of the edges.\n * @param includeSources  Boolean that specifies if source terminals should be included in the result. Default is `true`.\n * @param includeTargets  Boolean that specifies if target terminals should be included in the result. Default is `true`.\n */\nexport const getOpposites = (edges, terminal, includeSources = true, includeTargets = true) => {\n    return edges.reduce((terminals, edge) => {\n        const source = edge.getTerminal(true);\n        const target = edge.getTerminal(false);\n        // Checks if the terminal is the source of the edge and if the target should be stored in the result\n        if (source === terminal && target != null && target !== terminal && includeTargets) {\n            terminals.push(target);\n        }\n        // Checks if the terminal is the target of the edge and if the source should be stored in the result\n        else if (target === terminal &&\n            source != null &&\n            source !== terminal &&\n            includeSources) {\n            terminals.push(source);\n        }\n        return terminals;\n    }, []);\n};\n/**\n * Returns the topmost cells of the hierarchy in an array that contains no\n * descendants for each {@link Cell} that it contains. Duplicates should be\n * removed in the cells array to improve performance.\n */\nexport const getTopmostCells = (cells) => {\n    const dict = new Dictionary();\n    const tmp = [];\n    for (let i = 0; i < cells.length; i += 1) {\n        dict.put(cells[i], true);\n    }\n    for (let i = 0; i < cells.length; i += 1) {\n        const cell = cells[i];\n        let topmost = true;\n        let parent = cell.getParent();\n        while (parent != null) {\n            if (dict.get(parent)) {\n                topmost = false;\n                break;\n            }\n            parent = parent.getParent();\n        }\n        if (topmost) {\n            tmp.push(cell);\n        }\n    }\n    return tmp;\n};\n/**\n * Returns an array that represents the set (no duplicates) of all parents\n * for the given array of cells.\n */\nexport const getParents = (cells) => {\n    const parents = [];\n    const dict = new Dictionary();\n    for (const cell of cells) {\n        const parent = cell.getParent();\n        if (parent != null && !dict.get(parent)) {\n            dict.put(parent, true);\n            parents.push(parent);\n        }\n    }\n    return parents;\n};\n/**\n * Returns a deep clone of the given {@link Cell}` (including the children) which is created using {@link cloneCells}`.\n *\n * @param cell {@link Cell} to be cloned. Default is `null`.\n * @param includeChildren Boolean indicating if the cells should be cloned with all descendants. Default is `true`.\n */\nexport const cloneCell = (cell = null, includeChildren = true) => {\n    if (!cell) {\n        return null;\n    }\n    return cloneCells([cell], includeChildren)[0];\n};\n/**\n * Returns an array of clones for the given array of {@link Cell}`.\n * Depending on the value of includeChildren, a deep clone is created for\n * each cell. Connections are restored based if the corresponding\n * cell is contained in the provided in array.\n *\n * @param cells The cells to clone\n * @param includeChildren  Boolean indicating if the cells should be cloned with all descendants.\n * @param mapping  Optional mapping for existing clones.\n */\nexport const cloneCells = (cells, includeChildren = true, mapping = {}) => {\n    const clones = [];\n    for (const cell of cells) {\n        clones.push(cloneCellImpl(cell, mapping, includeChildren));\n    }\n    for (let i = 0; i < clones.length; i += 1) {\n        if (clones[i] != null) {\n            restoreClone(clones[i], cells[i], mapping);\n        }\n    }\n    return clones;\n};\n/**\n * Inner helper method for cloning cells recursively.\n *\n * @private\n */\nconst cloneCellImpl = (cell, mapping = {}, includeChildren = false) => {\n    const identity = ObjectIdentity.get(cell);\n    let clone = mapping ? mapping[identity] : null;\n    if (clone == null) {\n        clone = cell.clone();\n        mapping[identity] = clone;\n        if (includeChildren) {\n            const childCount = cell.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                const cloneChild = cloneCellImpl(cell.getChildAt(i), mapping, true);\n                clone.insert(cloneChild);\n            }\n        }\n    }\n    return clone;\n};\n/**\n * Inner helper method for restoring the connections in a network of cloned cells.\n *\n * @private\n */\nconst restoreClone = (clone, cell, mapping) => {\n    const source = cell.getTerminal(true);\n    if (source != null) {\n        const tmp = mapping[ObjectIdentity.get(source)];\n        if (tmp != null) {\n            tmp.insertEdge(clone, true);\n        }\n    }\n    const target = cell.getTerminal(false);\n    if (target != null) {\n        const tmp = mapping[ObjectIdentity.get(target)];\n        if (tmp != null) {\n            tmp.insertEdge(clone, false);\n        }\n    }\n    const childCount = clone.getChildCount();\n    for (let i = 0; i < childCount; i += 1) {\n        restoreClone(clone.getChildAt(i), cell.getChildAt(i), mapping);\n    }\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { contains, getBoundingBox, getRotatedPoint, intersects, ptSegDistSq, toRadians, } from '../../util/mathUtils';\nimport { getSizeForString, setCellStyleFlags, setCellStyles, } from '../../util/styleUtils';\nimport { DEFAULT_FONTSIZE, DEFAULT_IMAGESIZE } from '../../util/Constants';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport Rectangle from '../geometry/Rectangle';\nimport Dictionary from '../../util/Dictionary';\nimport Point from '../geometry/Point';\nimport { htmlEntities } from '../../util/StringUtils';\nimport { cloneCells, getTopmostCells } from '../../util/cellArrayUtils';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const CellsMixin = {\n    cellsResizable: true,\n    cellsBendable: true,\n    cellsSelectable: true,\n    cellsDisconnectable: true,\n    autoSizeCells: false,\n    autoSizeCellsOnAdd: false,\n    cellsLocked: false,\n    cellsCloneable: true,\n    cellsDeletable: true,\n    cellsMovable: true,\n    extendParents: true,\n    extendParentsOnAdd: true,\n    extendParentsOnMove: false,\n    getBoundingBox(cells) {\n        let result = null;\n        if (cells.length > 0) {\n            for (const cell of cells) {\n                if (cell.isVertex() || cell.isEdge()) {\n                    const bbox = this.getView().getBoundingBox(this.getView().getState(cell), true);\n                    if (bbox) {\n                        if (!result) {\n                            result = Rectangle.fromRectangle(bbox);\n                        }\n                        else {\n                            result.add(bbox);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    },\n    removeStateForCell(cell) {\n        for (const child of cell.getChildren()) {\n            this.removeStateForCell(child);\n        }\n        this.getView().invalidate(cell, false, true);\n        this.getView().removeState(cell);\n    },\n    /*****************************************************************************\n     * Group: Cell styles\n     *****************************************************************************/\n    getCurrentCellStyle(cell, ignoreState = false) {\n        const state = ignoreState ? null : this.getView().getState(cell);\n        return state ? state.style : this.getCellStyle(cell);\n    },\n    getCellStyle(cell) {\n        const cellStyle = cell.getStyle();\n        const stylesheet = this.getStylesheet();\n        // Gets the default style for the cell\n        const defaultStyle = cell.isEdge()\n            ? stylesheet.getDefaultEdgeStyle()\n            : stylesheet.getDefaultVertexStyle();\n        // Resolves the stylename using the above as the default\n        const style = this.postProcessCellStyle(stylesheet.getCellStyle(cellStyle, defaultStyle ?? {}));\n        return style;\n    },\n    postProcessCellStyle(style) {\n        if (!style.image) {\n            return style;\n        }\n        const key = style.image;\n        let image = this.getImageFromBundles(key);\n        if (image) {\n            style.image = image;\n        }\n        else {\n            image = key;\n        }\n        // Converts short data uris to normal data uris\n        if (image && image.substring(0, 11) === 'data:image/') {\n            if (image.substring(0, 20) === 'data:image/svg+xml,<') {\n                // Required for FF and IE11\n                image = image.substring(0, 19) + encodeURIComponent(image.substring(19));\n            }\n            else if (image.substring(0, 22) !== 'data:image/svg+xml,%3C') {\n                const comma = image.indexOf(',');\n                // Adds base64 encoding prefix if needed\n                if (comma > 0 && image.substring(comma - 7, comma + 1) !== ';base64,') {\n                    image = `${image.substring(0, comma)};base64,${image.substring(comma + 1)}`;\n                }\n            }\n            style.image = image;\n        }\n        return style;\n    },\n    setCellStyle(style, cells) {\n        cells = cells ?? this.getSelectionCells();\n        this.batchUpdate(() => {\n            for (const cell of cells) {\n                this.getDataModel().setStyle(cell, style);\n            }\n        });\n    },\n    toggleCellStyle(key, defaultValue = false, cell) {\n        cell = cell ?? this.getSelectionCell();\n        return this.toggleCellStyles(key, defaultValue, [cell]);\n    },\n    toggleCellStyles(key, defaultValue = false, cells) {\n        let value = false;\n        cells = cells ?? this.getSelectionCells();\n        if (cells.length > 0) {\n            const style = this.getCurrentCellStyle(cells[0]);\n            value = !(style[key] ?? defaultValue);\n            this.setCellStyles(key, value, cells);\n        }\n        return value;\n    },\n    setCellStyles(key, value, cells) {\n        cells = cells ?? this.getSelectionCells();\n        setCellStyles(this.getDataModel(), cells, key, value);\n    },\n    toggleCellStyleFlags(key, flag, cells) {\n        cells = cells ?? this.getSelectionCells();\n        this.setCellStyleFlags(key, flag, null, cells);\n    },\n    setCellStyleFlags(key, flag, value = null, cells) {\n        cells = cells ?? this.getSelectionCells();\n        if (cells.length > 0) {\n            if (value === null) {\n                const style = this.getCurrentCellStyle(cells[0]);\n                const current = style[key] || 0;\n                value = !((current & flag) === flag);\n            }\n            setCellStyleFlags(this.getDataModel(), cells, key, flag, value);\n        }\n    },\n    /*****************************************************************************\n     * Group: Cell alignment and orientation\n     *****************************************************************************/\n    alignCells(align, cells, param = null) {\n        cells = cells ?? this.getSelectionCells();\n        if (cells.length > 1) {\n            // Finds the required coordinate for the alignment\n            if (param === null) {\n                for (const cell of cells) {\n                    const state = this.getView().getState(cell);\n                    if (state && !cell.isEdge()) {\n                        if (param === null) {\n                            if (align === 'center') {\n                                param = state.x + state.width / 2;\n                                break;\n                            }\n                            else if (align === 'right') {\n                                param = state.x + state.width;\n                            }\n                            else if (align === 'top') {\n                                param = state.y;\n                            }\n                            else if (align === 'middle') {\n                                param = state.y + state.height / 2;\n                                break;\n                            }\n                            else if (align === 'bottom') {\n                                param = state.y + state.height;\n                            }\n                            else {\n                                param = state.x;\n                            }\n                        }\n                        else if (align === 'right') {\n                            param = Math.max(param, state.x + state.width);\n                        }\n                        else if (align === 'top') {\n                            param = Math.min(param, state.y);\n                        }\n                        else if (align === 'bottom') {\n                            param = Math.max(param, state.y + state.height);\n                        }\n                        else {\n                            param = Math.min(param, state.x);\n                        }\n                    }\n                }\n            }\n            // Aligns the cells to the coordinate\n            if (param !== null) {\n                const s = this.getView().scale;\n                this.batchUpdate(() => {\n                    const p = param;\n                    for (const cell of cells) {\n                        const state = this.getView().getState(cell);\n                        if (state != null) {\n                            let geo = cell.getGeometry();\n                            if (geo != null && !cell.isEdge()) {\n                                geo = geo.clone();\n                                if (align === 'center') {\n                                    geo.x += (p - state.x - state.width / 2) / s;\n                                }\n                                else if (align === 'right') {\n                                    geo.x += (p - state.x - state.width) / s;\n                                }\n                                else if (align === 'top') {\n                                    geo.y += (p - state.y) / s;\n                                }\n                                else if (align === 'middle') {\n                                    geo.y += (p - state.y - state.height / 2) / s;\n                                }\n                                else if (align === 'bottom') {\n                                    geo.y += (p - state.y - state.height) / s;\n                                }\n                                else {\n                                    geo.x += (p - state.x) / s;\n                                }\n                                this.resizeCell(cell, geo);\n                            }\n                        }\n                    }\n                    this.fireEvent(new EventObject(InternalEvent.ALIGN_CELLS, { align, cells }));\n                });\n            }\n        }\n        return cells;\n    },\n    /*****************************************************************************\n     * Group: Cell cloning, insertion and removal\n     *****************************************************************************/\n    cloneCell(cell, allowInvalidEdges = false, mapping = {}, keepPosition = false) {\n        return this.cloneCells([cell], allowInvalidEdges, mapping, keepPosition)[0];\n    },\n    cloneCells(cells, allowInvalidEdges = true, mapping = {}, keepPosition = false) {\n        let clones;\n        // Creates a dictionary for fast lookups\n        const dict = new Dictionary();\n        const tmp = [];\n        for (const cell of cells) {\n            dict.put(cell, true);\n            tmp.push(cell);\n        }\n        if (tmp.length > 0) {\n            const { scale } = this.getView();\n            const trans = this.getView().translate;\n            const out = [];\n            clones = cloneCells(cells, true, mapping);\n            for (let i = 0; i < cells.length; i += 1) {\n                const cell = cells[i];\n                const clone = clones[i];\n                if (!allowInvalidEdges &&\n                    clone.isEdge() &&\n                    this.getEdgeValidationError(clone, clone.getTerminal(true), clone.getTerminal(false)) !== null) {\n                    //clones[i] = null;\n                }\n                else {\n                    out.push(clone);\n                    const g = clone.getGeometry();\n                    if (g) {\n                        const state = this.getView().getState(cell);\n                        const parent = cell.getParent();\n                        const pstate = parent ? this.getView().getState(parent) : null;\n                        if (state && pstate) {\n                            const dx = keepPosition ? 0 : pstate.origin.x;\n                            const dy = keepPosition ? 0 : pstate.origin.y;\n                            if (clone.isEdge()) {\n                                const pts = state.absolutePoints;\n                                // Checks if the source is cloned or sets the terminal point\n                                let src = cell.getTerminal(true);\n                                while (src && !dict.get(src)) {\n                                    src = src.getParent();\n                                }\n                                if (!src && pts[0]) {\n                                    g.setTerminalPoint(new Point(pts[0].x / scale - trans.x, pts[0].y / scale - trans.y), true);\n                                }\n                                // Checks if the target is cloned or sets the terminal point\n                                let trg = cell.getTerminal(false);\n                                while (trg && !dict.get(trg)) {\n                                    trg = trg.getParent();\n                                }\n                                const n = pts.length - 1;\n                                const p = pts[n];\n                                if (!trg && p) {\n                                    g.setTerminalPoint(new Point(p.x / scale - trans.x, p.y / scale - trans.y), false);\n                                }\n                                // Translates the control points\n                                const { points } = g;\n                                if (points) {\n                                    for (const point of points) {\n                                        point.x += dx;\n                                        point.y += dy;\n                                    }\n                                }\n                            }\n                            else {\n                                g.translate(dx, dy);\n                            }\n                        }\n                    }\n                }\n            }\n            clones = out;\n        }\n        else {\n            clones = [];\n        }\n        return clones;\n    },\n    addCell(cell, parent = null, index = null, source = null, target = null) {\n        return this.addCells([cell], parent, index, source, target)[0];\n    },\n    addCells(cells, parent = null, index = null, source = null, target = null, absolute = false) {\n        const p = parent ?? this.getDefaultParent();\n        const i = index ?? p.getChildCount();\n        this.batchUpdate(() => {\n            this.cellsAdded(cells, p, i, source, target, absolute, true);\n            this.fireEvent(new EventObject(InternalEvent.ADD_CELLS, { cells, p, i, source, target }));\n        });\n        return cells;\n    },\n    cellsAdded(cells, parent, index, source = null, target = null, absolute = false, constrain = false, extend = true) {\n        this.batchUpdate(() => {\n            const parentState = absolute ? this.getView().getState(parent) : null;\n            const o1 = parentState ? parentState.origin : null;\n            const zero = new Point(0, 0);\n            cells.forEach((cell, i) => {\n                /* Can cells include null values?\n                if (cell == null) {\n                  index--;\n                } else {\n                */\n                const previous = cell.getParent();\n                // Keeps the cell at its absolute location\n                if (o1 && cell !== parent && parent !== previous) {\n                    const oldState = previous ? this.getView().getState(previous) : null;\n                    const o2 = oldState ? oldState.origin : zero;\n                    let geo = cell.getGeometry();\n                    if (geo) {\n                        const dx = o2.x - o1.x;\n                        const dy = o2.y - o1.y;\n                        // FIXME: Cells should always be inserted first before any other edit\n                        // to avoid forward references in sessions.\n                        geo = geo.clone();\n                        geo.translate(dx, dy);\n                        if (!geo.relative && cell.isVertex() && !this.isAllowNegativeCoordinates()) {\n                            geo.x = Math.max(0, geo.x);\n                            geo.y = Math.max(0, geo.y);\n                        }\n                        this.getDataModel().setGeometry(cell, geo);\n                    }\n                }\n                // Decrements all following indices\n                // if cell is already in parent\n                if (parent === previous && index + i > parent.getChildCount()) {\n                    index--;\n                }\n                this.getDataModel().add(parent, cell, index + i);\n                if (this.autoSizeCellsOnAdd) {\n                    this.autoSizeCell(cell, true);\n                }\n                // Extends the parent or constrains the child\n                if ((!extend || extend) &&\n                    this.isExtendParentsOnAdd(cell) &&\n                    this.isExtendParent(cell)) {\n                    this.extendParent(cell);\n                }\n                // Additionally constrains the child after extending the parent\n                if (!constrain || constrain) {\n                    this.constrainChild(cell);\n                }\n                // Sets the source terminal\n                if (source) {\n                    this.cellConnected(cell, source, true);\n                }\n                // Sets the target terminal\n                if (target) {\n                    this.cellConnected(cell, target, false);\n                }\n                /*}*/\n            });\n            this.fireEvent(new EventObject(InternalEvent.CELLS_ADDED, {\n                cells,\n                parent,\n                index,\n                source,\n                target,\n                absolute,\n            }));\n        });\n    },\n    autoSizeCell(cell, recurse = true) {\n        if (recurse) {\n            for (const child of cell.getChildren()) {\n                this.autoSizeCell(child);\n            }\n        }\n        if (cell.isVertex() && this.isAutoSizeCell(cell)) {\n            this.updateCellSize(cell);\n        }\n    },\n    removeCells(cells = null, includeEdges = true) {\n        if (!cells) {\n            cells = this.getDeletableCells(this.getSelectionCells());\n        }\n        // Adds all edges to the cells\n        if (includeEdges) {\n            // FIXME: Remove duplicate cells in result or do not add if\n            // in cells or descendant of cells\n            cells = this.getDeletableCells(this.addAllEdges(cells));\n        }\n        else {\n            cells = cells.slice();\n            // Removes edges that are currently not\n            // visible as those cannot be updated\n            const edges = this.getDeletableCells(this.getAllEdges(cells));\n            const dict = new Dictionary();\n            for (const cell of cells) {\n                dict.put(cell, true);\n            }\n            for (const edge of edges) {\n                if (!this.getView().getState(edge) && !dict.get(edge)) {\n                    dict.put(edge, true);\n                    cells.push(edge);\n                }\n            }\n        }\n        this.batchUpdate(() => {\n            this.cellsRemoved(cells);\n            this.fireEvent(new EventObject(InternalEvent.REMOVE_CELLS, { cells, includeEdges }));\n        });\n        return cells ?? [];\n    },\n    cellsRemoved(cells) {\n        if (cells.length > 0) {\n            const { scale } = this.getView();\n            const tr = this.getView().translate;\n            this.batchUpdate(() => {\n                // Creates hashtable for faster lookup\n                const dict = new Dictionary();\n                for (const cell of cells) {\n                    dict.put(cell, true);\n                }\n                for (const cell of cells) {\n                    // Disconnects edges which are not being removed\n                    const edges = this.getAllEdges([cell]);\n                    const disconnectTerminal = (edge, source) => {\n                        let geo = edge.getGeometry();\n                        if (geo) {\n                            // Checks if terminal is being removed\n                            const terminal = edge.getTerminal(source);\n                            let connected = false;\n                            let tmp = terminal;\n                            while (tmp) {\n                                if (cell === tmp) {\n                                    connected = true;\n                                    break;\n                                }\n                                tmp = tmp.getParent();\n                            }\n                            if (connected) {\n                                geo = geo.clone();\n                                const state = this.getView().getState(edge);\n                                if (state) {\n                                    const pts = state.absolutePoints;\n                                    const n = source ? 0 : pts.length - 1;\n                                    const p = pts[n];\n                                    geo.setTerminalPoint(new Point(p.x / scale - tr.x - state.origin.x, p.y / scale - tr.y - state.origin.y), source);\n                                }\n                                else if (terminal) {\n                                    // Fallback to center of terminal if routing\n                                    // points are not available to add new point\n                                    // KNOWN: Should recurse to find parent offset\n                                    // of edge for nested groups but invisible edges\n                                    // should be removed in removeCells step\n                                    const tstate = this.getView().getState(terminal);\n                                    if (tstate) {\n                                        geo.setTerminalPoint(new Point(tstate.getCenterX() / scale - tr.x, tstate.getCenterY() / scale - tr.y), source);\n                                    }\n                                }\n                                this.getDataModel().setGeometry(edge, geo);\n                                this.getDataModel().setTerminal(edge, null, source);\n                            }\n                        }\n                    };\n                    for (const edge of edges) {\n                        if (!dict.get(edge)) {\n                            dict.put(edge, true);\n                            disconnectTerminal(edge, true);\n                            disconnectTerminal(edge, false);\n                        }\n                    }\n                    this.getDataModel().remove(cell);\n                }\n                this.fireEvent(new EventObject(InternalEvent.CELLS_REMOVED, { cells }));\n            });\n        }\n    },\n    /*****************************************************************************\n     * Group: Cell visibility\n     *****************************************************************************/\n    toggleCells(show = false, cells, includeEdges = true) {\n        cells = cells ?? this.getSelectionCells();\n        // Adds all connected edges recursively\n        if (includeEdges) {\n            cells = this.addAllEdges(cells);\n        }\n        this.batchUpdate(() => {\n            this.cellsToggled(cells, show);\n            this.fireEvent(new EventObject(InternalEvent.TOGGLE_CELLS, { show, cells, includeEdges }));\n        });\n        return cells;\n    },\n    cellsToggled(cells, show = false) {\n        if (cells.length > 0) {\n            this.batchUpdate(() => {\n                for (const cell of cells) {\n                    this.getDataModel().setVisible(cell, show);\n                }\n            });\n        }\n    },\n    /*****************************************************************************\n     * Group: Cell sizing\n     *****************************************************************************/\n    updateCellSize(cell, ignoreChildren = false) {\n        this.batchUpdate(() => {\n            this.cellSizeUpdated(cell, ignoreChildren);\n            this.fireEvent(new EventObject(InternalEvent.UPDATE_CELL_SIZE, { cell, ignoreChildren }));\n        });\n        return cell;\n    },\n    cellSizeUpdated(cell, ignoreChildren = false) {\n        this.batchUpdate(() => {\n            const size = this.getPreferredSizeForCell(cell);\n            let geo = cell.getGeometry();\n            if (size && geo) {\n                const collapsed = cell.isCollapsed();\n                geo = geo.clone();\n                if (this.isSwimlane(cell)) {\n                    const style = this.getCellStyle(cell);\n                    const cellStyle = cell.getStyle();\n                    if (style.horizontal ?? true) {\n                        cellStyle.startSize = size.height + 8;\n                        if (collapsed) {\n                            geo.height = size.height + 8;\n                        }\n                        geo.width = size.width;\n                    }\n                    else {\n                        cellStyle.startSize = size.width + 8;\n                        if (collapsed) {\n                            geo.width = size.width + 8;\n                        }\n                        geo.height = size.height;\n                    }\n                    this.getDataModel().setStyle(cell, cellStyle);\n                }\n                else {\n                    const state = this.getView().createState(cell);\n                    const align = state.style.align ?? 'center';\n                    if (align === 'right') {\n                        geo.x += geo.width - size.width;\n                    }\n                    else if (align === 'center') {\n                        geo.x += Math.round((geo.width - size.width) / 2);\n                    }\n                    const valign = state.getVerticalAlign();\n                    if (valign === 'bottom') {\n                        geo.y += geo.height - size.height;\n                    }\n                    else if (valign === 'middle') {\n                        geo.y += Math.round((geo.height - size.height) / 2);\n                    }\n                    geo.width = size.width;\n                    geo.height = size.height;\n                }\n                if (!ignoreChildren && !collapsed) {\n                    const bounds = this.getView().getBounds(cell.getChildren());\n                    if (bounds != null) {\n                        const tr = this.getView().translate;\n                        const { scale } = this.getView();\n                        const width = (bounds.x + bounds.width) / scale - geo.x - tr.x;\n                        const height = (bounds.y + bounds.height) / scale - geo.y - tr.y;\n                        geo.width = Math.max(geo.width, width);\n                        geo.height = Math.max(geo.height, height);\n                    }\n                }\n                this.cellsResized([cell], [geo], false);\n            }\n        });\n    },\n    getPreferredSizeForCell(cell, textWidth = null) {\n        let result = null;\n        const state = this.getView().createState(cell);\n        const { style } = state;\n        if (!cell.isEdge()) {\n            const fontSize = style.fontSize || DEFAULT_FONTSIZE;\n            let dx = 0;\n            let dy = 0;\n            // Adds dimension of image if shape is a label\n            if (state.getImageSrc() || style.image) {\n                if (style.shape === 'label') {\n                    if (style.verticalAlign === 'middle') {\n                        dx += style.imageWidth || DEFAULT_IMAGESIZE;\n                    }\n                    if (style.align !== 'center') {\n                        dy += style.imageHeight || DEFAULT_IMAGESIZE;\n                    }\n                }\n            }\n            // Adds spacings\n            dx += 2 * (style.spacing || 0);\n            dx += style.spacingLeft || 0;\n            dx += style.spacingRight || 0;\n            dy += 2 * (style.spacing || 0);\n            dy += style.spacingTop || 0;\n            dy += style.spacingBottom || 0;\n            // Add spacing for collapse/expand icon\n            // LATER: Check alignment and use constants\n            // for image spacing\n            const image = this.getFoldingImage(state);\n            if (image) {\n                dx += image.width + 8;\n            }\n            // Adds space for label\n            let value = this.getCellRenderer().getLabelValue(state);\n            if (value && value.length > 0) {\n                if (!this.isHtmlLabel(state.cell)) {\n                    value = htmlEntities(value, false);\n                }\n                value = value.replace(/\\n/g, '<br>');\n                const size = getSizeForString(value, fontSize, style.fontFamily, textWidth, style.fontStyle);\n                let width = size.width + dx;\n                let height = size.height + dy;\n                if (!(style.horizontal ?? true)) {\n                    const tmp = height;\n                    height = width;\n                    width = tmp;\n                }\n                if (this.isGridEnabled()) {\n                    width = this.snap(width + this.getGridSize() / 2);\n                    height = this.snap(height + this.getGridSize() / 2);\n                }\n                result = new Rectangle(0, 0, width, height);\n            }\n            else {\n                const gs2 = 4 * this.getGridSize();\n                result = new Rectangle(0, 0, gs2, gs2);\n            }\n        }\n        return result;\n    },\n    resizeCell(cell, bounds, recurse = false) {\n        return this.resizeCells([cell], [bounds], recurse)[0];\n    },\n    resizeCells(cells, bounds, recurse) {\n        recurse = recurse ?? this.isRecursiveResize();\n        this.batchUpdate(() => {\n            const prev = this.cellsResized(cells, bounds, recurse);\n            this.fireEvent(new EventObject(InternalEvent.RESIZE_CELLS, { cells, bounds, prev }));\n        });\n        return cells;\n    },\n    cellsResized(cells, bounds, recurse = false) {\n        const prev = [];\n        if (cells.length === bounds.length) {\n            this.batchUpdate(() => {\n                cells.forEach((cell, i) => {\n                    prev.push(this.cellResized(cell, bounds[i], false, recurse));\n                    if (this.isExtendParent(cell)) {\n                        this.extendParent(cell);\n                    }\n                    this.constrainChild(cell);\n                });\n                if (this.isResetEdgesOnResize()) {\n                    this.resetEdges(cells);\n                }\n                this.fireEvent(new EventObject(InternalEvent.CELLS_RESIZED, { cells, bounds, prev }));\n            });\n        }\n        return prev;\n    },\n    cellResized(cell, bounds, ignoreRelative = false, recurse = false) {\n        const prev = cell.getGeometry();\n        if (prev &&\n            (prev.x !== bounds.x ||\n                prev.y !== bounds.y ||\n                prev.width !== bounds.width ||\n                prev.height !== bounds.height)) {\n            const geo = prev.clone();\n            if (!ignoreRelative && geo.relative) {\n                const { offset } = geo;\n                if (offset) {\n                    offset.x += bounds.x - geo.x;\n                    offset.y += bounds.y - geo.y;\n                }\n            }\n            else {\n                geo.x = bounds.x;\n                geo.y = bounds.y;\n            }\n            geo.width = bounds.width;\n            geo.height = bounds.height;\n            if (!geo.relative && cell.isVertex() && !this.isAllowNegativeCoordinates()) {\n                geo.x = Math.max(0, geo.x);\n                geo.y = Math.max(0, geo.y);\n            }\n            this.batchUpdate(() => {\n                if (recurse) {\n                    this.resizeChildCells(cell, geo);\n                }\n                this.getDataModel().setGeometry(cell, geo);\n                this.constrainChildCells(cell);\n            });\n        }\n        return prev;\n    },\n    resizeChildCells(cell, newGeo) {\n        const geo = cell.getGeometry();\n        if (geo) {\n            const dx = geo.width !== 0 ? newGeo.width / geo.width : 1;\n            const dy = geo.height !== 0 ? newGeo.height / geo.height : 1;\n            for (const child of cell.getChildren()) {\n                this.scaleCell(child, dx, dy, true);\n            }\n        }\n    },\n    constrainChildCells(cell) {\n        for (const child of cell.getChildren()) {\n            this.constrainChild(child);\n        }\n    },\n    scaleCell(cell, dx, dy, recurse = false) {\n        let geo = cell.getGeometry();\n        if (geo) {\n            const style = this.getCurrentCellStyle(cell);\n            geo = geo.clone();\n            // Stores values for restoring based on style\n            const { x } = geo;\n            const { y } = geo;\n            const w = geo.width;\n            const h = geo.height;\n            geo.scale(dx, dy, style.aspect === 'fixed');\n            if (style.resizeWidth) {\n                geo.width = w * dx;\n            }\n            else if (!style.resizeWidth) {\n                geo.width = w;\n            }\n            if (style.resizeHeight) {\n                geo.height = h * dy;\n            }\n            else if (!style.resizeHeight) {\n                geo.height = h;\n            }\n            if (!this.isCellMovable(cell)) {\n                geo.x = x;\n                geo.y = y;\n            }\n            if (!this.isCellResizable(cell)) {\n                geo.width = w;\n                geo.height = h;\n            }\n            if (cell.isVertex()) {\n                this.cellResized(cell, geo, true, recurse);\n            }\n            else {\n                this.getDataModel().setGeometry(cell, geo);\n            }\n        }\n    },\n    extendParent(cell) {\n        const parent = cell.getParent();\n        let p = parent ? parent.getGeometry() : null;\n        if (parent && p && !parent.isCollapsed()) {\n            const geo = cell.getGeometry();\n            if (geo &&\n                !geo.relative &&\n                (p.width < geo.x + geo.width || p.height < geo.y + geo.height)) {\n                p = p.clone();\n                p.width = Math.max(p.width, geo.x + geo.width);\n                p.height = Math.max(p.height, geo.y + geo.height);\n                this.cellsResized([parent], [p], false);\n            }\n        }\n    },\n    // *************************************************************************************\n    // Group: Cell moving\n    // *************************************************************************************\n    importCells(cells, dx, dy, target = null, evt = null, mapping = {}) {\n        return this.moveCells(cells, dx, dy, true, target, evt, mapping);\n    },\n    moveCells(cells, dx = 0, dy = 0, clone = false, target = null, evt = null, mapping = {}) {\n        if (dx !== 0 || dy !== 0 || clone || target) {\n            // Removes descendants with ancestors in cells to avoid multiple moving\n            cells = getTopmostCells(cells);\n            const origCells = cells;\n            this.batchUpdate(() => {\n                // Faster cell lookups to remove relative edge labels with selected\n                // terminals to avoid explicit and implicit move at same time\n                const dict = new Dictionary();\n                for (const cell of cells) {\n                    dict.put(cell, true);\n                }\n                const isSelected = (cell) => {\n                    while (cell) {\n                        if (dict.get(cell)) {\n                            return true;\n                        }\n                        cell = cell.getParent();\n                    }\n                    return false;\n                };\n                // Removes relative edge labels with selected terminals\n                const checked = [];\n                for (const cell of cells) {\n                    const geo = cell.getGeometry();\n                    const parent = cell.getParent();\n                    if (!geo ||\n                        !geo.relative ||\n                        (parent && !parent.isEdge()) ||\n                        (parent &&\n                            !isSelected(parent.getTerminal(true)) &&\n                            !isSelected(parent.getTerminal(false)))) {\n                        checked.push(cell);\n                    }\n                }\n                cells = checked;\n                if (clone) {\n                    cells = this.cloneCells(cells, this.isCloneInvalidEdges(), mapping);\n                    if (!target) {\n                        target = this.getDefaultParent();\n                    }\n                }\n                // FIXME: Cells should always be inserted first before any other edit\n                // to avoid forward references in sessions.\n                // Need to disable allowNegativeCoordinates if target not null to\n                // allow for temporary negative numbers until cellsAdded is called.\n                const previous = this.isAllowNegativeCoordinates();\n                if (target) {\n                    this.setAllowNegativeCoordinates(true);\n                }\n                this.cellsMoved(cells, dx, dy, !clone && this.isDisconnectOnMove() && this.isAllowDanglingEdges(), !target, this.isExtendParentsOnMove() && !target);\n                this.setAllowNegativeCoordinates(previous);\n                if (target) {\n                    const index = target.getChildCount();\n                    this.cellsAdded(cells, target, index, null, null, true);\n                    // Restores parent edge on cloned edge labels\n                    if (clone) {\n                        cells.forEach((cell, i) => {\n                            const geo = cell.getGeometry();\n                            const parent = origCells[i].getParent();\n                            if (geo &&\n                                geo.relative &&\n                                parent &&\n                                parent.isEdge() &&\n                                this.getDataModel().contains(parent)) {\n                                this.getDataModel().add(parent, cell);\n                            }\n                        });\n                    }\n                }\n                // Dispatches a move event\n                this.fireEvent(new EventObject(InternalEvent.MOVE_CELLS, {\n                    cells,\n                    dx,\n                    dy,\n                    clone,\n                    target,\n                    event: evt,\n                }));\n            });\n        }\n        return cells;\n    },\n    cellsMoved(cells, dx, dy, disconnect = false, constrain = false, extend = false) {\n        if (dx !== 0 || dy !== 0) {\n            this.batchUpdate(() => {\n                if (disconnect) {\n                    this.disconnectGraph(cells);\n                }\n                for (const cell of cells) {\n                    this.translateCell(cell, dx, dy);\n                    if (extend && this.isExtendParent(cell)) {\n                        this.extendParent(cell);\n                    }\n                    else if (constrain) {\n                        this.constrainChild(cell);\n                    }\n                }\n                if (this.isResetEdgesOnMove()) {\n                    this.resetEdges(cells);\n                }\n                this.fireEvent(new EventObject(InternalEvent.CELLS_MOVED, { cells, dx, dy, disconnect }));\n            });\n        }\n    },\n    translateCell(cell, dx, dy) {\n        let geometry = cell.getGeometry();\n        if (geometry) {\n            geometry = geometry.clone();\n            geometry.translate(dx, dy);\n            if (!geometry.relative && cell.isVertex() && !this.isAllowNegativeCoordinates()) {\n                geometry.x = Math.max(0, geometry.x);\n                geometry.y = Math.max(0, geometry.y);\n            }\n            if (geometry.relative && !cell.isEdge()) {\n                const parent = cell.getParent();\n                let angle = 0;\n                if (parent.isVertex()) {\n                    const style = this.getCurrentCellStyle(parent);\n                    angle = style.rotation ?? 0;\n                }\n                if (angle !== 0) {\n                    const rad = toRadians(-angle);\n                    const cos = Math.cos(rad);\n                    const sin = Math.sin(rad);\n                    const pt = getRotatedPoint(new Point(dx, dy), cos, sin, new Point(0, 0));\n                    dx = pt.x;\n                    dy = pt.y;\n                }\n                if (!geometry.offset) {\n                    geometry.offset = new Point(dx, dy);\n                }\n                else {\n                    geometry.offset.x = geometry.offset.x + dx;\n                    geometry.offset.y = geometry.offset.y + dy;\n                }\n            }\n            this.getDataModel().setGeometry(cell, geometry);\n        }\n    },\n    getCellContainmentArea(cell) {\n        if (!cell.isEdge()) {\n            const parent = cell.getParent();\n            if (parent && parent !== this.getDefaultParent()) {\n                const g = parent.getGeometry();\n                if (g) {\n                    let x = 0;\n                    let y = 0;\n                    let w = g.width;\n                    let h = g.height;\n                    if (this.isSwimlane(parent)) {\n                        const size = this.getStartSize(parent);\n                        const style = this.getCurrentCellStyle(parent);\n                        const dir = style.direction ?? 'east';\n                        const flipH = style.flipH ?? false;\n                        const flipV = style.flipV ?? false;\n                        if (dir === 'south' || dir === 'north') {\n                            const tmp = size.width;\n                            size.width = size.height;\n                            size.height = tmp;\n                        }\n                        if ((dir === 'east' && !flipV) ||\n                            (dir === 'north' && !flipH) ||\n                            (dir === 'west' && flipV) ||\n                            (dir === 'south' && flipH)) {\n                            x = size.width;\n                            y = size.height;\n                        }\n                        w -= size.width;\n                        h -= size.height;\n                    }\n                    return new Rectangle(x, y, w, h);\n                }\n            }\n        }\n        return null;\n    },\n    constrainChild(cell, sizeFirst = true) {\n        let geo = cell.getGeometry();\n        if (geo && (this.isConstrainRelativeChildren() || !geo.relative)) {\n            const parent = cell.getParent();\n            let max = this.getMaximumGraphBounds();\n            // Finds parent offset\n            if (max && parent) {\n                const off = this.getBoundingBoxFromGeometry([parent], false);\n                if (off) {\n                    max = Rectangle.fromRectangle(max);\n                    max.x -= off.x;\n                    max.y -= off.y;\n                }\n            }\n            if (this.isConstrainChild(cell)) {\n                let tmp = this.getCellContainmentArea(cell);\n                if (tmp) {\n                    const overlap = this.getOverlap(cell);\n                    if (overlap > 0) {\n                        tmp = Rectangle.fromRectangle(tmp);\n                        tmp.x -= tmp.width * overlap;\n                        tmp.y -= tmp.height * overlap;\n                        tmp.width += 2 * tmp.width * overlap;\n                        tmp.height += 2 * tmp.height * overlap;\n                    }\n                    // Find the intersection between max and tmp\n                    if (!max) {\n                        max = tmp;\n                    }\n                    else {\n                        max = Rectangle.fromRectangle(max);\n                        max.intersect(tmp);\n                    }\n                }\n            }\n            if (max) {\n                const cells = [cell];\n                if (!cell.isCollapsed()) {\n                    const desc = cell.getDescendants();\n                    for (const descItem of desc) {\n                        if (descItem.isVisible()) {\n                            cells.push(descItem);\n                        }\n                    }\n                }\n                const bbox = this.getBoundingBoxFromGeometry(cells, false);\n                if (bbox) {\n                    geo = geo.clone();\n                    // Cumulative horizontal movement\n                    let dx = 0;\n                    if (geo.width > max.width) {\n                        dx = geo.width - max.width;\n                        geo.width -= dx;\n                    }\n                    if (bbox.x + bbox.width > max.x + max.width) {\n                        dx -= bbox.x + bbox.width - max.x - max.width - dx;\n                    }\n                    // Cumulative vertical movement\n                    let dy = 0;\n                    if (geo.height > max.height) {\n                        dy = geo.height - max.height;\n                        geo.height -= dy;\n                    }\n                    if (bbox.y + bbox.height > max.y + max.height) {\n                        dy -= bbox.y + bbox.height - max.y - max.height - dy;\n                    }\n                    if (bbox.x < max.x) {\n                        dx -= bbox.x - max.x;\n                    }\n                    if (bbox.y < max.y) {\n                        dy -= bbox.y - max.y;\n                    }\n                    if (dx !== 0 || dy !== 0) {\n                        if (geo.relative) {\n                            // Relative geometries are moved via absolute offset\n                            if (!geo.offset) {\n                                geo.offset = new Point();\n                            }\n                            geo.offset.x += dx;\n                            geo.offset.y += dy;\n                        }\n                        else {\n                            geo.x += dx;\n                            geo.y += dy;\n                        }\n                    }\n                    this.getDataModel().setGeometry(cell, geo);\n                }\n            }\n        }\n    },\n    /*****************************************************************************\n     * Group: Cell retrieval\n     *****************************************************************************/\n    getChildCells(parent, vertices = false, edges = false) {\n        parent = parent ?? this.getDefaultParent();\n        const cells = parent.getChildCells(vertices, edges);\n        const result = [];\n        // Filters out the non-visible child cells\n        for (const cell of cells) {\n            if (cell.isVisible()) {\n                result.push(cell);\n            }\n        }\n        return result;\n    },\n    getCellAt(x, y, parent = null, vertices = true, edges = true, ignoreFn = null) {\n        if (!parent) {\n            parent = this.getCurrentRoot();\n            if (!parent) {\n                parent = this.getDataModel().getRoot();\n            }\n        }\n        if (parent) {\n            const childCount = parent.getChildCount();\n            for (let i = childCount - 1; i >= 0; i--) {\n                const cell = parent.getChildAt(i);\n                const result = this.getCellAt(x, y, cell, vertices, edges, ignoreFn);\n                if (result) {\n                    return result;\n                }\n                if (cell.isVisible() &&\n                    ((edges && cell.isEdge()) || (vertices && cell.isVertex()))) {\n                    const state = this.getView().getState(cell);\n                    if (state &&\n                        (!ignoreFn || !ignoreFn(state, x, y)) &&\n                        this.intersects(state, x, y)) {\n                        return cell;\n                    }\n                }\n            }\n        }\n        return null;\n    },\n    getCells(x, y, width, height, parent = null, result = [], intersection = null, ignoreFn = null, includeDescendants = false) {\n        if (width > 0 || height > 0 || intersection) {\n            const model = this.getDataModel();\n            const right = x + width;\n            const bottom = y + height;\n            if (!parent) {\n                parent = this.getCurrentRoot();\n                if (!parent) {\n                    parent = model.getRoot();\n                }\n            }\n            if (parent) {\n                for (const cell of parent.getChildren()) {\n                    const state = this.getView().getState(cell);\n                    if (state && cell.isVisible() && (!ignoreFn || !ignoreFn(state))) {\n                        const deg = state.style.rotation ?? 0;\n                        let box = state; // TODO: CHECK ME!!!! ==========================================================\n                        if (deg !== 0) {\n                            box = getBoundingBox(box, deg);\n                        }\n                        const hit = (intersection && cell.isVertex() && intersects(intersection, box)) ||\n                            (!intersection &&\n                                (cell.isEdge() || cell.isVertex()) &&\n                                box.x >= x &&\n                                box.y + box.height <= bottom &&\n                                box.y >= y &&\n                                box.x + box.width <= right);\n                        if (hit) {\n                            result.push(cell);\n                        }\n                        if (!hit || includeDescendants) {\n                            this.getCells(x, y, width, height, cell, result, intersection, ignoreFn, includeDescendants);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    },\n    getCellsBeyond(x0, y0, parent = null, rightHalfpane = false, bottomHalfpane = false) {\n        const result = [];\n        if (rightHalfpane || bottomHalfpane) {\n            if (!parent) {\n                parent = this.getDefaultParent();\n            }\n            if (parent) {\n                for (const child of parent.getChildren()) {\n                    const state = this.getView().getState(child);\n                    if (child.isVisible() && state) {\n                        if ((!rightHalfpane || state.x >= x0) && (!bottomHalfpane || state.y >= y0)) {\n                            result.push(child);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    },\n    intersects(state, x, y) {\n        const pts = state.absolutePoints;\n        if (pts.length > 0) {\n            const t2 = this.getEventTolerance() * this.getEventTolerance();\n            let pt = pts[0];\n            for (let i = 1; i < pts.length; i += 1) {\n                const next = pts[i];\n                if (pt && next) {\n                    const dist = ptSegDistSq(pt.x, pt.y, next.x, next.y, x, y);\n                    if (dist <= t2) {\n                        return true;\n                    }\n                }\n                pt = next;\n            }\n        }\n        else {\n            const alpha = toRadians(state.style.rotation ?? 0);\n            if (alpha !== 0) {\n                const cos = Math.cos(-alpha);\n                const sin = Math.sin(-alpha);\n                const cx = new Point(state.getCenterX(), state.getCenterY());\n                const pt = getRotatedPoint(new Point(x, y), cos, sin, cx);\n                x = pt.x;\n                y = pt.y;\n            }\n            if (contains(state, x, y)) {\n                return true;\n            }\n        }\n        return false;\n    },\n    isValidAncestor(cell, parent, recurse = false) {\n        return recurse ? parent.isAncestor(cell) : cell?.getParent() === parent;\n    },\n    /*****************************************************************************\n     * Group: Graph behaviour\n     *****************************************************************************/\n    isCellLocked(cell) {\n        const geometry = cell.getGeometry();\n        return this.isCellsLocked() || (!!geometry && cell.isVertex() && geometry.relative);\n    },\n    isCellsLocked() {\n        return this.cellsLocked;\n    },\n    setCellsLocked(value) {\n        this.cellsLocked = value;\n    },\n    getCloneableCells(cells) {\n        return this.getDataModel().filterCells(cells, (cell) => {\n            return this.isCellCloneable(cell);\n        });\n    },\n    isCellCloneable(cell) {\n        return this.isCellsCloneable() && (this.getCurrentCellStyle(cell).cloneable ?? true);\n    },\n    isCellsCloneable() {\n        return this.cellsCloneable;\n    },\n    setCellsCloneable(value) {\n        this.cellsCloneable = value;\n    },\n    getExportableCells(cells) {\n        return this.getDataModel().filterCells(cells, (cell) => {\n            return this.canExportCell(cell);\n        });\n    },\n    canExportCell(_cell = null) {\n        return this.isExportEnabled();\n    },\n    getImportableCells(cells) {\n        return this.getDataModel().filterCells(cells, (cell) => {\n            return this.canImportCell(cell);\n        });\n    },\n    canImportCell(cell = null) {\n        return this.isImportEnabled();\n    },\n    isCellSelectable(_cell) {\n        return this.isCellsSelectable();\n    },\n    isCellsSelectable() {\n        return this.cellsSelectable;\n    },\n    setCellsSelectable(value) {\n        this.cellsSelectable = value;\n    },\n    getDeletableCells(cells) {\n        return this.getDataModel().filterCells(cells, (cell) => {\n            return this.isCellDeletable(cell);\n        });\n    },\n    isCellDeletable(cell) {\n        return this.isCellsDeletable() && (this.getCurrentCellStyle(cell).deletable ?? true);\n    },\n    isCellsDeletable() {\n        return this.cellsDeletable;\n    },\n    setCellsDeletable(value) {\n        this.cellsDeletable = value;\n    },\n    isCellRotatable(cell) {\n        return this.getCurrentCellStyle(cell).rotatable ?? true;\n    },\n    getMovableCells(cells) {\n        return this.getDataModel().filterCells(cells, (cell) => {\n            return this.isCellMovable(cell);\n        });\n    },\n    isCellMovable(cell) {\n        return (this.isCellsMovable() &&\n            !this.isCellLocked(cell) &&\n            (this.getCurrentCellStyle(cell).movable ?? true));\n    },\n    isCellsMovable() {\n        return this.cellsMovable;\n    },\n    setCellsMovable(value) {\n        this.cellsMovable = value;\n    },\n    isCellResizable(cell) {\n        return (this.isCellsResizable() &&\n            !this.isCellLocked(cell) &&\n            (this.getCurrentCellStyle(cell).resizable ?? true));\n    },\n    isCellsResizable() {\n        return this.cellsResizable;\n    },\n    setCellsResizable(value) {\n        this.cellsResizable = value;\n    },\n    isCellBendable(cell) {\n        return (this.isCellsBendable() &&\n            !this.isCellLocked(cell) &&\n            (this.getCurrentCellStyle(cell).bendable ?? true));\n    },\n    isCellsBendable() {\n        return this.cellsBendable;\n    },\n    setCellsBendable(value) {\n        this.cellsBendable = value;\n    },\n    isAutoSizeCell(cell) {\n        return this.isAutoSizeCells() || (this.getCurrentCellStyle(cell).autoSize ?? false);\n    },\n    isAutoSizeCells() {\n        return this.autoSizeCells;\n    },\n    setAutoSizeCells(value) {\n        this.autoSizeCells = value;\n    },\n    isExtendParent(cell) {\n        return !cell.isEdge() && this.isExtendParents();\n    },\n    isExtendParents() {\n        return this.extendParents;\n    },\n    setExtendParents(value) {\n        this.extendParents = value;\n    },\n    isExtendParentsOnAdd(cell) {\n        return this.extendParentsOnAdd;\n    },\n    setExtendParentsOnAdd(value) {\n        this.extendParentsOnAdd = value;\n    },\n    isExtendParentsOnMove() {\n        return this.extendParentsOnMove;\n    },\n    setExtendParentsOnMove(value) {\n        this.extendParentsOnMove = value;\n    },\n    /*****************************************************************************\n     * Group: Graph appearance\n     *****************************************************************************/\n    getCursorForCell(_cell) {\n        return null;\n    },\n    /*****************************************************************************\n     * Group: Graph display\n     *****************************************************************************/\n    getCellBounds(cell, includeEdges = false, includeDescendants = false) {\n        let cells = [cell];\n        // Includes all connected edges\n        if (includeEdges) {\n            cells = cells.concat(cell.getEdges());\n        }\n        let result = this.getView().getBounds(cells);\n        // Recursively includes the bounds of the children\n        if (includeDescendants) {\n            for (const child of cell.getChildren()) {\n                const tmp = this.getCellBounds(child, includeEdges, true);\n                if (result && tmp) {\n                    result.add(tmp);\n                }\n                else {\n                    result = tmp;\n                }\n            }\n        }\n        return result;\n    },\n    getBoundingBoxFromGeometry(cells, includeEdges = false) {\n        let result = null;\n        let tmp = null;\n        for (const cell of cells) {\n            if (includeEdges || cell.isVertex()) {\n                // Computes the bounding box for the points in the geometry\n                const geo = cell.getGeometry();\n                if (geo) {\n                    let bbox = null;\n                    if (cell.isEdge()) {\n                        const addPoint = (pt) => {\n                            if (pt) {\n                                if (!tmp) {\n                                    tmp = new Rectangle(pt.x, pt.y, 0, 0);\n                                }\n                                else {\n                                    tmp.add(new Rectangle(pt.x, pt.y, 0, 0));\n                                }\n                            }\n                        };\n                        if (!cell.getTerminal(true)) {\n                            addPoint(geo.getTerminalPoint(true));\n                        }\n                        if (!cell.getTerminal(false)) {\n                            addPoint(geo.getTerminalPoint(false));\n                        }\n                        const pts = geo.points;\n                        if (pts && pts.length > 0) {\n                            tmp = new Rectangle(pts[0].x, pts[0].y, 0, 0);\n                            for (let j = 1; j < pts.length; j++) {\n                                addPoint(pts[j]);\n                            }\n                        }\n                        bbox = tmp;\n                    }\n                    else {\n                        const parent = cell.getParent();\n                        if (geo.relative && parent) {\n                            if (parent.isVertex() && parent !== this.getView().currentRoot) {\n                                tmp = this.getBoundingBoxFromGeometry([parent], false);\n                                if (tmp) {\n                                    bbox = new Rectangle(geo.x * tmp.width, geo.y * tmp.height, geo.width, geo.height);\n                                    if (cells.indexOf(parent) >= 0) {\n                                        bbox.x += tmp.x;\n                                        bbox.y += tmp.y;\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            bbox = Rectangle.fromRectangle(geo);\n                            if (parent && parent.isVertex() && cells.indexOf(parent) >= 0) {\n                                tmp = this.getBoundingBoxFromGeometry([parent], false);\n                                if (tmp) {\n                                    bbox.x += tmp.x;\n                                    bbox.y += tmp.y;\n                                }\n                            }\n                        }\n                        if (bbox && geo.offset) {\n                            bbox.x += geo.offset.x;\n                            bbox.y += geo.offset.y;\n                        }\n                        const style = this.getCurrentCellStyle(cell);\n                        if (bbox) {\n                            const angle = style.rotation ?? 0;\n                            if (angle !== 0) {\n                                bbox = getBoundingBox(bbox, angle);\n                            }\n                        }\n                    }\n                    if (bbox) {\n                        if (!result) {\n                            result = Rectangle.fromRectangle(bbox);\n                        }\n                        else {\n                            result.add(bbox);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport ConnectionConstraint from '../other/ConnectionConstraint';\nimport { getRotatedPoint, toRadians } from '../../util/mathUtils';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport Dictionary from '../../util/Dictionary';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const ConnectionsMixin = {\n    /*****************************************************************************\n     * Group: Cell connecting and connection constraints\n     *****************************************************************************/\n    constrainChildren: true,\n    constrainRelativeChildren: false,\n    disconnectOnMove: true,\n    cellsDisconnectable: true,\n    getOutlineConstraint(point, terminalState, me) {\n        if (terminalState.shape) {\n            const bounds = this.getView().getPerimeterBounds(terminalState);\n            const direction = terminalState.style.direction;\n            if (direction === 'north' || direction === 'south') {\n                bounds.x += bounds.width / 2 - bounds.height / 2;\n                bounds.y += bounds.height / 2 - bounds.width / 2;\n                const tmp = bounds.width;\n                bounds.width = bounds.height;\n                bounds.height = tmp;\n            }\n            const alpha = toRadians(terminalState.shape.getShapeRotation());\n            if (alpha !== 0) {\n                const cos = Math.cos(-alpha);\n                const sin = Math.sin(-alpha);\n                const ct = new Point(bounds.getCenterX(), bounds.getCenterY());\n                point = getRotatedPoint(point, cos, sin, ct);\n            }\n            let sx = 1;\n            let sy = 1;\n            let dx = 0;\n            let dy = 0;\n            // LATER: Add flipping support for image shapes\n            if (terminalState.cell.isVertex()) {\n                let flipH = terminalState.style.flipH;\n                let flipV = terminalState.style.flipV;\n                if (direction === 'north' || direction === 'south') {\n                    const tmp = flipH;\n                    flipH = flipV;\n                    flipV = tmp;\n                }\n                if (flipH) {\n                    sx = -1;\n                    dx = -bounds.width;\n                }\n                if (flipV) {\n                    sy = -1;\n                    dy = -bounds.height;\n                }\n            }\n            point = new Point((point.x - bounds.x) * sx - dx + bounds.x, (point.y - bounds.y) * sy - dy + bounds.y);\n            const x = bounds.width === 0\n                ? 0\n                : Math.round(((point.x - bounds.x) * 1000) / bounds.width) / 1000;\n            const y = bounds.height === 0\n                ? 0\n                : Math.round(((point.y - bounds.y) * 1000) / bounds.height) / 1000;\n            return new ConnectionConstraint(new Point(x, y), false);\n        }\n        return null;\n    },\n    getAllConnectionConstraints(terminal, source) {\n        return terminal?.shape?.stencil?.constraints ?? null;\n    },\n    getConnectionConstraint(edge, terminal, source = false) {\n        let point = null;\n        const x = edge.style[source ? 'exitX' : 'entryX'];\n        if (x !== undefined) {\n            const y = edge.style[source ? 'exitY' : 'entryY'];\n            if (y !== undefined) {\n                point = new Point(x, y);\n            }\n        }\n        let perimeter = false;\n        let dx = 0;\n        let dy = 0;\n        if (point) {\n            perimeter = edge.style[source ? 'exitPerimeter' : 'entryPerimeter'] || false;\n            // Add entry/exit offset\n            dx = edge.style[source ? 'exitDx' : 'entryDx'];\n            dy = edge.style[source ? 'exitDy' : 'entryDy'];\n            dx = Number.isFinite(dx) ? dx : 0;\n            dy = Number.isFinite(dy) ? dy : 0;\n        }\n        return new ConnectionConstraint(point, perimeter, null, dx, dy);\n    },\n    setConnectionConstraint(edge, terminal, source = false, constraint = null) {\n        if (constraint) {\n            this.batchUpdate(() => {\n                if (!constraint || !constraint.point) {\n                    this.setCellStyles(source ? 'exitX' : 'entryX', null, [edge]);\n                    this.setCellStyles(source ? 'exitY' : 'entryY', null, [edge]);\n                    this.setCellStyles(source ? 'exitDx' : 'entryDx', null, [edge]);\n                    this.setCellStyles(source ? 'exitDy' : 'entryDy', null, [edge]);\n                    this.setCellStyles(source ? 'exitPerimeter' : 'entryPerimeter', null, [edge]);\n                }\n                else if (constraint.point) {\n                    this.setCellStyles(source ? 'exitX' : 'entryX', constraint.point.x, [edge]);\n                    this.setCellStyles(source ? 'exitY' : 'entryY', constraint.point.y, [edge]);\n                    this.setCellStyles(source ? 'exitDx' : 'entryDx', constraint.dx, [edge]);\n                    this.setCellStyles(source ? 'exitDy' : 'entryDy', constraint.dy, [edge]);\n                    // Only writes 0 since 1 is default\n                    if (!constraint.perimeter) {\n                        this.setCellStyles(source ? 'exitPerimeter' : 'entryPerimeter', '0', [edge]);\n                    }\n                    else {\n                        this.setCellStyles(source ? 'exitPerimeter' : 'entryPerimeter', null, [edge]);\n                    }\n                }\n            });\n        }\n    },\n    getConnectionPoint(vertex, constraint, round = true) {\n        let point = null;\n        if (constraint.point) {\n            const bounds = this.getView().getPerimeterBounds(vertex);\n            const cx = new Point(bounds.getCenterX(), bounds.getCenterY());\n            const direction = vertex.style.direction;\n            let r1 = 0;\n            // Bounds need to be rotated by 90 degrees for further computation\n            if (vertex.style.anchorPointDirection) {\n                if (direction === 'north') {\n                    r1 += 270;\n                }\n                else if (direction === 'west') {\n                    r1 += 180;\n                }\n                else if (direction === 'south') {\n                    r1 += 90;\n                }\n                // Bounds need to be rotated by 90 degrees for further computation\n                if (direction === 'north' || direction === 'south') {\n                    bounds.rotate90();\n                }\n            }\n            const { scale } = this.getView();\n            point = new Point(bounds.x + constraint.point.x * bounds.width + constraint.dx * scale, bounds.y + constraint.point.y * bounds.height + constraint.dy * scale);\n            // Rotation for direction before projection on perimeter\n            let r2 = vertex.style.rotation || 0;\n            if (constraint.perimeter) {\n                if (r1 !== 0) {\n                    // Only 90 degrees steps possible here so no trig needed\n                    let cos = 0;\n                    let sin = 0;\n                    if (r1 === 90) {\n                        sin = 1;\n                    }\n                    else if (r1 === 180) {\n                        cos = -1;\n                    }\n                    else if (r1 === 270) {\n                        sin = -1;\n                    }\n                    point = getRotatedPoint(point, cos, sin, cx);\n                }\n                point = this.getView().getPerimeterPoint(vertex, point, false);\n            }\n            else {\n                r2 += r1;\n                if (vertex.cell.isVertex()) {\n                    let flipH = vertex.style.flipH;\n                    let flipV = vertex.style.flipV;\n                    if (direction === 'north' || direction === 'south') {\n                        const temp = flipH;\n                        flipH = flipV;\n                        flipV = temp;\n                    }\n                    if (flipH) {\n                        point.x = 2 * bounds.getCenterX() - point.x;\n                    }\n                    if (flipV) {\n                        point.y = 2 * bounds.getCenterY() - point.y;\n                    }\n                }\n            }\n            // Generic rotation after projection on perimeter\n            if (r2 !== 0 && point) {\n                const rad = toRadians(r2);\n                const cos = Math.cos(rad);\n                const sin = Math.sin(rad);\n                point = getRotatedPoint(point, cos, sin, cx);\n            }\n        }\n        if (round && point) {\n            point.x = Math.round(point.x);\n            point.y = Math.round(point.y);\n        }\n        return point;\n    },\n    connectCell(edge, terminal = null, source = false, constraint = null) {\n        this.batchUpdate(() => {\n            const previous = edge.getTerminal(source);\n            this.cellConnected(edge, terminal, source, constraint);\n            this.fireEvent(new EventObject(InternalEvent.CONNECT_CELL, 'edge', edge, 'terminal', terminal, 'source', source, 'previous', previous));\n        });\n        return edge;\n    },\n    cellConnected(edge, terminal, source = false, constraint = null) {\n        this.batchUpdate(() => {\n            const previous = edge.getTerminal(source);\n            // Updates the constraint\n            this.setConnectionConstraint(edge, terminal, source, constraint);\n            // Checks if the new terminal is a port, uses the ID of the port in the\n            // style and the parent of the port as the actual terminal of the edge.\n            if (this.isPortsEnabled()) {\n                let id = null;\n                if (terminal && this.isPort(terminal)) {\n                    id = terminal.getId();\n                    terminal = this.getTerminalForPort(terminal, source);\n                }\n                // Sets or resets all previous information for connecting to a child port\n                const key = source ? 'sourcePort' : 'targetPort';\n                this.setCellStyles(key, id, [edge]);\n            }\n            this.getDataModel().setTerminal(edge, terminal, source);\n            if (this.isResetEdgesOnConnect()) {\n                this.resetEdge(edge);\n            }\n            this.fireEvent(new EventObject(InternalEvent.CELL_CONNECTED, 'edge', edge, 'terminal', terminal, 'source', source, 'previous', previous));\n        });\n    },\n    disconnectGraph(cells) {\n        this.batchUpdate(() => {\n            const { scale, translate: tr } = this.getView();\n            // Fast lookup for finding cells in array\n            const dict = new Dictionary();\n            for (let i = 0; i < cells.length; i += 1) {\n                dict.put(cells[i], true);\n            }\n            for (const cell of cells) {\n                if (cell.isEdge()) {\n                    let geo = cell.getGeometry();\n                    if (geo) {\n                        const state = this.getView().getState(cell);\n                        const parent = cell.getParent();\n                        const pstate = parent ? this.getView().getState(parent) : null;\n                        if (state && pstate) {\n                            geo = geo.clone();\n                            const dx = -pstate.origin.x;\n                            const dy = -pstate.origin.y;\n                            const pts = state.absolutePoints;\n                            let src = cell.getTerminal(true);\n                            if (src && this.isCellDisconnectable(cell, src, true)) {\n                                while (src && !dict.get(src)) {\n                                    src = src.getParent();\n                                }\n                                if (!src && pts[0]) {\n                                    geo.setTerminalPoint(new Point(pts[0].x / scale - tr.x + dx, pts[0].y / scale - tr.y + dy), true);\n                                    this.getDataModel().setTerminal(cell, null, true);\n                                }\n                            }\n                            let trg = cell.getTerminal(false);\n                            if (trg && this.isCellDisconnectable(cell, trg, false)) {\n                                while (trg && !dict.get(trg)) {\n                                    trg = trg.getParent();\n                                }\n                                if (!trg) {\n                                    const n = pts.length - 1;\n                                    const p = pts[n];\n                                    if (p) {\n                                        geo.setTerminalPoint(new Point(p.x / scale - tr.x + dx, p.y / scale - tr.y + dy), false);\n                                        this.getDataModel().setTerminal(cell, null, false);\n                                    }\n                                }\n                            }\n                            this.getDataModel().setGeometry(cell, geo);\n                        }\n                    }\n                }\n            }\n        });\n    },\n    getConnections(cell, parent = null) {\n        return this.getEdges(cell, parent, true, true, false);\n    },\n    isConstrainChild(cell) {\n        return (this.isConstrainChildren() &&\n            !!cell.getParent() &&\n            !cell.getParent().isEdge());\n    },\n    isConstrainChildren() {\n        return this.constrainChildren;\n    },\n    setConstrainChildren(value) {\n        this.constrainChildren = value;\n    },\n    isConstrainRelativeChildren() {\n        return this.constrainRelativeChildren;\n    },\n    setConstrainRelativeChildren(value) {\n        this.constrainRelativeChildren = value;\n    },\n    /*****************************************************************************\n     * Group: Graph behaviour\n     *****************************************************************************/\n    isDisconnectOnMove() {\n        return this.disconnectOnMove;\n    },\n    setDisconnectOnMove(value) {\n        this.disconnectOnMove = value;\n    },\n    isCellDisconnectable(cell, terminal = null, source = false) {\n        return this.isCellsDisconnectable() && !this.isCellLocked(cell);\n    },\n    isCellsDisconnectable() {\n        return this.cellsDisconnectable;\n    },\n    setCellsDisconnectable(value) {\n        this.cellsDisconnectable = value;\n    },\n    isValidSource(cell) {\n        return ((cell == null && this.isAllowDanglingEdges()) ||\n            (cell != null &&\n                (!cell.isEdge() || this.isConnectableEdges()) &&\n                cell.isConnectable()));\n    },\n    isValidTarget(cell) {\n        return this.isValidSource(cell);\n    },\n    isValidConnection(source, target) {\n        return this.isValidSource(source) && this.isValidTarget(target);\n    },\n    setConnectable(connectable) {\n        const connectionHandler = this.getPlugin('ConnectionHandler');\n        connectionHandler?.setEnabled(connectable);\n    },\n    isConnectable() {\n        const connectionHandler = this.getPlugin('ConnectionHandler');\n        return connectionHandler?.isEnabled() ?? false;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const DragDropMixin = {\n    dropEnabled: false,\n    splitEnabled: true,\n    autoScroll: true,\n    isAutoScroll() {\n        return this.autoScroll;\n    },\n    autoExtend: true,\n    isAutoExtend() {\n        return this.autoExtend;\n    },\n    /*****************************************************************************\n     * Group: Graph behaviour\n     *****************************************************************************/\n    isDropEnabled() {\n        return this.dropEnabled;\n    },\n    setDropEnabled(value) {\n        this.dropEnabled = value;\n    },\n    /*****************************************************************************\n     * Group: Split behaviour\n     *****************************************************************************/\n    isSplitEnabled() {\n        return this.splitEnabled;\n    },\n    setSplitEnabled(value) {\n        this.splitEnabled = value;\n    },\n    isSplitTarget(target, cells = [], evt) {\n        if (target.isEdge() &&\n            cells.length === 1 &&\n            cells[0].isConnectable() &&\n            !this.getEdgeValidationError(target, target.getTerminal(true), cells[0])) {\n            const src = target.getTerminal(true);\n            const trg = target.getTerminal(false);\n            return !cells[0].isAncestor(src) && !cells[0].isAncestor(trg);\n        }\n        return false;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Dictionary from '../../util/Dictionary';\nimport { removeDuplicates } from '../../util/arrayUtils';\nimport { findNearestSegment } from '../../util/mathUtils';\nimport Cell from '../cell/Cell';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport Geometry from '../geometry/Geometry';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const EdgeMixin = {\n    resetEdgesOnResize: false,\n    isResetEdgesOnResize() {\n        return this.resetEdgesOnResize;\n    },\n    resetEdgesOnMove: false,\n    isResetEdgesOnMove() {\n        return this.resetEdgesOnMove;\n    },\n    resetEdgesOnConnect: true,\n    isResetEdgesOnConnect() {\n        return this.resetEdgesOnConnect;\n    },\n    connectableEdges: false,\n    allowDanglingEdges: true,\n    cloneInvalidEdges: false,\n    alternateEdgeStyle: {},\n    edgeLabelsMovable: true,\n    // ***************************************************************************\n    // Group: Graph Behaviour\n    // ***************************************************************************\n    isEdgeLabelsMovable() {\n        return this.edgeLabelsMovable;\n    },\n    setEdgeLabelsMovable(value) {\n        this.edgeLabelsMovable = value;\n    },\n    setAllowDanglingEdges(value) {\n        this.allowDanglingEdges = value;\n    },\n    isAllowDanglingEdges() {\n        return this.allowDanglingEdges;\n    },\n    setConnectableEdges(value) {\n        this.connectableEdges = value;\n    },\n    isConnectableEdges() {\n        return this.connectableEdges;\n    },\n    setCloneInvalidEdges(value) {\n        this.cloneInvalidEdges = value;\n    },\n    isCloneInvalidEdges() {\n        return this.cloneInvalidEdges;\n    },\n    // ***************************************************************************\n    // Group: Cell alignment and orientation\n    // ***************************************************************************\n    flipEdge(edge) {\n        if (this.alternateEdgeStyle) {\n            this.batchUpdate(() => {\n                const style = edge.getStyle();\n                if (Object.keys(style).length) {\n                    this.getDataModel().setStyle(edge, this.alternateEdgeStyle);\n                }\n                else {\n                    this.getDataModel().setStyle(edge, {});\n                }\n                // Removes all existing control points\n                this.resetEdge(edge);\n                this.fireEvent(new EventObject(InternalEvent.FLIP_EDGE, { edge }));\n            });\n        }\n        return edge;\n    },\n    splitEdge(edge, cells, newEdge, dx = 0, dy = 0, x, y, parent = null) {\n        parent = parent ?? edge.getParent();\n        const source = edge.getTerminal(true);\n        this.batchUpdate(() => {\n            if (!newEdge) {\n                newEdge = this.cloneCell(edge);\n                // Removes waypoints before/after new cell\n                const state = this.getView().getState(edge);\n                let geo = newEdge.getGeometry();\n                if (geo && state) {\n                    const t = this.getView().translate;\n                    const s = this.getView().scale;\n                    const idx = findNearestSegment(state, (dx + t.x) * s, (dy + t.y) * s);\n                    geo.points = geo.points.slice(0, idx);\n                    geo = edge.getGeometry();\n                    if (geo) {\n                        geo = geo.clone();\n                        geo.points = geo.points.slice(idx);\n                        this.getDataModel().setGeometry(edge, geo);\n                    }\n                }\n            }\n            this.cellsMoved(cells, dx, dy, false, false);\n            this.cellsAdded(cells, parent, parent ? parent.getChildCount() : 0, null, null, true);\n            this.cellsAdded([newEdge], parent, parent ? parent.getChildCount() : 0, source, cells[0], false);\n            this.cellConnected(edge, cells[0], true);\n            this.fireEvent(new EventObject(InternalEvent.SPLIT_EDGE, { edge, cells, newEdge, dx, dy }));\n        });\n        return newEdge;\n    },\n    insertEdge(...args) {\n        let parent;\n        let id;\n        let value;\n        let source;\n        let target;\n        let style;\n        if (args.length === 1 && typeof args[0] === 'object') {\n            const params = args[0];\n            parent = params.parent;\n            id = params.id;\n            value = params.value;\n            source = params.source;\n            target = params.target;\n            style = params.style;\n        }\n        else {\n            // otherwise treat as individual arguments\n            [parent, id, value, source, target, style] = args;\n        }\n        const edge = this.createEdge(parent, id, value, source, target, style);\n        return this.addEdge(edge, parent, source, target);\n    },\n    createEdge(parent = null, id, value, source = null, target = null, style = {}) {\n        // Creates the edge\n        const edge = new Cell(value, new Geometry(), style);\n        edge.setId(id);\n        edge.setEdge(true);\n        edge.geometry.relative = true;\n        return edge;\n    },\n    addEdge(edge, parent = null, source = null, target = null, index = null) {\n        return this.addCell(edge, parent, index, source, target);\n    },\n    // ***************************************************************************\n    // Group: Folding\n    // ***************************************************************************\n    addAllEdges(cells) {\n        const allCells = cells.slice();\n        return removeDuplicates(allCells.concat(this.getAllEdges(cells)));\n    },\n    getAllEdges(cells) {\n        let edges = [];\n        if (cells) {\n            for (let i = 0; i < cells.length; i += 1) {\n                const edgeCount = cells[i].getEdgeCount();\n                for (let j = 0; j < edgeCount; j++) {\n                    edges.push(cells[i].getEdgeAt(j));\n                }\n                // Recurses\n                const children = cells[i].getChildren();\n                edges = edges.concat(this.getAllEdges(children));\n            }\n        }\n        return edges;\n    },\n    getIncomingEdges(cell, parent = null) {\n        return this.getEdges(cell, parent, true, false, false);\n    },\n    getOutgoingEdges(cell, parent = null) {\n        return this.getEdges(cell, parent, false, true, false);\n    },\n    getEdges(cell, parent = null, incoming = true, outgoing = true, includeLoops = true, recurse = false) {\n        let edges = [];\n        const isCollapsed = cell.isCollapsed();\n        const childCount = cell.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            const child = cell.getChildAt(i);\n            if (isCollapsed || !child.isVisible()) {\n                edges = edges.concat(child.getEdges(incoming, outgoing));\n            }\n        }\n        edges = edges.concat(cell.getEdges(incoming, outgoing));\n        const result = [];\n        for (let i = 0; i < edges.length; i += 1) {\n            const state = this.getView().getState(edges[i]);\n            const source = state\n                ? state.getVisibleTerminal(true)\n                : this.getView().getVisibleTerminal(edges[i], true);\n            const target = state\n                ? state.getVisibleTerminal(false)\n                : this.getView().getVisibleTerminal(edges[i], false);\n            if ((includeLoops && source === target) ||\n                (source !== target &&\n                    ((incoming &&\n                        target === cell &&\n                        (!parent || this.isValidAncestor(source, parent, recurse))) ||\n                        (outgoing &&\n                            source === cell &&\n                            (!parent || this.isValidAncestor(target, parent, recurse)))))) {\n                result.push(edges[i]);\n            }\n        }\n        return result;\n    },\n    // ***************************************************************************\n    // Group: Cell retrieval\n    // ***************************************************************************\n    getChildEdges(parent) {\n        return this.getChildCells(parent, false, true);\n    },\n    getEdgesBetween(source, target, directed = false) {\n        const edges = this.getEdges(source);\n        const result = [];\n        // Checks if the edge is connected to the correct\n        // cell and returns the first match\n        for (let i = 0; i < edges.length; i += 1) {\n            const state = this.getView().getState(edges[i]);\n            const src = state\n                ? state.getVisibleTerminal(true)\n                : this.getView().getVisibleTerminal(edges[i], true);\n            const trg = state\n                ? state.getVisibleTerminal(false)\n                : this.getView().getVisibleTerminal(edges[i], false);\n            if ((src === source && trg === target) ||\n                (!directed && src === target && trg === source)) {\n                result.push(edges[i]);\n            }\n        }\n        return result;\n    },\n    // ***************************************************************************\n    // Group: Cell moving\n    // ***************************************************************************\n    resetEdges(cells) {\n        // Prepares faster cells lookup\n        const dict = new Dictionary();\n        for (let i = 0; i < cells.length; i += 1) {\n            dict.put(cells[i], true);\n        }\n        this.batchUpdate(() => {\n            for (let i = 0; i < cells.length; i += 1) {\n                const edges = cells[i].getEdges();\n                for (let j = 0; j < edges.length; j++) {\n                    const state = this.getView().getState(edges[j]);\n                    const source = state\n                        ? state.getVisibleTerminal(true)\n                        : this.getView().getVisibleTerminal(edges[j], true);\n                    const target = state\n                        ? state.getVisibleTerminal(false)\n                        : this.getView().getVisibleTerminal(edges[j], false);\n                    // Checks if one of the terminals is not in the given array\n                    if (!dict.get(source) || !dict.get(target)) {\n                        this.resetEdge(edges[j]);\n                    }\n                }\n                this.resetEdges(cells[i].getChildren());\n            }\n        });\n    },\n    resetEdge(edge) {\n        let geo = edge.getGeometry();\n        // Resets the control points\n        if (geo && geo.points && geo.points.length > 0) {\n            geo = geo.clone();\n            geo.points = [];\n            this.getDataModel().setGeometry(edge, geo);\n        }\n        return edge;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { isMultiTouchEvent } from '../../util/EventUtils';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const EditingMixin = {\n    cellsEditable: true,\n    /*****************************************************************************\n     * Group: Cell in-place editing\n     *****************************************************************************/\n    startEditing(evt) {\n        this.startEditingAtCell(null, evt);\n    },\n    startEditingAtCell(cell = null, evt) {\n        if (!evt || !isMultiTouchEvent(evt)) {\n            if (!cell) {\n                cell = this.getSelectionCell();\n                if (cell && !this.isCellEditable(cell)) {\n                    cell = null;\n                }\n            }\n            else {\n                this.fireEvent(new EventObject(InternalEvent.START_EDITING, { cell, event: evt }));\n                const cellEditorHandler = this.getPlugin('CellEditorHandler');\n                cellEditorHandler?.startEditing(cell, evt);\n                this.fireEvent(new EventObject(InternalEvent.EDITING_STARTED, { cell, event: evt }));\n            }\n        }\n    },\n    getEditingValue(cell, evt) {\n        return this.convertValueToString(cell);\n    },\n    stopEditing(cancel = false) {\n        const cellEditorHandler = this.getPlugin('CellEditorHandler');\n        cellEditorHandler?.stopEditing(cancel);\n        this.fireEvent(new EventObject(InternalEvent.EDITING_STOPPED, { cancel }));\n    },\n    labelChanged(cell, value, evt) {\n        this.batchUpdate(() => {\n            const old = cell.value;\n            this.cellLabelChanged(cell, value, this.isAutoSizeCell(cell));\n            this.fireEvent(new EventObject(InternalEvent.LABEL_CHANGED, {\n                cell: cell,\n                value: value,\n                old: old,\n                event: evt,\n            }));\n        });\n        return cell;\n    },\n    cellLabelChanged(cell, value, autoSize = false) {\n        this.batchUpdate(() => {\n            this.getDataModel().setValue(cell, value);\n            if (autoSize) {\n                this.cellSizeUpdated(cell, false);\n            }\n        });\n    },\n    /*****************************************************************************\n     * Group: Graph behaviour\n     *****************************************************************************/\n    isEditing(cell = null) {\n        const cellEditorHandler = this.getPlugin('CellEditorHandler');\n        const editingCell = cellEditorHandler?.getEditingCell();\n        return !cell ? !!editingCell : cell === editingCell;\n    },\n    isCellEditable(cell) {\n        return (this.isCellsEditable() &&\n            !this.isCellLocked(cell) &&\n            (this.getCurrentCellStyle(cell).editable ?? true));\n    },\n    isCellsEditable() {\n        return this.cellsEditable;\n    },\n    setCellsEditable(value) {\n        this.cellsEditable = value;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalMouseEvent from '../event/InternalMouseEvent';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport { getClientX, getClientY, isAltDown, isConsumed, isControlDown, isLeftMouseButton, isMetaDown, isMouseEvent, isMultiTouchEvent, isPenEvent, isPopupTrigger, isShiftDown, isTouchEvent, } from '../../util/EventUtils';\nimport Point from '../geometry/Point';\nimport { convertPoint } from '../../util/styleUtils';\nimport { NONE } from '../../util/Constants';\nimport Client from '../../Client';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const EventsMixin = {\n    // TODO: Document me!\n    lastTouchEvent: null,\n    doubleClickCounter: 0,\n    lastTouchCell: null,\n    fireDoubleClick: null,\n    tapAndHoldThread: null,\n    lastMouseX: null,\n    lastMouseY: null,\n    isMouseTrigger: null,\n    ignoreMouseEvents: null,\n    mouseMoveRedirect: null,\n    mouseUpRedirect: null,\n    lastEvent: null, // FIXME: Check if this can be more specific - DOM events or mxEventObjects!\n    escapeEnabled: true,\n    invokesStopCellEditing: true,\n    enterStopsCellEditing: false,\n    isMouseDown: false,\n    nativeDblClickEnabled: true,\n    doubleTapEnabled: true,\n    doubleTapTimeout: 500,\n    doubleTapTolerance: 25,\n    lastTouchX: 0,\n    lastTouchY: 0,\n    lastTouchTime: 0,\n    tapAndHoldEnabled: true,\n    tapAndHoldDelay: 500,\n    tapAndHoldInProgress: false,\n    tapAndHoldValid: false,\n    initialTouchX: 0,\n    initialTouchY: 0,\n    tolerance: 4,\n    isNativeDblClickEnabled() {\n        return this.nativeDblClickEnabled;\n    },\n    getEventTolerance() {\n        return this.tolerance;\n    },\n    setEventTolerance(tolerance) {\n        this.tolerance = tolerance;\n    },\n    escape(evt) {\n        this.fireEvent(new EventObject(InternalEvent.ESCAPE, { event: evt }));\n    },\n    click(me) {\n        const evt = me.getEvent();\n        let cell = me.getCell();\n        const mxe = new EventObject(InternalEvent.CLICK, { event: evt, cell });\n        if (me.isConsumed()) {\n            mxe.consume();\n        }\n        this.fireEvent(mxe);\n        if (this.isEnabled() && !isConsumed(evt) && !mxe.isConsumed()) {\n            if (cell) {\n                if (this.isTransparentClickEvent(evt)) {\n                    let active = false;\n                    const tmp = this.getCellAt(me.graphX, me.graphY, null, false, false, (state) => {\n                        const selected = this.isCellSelected(state.cell);\n                        active = active || selected;\n                        return (!active ||\n                            selected ||\n                            (state.cell !== cell && state.cell.isAncestor(cell)));\n                    });\n                    if (tmp) {\n                        cell = tmp;\n                    }\n                }\n            }\n            else if (this.isSwimlaneSelectionEnabled()) {\n                cell = this.getSwimlaneAt(me.getGraphX(), me.getGraphY());\n                if (cell != null && (!this.isToggleEvent(evt) || !isAltDown(evt))) {\n                    let temp = cell;\n                    let swimlanes = [];\n                    while (temp != null) {\n                        temp = temp.getParent();\n                        const state = this.getView().getState(temp);\n                        if (this.isSwimlane(temp) && state != null) {\n                            swimlanes.push(temp);\n                        }\n                    }\n                    // Selects ancestors for selected swimlanes\n                    if (swimlanes.length > 0) {\n                        swimlanes = swimlanes.reverse();\n                        swimlanes.splice(0, 0, cell);\n                        swimlanes.push(cell);\n                        for (let i = 0; i < swimlanes.length - 1; i += 1) {\n                            if (this.isCellSelected(swimlanes[i])) {\n                                cell = swimlanes[this.isToggleEvent(evt) ? i : i + 1];\n                            }\n                        }\n                    }\n                }\n            }\n            if (cell) {\n                this.selectCellForEvent(cell, evt);\n            }\n            else if (!this.isToggleEvent(evt)) {\n                this.clearSelection();\n            }\n        }\n        return false;\n    },\n    dblClick(evt, cell = null) {\n        const mxe = new EventObject(InternalEvent.DOUBLE_CLICK, { event: evt, cell });\n        this.fireEvent(mxe);\n        // Handles the event if it has not been consumed\n        if (this.isEnabled() &&\n            !isConsumed(evt) &&\n            !mxe.isConsumed() &&\n            cell &&\n            this.isCellEditable(cell) &&\n            !this.isEditing(cell)) {\n            this.startEditingAtCell(cell, evt);\n            InternalEvent.consume(evt);\n        }\n    },\n    tapAndHold(me) {\n        const evt = me.getEvent();\n        const mxe = new EventObject(InternalEvent.TAP_AND_HOLD, {\n            event: evt,\n            cell: me.getCell(),\n        });\n        const panningHandler = this.getPlugin('PanningHandler');\n        const connectionHandler = this.getPlugin('ConnectionHandler');\n        // LATER: Check if event should be consumed if me is consumed\n        this.fireEvent(mxe);\n        if (mxe.isConsumed()) {\n            // Resets the state of the panning handler\n            panningHandler && (panningHandler.panningTrigger = false);\n        }\n        // Handles the event if it has not been consumed\n        if (this.isEnabled() &&\n            !isConsumed(evt) &&\n            !mxe.isConsumed() &&\n            connectionHandler &&\n            connectionHandler.isEnabled()) {\n            const cell = connectionHandler.marker.getCell(me);\n            if (cell) {\n                const state = this.getView().getState(cell);\n                if (state) {\n                    connectionHandler.marker.currentColor = connectionHandler.marker.validColor;\n                    connectionHandler.marker.markedState = state;\n                    connectionHandler.marker.mark();\n                    connectionHandler.first = new Point(me.getGraphX(), me.getGraphY());\n                    connectionHandler.edgeState = connectionHandler.createEdgeState(me);\n                    connectionHandler.previous = state;\n                    connectionHandler.fireEvent(new EventObject(InternalEvent.START, { state: connectionHandler.previous }));\n                }\n            }\n        }\n    },\n    addMouseListener(listener) {\n        this.mouseListeners.push(listener);\n    },\n    removeMouseListener(listener) {\n        for (let i = 0; i < this.mouseListeners.length; i += 1) {\n            if (this.mouseListeners[i] === listener) {\n                this.mouseListeners.splice(i, 1);\n                break;\n            }\n        }\n    },\n    updateMouseEvent(me, evtName) {\n        const pt = convertPoint(this.getContainer(), me.getX(), me.getY());\n        me.graphX = pt.x - this.getPanDx();\n        me.graphY = pt.y - this.getPanDy();\n        // Searches for rectangles using method if native hit detection is disabled on shape\n        if (!me.getCell() && this.isMouseDown && evtName === InternalEvent.MOUSE_MOVE) {\n            const cell = this.getCellAt(pt.x, pt.y, null, true, true, (state) => {\n                return (!state.shape ||\n                    state.shape.paintBackground !== this.paintBackground ||\n                    state.style.pointerEvents ||\n                    state.shape.fill !== NONE);\n            });\n            me.state = cell ? this.getView().getState(cell) : null;\n        }\n        return me;\n    },\n    getStateForTouchEvent(evt) {\n        const x = getClientX(evt);\n        const y = getClientY(evt);\n        // Dispatches the drop event to the graph which\n        // consumes and executes the source function\n        const pt = convertPoint(this.getContainer(), x, y);\n        const cell = this.getCellAt(pt.x, pt.y);\n        return cell ? this.getView().getState(cell) : null;\n    },\n    isEventIgnored(evtName, me, sender) {\n        const mouseEvent = isMouseEvent(me.getEvent());\n        let result = false;\n        // Drops events that are fired more than once\n        if (me.getEvent() === this.lastEvent) {\n            result = true;\n        }\n        else {\n            this.lastEvent = me.getEvent();\n        }\n        // Installs event listeners to capture the complete gesture from the event source\n        // for non-MS touch events as a workaround for all events for the same geture being\n        // fired from the event source even if that was removed from the DOM.\n        const eventSource = this.getEventSource();\n        if (eventSource && evtName !== InternalEvent.MOUSE_MOVE) {\n            InternalEvent.removeGestureListeners(eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n            this.mouseMoveRedirect = null;\n            this.mouseUpRedirect = null;\n            this.setEventSource(null);\n        }\n        else if (!Client.IS_GC && eventSource && me.getSource() !== eventSource) {\n            result = true;\n        }\n        else if (eventSource &&\n            Client.IS_TOUCH &&\n            evtName === InternalEvent.MOUSE_DOWN &&\n            !mouseEvent &&\n            !isPenEvent(me.getEvent())) {\n            this.setEventSource(me.getSource());\n            this.mouseMoveRedirect = (evt) => {\n                this.fireMouseEvent(InternalEvent.MOUSE_MOVE, new InternalMouseEvent(evt, this.getStateForTouchEvent(evt)));\n            };\n            this.mouseUpRedirect = (evt) => {\n                this.fireMouseEvent(InternalEvent.MOUSE_UP, new InternalMouseEvent(evt, this.getStateForTouchEvent(evt)));\n            };\n            InternalEvent.addGestureListeners(eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n        }\n        // Factored out the workarounds for FF to make it easier to override/remove\n        // Note this method has side-effects!\n        if (this.isSyntheticEventIgnored(evtName, me, sender)) {\n            result = true;\n        }\n        // Never fires mouseUp/-Down for double clicks\n        if (!isPopupTrigger(this.lastEvent) &&\n            evtName !== InternalEvent.MOUSE_MOVE &&\n            this.lastEvent.detail === 2) {\n            return true;\n        }\n        // Filters out of sequence events or mixed event types during a gesture\n        if (evtName === InternalEvent.MOUSE_UP && this.isMouseDown) {\n            this.isMouseDown = false;\n        }\n        else if (evtName === InternalEvent.MOUSE_DOWN && !this.isMouseDown) {\n            this.isMouseDown = true;\n            this.isMouseTrigger = mouseEvent;\n        }\n        // Drops mouse events that are fired during touch gestures as a workaround for Webkit\n        // and mouse events that are not in sync with the current internal button state\n        else if (!result &&\n            (((!Client.IS_FF || evtName !== InternalEvent.MOUSE_MOVE) &&\n                this.isMouseDown &&\n                this.isMouseTrigger !== mouseEvent) ||\n                (evtName === InternalEvent.MOUSE_DOWN && this.isMouseDown) ||\n                (evtName === InternalEvent.MOUSE_UP && !this.isMouseDown))) {\n            result = true;\n        }\n        if (!result && evtName === InternalEvent.MOUSE_DOWN) {\n            this.lastMouseX = me.getX();\n            this.lastMouseY = me.getY();\n        }\n        return result;\n    },\n    isSyntheticEventIgnored(evtName, me, sender) {\n        let result = false;\n        const mouseEvent = isMouseEvent(me.getEvent());\n        // LATER: This does not cover all possible cases that can go wrong in FF\n        if (this.ignoreMouseEvents && mouseEvent && evtName !== InternalEvent.MOUSE_MOVE) {\n            this.ignoreMouseEvents = evtName !== InternalEvent.MOUSE_UP;\n            result = true;\n        }\n        else if (Client.IS_FF && !mouseEvent && evtName === InternalEvent.MOUSE_UP) {\n            this.ignoreMouseEvents = true;\n        }\n        return result;\n    },\n    isEventSourceIgnored(evtName, me) {\n        const source = me.getSource();\n        if (!source)\n            return true;\n        // @ts-ignore nodeName could exist\n        const name = source.nodeName ? source.nodeName.toLowerCase() : '';\n        const candidate = !isMouseEvent(me.getEvent()) || isLeftMouseButton(me.getEvent());\n        return (evtName === InternalEvent.MOUSE_DOWN &&\n            candidate &&\n            (name === 'select' ||\n                name === 'option' ||\n                (name === 'input' &&\n                    // @ts-ignore type could exist\n                    source.type !== 'checkbox' &&\n                    // @ts-ignore type could exist\n                    source.type !== 'radio' &&\n                    // @ts-ignore type could exist\n                    source.type !== 'button' &&\n                    // @ts-ignore type could exist\n                    source.type !== 'submit' &&\n                    // @ts-ignore type could exist\n                    source.type !== 'file')));\n    },\n    getEventState(state) {\n        return state;\n    },\n    fireMouseEvent(evtName, me, sender) {\n        sender = sender ?? this;\n        if (this.isEventSourceIgnored(evtName, me)) {\n            const tooltipHandler = this.getPlugin('TooltipHandler');\n            if (tooltipHandler) {\n                tooltipHandler.hide();\n            }\n            return;\n        }\n        // Updates the graph coordinates in the event\n        me = this.updateMouseEvent(me, evtName);\n        // Detects and processes double taps for touch-based devices which do not have native double click events\n        // or where detection of double click is not always possible (quirks, IE10+). Note that this can only handle\n        // double clicks on cells because the sequence of events in IE prevents detection on the background, it fires\n        // two mouse ups, one of which without a cell but no mousedown for the second click which means we cannot\n        // detect which mouseup(s) are part of the first click, ie we do not know when the first click ends.\n        if ((!this.nativeDblClickEnabled && !isPopupTrigger(me.getEvent())) ||\n            (this.doubleTapEnabled &&\n                Client.IS_TOUCH &&\n                (isTouchEvent(me.getEvent()) || isPenEvent(me.getEvent())))) {\n            const currentTime = new Date().getTime();\n            if (evtName === InternalEvent.MOUSE_DOWN) {\n                if (this.lastTouchEvent &&\n                    this.lastTouchEvent !== me.getEvent() &&\n                    currentTime - this.lastTouchTime < this.doubleTapTimeout &&\n                    Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n                    Math.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance &&\n                    this.doubleClickCounter < 2) {\n                    this.doubleClickCounter += 1;\n                    let doubleClickFired = false;\n                    if (evtName === InternalEvent.MOUSE_UP) {\n                        if (me.getCell() === this.lastTouchCell && this.lastTouchCell) {\n                            this.lastTouchTime = 0;\n                            const cell = this.lastTouchCell;\n                            this.lastTouchCell = null;\n                            this.dblClick(me.getEvent(), cell);\n                            doubleClickFired = true;\n                        }\n                    }\n                    else {\n                        this.fireDoubleClick = true;\n                        this.lastTouchTime = 0;\n                    }\n                    if (doubleClickFired) {\n                        InternalEvent.consume(me.getEvent());\n                        return;\n                    }\n                }\n                else if (!this.lastTouchEvent || this.lastTouchEvent !== me.getEvent()) {\n                    this.lastTouchCell = me.getCell();\n                    this.lastTouchX = me.getX();\n                    this.lastTouchY = me.getY();\n                    this.lastTouchTime = currentTime;\n                    this.lastTouchEvent = me.getEvent();\n                    this.doubleClickCounter = 0;\n                }\n            }\n            else if ((this.isMouseDown || evtName === InternalEvent.MOUSE_UP) &&\n                this.fireDoubleClick) {\n                this.fireDoubleClick = false;\n                const cell = this.lastTouchCell;\n                this.lastTouchCell = null;\n                this.isMouseDown = false;\n                // Workaround for Chrome/Safari not firing native double click events for double touch on background\n                const valid = cell ||\n                    ((isTouchEvent(me.getEvent()) || isPenEvent(me.getEvent())) &&\n                        (Client.IS_GC || Client.IS_SF));\n                if (valid &&\n                    Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n                    Math.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance) {\n                    this.dblClick(me.getEvent(), cell);\n                }\n                else {\n                    InternalEvent.consume(me.getEvent());\n                }\n                return;\n            }\n        }\n        if (!this.isEventIgnored(evtName, me, sender)) {\n            const state = me.getState();\n            // Updates the event state via getEventState\n            me.state = state ? this.getEventState(state) : null;\n            this.fireEvent(new EventObject(InternalEvent.FIRE_MOUSE_EVENT, { eventName: evtName, event: me }));\n            if (Client.IS_SF || Client.IS_GC || me.getEvent().target !== this.getContainer()) {\n                const container = this.getContainer();\n                if (evtName === InternalEvent.MOUSE_MOVE &&\n                    this.isMouseDown &&\n                    this.isAutoScroll() &&\n                    !isMultiTouchEvent(me.getEvent())) {\n                    this.scrollPointToVisible(me.getGraphX(), me.getGraphY(), this.isAutoExtend());\n                }\n                else if (evtName === InternalEvent.MOUSE_UP &&\n                    this.isIgnoreScrollbars() &&\n                    this.isTranslateToScrollPosition() &&\n                    (container.scrollLeft !== 0 || container.scrollTop !== 0)) {\n                    const s = this.getView().scale;\n                    const tr = this.getView().translate;\n                    this.getView().setTranslate(tr.x - container.scrollLeft / s, tr.y - container.scrollTop / s);\n                    container.scrollLeft = 0;\n                    container.scrollTop = 0;\n                }\n                const mouseListeners = this.mouseListeners;\n                // Does not change returnValue in Opera\n                if (!me.getEvent().preventDefault) {\n                    me.getEvent().returnValue = true;\n                }\n                for (const l of mouseListeners) {\n                    if (evtName === InternalEvent.MOUSE_DOWN) {\n                        l.mouseDown(sender, me);\n                    }\n                    else if (evtName === InternalEvent.MOUSE_MOVE) {\n                        l.mouseMove(sender, me);\n                    }\n                    else if (evtName === InternalEvent.MOUSE_UP) {\n                        l.mouseUp(sender, me);\n                    }\n                }\n                // Invokes the click handler\n                if (evtName === InternalEvent.MOUSE_UP) {\n                    this.click(me);\n                }\n            }\n            // Detects tapAndHold events using a timer\n            if ((isTouchEvent(me.getEvent()) || isPenEvent(me.getEvent())) &&\n                evtName === InternalEvent.MOUSE_DOWN &&\n                this.tapAndHoldEnabled &&\n                !this.tapAndHoldInProgress) {\n                this.tapAndHoldInProgress = true;\n                this.initialTouchX = me.getGraphX();\n                this.initialTouchY = me.getGraphY();\n                const handler = () => {\n                    if (this.tapAndHoldValid) {\n                        this.tapAndHold(me);\n                    }\n                    this.tapAndHoldInProgress = false;\n                    this.tapAndHoldValid = false;\n                };\n                if (this.tapAndHoldThread) {\n                    window.clearTimeout(this.tapAndHoldThread);\n                }\n                this.tapAndHoldThread = window.setTimeout(handler, this.tapAndHoldDelay);\n                this.tapAndHoldValid = true;\n            }\n            else if (evtName === InternalEvent.MOUSE_UP) {\n                this.tapAndHoldInProgress = false;\n                this.tapAndHoldValid = false;\n            }\n            else if (this.tapAndHoldValid) {\n                this.tapAndHoldValid =\n                    Math.abs(this.initialTouchX - me.getGraphX()) < this.tolerance &&\n                        Math.abs(this.initialTouchY - me.getGraphY()) < this.tolerance;\n            }\n            const cellEditorHandler = this.getPlugin('CellEditorHandler');\n            // Stops editing for all events other than from cellEditorHandler\n            if (evtName === InternalEvent.MOUSE_DOWN &&\n                this.isEditing() &&\n                !cellEditorHandler?.isEventSource(me.getEvent())) {\n                this.stopEditing(!this.isInvokesStopCellEditing());\n            }\n            this.consumeMouseEvent(evtName, me, sender);\n        }\n    },\n    consumeMouseEvent(evtName, me, sender) {\n        sender = sender ?? this;\n        // Workaround for duplicate click in Windows 8 with Chrome/FF/Opera with touch\n        if (evtName === InternalEvent.MOUSE_DOWN && isTouchEvent(me.getEvent())) {\n            me.consume(false);\n        }\n    },\n    fireGestureEvent(evt, cell = null) {\n        // Resets double tap event handling when gestures take place\n        this.lastTouchTime = 0;\n        this.fireEvent(new EventObject(InternalEvent.GESTURE, { event: evt, cell }));\n    },\n    sizeDidChange() {\n        const bounds = this.getGraphBounds();\n        const border = this.getBorder();\n        let width = Math.max(0, bounds.x) + bounds.width + 2 * border;\n        let height = Math.max(0, bounds.y) + bounds.height + 2 * border;\n        const minimumContainerSize = this.getMinimumContainerSize();\n        if (minimumContainerSize) {\n            width = Math.max(width, minimumContainerSize.width);\n            height = Math.max(height, minimumContainerSize.height);\n        }\n        if (this.isResizeContainer()) {\n            this.doResizeContainer(width, height);\n        }\n        if (this.isPreferPageSize() || this.isPageVisible()) {\n            const size = this.getPreferredPageSize(bounds, Math.max(1, width), Math.max(1, height));\n            width = size.width * this.getView().scale;\n            height = size.height * this.getView().scale;\n        }\n        const minimumGraphSize = this.getMinimumGraphSize();\n        if (minimumGraphSize) {\n            width = Math.max(width, minimumGraphSize.width * this.getView().scale);\n            height = Math.max(height, minimumGraphSize.height * this.getView().scale);\n        }\n        width = Math.ceil(width);\n        height = Math.ceil(height);\n        // @ts-ignore\n        const root = this.getView().getDrawPane().ownerSVGElement;\n        if (root) {\n            root.style.minWidth = `${Math.max(1, width)}px`;\n            root.style.minHeight = `${Math.max(1, height)}px`;\n            root.style.width = '100%';\n            root.style.height = '100%';\n        }\n        this.updatePageBreaks(this.isPageBreaksVisible(), width, height);\n        this.fireEvent(new EventObject(InternalEvent.SIZE, { bounds }));\n    },\n    isCloneEvent(evt) {\n        return isControlDown(evt);\n    },\n    isTransparentClickEvent(evt) {\n        return false;\n    },\n    isToggleEvent(evt) {\n        return Client.IS_MAC ? isMetaDown(evt) : isControlDown(evt);\n    },\n    isGridEnabledEvent(evt) {\n        return !isAltDown(evt);\n    },\n    isConstrainedEvent(evt) {\n        return isShiftDown(evt);\n    },\n    isIgnoreTerminalEvent(_evt) {\n        return false;\n    },\n    getPointForEvent(evt, addOffset = true) {\n        const p = convertPoint(this.getContainer(), getClientX(evt), getClientY(evt));\n        const s = this.getView().scale;\n        const tr = this.getView().translate;\n        const off = addOffset ? this.getGridSize() / 2 : 0;\n        p.x = this.snap(p.x / s - tr.x - off);\n        p.y = this.snap(p.y / s - tr.y - off);\n        return p;\n    },\n    isEscapeEnabled() {\n        return this.escapeEnabled;\n    },\n    setEscapeEnabled(value) {\n        this.escapeEnabled = value;\n    },\n    isInvokesStopCellEditing() {\n        return this.invokesStopCellEditing;\n    },\n    setInvokesStopCellEditing(value) {\n        this.invokesStopCellEditing = value;\n    },\n    isEnterStopsCellEditing() {\n        return this.enterStopsCellEditing;\n    },\n    setEnterStopsCellEditing(value) {\n        this.enterStopsCellEditing = value;\n    },\n    getCursorForMouseEvent(me) {\n        const cell = me.getCell();\n        return cell ? this.getCursorForCell(cell) : null;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport { toRadians } from '../../util/mathUtils';\nimport Rectangle from '../geometry/Rectangle';\nimport { isI18nEnabled } from '../../internal/i18n-utils';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const FoldingMixin = {\n    collapseExpandResource: isI18nEnabled() ? 'collapse-expand' : '',\n    getCollapseExpandResource() {\n        return this.collapseExpandResource;\n    },\n    isFoldingEnabled() {\n        return this.options.foldingEnabled;\n    },\n    getFoldableCells(cells, collapse = false) {\n        return this.getDataModel().filterCells(cells, (cell) => {\n            return this.isCellFoldable(cell, collapse);\n        });\n    },\n    isCellFoldable(cell, _collapse) {\n        return cell.getChildCount() > 0 && (this.getCurrentCellStyle(cell).foldable ?? true);\n    },\n    getFoldingImage(state) {\n        if (state != null && this.isFoldingEnabled() && !state.cell.isEdge()) {\n            const tmp = state.cell.isCollapsed();\n            if (this.isCellFoldable(state.cell, !tmp)) {\n                return tmp ? this.options.collapsedImage : this.options.expandedImage;\n            }\n        }\n        return null;\n    },\n    foldCells(collapse = false, recurse = false, cells = null, checkFoldable = false, _evt = null) {\n        if (cells == null) {\n            cells = this.getFoldableCells(this.getSelectionCells(), collapse);\n        }\n        this.stopEditing(false);\n        this.batchUpdate(() => {\n            this.cellsFolded(cells, collapse, recurse, checkFoldable);\n            this.fireEvent(new EventObject(InternalEvent.FOLD_CELLS, 'collapse', collapse, 'recurse', recurse, 'cells', cells));\n        });\n        return cells;\n    },\n    cellsFolded(cells = null, collapse = false, recurse = false, checkFoldable = false) {\n        if (cells != null && cells.length > 0) {\n            this.batchUpdate(() => {\n                for (let i = 0; i < cells.length; i += 1) {\n                    if ((!checkFoldable || this.isCellFoldable(cells[i], collapse)) &&\n                        collapse !== cells[i].isCollapsed()) {\n                        this.getDataModel().setCollapsed(cells[i], collapse);\n                        this.swapBounds(cells[i], collapse);\n                        if (this.isExtendParent(cells[i])) {\n                            this.extendParent(cells[i]);\n                        }\n                        if (recurse) {\n                            const children = cells[i].getChildren();\n                            this.cellsFolded(children, collapse, recurse);\n                        }\n                        this.constrainChild(cells[i]);\n                    }\n                }\n                this.fireEvent(new EventObject(InternalEvent.CELLS_FOLDED, { cells, collapse, recurse }));\n            });\n        }\n    },\n    swapBounds(cell, willCollapse = false) {\n        let geo = cell.getGeometry();\n        if (geo != null) {\n            geo = geo.clone();\n            this.updateAlternateBounds(cell, geo, willCollapse);\n            geo.swap();\n            this.getDataModel().setGeometry(cell, geo);\n        }\n    },\n    updateAlternateBounds(cell = null, geo = null, _willCollapse = false) {\n        if (cell != null && geo != null) {\n            const style = this.getCurrentCellStyle(cell);\n            if (geo.alternateBounds == null) {\n                let bounds = geo;\n                if (this.options.collapseToPreferredSize) {\n                    const tmp = this.getPreferredSizeForCell(cell);\n                    if (tmp != null) {\n                        bounds = tmp;\n                        const startSize = style.startSize ?? 0;\n                        if (startSize > 0) {\n                            bounds.height = Math.max(bounds.height, startSize);\n                        }\n                    }\n                }\n                geo.alternateBounds = new Rectangle(0, 0, bounds.width, bounds.height);\n            }\n            if (geo.alternateBounds != null) {\n                geo.alternateBounds.x = geo.x;\n                geo.alternateBounds.y = geo.y;\n                const alpha = toRadians(style.rotation || 0);\n                if (alpha !== 0) {\n                    const dx = geo.alternateBounds.getCenterX() - geo.getCenterX();\n                    const dy = geo.alternateBounds.getCenterY() - geo.getCenterY();\n                    const cos = Math.cos(alpha);\n                    const sin = Math.sin(alpha);\n                    const dx2 = cos * dx - sin * dy;\n                    const dy2 = sin * dx + cos * dy;\n                    geo.alternateBounds.x += dx2 - dx;\n                    geo.alternateBounds.y += dy2 - dy;\n                }\n            }\n        }\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Cell from '../cell/Cell';\nimport { sortCells } from '../../util/styleUtils';\nimport Geometry from '../geometry/Geometry';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport Rectangle from '../geometry/Rectangle';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const GroupingMixin = {\n    groupCells(group, border = 0, cells) {\n        if (!cells)\n            cells = sortCells(this.getSelectionCells(), true);\n        if (!cells)\n            cells = this.getCellsForGroup(cells);\n        if (group == null) {\n            group = this.createGroupCell(cells);\n        }\n        const bounds = this.getBoundsForGroup(group, cells, border);\n        if (cells.length > 1 && bounds != null) {\n            // Uses parent of group or previous parent of first child\n            let parent = group.getParent();\n            if (parent == null) {\n                parent = cells[0].getParent();\n            }\n            this.batchUpdate(() => {\n                // Checks if the group has a geometry and\n                // creates one if one does not exist\n                if (group.getGeometry() == null) {\n                    this.getDataModel().setGeometry(group, new Geometry());\n                }\n                // Adds the group into the parent\n                let index = parent.getChildCount();\n                this.cellsAdded([group], parent, index, null, null, false, false, false);\n                // Adds the children into the group and moves\n                index = group.getChildCount();\n                this.cellsAdded(cells, group, index, null, null, false, false, false);\n                this.cellsMoved(cells, -bounds.x, -bounds.y, false, false, false);\n                // Resizes the group\n                this.cellsResized([group], [bounds], false);\n                this.fireEvent(new EventObject(InternalEvent.GROUP_CELLS, { group, border, cells }));\n            });\n        }\n        return group;\n    },\n    getCellsForGroup(cells) {\n        const result = [];\n        if (cells != null && cells.length > 0) {\n            const parent = cells[0].getParent();\n            result.push(cells[0]);\n            // Filters selection cells with the same parent\n            for (let i = 1; i < cells.length; i += 1) {\n                if (cells[i].getParent() === parent) {\n                    result.push(cells[i]);\n                }\n            }\n        }\n        return result;\n    },\n    getBoundsForGroup(group, children, border) {\n        const result = this.getBoundingBoxFromGeometry(children, true);\n        if (result != null) {\n            if (this.isSwimlane(group)) {\n                const size = this.getStartSize(group);\n                result.x -= size.width;\n                result.y -= size.height;\n                result.width += size.width;\n                result.height += size.height;\n            }\n            // Adds the border\n            if (border != null) {\n                result.x -= border;\n                result.y -= border;\n                result.width += 2 * border;\n                result.height += 2 * border;\n            }\n        }\n        return result;\n    },\n    createGroupCell(cells) {\n        const group = new Cell('');\n        group.setVertex(true);\n        group.setConnectable(false);\n        return group;\n    },\n    ungroupCells(cells) {\n        let result = [];\n        if (cells == null) {\n            cells = this.getCellsForUngroup();\n        }\n        if (cells != null && cells.length > 0) {\n            this.batchUpdate(() => {\n                const _cells = cells;\n                for (let i = 0; i < _cells.length; i += 1) {\n                    let children = _cells[i].getChildren();\n                    if (children != null && children.length > 0) {\n                        children = children.slice();\n                        const parent = _cells[i].getParent();\n                        const index = parent.getChildCount();\n                        this.cellsAdded(children, parent, index, null, null, true);\n                        result = result.concat(children);\n                        // Fix relative child cells\n                        for (const child of children) {\n                            const state = this.getView().getState(child);\n                            let geo = child.getGeometry();\n                            if (state != null && geo != null && geo.relative) {\n                                geo = geo.clone();\n                                geo.x = state.origin.x;\n                                geo.y = state.origin.y;\n                                geo.relative = false;\n                                this.getDataModel().setGeometry(child, geo);\n                            }\n                        }\n                    }\n                }\n                this.removeCellsAfterUngroup(_cells);\n                this.fireEvent(new EventObject(InternalEvent.UNGROUP_CELLS, { cells }));\n            });\n        }\n        return result;\n    },\n    getCellsForUngroup() {\n        const cells = this.getSelectionCells();\n        // Finds the cells with children\n        const tmp = [];\n        for (let i = 0; i < cells.length; i += 1) {\n            if (cells[i].isVertex() && cells[i].getChildCount() > 0) {\n                tmp.push(cells[i]);\n            }\n        }\n        return tmp;\n    },\n    removeCellsAfterUngroup(cells) {\n        this.cellsRemoved(this.addAllEdges(cells));\n    },\n    removeCellsFromParent(cells) {\n        if (cells == null) {\n            cells = this.getSelectionCells();\n        }\n        this.batchUpdate(() => {\n            const parent = this.getDefaultParent();\n            const index = parent.getChildCount();\n            this.cellsAdded(cells, parent, index, null, null, true);\n            this.fireEvent(new EventObject(InternalEvent.REMOVE_CELLS_FROM_PARENT, { cells }));\n        });\n        return cells;\n    },\n    updateGroupBounds(cells, border = 0, moveGroup = false, topBorder = 0, rightBorder = 0, bottomBorder = 0, leftBorder = 0) {\n        if (cells == null) {\n            cells = this.getSelectionCells();\n        }\n        border = border != null ? border : 0;\n        moveGroup = moveGroup != null ? moveGroup : false;\n        topBorder = topBorder != null ? topBorder : 0;\n        rightBorder = rightBorder != null ? rightBorder : 0;\n        bottomBorder = bottomBorder != null ? bottomBorder : 0;\n        leftBorder = leftBorder != null ? leftBorder : 0;\n        this.batchUpdate(() => {\n            for (let i = cells.length - 1; i >= 0; i--) {\n                let geo = cells[i].getGeometry();\n                if (geo == null) {\n                    continue;\n                }\n                const children = this.getChildCells(cells[i]);\n                if (children != null && children.length > 0) {\n                    const bounds = this.getBoundingBoxFromGeometry(children, true);\n                    if (bounds != null && bounds.width > 0 && bounds.height > 0) {\n                        // Adds the size of the title area for swimlanes\n                        const size = ((this.isSwimlane(cells[i])\n                            ? this.getActualStartSize(cells[i], true)\n                            : new Rectangle()));\n                        geo = geo.clone();\n                        if (moveGroup) {\n                            geo.x = Math.round(geo.x + bounds.x - border - size.x - leftBorder);\n                            geo.y = Math.round(geo.y + bounds.y - border - size.y - topBorder);\n                        }\n                        geo.width = Math.round(bounds.width + 2 * border + size.x + leftBorder + rightBorder + size.width);\n                        geo.height = Math.round(bounds.height + 2 * border + size.y + topBorder + bottomBorder + size.height);\n                        this.getDataModel().setGeometry(cells[i], geo);\n                        this.moveCells(children, border + size.x - bounds.x + leftBorder, border + size.y - bounds.y + topBorder);\n                    }\n                }\n            }\n        });\n        return cells;\n    },\n    /*****************************************************************************\n     * Group: Drilldown\n     *****************************************************************************/\n    enterGroup(cell) {\n        cell = cell || this.getSelectionCell();\n        if (cell != null && this.isValidRoot(cell)) {\n            this.getView().setCurrentRoot(cell);\n            this.clearSelection();\n        }\n    },\n    exitGroup() {\n        const root = this.getDataModel().getRoot();\n        const current = this.getCurrentRoot();\n        if (current != null) {\n            let next = current.getParent();\n            // Finds the next valid root in the hierarchy\n            while (next !== root && !this.isValidRoot(next) && next.getParent() !== root) {\n                next = next.getParent();\n            }\n            // Clears the current root if the new root is\n            // the model's root or one of the layers.\n            if (next === root || next.getParent() === root) {\n                this.getView().setCurrentRoot(null);\n            }\n            else {\n                this.getView().setCurrentRoot(next);\n            }\n            const state = this.getView().getState(current);\n            // Selects the previous root in the graph\n            if (state != null) {\n                this.setSelectionCell(current);\n            }\n        }\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const ImageMixin = {\n    addImageBundle(bundle) {\n        this.imageBundles.push(bundle);\n    },\n    removeImageBundle(bundle) {\n        const tmp = [];\n        for (let i = 0; i < this.imageBundles.length; i += 1) {\n            if (this.imageBundles[i] !== bundle) {\n                tmp.push(this.imageBundles[i]);\n            }\n        }\n        this.imageBundles = tmp;\n    },\n    getImageFromBundles(key) {\n        if (key) {\n            for (let i = 0; i < this.imageBundles.length; i += 1) {\n                const image = this.imageBundles[i].getImage(key);\n                if (image) {\n                    return image;\n                }\n            }\n        }\n        return null;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const LabelMixin = {\n    getLabel(cell) {\n        let result = '';\n        if (this.isLabelsVisible() && cell != null) {\n            const style = this.getCurrentCellStyle(cell);\n            if (!(style.noLabel ?? false)) {\n                result = this.convertValueToString(cell);\n            }\n        }\n        return result;\n    },\n    isHtmlLabel(_cell) {\n        return this.isHtmlLabels();\n    },\n    labelsVisible: true,\n    isLabelsVisible() {\n        return this.labelsVisible;\n    },\n    htmlLabels: false,\n    isHtmlLabels() {\n        return this.htmlLabels;\n    },\n    setHtmlLabels(value) {\n        this.htmlLabels = value;\n    },\n    isWrapping(cell) {\n        return this.getCurrentCellStyle(cell).whiteSpace === 'wrap';\n    },\n    isLabelClipped(cell) {\n        return this.getCurrentCellStyle(cell).overflow === 'hidden';\n    },\n    isLabelMovable(cell) {\n        return (!this.isCellLocked(cell) &&\n            ((cell.isEdge() && this.isEdgeLabelsMovable()) ||\n                (cell.isVertex() && this.isVertexLabelsMovable())));\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { sortCells } from '../../util/styleUtils';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const OrderMixin = {\n    orderCells(back = false, cells) {\n        if (!cells)\n            cells = this.getSelectionCells();\n        if (!cells) {\n            cells = sortCells(this.getSelectionCells(), true);\n        }\n        this.batchUpdate(() => {\n            this.cellsOrdered(cells, back);\n            const event = new EventObject(InternalEvent.ORDER_CELLS, 'back', back, 'cells', cells);\n            this.fireEvent(event);\n        });\n        return cells;\n    },\n    cellsOrdered(cells, back = false) {\n        this.batchUpdate(() => {\n            for (let i = 0; i < cells.length; i += 1) {\n                const parent = cells[i].getParent();\n                if (back) {\n                    this.getDataModel().add(parent, cells[i], i);\n                }\n                else {\n                    this.getDataModel().add(parent, cells[i], parent ? parent.getChildCount() - 1 : 0);\n                }\n            }\n            this.fireEvent(new EventObject(InternalEvent.CELLS_ORDERED, { back, cells }));\n        });\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport Rectangle from '../geometry/Rectangle';\nimport EventSource from '../event/EventSource';\n/**\n * Extends {@link EventSource} to implement a graph overlay, represented by an icon\n * and a tooltip. Overlays can handle and fire <click> events and are added to\n * the graph using {@link AbstractGraph.addCellOverlay}, and removed using\n * {@link AbstractGraph.removeCellOverlay}, or {@link AbstractGraph.removeCellOverlays} to remove all overlays.\n * The {@link AbstractGraph.getCellOverlays} function returns the array of overlays for a given\n * cell in a graph. If multiple overlays exist for the same cell, then\n * <getBounds> should be overridden in at least one of the overlays.\n *\n * Overlays appear on top of all cells in a special layer. If this is not\n * desirable, then the image must be rendered as part of the shape or label of\n * the cell instead.\n *\n * Example:\n *\n * The following adds a new overlays for a given vertex and selects the cell\n * if the overlay is clicked.\n *\n * ```javascript\n * let overlay = new CellOverlay(img, html);\n * graph.addCellOverlay(vertex, overlay);\n * overlay.addListener(mxEvent.CLICK, (sender, evt)=>\n * {\n *   let cell = evt.getProperty('cell');\n *   graph.setSelectionCell(cell);\n * });\n * ```\n *\n * For cell overlays to be printed use {@link PrintPreview#printOverlays}.\n *\n * Event: mxEvent.CLICK\n *\n * Fires when the user clicks on the overlay. The <code>event</code> property\n * contains the corresponding mouse event and the <code>cell</code> property\n * contains the cell. For touch devices this is fired if the element receives\n * a touchend event.\n *\n * Constructor: CellOverlay\n *\n * Constructs a new overlay using the given image and tooltip.\n *\n * @param image {@link Image} that represents the icon to be displayed.\n * @param tooltip Optional string that specifies the tooltip.\n * @param align Optional horizontal alignment for the overlay. Possible\n * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>\n * (default).\n * @param verticalAlign Vertical alignment for the overlay. Possible\n * values are <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>\n * (default).\n */\nclass CellOverlay extends EventSource {\n    constructor(image, tooltip = null, align = 'right', verticalAlign = 'bottom', offset = new Point(), cursor = 'help') {\n        super();\n        /**\n         * Holds the horizontal alignment for the overlay.\n         *\n         * For edges, the overlay always appears in the center of the edge.\n         * @default 'right'\n         */\n        this.align = 'right';\n        /**\n         * Holds the vertical alignment for the overlay.\n         *\n         * For edges, the overlay always appears in the center of the edge.\n         * @default 'bottom'\n         */\n        this.verticalAlign = 'bottom';\n        /**\n         * Holds the offset as an {@link Point}. The offset will be scaled according to the\n         * current scale.\n         */\n        this.offset = new Point();\n        /**\n         * Holds the cursor for the overlay.\n         * @default 'help'.\n         */\n        this.cursor = 'help';\n        /**\n         * Defines the overlapping for the overlay, that is, the proportional distance\n         * from the origin to the point defined by the alignment. Default is 0.5.\n         */\n        this.defaultOverlap = 0.5;\n        this.image = image;\n        this.tooltip = tooltip;\n        this.align = align;\n        this.verticalAlign = verticalAlign;\n        this.offset = offset;\n        this.cursor = cursor;\n    }\n    /**\n     * Returns the bounds of the overlay for the given <CellState> as an\n     * {@link Rectangle}. This should be overridden when using multiple overlays\n     * per cell so that the overlays do not overlap.\n     *\n     * The following example will place the overlay along an edge (where\n     * x=[-1..1] from the start to the end of the edge and y is the\n     * orthogonal offset in px).\n     *\n     * ```javascript\n     * overlay.getBounds = function(state)\n     * {\n     *   var bounds = getBounds.apply(this, arguments);\n     *\n     *   if (state.view.graph.getDataModel().isEdge(state.cell))\n     *   {\n     *     var pt = state.view.getPoint(state, {x: 0, y: 0, relative: true});\n     *\n     *     bounds.x = pt.x - bounds.width / 2;\n     *     bounds.y = pt.y - bounds.height / 2;\n     *   }\n     *\n     *   return bounds;\n     * };\n     * ```\n     *\n     * @param state <CellState> that represents the current state of the\n     * associated cell.\n     */\n    getBounds(state) {\n        const isEdge = state.cell.isEdge();\n        const s = state.view.scale;\n        let pt = null;\n        const image = this.image;\n        const w = image.width;\n        const h = image.height;\n        if (isEdge) {\n            const pts = state.absolutePoints;\n            if (pts.length % 2 === 1) {\n                pt = pts[Math.floor(pts.length / 2)];\n            }\n            else {\n                const idx = pts.length / 2;\n                const p0 = pts[idx - 1];\n                const p1 = pts[idx];\n                pt = new Point(p0.x + (p1.x - p0.x) / 2, p0.y + (p1.y - p0.y) / 2);\n            }\n        }\n        else {\n            pt = new Point();\n            if (this.align === 'left') {\n                pt.x = state.x;\n            }\n            else if (this.align === 'center') {\n                pt.x = state.x + state.width / 2;\n            }\n            else if (this.align === 'right') {\n                pt.x = state.x + state.width;\n            }\n            else {\n                throw new Error();\n            }\n            if (this.verticalAlign === 'top') {\n                pt.y = state.y;\n            }\n            else if (this.verticalAlign === 'middle') {\n                pt.y = state.y + state.height / 2;\n            }\n            else if (this.verticalAlign === 'bottom') {\n                pt.y = state.y + state.height;\n            }\n            else {\n                throw new Error();\n            }\n        }\n        return new Rectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s), Math.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);\n    }\n    /**\n     * Returns the textual representation of the overlay to be used as the\n     * tooltip. This implementation returns <tooltip>.\n     */\n    toString() {\n        return this.tooltip;\n    }\n}\nexport default CellOverlay;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CellOverlay from '../cell/CellOverlay';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const OverlaysMixin = {\n    addCellOverlay(cell, overlay) {\n        cell.overlays.push(overlay);\n        // Immediately update the cell display if the state exists\n        const state = this.getView().getState(cell);\n        if (state) {\n            this.getCellRenderer().redraw(state);\n        }\n        this.fireEvent(new EventObject(InternalEvent.ADD_OVERLAY, { cell, overlay }));\n        return overlay;\n    },\n    getCellOverlays(cell) {\n        return cell.overlays;\n    },\n    removeCellOverlay(cell, overlay = null) {\n        if (!overlay) {\n            this.removeCellOverlays(cell);\n        }\n        else {\n            const index = cell.overlays.indexOf(overlay);\n            if (index >= 0) {\n                cell.overlays.splice(index, 1);\n                // Immediately updates the cell display if the state exists\n                const state = this.getView().getState(cell);\n                if (state) {\n                    this.getCellRenderer().redraw(state);\n                }\n                this.fireEvent(new EventObject(InternalEvent.REMOVE_OVERLAY, { cell, overlay }));\n            }\n            else {\n                overlay = null;\n            }\n        }\n        return overlay;\n    },\n    removeCellOverlays(cell) {\n        const { overlays } = cell;\n        cell.overlays = [];\n        // Immediately updates the cell display if the state exists\n        const state = this.getView().getState(cell);\n        if (state) {\n            this.getCellRenderer().redraw(state);\n        }\n        for (let i = 0; i < overlays.length; i += 1) {\n            this.fireEvent(new EventObject(InternalEvent.REMOVE_OVERLAY, 'cell', cell, 'overlay', overlays[i]));\n        }\n        return overlays;\n    },\n    clearCellOverlays(cell = null) {\n        cell = cell ?? this.getDataModel().getRoot();\n        if (!cell)\n            return;\n        this.removeCellOverlays(cell);\n        // Recursively removes all overlays from the children\n        const childCount = cell.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            const child = cell.getChildAt(i);\n            this.clearCellOverlays(child); // recurse\n        }\n    },\n    setCellWarning(cell, warning = null, img, isSelect = false) {\n        img = img ?? this.getWarningImage();\n        if (warning && warning.length > 0) {\n            // Creates the overlay with the image and warning\n            const overlay = new CellOverlay(img, `<font color=red>${warning}</font>`);\n            // Adds a handler for single mouseclicks to select the cell\n            if (isSelect) {\n                overlay.addListener(InternalEvent.CLICK, (sender, evt) => {\n                    if (this.isEnabled()) {\n                        this.setSelectionCell(cell);\n                    }\n                });\n            }\n            // Sets and returns the overlay in the graph\n            return this.addCellOverlay(cell, overlay);\n        }\n        this.removeCellOverlays(cell);\n        return null;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport { LINE_ARCSIZE } from '../../../util/Constants';\n/**\n * Extends {@link Shape} to implement a polyline (a line with multiple points).\n *\n * The shape is used to represent edges, not vertices.\n *\n * This shape is **NOT** registered in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * @category Edge Shapes\n */\nclass PolylineShape extends Shape {\n    /**\n     * Constructs a new polyline shape.\n     *\n     * @param points Array of <{@link Point} that define the points. This is stored in {@link Shape.points}.\n     * @param stroke String that defines the stroke color. Default is 'black'. This is stored in {@link Shape.stroke}.\n     * @param strokeWidth Optional integer that defines the stroke width. Default is 1. This is stored in {@link Shape.strokeWidth}.\n     */\n    constructor(points, stroke, strokeWidth = 1) {\n        super();\n        this.points = points;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n    }\n    /**\n     * Returns 0.\n     */\n    getRotation() {\n        return 0;\n    }\n    /**\n     * Returns 0.\n     */\n    getShapeRotation() {\n        return 0;\n    }\n    /**\n     * Returns false.\n     */\n    isPaintBoundsInverted() {\n        return false;\n    }\n    /**\n     * Paints the line shape.\n     */\n    paintEdgeShape(c, pts) {\n        const prev = c.pointerEventsValue;\n        c.pointerEventsValue = 'stroke';\n        if (!this.style?.curved) {\n            this.paintLine(c, pts, this.isRounded);\n        }\n        else {\n            this.paintCurvedLine(c, pts);\n        }\n        c.pointerEventsValue = prev;\n    }\n    /**\n     * Paints the line shape.\n     */\n    paintLine(c, pts, rounded) {\n        const arcSize = this.style?.arcSize ?? LINE_ARCSIZE;\n        c.begin();\n        this.addPoints(c, pts, rounded, arcSize, false);\n        c.stroke();\n    }\n    /**\n     * Paints the line shape.\n     */\n    paintCurvedLine(c, pts) {\n        c.begin();\n        const pt = pts[0];\n        const n = pts.length;\n        c.moveTo(pt.x, pt.y);\n        for (let i = 1; i < n - 2; i += 1) {\n            const p0 = pts[i];\n            const p1 = pts[i + 1];\n            const ix = (p0.x + p1.x) / 2;\n            const iy = (p0.y + p1.y) / 2;\n            c.quadTo(p0.x, p0.y, ix, iy);\n        }\n        const p0 = pts[n - 2];\n        const p1 = pts[n - 1];\n        c.quadTo(p0.x, p0.y, p1.x, p1.y);\n        c.stroke();\n    }\n}\nexport default PolylineShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../geometry/Rectangle';\nimport Point from '../geometry/Point';\nimport PolylineShape from '../shape/edge/PolylineShape';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const PageBreaksMixin = {\n    horizontalPageBreaks: null,\n    verticalPageBreaks: null,\n    updatePageBreaks(visible, _width, _height) {\n        const { scale, translate: tr } = this.getView();\n        const fmt = this.getPageFormat();\n        const ps = scale * this.getPageScale();\n        const bounds = new Rectangle(0, 0, fmt.width * ps, fmt.height * ps);\n        const gb = Rectangle.fromRectangle(this.getGraphBounds());\n        gb.width = Math.max(1, gb.width);\n        gb.height = Math.max(1, gb.height);\n        bounds.x =\n            Math.floor((gb.x - tr.x * scale) / bounds.width) * bounds.width + tr.x * scale;\n        bounds.y =\n            Math.floor((gb.y - tr.y * scale) / bounds.height) * bounds.height + tr.y * scale;\n        gb.width = Math.ceil((gb.width + (gb.x - bounds.x)) / bounds.width) * bounds.width;\n        gb.height =\n            Math.ceil((gb.height + (gb.y - bounds.y)) / bounds.height) * bounds.height;\n        // Does not show page breaks if the scale is too small\n        visible =\n            visible && Math.min(bounds.width, bounds.height) > this.getMinPageBreakDist();\n        const horizontalCount = visible ? Math.ceil(gb.height / bounds.height) + 1 : 0;\n        const verticalCount = visible ? Math.ceil(gb.width / bounds.width) + 1 : 0;\n        const right = (verticalCount - 1) * bounds.width;\n        const bottom = (horizontalCount - 1) * bounds.height;\n        if (this.horizontalPageBreaks == null && horizontalCount > 0) {\n            this.horizontalPageBreaks = [];\n        }\n        if (this.verticalPageBreaks == null && verticalCount > 0) {\n            this.verticalPageBreaks = [];\n        }\n        const drawPageBreaks = (breaks) => {\n            if (breaks != null) {\n                const count = breaks === this.horizontalPageBreaks ? horizontalCount : verticalCount;\n                for (let i = 0; i <= count; i += 1) {\n                    const pts = breaks === this.horizontalPageBreaks\n                        ? [\n                            new Point(Math.round(bounds.x), Math.round(bounds.y + i * bounds.height)),\n                            new Point(Math.round(bounds.x + right), Math.round(bounds.y + i * bounds.height)),\n                        ]\n                        : [\n                            new Point(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y)),\n                            new Point(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y + bottom)),\n                        ];\n                    if (breaks[i] != null) {\n                        breaks[i].points = pts;\n                        breaks[i].redraw();\n                    }\n                    else {\n                        const pageBreak = new PolylineShape(pts, this.getPageBreakColor());\n                        pageBreak.dialect = this.getDialect();\n                        pageBreak.pointerEvents = false;\n                        pageBreak.isDashed = this.isPageBreakDashed();\n                        pageBreak.init(this.getView().backgroundPane);\n                        pageBreak.redraw();\n                        breaks[i] = pageBreak;\n                    }\n                }\n                for (let i = count; i < breaks.length; i += 1) {\n                    breaks[i].destroy();\n                }\n                breaks.splice(count, breaks.length - count);\n            }\n        };\n        drawPageBreaks(this.horizontalPageBreaks);\n        drawPageBreaks(this.verticalPageBreaks);\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { hasScrollbars } from '../../util/styleUtils';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport Rectangle from '../geometry/Rectangle';\nimport Point from '../geometry/Point';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const PanningMixin = {\n    shiftPreview1: null,\n    shiftPreview2: null,\n    useScrollbarsForPanning: true,\n    isUseScrollbarsForPanning() {\n        return this.useScrollbarsForPanning;\n    },\n    timerAutoScroll: false,\n    isTimerAutoScroll() {\n        return this.timerAutoScroll;\n    },\n    allowAutoPanning: false,\n    isAllowAutoPanning() {\n        return this.allowAutoPanning;\n    },\n    panDx: 0,\n    getPanDx() {\n        return this.panDx;\n    },\n    setPanDx(dx) {\n        this.panDx = dx;\n    },\n    panDy: 0,\n    getPanDy() {\n        return this.panDy;\n    },\n    setPanDy(dy) {\n        this.panDy = dy;\n    },\n    panGraph(dx, dy) {\n        const container = this.getContainer();\n        if (this.useScrollbarsForPanning && hasScrollbars(container)) {\n            container.scrollLeft = -dx;\n            container.scrollTop = -dy;\n        }\n        else {\n            const canvas = this.getView().getCanvas();\n            // Puts everything inside the container in a DIV so that it\n            // can be moved without changing the state of the container\n            if (dx === 0 && dy === 0) {\n                canvas.removeAttribute('transform');\n                if (this.shiftPreview1) {\n                    let child = this.shiftPreview1.firstChild;\n                    while (child) {\n                        const next = child.nextSibling;\n                        container.appendChild(child);\n                        child = next;\n                    }\n                    if (this.shiftPreview1.parentNode) {\n                        this.shiftPreview1.parentNode.removeChild(this.shiftPreview1);\n                    }\n                    this.shiftPreview1 = null;\n                    container.appendChild(canvas.parentNode);\n                    const shiftPreview2 = this.shiftPreview2;\n                    child = shiftPreview2.firstChild;\n                    while (child) {\n                        const next = child.nextSibling;\n                        container.appendChild(child);\n                        child = next;\n                    }\n                    if (shiftPreview2.parentNode) {\n                        shiftPreview2.parentNode.removeChild(shiftPreview2);\n                    }\n                    this.shiftPreview2 = null;\n                }\n            }\n            else {\n                canvas.setAttribute('transform', `translate(${dx},${dy})`);\n                if (!this.shiftPreview1) {\n                    // Needs two divs for stuff before and after the SVG element\n                    this.shiftPreview1 = document.createElement('div');\n                    this.shiftPreview1.style.position = 'absolute';\n                    this.shiftPreview1.style.overflow = 'visible';\n                    this.shiftPreview2 = document.createElement('div');\n                    this.shiftPreview2.style.position = 'absolute';\n                    this.shiftPreview2.style.overflow = 'visible';\n                    let current = this.shiftPreview1;\n                    let child = container.firstChild;\n                    while (child) {\n                        const next = child.nextSibling;\n                        // SVG element is moved via transform attribute\n                        // @ts-ignore\n                        if (child !== canvas.parentNode) {\n                            current.appendChild(child);\n                        }\n                        else {\n                            current = this.shiftPreview2;\n                        }\n                        child = next;\n                    }\n                    // Inserts elements only if not empty\n                    if (this.shiftPreview1.firstChild) {\n                        container.insertBefore(this.shiftPreview1, canvas.parentNode);\n                    }\n                    if (this.shiftPreview2.firstChild) {\n                        container.appendChild(this.shiftPreview2);\n                    }\n                }\n                this.shiftPreview1.style.left = `${dx}px`;\n                this.shiftPreview1.style.top = `${dy}px`;\n                if (this.shiftPreview2) {\n                    this.shiftPreview2.style.left = `${dx}px`;\n                    this.shiftPreview2.style.top = `${dy}px`;\n                }\n            }\n            this.panDx = dx;\n            this.panDy = dy;\n            this.fireEvent(new EventObject(InternalEvent.PAN));\n        }\n    },\n    scrollCellToVisible(cell, center = false) {\n        const x = -this.getView().translate.x;\n        const y = -this.getView().translate.y;\n        const state = this.getView().getState(cell);\n        if (state) {\n            const bounds = new Rectangle(x + state.x, y + state.y, state.width, state.height);\n            if (center && this.getContainer()) {\n                const w = this.getContainer().clientWidth;\n                const h = this.getContainer().clientHeight;\n                bounds.x = bounds.getCenterX() - w / 2;\n                bounds.width = w;\n                bounds.y = bounds.getCenterY() - h / 2;\n                bounds.height = h;\n            }\n            const tr = new Point(this.getView().translate.x, this.getView().translate.y);\n            if (this.scrollRectToVisible(bounds)) {\n                // Triggers an update via the view's event source\n                const tr2 = new Point(this.getView().translate.x, this.getView().translate.y);\n                this.getView().translate.x = tr.x;\n                this.getView().translate.y = tr.y;\n                this.getView().setTranslate(tr2.x, tr2.y);\n            }\n        }\n    },\n    scrollRectToVisible(rect) {\n        let isChanged = false;\n        const container = this.getContainer();\n        const w = container.offsetWidth;\n        const h = container.offsetHeight;\n        const widthLimit = Math.min(w, rect.width);\n        const heightLimit = Math.min(h, rect.height);\n        if (hasScrollbars(container)) {\n            rect.x += this.getView().translate.x;\n            rect.y += this.getView().translate.y;\n            let dx = container.scrollLeft - rect.x;\n            const ddx = Math.max(dx - container.scrollLeft, 0);\n            if (dx > 0) {\n                container.scrollLeft -= dx + 2;\n            }\n            else {\n                dx = rect.x + widthLimit - container.scrollLeft - container.clientWidth;\n                if (dx > 0) {\n                    container.scrollLeft += dx + 2;\n                }\n            }\n            let dy = container.scrollTop - rect.y;\n            const ddy = Math.max(0, dy - container.scrollTop);\n            if (dy > 0) {\n                container.scrollTop -= dy + 2;\n            }\n            else {\n                dy = rect.y + heightLimit - container.scrollTop - container.clientHeight;\n                if (dy > 0) {\n                    container.scrollTop += dy + 2;\n                }\n            }\n            if (!this.useScrollbarsForPanning && (ddx != 0 || ddy != 0)) {\n                this.getView().setTranslate(ddx, ddy);\n            }\n        }\n        else {\n            const x = -this.getView().translate.x;\n            const y = -this.getView().translate.y;\n            const s = this.getView().scale;\n            if (rect.x + widthLimit > x + w) {\n                this.getView().translate.x -= (rect.x + widthLimit - w - x) / s;\n                isChanged = true;\n            }\n            if (rect.y + heightLimit > y + h) {\n                this.getView().translate.y -= (rect.y + heightLimit - h - y) / s;\n                isChanged = true;\n            }\n            if (rect.x < x) {\n                this.getView().translate.x += (x - rect.x) / s;\n                isChanged = true;\n            }\n            if (rect.y < y) {\n                this.getView().translate.y += (y - rect.y) / s;\n                isChanged = true;\n            }\n            if (isChanged) {\n                this.getView().refresh();\n                const selectionCellsHandler = this.getPlugin('SelectionCellsHandler');\n                // Repaints selection marker (ticket 18)\n                if (selectionCellsHandler) {\n                    selectionCellsHandler.refresh();\n                }\n            }\n        }\n        return isChanged;\n    },\n    setPanning(enabled) {\n        const panningHandler = this.getPlugin('PanningHandler');\n        panningHandler && (panningHandler.panningEnabled = enabled);\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nexport const PortsMixin = {\n    portsEnabled: true,\n    isPort(cell) {\n        return false;\n    },\n    getTerminalForPort(cell, _source = false) {\n        return cell.getParent();\n    },\n    isPortsEnabled() {\n        return this.portsEnabled;\n    },\n    setPortsEnabled(value) {\n        this.portsEnabled = value;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Cell from '../cell/Cell';\nimport Dictionary from '../../util/Dictionary';\nimport RootChange from '../undoable_changes/RootChange';\nimport ChildChange from '../undoable_changes/ChildChange';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const SelectionMixin = {\n    selectionModel: null,\n    getSelectionModel() {\n        return this.selectionModel;\n    },\n    setSelectionModel(selectionModel) {\n        this.selectionModel = selectionModel;\n    },\n    /*****************************************************************************\n     * Selection\n     *****************************************************************************/\n    isCellSelected(cell) {\n        return this.selectionModel.isSelected(cell);\n    },\n    isSelectionEmpty() {\n        return this.selectionModel.isEmpty();\n    },\n    clearSelection() {\n        this.selectionModel.clear();\n    },\n    getSelectionCount() {\n        return this.selectionModel.cells.length;\n    },\n    getSelectionCell() {\n        return this.selectionModel.cells[0];\n    },\n    getSelectionCells() {\n        return this.selectionModel.cells.slice();\n    },\n    setSelectionCell(cell) {\n        this.selectionModel.setCell(cell);\n    },\n    setSelectionCells(cells) {\n        this.selectionModel.setCells(cells);\n    },\n    addSelectionCell(cell) {\n        this.selectionModel.addCell(cell);\n    },\n    addSelectionCells(cells) {\n        this.selectionModel.addCells(cells);\n    },\n    removeSelectionCell(cell) {\n        this.selectionModel.removeCell(cell);\n    },\n    removeSelectionCells(cells) {\n        this.selectionModel.removeCells(cells);\n    },\n    selectRegion(rect, evt) {\n        const cells = this.getCells(rect.x, rect.y, rect.width, rect.height);\n        this.selectCellsForEvent(cells, evt);\n        return cells;\n    },\n    selectNextCell() {\n        this.selectCell(true);\n    },\n    selectPreviousCell() {\n        this.selectCell();\n    },\n    selectParentCell() {\n        this.selectCell(false, true);\n    },\n    selectChildCell() {\n        this.selectCell(false, false, true);\n    },\n    selectCell(isNext = false, isParent = false, isChild = false) {\n        const cell = this.selectionModel.cells.length > 0 ? this.selectionModel.cells[0] : null;\n        if (this.selectionModel.cells.length > 1) {\n            this.selectionModel.clear();\n        }\n        const parent = cell ? cell.getParent() : this.getDefaultParent();\n        const childCount = parent.getChildCount();\n        if (!cell && childCount > 0) {\n            const child = parent.getChildAt(0);\n            this.setSelectionCell(child);\n        }\n        else if (parent &&\n            (!cell || isParent) &&\n            this.getView().getState(parent) &&\n            parent.getGeometry()) {\n            if (this.getCurrentRoot() !== parent) {\n                this.setSelectionCell(parent);\n            }\n        }\n        else if (cell && isChild) {\n            const tmp = cell.getChildCount();\n            if (tmp > 0) {\n                const child = cell.getChildAt(0);\n                this.setSelectionCell(child);\n            }\n        }\n        else if (childCount > 0) {\n            let i = parent.getIndex(cell);\n            if (isNext) {\n                i++;\n                const child = parent.getChildAt(i % childCount);\n                this.setSelectionCell(child);\n            }\n            else {\n                i--;\n                const index = i < 0 ? childCount - 1 : i;\n                const child = parent.getChildAt(index);\n                this.setSelectionCell(child);\n            }\n        }\n    },\n    selectAll(parent, descendants = false) {\n        parent = parent ?? this.getDefaultParent();\n        const cells = descendants\n            ? parent.filterDescendants((cell) => {\n                return cell !== parent && !!this.getView().getState(cell);\n            })\n            : parent.getChildren();\n        this.setSelectionCells(cells);\n    },\n    selectVertices(parent, selectGroups = false) {\n        this.selectCells(true, false, parent, selectGroups);\n    },\n    selectEdges(parent) {\n        this.selectCells(false, true, parent);\n    },\n    selectCells(vertices = false, edges = false, parent, selectGroups = false) {\n        parent = parent ?? this.getDefaultParent();\n        const filter = (cell) => {\n            const p = cell.getParent();\n            return (!!this.getView().getState(cell) &&\n                (((selectGroups || cell.getChildCount() === 0) &&\n                    cell.isVertex() &&\n                    vertices &&\n                    p &&\n                    !p.isEdge()) ||\n                    (cell.isEdge() && edges)));\n        };\n        const cells = parent.filterDescendants(filter);\n        this.setSelectionCells(cells);\n    },\n    selectCellForEvent(cell, evt) {\n        const isSelected = this.isCellSelected(cell);\n        if (this.isToggleEvent(evt)) {\n            if (isSelected) {\n                this.removeSelectionCell(cell);\n            }\n            else {\n                this.addSelectionCell(cell);\n            }\n        }\n        else if (!isSelected || this.getSelectionCount() !== 1) {\n            this.setSelectionCell(cell);\n        }\n    },\n    selectCellsForEvent(cells, evt) {\n        if (this.isToggleEvent(evt)) {\n            this.addSelectionCells(cells);\n        }\n        else {\n            this.setSelectionCells(cells);\n        }\n    },\n    isSiblingSelected(cell) {\n        const parent = cell.getParent();\n        const childCount = parent.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            const child = parent.getChildAt(i);\n            if (cell !== child && this.isCellSelected(child)) {\n                return true;\n            }\n        }\n        return false;\n    },\n    /*****************************************************************************\n     * Selection state\n     *****************************************************************************/\n    getSelectionCellsForChanges(changes, ignoreFn = null) {\n        const dict = new Dictionary();\n        const cells = [];\n        const addCell = (cell) => {\n            if (!dict.get(cell) && this.getDataModel().contains(cell)) {\n                if (cell.isEdge() || cell.isVertex()) {\n                    dict.put(cell, true);\n                    cells.push(cell);\n                }\n                else {\n                    const childCount = cell.getChildCount();\n                    for (let i = 0; i < childCount; i += 1) {\n                        addCell(cell.getChildAt(i));\n                    }\n                }\n            }\n        };\n        for (let i = 0; i < changes.length; i += 1) {\n            const change = changes[i];\n            if (change.constructor !== RootChange && (!ignoreFn || !ignoreFn(change))) {\n                let cell = null;\n                if (change instanceof ChildChange) {\n                    cell = change.child;\n                }\n                else if (change.cell && change.cell instanceof Cell) {\n                    cell = change.cell;\n                }\n                if (cell) {\n                    addCell(cell);\n                }\n            }\n        }\n        return cells;\n    },\n    updateSelection() {\n        const cells = this.getSelectionCells();\n        const removed = [];\n        for (const cell of cells) {\n            if (!this.getDataModel().contains(cell) || !cell.isVisible()) {\n                removed.push(cell);\n            }\n            else {\n                let par = cell.getParent();\n                while (par && par !== this.getView().currentRoot) {\n                    if (par.isCollapsed() || !par.isVisible()) {\n                        removed.push(cell);\n                        break;\n                    }\n                    par = par.getParent();\n                }\n            }\n        }\n        this.removeSelectionCells(removed);\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const SnapMixin = {\n    snapTolerance: 0,\n    getSnapTolerance() {\n        return this.snapTolerance;\n    },\n    gridSize: 10,\n    gridEnabled: true,\n    snap(value) {\n        if (this.gridEnabled) {\n            value = Math.round(value / this.gridSize) * this.gridSize;\n        }\n        return value;\n    },\n    snapDelta(delta, bounds, ignoreGrid = false, ignoreHorizontal = false, ignoreVertical = false) {\n        const t = this.getView().translate;\n        const s = this.getView().scale;\n        if (!ignoreGrid && this.gridEnabled) {\n            const tol = this.gridSize * s * 0.5;\n            if (!ignoreHorizontal) {\n                const tx = bounds.x - (this.snap(bounds.x / s - t.x) + t.x) * s;\n                if (Math.abs(delta.x - tx) < tol) {\n                    delta.x = 0;\n                }\n                else {\n                    delta.x = this.snap(delta.x / s) * s - tx;\n                }\n            }\n            if (!ignoreVertical) {\n                const ty = bounds.y - (this.snap(bounds.y / s - t.y) + t.y) * s;\n                if (Math.abs(delta.y - ty) < tol) {\n                    delta.y = 0;\n                }\n                else {\n                    delta.y = this.snap(delta.y / s) * s - ty;\n                }\n            }\n        }\n        else {\n            const tol = 0.5 * s;\n            if (!ignoreHorizontal) {\n                const tx = bounds.x - (Math.round(bounds.x / s - t.x) + t.x) * s;\n                if (Math.abs(delta.x - tx) < tol) {\n                    delta.x = 0;\n                }\n                else {\n                    delta.x = Math.round(delta.x / s) * s - tx;\n                }\n            }\n            if (!ignoreVertical) {\n                const ty = bounds.y - (Math.round(bounds.y / s - t.y) + t.y) * s;\n                if (Math.abs(delta.y - ty) < tol) {\n                    delta.y = 0;\n                }\n                else {\n                    delta.y = Math.round(delta.y / s) * s - ty;\n                }\n            }\n        }\n        return delta;\n    },\n    isGridEnabled() {\n        return this.gridEnabled;\n    },\n    setGridEnabled(value) {\n        this.gridEnabled = value;\n    },\n    getGridSize() {\n        return this.gridSize;\n    },\n    setGridSize(value) {\n        this.gridSize = value;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../geometry/Rectangle';\nimport { convertPoint } from '../../util/styleUtils';\nimport { mod } from '../../util/mathUtils';\nimport { DEFAULT_STARTSIZE } from '../../util/Constants';\nimport { getClientX, getClientY } from '../../util/EventUtils';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const SwimlaneMixin = {\n    swimlaneSelectionEnabled: true,\n    swimlaneNesting: true,\n    swimlaneIndicatorColorAttribute: 'fillColor',\n    getSwimlane(cell = null) {\n        while (cell && !this.isSwimlane(cell)) {\n            cell = cell.getParent();\n        }\n        return cell;\n    },\n    getSwimlaneAt(x, y, parent) {\n        if (!parent) {\n            parent = this.getCurrentRoot();\n            if (!parent) {\n                parent = this.getDataModel().getRoot();\n            }\n        }\n        if (parent) {\n            const childCount = parent.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                const child = parent.getChildAt(i);\n                if (child) {\n                    const result = this.getSwimlaneAt(x, y, child);\n                    if (result != null) {\n                        return result;\n                    }\n                    if (child.isVisible() && this.isSwimlane(child)) {\n                        const state = this.getView().getState(child);\n                        if (state && this.intersects(state, x, y)) {\n                            return child;\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    },\n    hitsSwimlaneContent(swimlane, x, y) {\n        const state = this.getView().getState(swimlane);\n        const size = this.getStartSize(swimlane);\n        if (state) {\n            const scale = this.getView().getScale();\n            x -= state.x;\n            y -= state.y;\n            if (size.width > 0 && x > 0 && x > size.width * scale) {\n                return true;\n            }\n            if (size.height > 0 && y > 0 && y > size.height * scale) {\n                return true;\n            }\n        }\n        return false;\n    },\n    getStartSize(swimlane, ignoreState = false) {\n        const result = new Rectangle();\n        const style = this.getCurrentCellStyle(swimlane, ignoreState);\n        const size = style.startSize ?? DEFAULT_STARTSIZE;\n        if (style.horizontal ?? true) {\n            result.height = size;\n        }\n        else {\n            result.width = size;\n        }\n        return result;\n    },\n    getSwimlaneDirection(style) {\n        const dir = style.direction ?? 'east';\n        const flipH = style.flipH;\n        const flipV = style.flipV;\n        const h = style.horizontal ?? true;\n        let n = h ? 0 : 3;\n        if (dir === 'north') {\n            n--;\n        }\n        else if (dir === 'west') {\n            n += 2;\n        }\n        else if (dir === 'south') {\n            n += 1;\n        }\n        const _mod = mod(n, 2);\n        if (flipH && _mod === 1) {\n            n += 2;\n        }\n        if (flipV && _mod === 0) {\n            n += 2;\n        }\n        return ['north', 'east', 'south', 'west'][mod(n, 4)];\n    },\n    getActualStartSize(swimlane, ignoreState = false) {\n        const result = new Rectangle();\n        if (this.isSwimlane(swimlane, ignoreState)) {\n            const style = this.getCurrentCellStyle(swimlane, ignoreState);\n            const size = style.startSize ?? DEFAULT_STARTSIZE;\n            const dir = this.getSwimlaneDirection(style);\n            if (dir === 'north') {\n                result.y = size;\n            }\n            else if (dir === 'west') {\n                result.x = size;\n            }\n            else if (dir === 'south') {\n                result.height = size;\n            }\n            else {\n                result.width = size;\n            }\n        }\n        return result;\n    },\n    isSwimlane(cell, ignoreState = false) {\n        if (cell && cell.getParent() !== this.getDataModel().getRoot() && !cell.isEdge()) {\n            return this.getCurrentCellStyle(cell, ignoreState).shape === 'swimlane';\n        }\n        return false;\n    },\n    isValidDropTarget(cell, cells, evt) {\n        return (cell &&\n            ((this.isSplitEnabled() && this.isSplitTarget(cell, cells, evt)) ||\n                (!cell.isEdge() &&\n                    (this.isSwimlane(cell) || (cell.getChildCount() > 0 && !cell.isCollapsed())))));\n    },\n    getDropTarget(cells, evt, cell = null, clone = false) {\n        if (!this.isSwimlaneNesting()) {\n            for (let i = 0; i < cells.length; i += 1) {\n                if (this.isSwimlane(cells[i])) {\n                    return null;\n                }\n            }\n        }\n        const pt = convertPoint(this.getContainer(), getClientX(evt), getClientY(evt));\n        pt.x -= this.getPanDx();\n        pt.y -= this.getPanDy();\n        const swimlane = this.getSwimlaneAt(pt.x, pt.y);\n        if (!cell) {\n            cell = swimlane;\n        }\n        else if (swimlane) {\n            // Checks if the cell is an ancestor of the swimlane\n            // under the mouse and uses the swimlane in that case\n            let tmp = swimlane.getParent();\n            while (tmp && this.isSwimlane(tmp) && tmp !== cell) {\n                tmp = tmp.getParent();\n            }\n            if (tmp === cell) {\n                cell = swimlane;\n            }\n        }\n        while (cell &&\n            !this.isValidDropTarget(cell, cells, evt) &&\n            !this.getDataModel().isLayer(cell)) {\n            cell = cell.getParent();\n        }\n        // Checks if parent is dropped into child if not cloning\n        let parentCell = cell;\n        if (!clone) {\n            while (parentCell && cells.indexOf(parentCell) < 0) {\n                parentCell = parentCell.getParent();\n            }\n        }\n        return !this.getDataModel().isLayer(cell) && !parentCell ? cell : null;\n    },\n    isSwimlaneNesting() {\n        return this.swimlaneNesting;\n    },\n    setSwimlaneNesting(value) {\n        this.swimlaneNesting = value;\n    },\n    isSwimlaneSelectionEnabled() {\n        return this.swimlaneSelectionEnabled;\n    },\n    setSwimlaneSelectionEnabled(value) {\n        this.swimlaneSelectionEnabled = value;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Dictionary from '../../util/Dictionary';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const TerminalMixin = {\n    isTerminalPointMovable(cell, source) {\n        return true;\n    },\n    getOpposites(edges, terminal = null, includeSources = true, includeTargets = true) {\n        const terminals = [];\n        // Fast lookup to avoid duplicates in terminals array\n        const dict = new Dictionary();\n        for (let i = 0; i < edges.length; i += 1) {\n            const state = this.getView().getState(edges[i]);\n            const source = state\n                ? state.getVisibleTerminal(true)\n                : this.getView().getVisibleTerminal(edges[i], true);\n            const target = state\n                ? state.getVisibleTerminal(false)\n                : this.getView().getVisibleTerminal(edges[i], false);\n            // Checks if the terminal is the source of the edge and if the\n            // target should be stored in the result\n            if (source === terminal && target && target !== terminal && includeTargets) {\n                if (!dict.get(target)) {\n                    dict.put(target, true);\n                    terminals.push(target);\n                }\n            }\n            // Checks if the terminal is the taget of the edge and if the\n            // source should be stored in the result\n            else if (target === terminal && source && source !== terminal && includeSources) {\n                if (!dict.get(source)) {\n                    dict.put(source, true);\n                    terminals.push(source);\n                }\n            }\n        }\n        return terminals;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { htmlEntities } from '../../util/StringUtils';\nimport { translate } from '../../internal/i18n-utils';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const TooltipMixin = {\n    getTooltip(state, node, x, y) {\n        let tip = null;\n        // Checks if the mouse is over the folding icon\n        if (state.control &&\n            (node === state.control.node || node.parentNode === state.control.node)) {\n            tip = this.getCollapseExpandResource();\n            tip = htmlEntities(translate(tip) || tip, true).replace(/\\\\n/g, '<br>');\n        }\n        if (!tip && state.overlays) {\n            state.overlays.visit((id, shape) => {\n                // LATER: Exit loop if tip is not null\n                if (!tip && (node === shape.node || node.parentNode === shape.node)) {\n                    tip = shape.overlay ? (shape.overlay.toString() ?? null) : null;\n                }\n            });\n        }\n        if (!tip) {\n            const selectionCellsHandler = this.getPlugin('SelectionCellsHandler');\n            const handler = selectionCellsHandler?.getHandler(state.cell);\n            if (handler &&\n                'getTooltipForNode' in handler &&\n                typeof handler.getTooltipForNode === 'function') {\n                tip = handler.getTooltipForNode(node);\n            }\n        }\n        if (!tip) {\n            tip = this.getTooltipForCell(state.cell);\n        }\n        return tip;\n    },\n    getTooltipForCell(cell) {\n        let tip = null;\n        if (cell && 'getTooltip' in cell) {\n            // @ts-ignore getTooltip() must exists.\n            tip = cell.getTooltip();\n        }\n        else {\n            tip = this.convertValueToString(cell);\n        }\n        return tip;\n    },\n    setTooltips(enabled) {\n        const tooltipHandler = this.getPlugin('TooltipHandler');\n        tooltipHandler?.setEnabled(enabled);\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { isNode } from '../../util/domUtils';\nimport { translate } from '../../internal/i18n-utils';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const ValidationMixin = {\n    validationAlert(message) {\n        alert(message);\n    },\n    isEdgeValid(edge, source, target) {\n        return !this.getEdgeValidationError(edge, source, target);\n    },\n    getEdgeValidationError(edge = null, source = null, target = null) {\n        if (edge && !this.isAllowDanglingEdges() && (!source || !target)) {\n            return '';\n        }\n        if (edge && !edge.getTerminal(true) && !edge.getTerminal(false)) {\n            return null;\n        }\n        // Checks if we're dealing with a loop\n        if (!this.isAllowLoops() && source === target && source) {\n            return '';\n        }\n        // Checks if the connection is generally allowed\n        if (!this.isValidConnection(source, target)) {\n            return '';\n        }\n        if (source && target) {\n            let error = '';\n            // Checks if the cells are already connected\n            // and adds an error message if required\n            if (!this.isMultigraph()) {\n                const tmp = this.getDataModel().getEdgesBetween(source, target, true);\n                // Checks if the source and target are not connected by another edge\n                if (tmp.length > 1 || (tmp.length === 1 && tmp[0] !== edge)) {\n                    error += `${translate(this.getAlreadyConnectedResource()) ||\n                        this.getAlreadyConnectedResource()}\\n`;\n                }\n            }\n            // Gets the number of outgoing edges from the source\n            // and the number of incoming edges from the target\n            // without counting the edge being currently changed.\n            const sourceOut = source.getDirectedEdgeCount(true, edge);\n            const targetIn = target.getDirectedEdgeCount(false, edge);\n            // Checks the change against each multiplicity rule\n            for (const multiplicity of this.multiplicities) {\n                const err = multiplicity.check(this, // needs to cast to Graph\n                edge, source, target, sourceOut, targetIn);\n                if (err != null) {\n                    error += err;\n                }\n            }\n            // Validates the source and target terminals independently\n            const err = this.validateEdge(edge, source, target);\n            if (err != null) {\n                error += err;\n            }\n            return error.length > 0 ? error : null;\n        }\n        return this.isAllowDanglingEdges() ? null : '';\n    },\n    validateEdge(edge = null, source = null, target = null) {\n        return null;\n    },\n    validateGraph(cell = null, context) {\n        cell = cell ?? this.getDataModel().getRoot();\n        if (!cell) {\n            return 'The root does not exist!';\n        }\n        context = context ?? {};\n        let isValid = true;\n        const childCount = cell.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            const tmp = cell.getChildAt(i);\n            let ctx = context;\n            if (this.isValidRoot(tmp)) {\n                ctx = {};\n            }\n            const warn = this.validateGraph(tmp, ctx);\n            if (warn) {\n                this.setCellWarning(tmp, warn.replace(/\\n/g, '<br>'));\n            }\n            else {\n                this.setCellWarning(tmp, null);\n            }\n            isValid = isValid && warn == null;\n        }\n        let warning = '';\n        // Adds error for invalid children if collapsed (children invisible)\n        if (cell && cell.isCollapsed() && !isValid) {\n            warning += `${translate(this.getContainsValidationErrorsResource()) ||\n                this.getContainsValidationErrorsResource()}\\n`;\n        }\n        // Checks edges and cells using the defined multiplicities\n        if (cell && cell.isEdge()) {\n            warning +=\n                this.getEdgeValidationError(cell, cell.getTerminal(true), cell.getTerminal(false)) || '';\n        }\n        else {\n            warning += this.getCellValidationError(cell) || '';\n        }\n        // Checks custom validation rules\n        const err = this.validateCell(cell, context);\n        if (err != null) {\n            warning += err;\n        }\n        // Updates the display with the warning icons\n        // before any potential alerts are displayed.\n        // LATER: Move this into addCellOverlay. Redraw\n        // should check if overlay was added or removed.\n        if (cell.getParent() == null) {\n            this.getView().validate();\n        }\n        return warning.length > 0 || !isValid ? warning : null;\n    },\n    getCellValidationError(cell) {\n        const outCount = cell.getDirectedEdgeCount(true);\n        const inCount = cell.getDirectedEdgeCount(false);\n        const value = cell.getValue();\n        let error = '';\n        for (let i = 0; i < this.multiplicities.length; i += 1) {\n            const rule = this.multiplicities[i];\n            if (rule.source &&\n                isNode(value, rule.type, rule.attr, rule.value) &&\n                (outCount > rule.max || outCount < rule.min)) {\n                error += `${rule.countError}\\n`;\n            }\n            else if (!rule.source &&\n                isNode(value, rule.type, rule.attr, rule.value) &&\n                (inCount > rule.max || inCount < rule.min)) {\n                error += `${rule.countError}\\n`;\n            }\n        }\n        return error.length > 0 ? error : null;\n    },\n    validateCell(cell, context) {\n        return null;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Cell from '../cell/Cell';\nimport Geometry from '../geometry/Geometry';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const VertexMixin = {\n    vertexLabelsMovable: false,\n    allowNegativeCoordinates: true,\n    isAllowNegativeCoordinates() {\n        return this.allowNegativeCoordinates;\n    },\n    setAllowNegativeCoordinates(value) {\n        this.allowNegativeCoordinates = value;\n    },\n    insertVertex(...args) {\n        let parent;\n        let id;\n        let value;\n        let x;\n        let y;\n        let width;\n        let height;\n        let style;\n        let relative;\n        let geometryClass;\n        if (args.length === 1 && typeof args[0] === 'object') {\n            const params = args[0];\n            parent = params.parent;\n            id = params.id;\n            value = params.value;\n            x = 'x' in params ? params.x : params.position?.[0];\n            y = 'y' in params ? params.y : params.position?.[1];\n            width = 'width' in params ? params.width : params.size?.[0];\n            height = 'height' in params ? params.height : params.size?.[1];\n            style = params.style;\n            relative = params.relative;\n            geometryClass = params.geometryClass;\n        }\n        else {\n            // Otherwise treat as arguments\n            [parent, id, value, x, y, width, height, style, relative, geometryClass] = args;\n        }\n        const vertex = this.createVertex(parent, id, value, x, y, width, height, style, relative, geometryClass);\n        return this.addCell(vertex, parent);\n    },\n    createVertex(_parent, id, value, x, y, width, height, style, relative = false, geometryClass = Geometry) {\n        // Creates the geometry for the vertex\n        const geometry = new geometryClass(x, y, width, height);\n        geometry.relative = relative;\n        // Creates the vertex\n        const vertex = new Cell(value, geometry, style);\n        vertex.setId(id);\n        vertex.setVertex(true);\n        vertex.setConnectable(true);\n        return vertex;\n    },\n    getChildVertices(parent) {\n        return this.getChildCells(parent, true, false);\n    },\n    isVertexLabelsMovable() {\n        return this.vertexLabelsMovable;\n    },\n    setVertexLabelsMovable(value) {\n        this.vertexLabelsMovable = value;\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../geometry/Rectangle';\nimport { hasScrollbars } from '../../util/styleUtils';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nexport const ZoomMixin = {\n    zoomFactor: 1.2,\n    keepSelectionVisibleOnZoom: false,\n    centerZoom: true,\n    zoomIn() {\n        this.zoom(this.zoomFactor);\n    },\n    zoomOut() {\n        this.zoom(1 / this.zoomFactor);\n    },\n    zoomActual() {\n        if (this.getView().scale === 1) {\n            this.getView().setTranslate(0, 0);\n        }\n        else {\n            this.getView().translate.x = 0;\n            this.getView().translate.y = 0;\n            this.getView().setScale(1);\n        }\n    },\n    zoomTo(scale, center = false) {\n        this.zoom(scale / this.getView().scale, center);\n    },\n    zoom(factor, center) {\n        center = center ?? this.centerZoom;\n        const scale = Math.round(this.getView().scale * factor * 100) / 100;\n        const state = this.getView().getState(this.getSelectionCell());\n        const container = this.getContainer();\n        factor = scale / this.getView().scale;\n        if (this.keepSelectionVisibleOnZoom && state != null) {\n            const rect = new Rectangle(state.x * factor, state.y * factor, state.width * factor, state.height * factor);\n            // Refreshes the display only once if a scroll is carried out\n            this.getView().scale = scale;\n            if (!this.scrollRectToVisible(rect)) {\n                this.getView().revalidate();\n                // Forces an event to be fired but does not revalidate again\n                this.getView().setScale(scale);\n            }\n        }\n        else {\n            const _hasScrollbars = hasScrollbars(this.getContainer());\n            if (center && !_hasScrollbars) {\n                let dx = container.offsetWidth;\n                let dy = container.offsetHeight;\n                if (factor > 1) {\n                    const f = (factor - 1) / (scale * 2);\n                    dx *= -f;\n                    dy *= -f;\n                }\n                else {\n                    const f = (1 / factor - 1) / (this.getView().scale * 2);\n                    dx *= f;\n                    dy *= f;\n                }\n                this.getView().scaleAndTranslate(scale, this.getView().translate.x + dx, this.getView().translate.y + dy);\n            }\n            else {\n                // Allows for changes of translate and scrollbars during setscale\n                const tx = this.getView().translate.x;\n                const ty = this.getView().translate.y;\n                const sl = container.scrollLeft;\n                const st = container.scrollTop;\n                this.getView().setScale(scale);\n                if (_hasScrollbars) {\n                    let dx = 0;\n                    let dy = 0;\n                    if (center) {\n                        dx = (container.offsetWidth * (factor - 1)) / 2;\n                        dy = (container.offsetHeight * (factor - 1)) / 2;\n                    }\n                    container.scrollLeft =\n                        (this.getView().translate.x - tx) * this.getView().scale +\n                            Math.round(sl * factor + dx);\n                    container.scrollTop =\n                        (this.getView().translate.y - ty) * this.getView().scale +\n                            Math.round(st * factor + dy);\n                }\n            }\n        }\n    },\n    zoomToRect(rect) {\n        const container = this.getContainer();\n        const scaleX = container.clientWidth / rect.width;\n        const scaleY = container.clientHeight / rect.height;\n        const aspectFactor = scaleX / scaleY;\n        // Remove any overlap of the rect outside the client area\n        rect.x = Math.max(0, rect.x);\n        rect.y = Math.max(0, rect.y);\n        let rectRight = Math.min(container.scrollWidth, rect.x + rect.width);\n        let rectBottom = Math.min(container.scrollHeight, rect.y + rect.height);\n        rect.width = rectRight - rect.x;\n        rect.height = rectBottom - rect.y;\n        // The selection area has to be increased to the same aspect\n        // ratio as the container, centred around the centre point of the\n        // original rect passed in.\n        if (aspectFactor < 1.0) {\n            // Height needs increasing\n            const newHeight = rect.height / aspectFactor;\n            const deltaHeightBuffer = (newHeight - rect.height) / 2.0;\n            rect.height = newHeight;\n            // Assign up to half the buffer to the upper part of the rect, not crossing 0\n            // put the rest on the bottom\n            const upperBuffer = Math.min(rect.y, deltaHeightBuffer);\n            rect.y -= upperBuffer;\n            // Check if the bottom has extended too far\n            rectBottom = Math.min(container.scrollHeight, rect.y + rect.height);\n            rect.height = rectBottom - rect.y;\n        }\n        else {\n            // Width needs increasing\n            const newWidth = rect.width * aspectFactor;\n            const deltaWidthBuffer = (newWidth - rect.width) / 2.0;\n            rect.width = newWidth;\n            // Assign up to half the buffer to the upper part of the rect, not crossing 0\n            // put the rest on the bottom\n            const leftBuffer = Math.min(rect.x, deltaWidthBuffer);\n            rect.x -= leftBuffer;\n            // Check if the right hand side has extended too far\n            rectRight = Math.min(container.scrollWidth, rect.x + rect.width);\n            rect.width = rectRight - rect.x;\n        }\n        const scale = container.clientWidth / rect.width;\n        const newScale = this.getView().scale * scale;\n        if (!hasScrollbars(this.getContainer())) {\n            this.getView().scaleAndTranslate(newScale, this.getView().translate.x - rect.x / this.getView().scale, this.getView().translate.y - rect.y / this.getView().scale);\n        }\n        else {\n            this.getView().setScale(newScale);\n            container.scrollLeft = Math.round(rect.x * scale);\n            container.scrollTop = Math.round(rect.y * scale);\n        }\n    },\n};\n","/*\nCopyright 2024-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { mixInto } from '../../internal/utils';\nimport { CellsMixin } from './CellsMixin';\nimport { ConnectionsMixin } from './ConnectionsMixin';\nimport { DragDropMixin } from './DragDropMixin';\nimport { EdgeMixin } from './EdgeMixin';\nimport { EditingMixin } from './EditingMixin';\nimport { EventsMixin } from './EventsMixin';\nimport { FoldingMixin } from './FoldingMixin';\nimport { GroupingMixin } from './GroupingMixin';\nimport { ImageMixin } from './ImageMixin';\nimport { LabelMixin } from './LabelMixin';\nimport { OrderMixin } from './OrderMixin';\nimport { OverlaysMixin } from './OverlaysMixin';\nimport { PageBreaksMixin } from './PageBreaksMixin';\nimport { PanningMixin } from './PanningMixin';\nimport { PortsMixin } from './PortsMixin';\nimport { SelectionMixin } from './SelectionMixin';\nimport { SnapMixin } from './SnapMixin';\nimport { SwimlaneMixin } from './SwimlaneMixin';\nimport { TerminalMixin } from './TerminalMixin';\nimport { TooltipMixin } from './TooltipMixin';\nimport { ValidationMixin } from './ValidationMixin';\nimport { VertexMixin } from './VertexMixin';\nimport { ZoomMixin } from './ZoomMixin';\nexport const applyGraphMixins = (target) => {\n    const mixIntoGraph = mixInto(target);\n    // Apply the mixins in alphabetic order to ease maintenance.\n    // The order should have no influence of the resulting Graph prototype.\n    for (const mixin of [\n        CellsMixin,\n        ConnectionsMixin,\n        DragDropMixin,\n        EdgeMixin,\n        EditingMixin,\n        EventsMixin,\n        FoldingMixin,\n        GroupingMixin,\n        ImageMixin,\n        LabelMixin,\n        OrderMixin,\n        PageBreaksMixin,\n        OverlaysMixin,\n        PanningMixin,\n        PortsMixin,\n        SelectionMixin,\n        SnapMixin,\n        SwimlaneMixin,\n        TerminalMixin,\n        TooltipMixin,\n        ValidationMixin,\n        VertexMixin,\n        ZoomMixin,\n    ]) {\n        mixIntoGraph(mixin);\n    }\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Image from './image/ImageBox';\nimport EventObject from './event/EventObject';\nimport EventSource from './event/EventSource';\nimport InternalEvent from './event/InternalEvent';\nimport Rectangle from './geometry/Rectangle';\nimport Client from '../Client';\nimport { getCurrentStyle, hasScrollbars, parseCssNumber } from '../util/styleUtils';\nimport Cell from './cell/Cell';\nimport { PAGE_FORMAT_A4_PORTRAIT } from '../util/Constants';\nimport ChildChange from './undoable_changes/ChildChange';\nimport GeometryChange from './undoable_changes/GeometryChange';\nimport RootChange from './undoable_changes/RootChange';\nimport StyleChange from './undoable_changes/StyleChange';\nimport TerminalChange from './undoable_changes/TerminalChange';\nimport ValueChange from './undoable_changes/ValueChange';\nimport { isNode } from '../util/domUtils';\nimport { EdgeStyle } from './style/builtin-style-elements';\nimport { EdgeStyleRegistry } from './style/edge/EdgeStyleRegistry';\nimport EdgeHandler from './handler/EdgeHandler';\nimport VertexHandler from './handler/VertexHandler';\nimport EdgeSegmentHandler from './handler/EdgeSegmentHandler';\nimport ElbowEdgeHandler from './handler/ElbowEdgeHandler';\nimport { applyGraphMixins } from './mixins/_graph-mixins-apply';\nimport { isNullish } from '../internal/utils';\nimport { isI18nEnabled } from '../internal/i18n-utils';\n/**\n * Extends {@link EventSource} to implement a graph component for the browser. This is the entry point class of the package.\n *\n * To activate panning and connections use {@link setPanning} and {@link setConnectable}.\n * For rubberband selection you must create a new instance of {@link rubberband}.\n *\n * The following listeners are added to {@link mouseListeners} by default:\n *\n * - tooltipHandler: {@link TooltipHandler} that displays tooltips\n * - panningHandler: {@link PanningHandler} for panning and popup menus\n * - connectionHandler: {@link ConnectionHandler} for creating connections\n * - selectionHandler: {@link SelectionHandler} for moving and cloning cells\n *\n * These listeners will be called in the above order if they are enabled.\n *\n * @category Graph\n */\nexport class AbstractGraph extends EventSource {\n    // ===================================================================================================================\n    // Group: \"Create Class Instance\" factory functions.\n    // These can be overridden in subclasses to allow the Graph to instantiate user-defined implementations with custom behavior.\n    // Notice that the methods will be moved as part of https://github.com/maxGraph/maxGraph/issues/762\n    // ===================================================================================================================\n    /**\n     * Hooks to create a new {@link EdgeHandler} for the given {@link CellState}.\n     *\n     * @param state {@link CellState} to create the handler for.\n     */\n    createEdgeHandlerInstance(state) {\n        // Note this method not being called createEdgeHandler to keep compatibility\n        // with older code which overrides/calls createEdgeHandler\n        return new EdgeHandler(state);\n    }\n    /**\n     * Hooks to create a new {@link EdgeSegmentHandler} for the given {@link CellState}.\n     *\n     * @param state {@link CellState} to create the handler for.\n     */\n    createEdgeSegmentHandler(state) {\n        return new EdgeSegmentHandler(state);\n    }\n    /**\n     * Hooks to create a new {@link ElbowEdgeHandler} for the given {@link CellState}.\n     *\n     * @param state {@link CellState} to create the handler for.\n     */\n    createElbowEdgeHandler(state) {\n        return new ElbowEdgeHandler(state);\n    }\n    /**\n     * Hooks to create a new {@link VertexHandler} for the given {@link CellState}.\n     *\n     * @param state {@link CellState} to create the handler for.\n     */\n    createVertexHandler(state) {\n        return new VertexHandler(state);\n    }\n    // ===================================================================================================================\n    // Group: Main graph constructor and functions\n    // ===================================================================================================================\n    /**\n     * Convenient hook method that can be used to register global styles and shapes using the related global registries.\n     *\n     * While registration can also be done outside of this class (as it applies globally),\n     * implementing it here makes the registration process transparent to the caller of this class.\n     *\n     * Subclasses can override this method to register custom defaults.\n     */\n    registerDefaults() {\n        // do nothing, it's the purpose of this class not to load defaults.\n    }\n    constructor(options) {\n        super();\n        this.destroyed = false;\n        this.graphModelChangeListener = null;\n        this.paintBackground = null;\n        this.isConstrainedMoving = false;\n        // ===================================================================================================================\n        // Group: Variables (that maybe should be in the mixins, but need to be created for each new class instance)\n        // ===================================================================================================================\n        this.cells = [];\n        this.imageBundles = [];\n        /**\n         * Holds the mouse event listeners. See {@link fireMouseEvent}.\n         */\n        this.mouseListeners = [];\n        /**\n         * An array of {@link Multiplicity} describing the allowed connections in a graph.\n         */\n        this.multiplicities = [];\n        this.plugins = {};\n        /**\n         * RenderHint as it was passed to the constructor.\n         */\n        this.renderHint = null;\n        /**\n         * Dialect to be used for drawing the graph.\n         */\n        this.dialect = 'svg';\n        /**\n         * Value returned by {@link getOverlap} if {@link isAllowOverlapParent} returns\n         * `true` for the given cell. {@link getOverlap} is used in {@link constrainChild} if\n         * {@link isConstrainChild} returns `true`. The value specifies the\n         * portion of the child which is allowed to overlap the parent.\n         */\n        this.defaultOverlap = 0.5;\n        /**\n         * Specifies the default parent to be used to insert new cells.\n         * This is used in {@link getDefaultParent}.\n         * @default null\n         */\n        this.defaultParent = null;\n        /**\n         * Specifies the {@link Image} to be returned by {@link getBackgroundImage}.\n         * @default null\n         *\n         * @example\n         * ```javascript\n         * var img = new mxImage('http://www.example.com/maps/examplemap.jpg', 1024, 768);\n         * graph.setBackgroundImage(img);\n         * graph.view.validate();\n         * ```\n         */\n        this.backgroundImage = null;\n        /**\n         * Specifies if the background page should be visible.\n         * Not yet implemented.\n         * @default false\n         */\n        this.pageVisible = false;\n        /**\n         * Specifies if a dashed line should be drawn between multiple pages.\n         * If you change this value while a graph is being displayed then you\n         * should call {@link sizeDidChange} to force an update of the display.\n         * @default false\n         */\n        this.pageBreaksVisible = false;\n        /**\n         * Specifies the color for page breaks.\n         * @default gray\n         */\n        this.pageBreakColor = 'gray';\n        /**\n         * Specifies the page breaks should be dashed.\n         * @default true\n         */\n        this.pageBreakDashed = true;\n        /**\n         * Specifies the minimum distance in pixels for page breaks to be visible.\n         * @default 20\n         */\n        this.minPageBreakDist = 20;\n        /**\n         * Specifies if the graph size should be rounded to the next page number in\n         * {@link sizeDidChange}. This is only used if the graph container has scrollbars.\n         * @default false\n         */\n        this.preferPageSize = false;\n        /**\n         * Specifies the page format for the background page.\n         * This is used as the default in {@link PrintPreview} and for painting the background page\n         * if {@link pageVisible} is `true` and the page breaks if {@link pageBreaksVisible} is `true`.\n         * @default {@link mxConstants.PAGE_FORMAT_A4_PORTRAIT}\n         */\n        this.pageFormat = new Rectangle(...PAGE_FORMAT_A4_PORTRAIT);\n        /**\n         * Specifies the scale of the background page.\n         * Not yet implemented.\n         * @default 1.5\n         */\n        this.pageScale = 1.5;\n        /**\n         * Specifies the return value for {@link isEnabled}.\n         * @default true\n         */\n        this.enabled = true;\n        /**\n         * Specifies the return value for {@link canExportCell}.\n         * @default true\n         */\n        this.exportEnabled = true;\n        /**\n         * Specifies the return value for {@link canImportCell}.\n         * @default true\n         */\n        this.importEnabled = true;\n        /**\n         * Specifies if the graph should automatically scroll regardless of the\n         * scrollbars. This will scroll the container using positive values for\n         * scroll positions (ie usually only rightwards and downwards). To avoid\n         * possible conflicts with panning, set {@link translateToScrollPosition} to `true`.\n         */\n        this.ignoreScrollbars = false;\n        /**\n         * Specifies if the graph should automatically convert the current scroll\n         * position to a translate in the graph view when a mouseUp event is received.\n         * This can be used to avoid conflicts when using {@link autoScroll} and\n         * {@link ignoreScrollbars} with no scrollbars in the container.\n         */\n        this.translateToScrollPosition = false;\n        /**\n         * {@link Rectangle} that specifies the area in which all cells in the diagram\n         * should be placed. Uses in {@link getMaximumGraphBounds}. Use a width or height of\n         * `0` if you only want to give a upper, left corner.\n         */\n        this.maximumGraphBounds = null;\n        /**\n         * {@link Rectangle} that specifies the minimum size of the graph. This is ignored\n         * if the graph container has no scrollbars.\n         * @default null\n         */\n        this.minimumGraphSize = null;\n        /**\n         * {@link Rectangle} that specifies the minimum size of the {@link container} if\n         * {@link resizeContainer} is `true`.\n         */\n        this.minimumContainerSize = null;\n        /**\n         * {@link Rectangle} that specifies the maximum size of the container if\n         * {@link resizeContainer} is `true`.\n         */\n        this.maximumContainerSize = null;\n        /**\n         * Specifies if the container should be resized to the graph size when\n         * the graph size has changed.\n         * @default false\n         */\n        this.resizeContainer = false;\n        /**\n         * Border to be added to the bottom and right side when the container is\n         * being resized after the graph has been changed.\n         * @default 0\n         */\n        this.border = 0;\n        /**\n         * Specifies if edges should appear in the foreground regardless of their order\n         * in the model. If {@link keepEdgesInForeground} and {@link keepEdgesInBackground} are\n         * both `true` then the normal order is applied.\n         * @default false\n         */\n        this.keepEdgesInForeground = false;\n        /**\n         * Specifies if edges should appear in the background regardless of their order\n         * in the model. If {@link keepEdgesInForeground} and {@link keepEdgesInBackground} are\n         * both `true` then the normal order is applied.\n         * @default false\n         */\n        this.keepEdgesInBackground = false;\n        /**\n         * Specifies the return value for {@link isRecursiveResize}.\n         * @default false (for backwards compatibility)\n         */\n        this.recursiveResize = false;\n        /**\n         * Specifies if the scale and translate should be reset if the root changes in\n         * the model.\n         * @default true\n         */\n        this.resetViewOnRootChange = true;\n        /**\n         * Specifies if loops (aka self-references) are allowed.\n         * @default false\n         */\n        this.allowLoops = false;\n        /**\n         * {@link EdgeStyle} to be used for loops.\n         *\n         * This is a fallback for loops if the {@link CellStateStyle.loopStyle} is `undefined`.\n         * @default {@link EdgeStyle.Loop}\n         */\n        this.defaultLoopStyle = EdgeStyle.Loop;\n        /**\n         * Specifies if multiple edges in the same direction between the same pair of\n         * vertices are allowed.\n         * @default true\n         */\n        this.multigraph = true;\n        /**\n         * Specifies the minimum scale to be applied in {@link fit}. Set this to `null` to allow any value.\n         * @default 0.1\n         */\n        this.minFitScale = 0.1;\n        /**\n         * Specifies the maximum scale to be applied in {@link fit}. Set this to `null` to allow any value.\n         * @default 8\n         */\n        this.maxFitScale = 8;\n        /**\n         * Specifies the {@link Image} for the image to be used to display a warning\n         * overlay. See {@link setCellWarning}. Default value is Client.imageBasePath +\n         * '/warning'.  The extension for the image depends on the platform. It is\n         * '.png' on the Mac and '.gif' on all other platforms.\n         */\n        this.warningImage = new Image(`${Client.imageBasePath}/warning${Client.IS_MAC ? '.png' : '.gif'}`, 16, 16);\n        /**\n         * Specifies the resource key for the error message to be displayed in\n         * non-multigraphs when two vertices are already connected. If the resource\n         * for this key does not exist then the value is used as the error message.\n         * @default 'alreadyConnected'\n         */\n        this.alreadyConnectedResource = isI18nEnabled() ? 'alreadyConnected' : '';\n        /**\n         * Specifies the resource key for the warning message to be displayed when\n         * a collapsed cell contains validation errors. If the resource for this\n         * key does not exist then the value is used as the warning message.\n         * @default 'containsValidationErrors'\n         */\n        this.containsValidationErrorsResource = isI18nEnabled()\n            ? 'containsValidationErrors'\n            : '';\n        /** Folding options. */\n        this.options = {\n            foldingEnabled: true,\n            collapsedImage: new Image(`${Client.imageBasePath}/collapsed.gif`, 9, 9),\n            expandedImage: new Image(`${Client.imageBasePath}/expanded.gif`, 9, 9),\n            collapseToPreferredSize: true,\n        };\n        this.getContainer = () => this.container;\n        this.getPlugin = (id) => this.plugins[id];\n        this.getCellRenderer = () => this.cellRenderer;\n        this.getDialect = () => this.dialect;\n        this.isPageVisible = () => this.pageVisible;\n        this.isPageBreaksVisible = () => this.pageBreaksVisible;\n        this.getPageBreakColor = () => this.pageBreakColor;\n        this.isPageBreakDashed = () => this.pageBreakDashed;\n        this.getMinPageBreakDist = () => this.minPageBreakDist;\n        this.isPreferPageSize = () => this.preferPageSize;\n        this.getPageFormat = () => this.pageFormat;\n        this.getPageScale = () => this.pageScale;\n        this.isExportEnabled = () => this.exportEnabled;\n        this.isImportEnabled = () => this.importEnabled;\n        this.isIgnoreScrollbars = () => this.ignoreScrollbars;\n        this.isTranslateToScrollPosition = () => this.translateToScrollPosition;\n        this.getMinimumGraphSize = () => this.minimumGraphSize;\n        this.setMinimumGraphSize = (size) => (this.minimumGraphSize = size);\n        this.getMinimumContainerSize = () => this.minimumContainerSize;\n        this.setMinimumContainerSize = (size) => (this.minimumContainerSize = size);\n        this.getAlreadyConnectedResource = () => this.alreadyConnectedResource;\n        this.getContainsValidationErrorsResource = () => this.containsValidationErrorsResource;\n        this.registerDefaults();\n        this.container = options?.container ?? document.createElement('div');\n        // collaborators\n        this.initializeCollaborators(options);\n        // Adds a graph model listener to update the view\n        this.graphModelChangeListener = (_sender, evt) => {\n            this.graphModelChanged(evt.getProperty('edit').changes);\n        };\n        this.getDataModel().addListener(InternalEvent.CHANGE, this.graphModelChangeListener);\n        // Initializes the container using the view\n        this.view.init();\n        // Updates the size of the container for the current graph\n        this.sizeDidChange();\n        // Initializes plugins\n        options?.plugins?.forEach((p) => (this.plugins[p.pluginId] = new p(this)));\n        this.view.revalidate();\n    }\n    getWarningImage() {\n        return this.warningImage;\n    }\n    /**\n     * Updates the model in a transaction.\n     *\n     * @param fn the update to be performed in the transaction.\n     *\n     * @see {@link GraphDataModel.batchUpdate}\n     */\n    batchUpdate(fn) {\n        this.getDataModel().batchUpdate(fn);\n    }\n    /**\n     * Returns the {@link GraphDataModel} that contains the cells.\n     */\n    getDataModel() {\n        return this.model;\n    }\n    /**\n     * Returns the {@link GraphView} that contains the {@link mxCellStates}.\n     */\n    getView() {\n        return this.view;\n    }\n    /**\n     * Returns the {@link Stylesheet} that defines the style.\n     */\n    getStylesheet() {\n        return this.stylesheet;\n    }\n    /**\n     * Sets the {@link Stylesheet} that defines the style.\n     */\n    setStylesheet(stylesheet) {\n        this.stylesheet = stylesheet;\n    }\n    /**\n     * Called when the graph model changes. Invokes {@link processChange} on each\n     * item of the given array to update the view accordingly.\n     *\n     * @param changes Array that contains the individual changes.\n     */\n    graphModelChanged(changes) {\n        for (const change of changes) {\n            this.processChange(change);\n        }\n        this.updateSelection();\n        this.view.validate();\n        this.sizeDidChange();\n    }\n    /**\n     * Processes the given change and invalidates the respective cached data\n     * in {@link GraphView}. This fires a {@link root} event if the root has changed in the\n     * model.\n     *\n     * @param {(RootChange|ChildChange|TerminalChange|GeometryChange|ValueChange|StyleChange)} change - Object that represents the change on the model.\n     */\n    processChange(change) {\n        // Resets the view settings, removes all cells and clears\n        // the selection if the root changes.\n        if (change instanceof RootChange) {\n            this.clearSelection();\n            this.setDefaultParent(null);\n            if (change.previous)\n                this.removeStateForCell(change.previous);\n            if (this.resetViewOnRootChange) {\n                this.view.scale = 1;\n                this.view.translate.x = 0;\n                this.view.translate.y = 0;\n            }\n            this.fireEvent(new EventObject(InternalEvent.ROOT));\n        }\n        // Adds or removes a child to the view by online invaliding\n        // the minimal required portions of the cache, namely, the\n        // old and new parent and the child.\n        else if (change instanceof ChildChange) {\n            const newParent = change.child.getParent();\n            this.view.invalidate(change.child, true, true);\n            if (!newParent ||\n                !this.getDataModel().contains(newParent) ||\n                newParent.isCollapsed()) {\n                this.view.invalidate(change.child, true, true);\n                this.removeStateForCell(change.child);\n                // Handles special case of current root of view being removed\n                if (this.view.currentRoot == change.child) {\n                    this.home();\n                }\n            }\n            if (newParent != change.previous) {\n                // Refreshes the collapse/expand icons on the parents\n                if (newParent != null) {\n                    this.view.invalidate(newParent, false, false);\n                }\n                if (change.previous != null) {\n                    this.view.invalidate(change.previous, false, false);\n                }\n            }\n        }\n        // Handles two special cases where the shape does not need to be\n        // recreated from scratch, it only needs to be invalidated.\n        else if (change instanceof TerminalChange || change instanceof GeometryChange) {\n            // Checks if the geometry has changed to avoid unnessecary revalidation\n            if (change instanceof TerminalChange ||\n                (change.previous == null && change.geometry != null) ||\n                (change.previous != null && !change.previous.equals(change.geometry))) {\n                this.view.invalidate(change.cell);\n            }\n        }\n        // Handles two special cases where only the shape, but no\n        // descendants need to be recreated\n        else if (change instanceof ValueChange) {\n            this.view.invalidate(change.cell, false, false);\n        }\n        // Requires a new mxShape in JavaScript\n        else if (change instanceof StyleChange) {\n            this.view.invalidate(change.cell, true, true);\n            const state = this.view.getState(change.cell);\n            if (state != null) {\n                state.invalidStyle = true;\n            }\n        }\n        // Removes the state from the cache by default\n        else if (change.cell != null && change.cell instanceof Cell) {\n            this.removeStateForCell(change.cell);\n        }\n    }\n    /**\n     * Scrolls the graph to the given point, extending the graph container if\n     * specified.\n     */\n    scrollPointToVisible(x, y, extend = false, border = 20) {\n        const panningHandler = this.getPlugin('PanningHandler');\n        if (!this.isTimerAutoScroll() &&\n            (this.ignoreScrollbars || hasScrollbars(this.container))) {\n            const c = this.container;\n            if (x >= c.scrollLeft &&\n                y >= c.scrollTop &&\n                x <= c.scrollLeft + c.clientWidth &&\n                y <= c.scrollTop + c.clientHeight) {\n                let dx = c.scrollLeft + c.clientWidth - x;\n                if (dx < border) {\n                    const old = c.scrollLeft;\n                    c.scrollLeft += border - dx;\n                    // Automatically extends the canvas size to the bottom, right\n                    // if the event is outside of the canvas and the edge of the\n                    // canvas has been reached. Notes: Needs fix for IE.\n                    if (extend && old === c.scrollLeft) {\n                        // @ts-ignore\n                        const root = this.view.getDrawPane().ownerSVGElement;\n                        const width = c.scrollWidth + border - dx;\n                        // Updates the clipping region. This is an expensive\n                        // operation that should not be executed too often.\n                        // @ts-ignore\n                        root.style.width = `${width}px`;\n                        c.scrollLeft += border - dx;\n                    }\n                }\n                else {\n                    dx = x - c.scrollLeft;\n                    if (dx < border) {\n                        c.scrollLeft -= border - dx;\n                    }\n                }\n                let dy = c.scrollTop + c.clientHeight - y;\n                if (dy < border) {\n                    const old = c.scrollTop;\n                    c.scrollTop += border - dy;\n                    if (old == c.scrollTop && extend) {\n                        // @ts-ignore\n                        const root = this.view.getDrawPane().ownerSVGElement;\n                        const height = c.scrollHeight + border - dy;\n                        // Updates the clipping region. This is an expensive\n                        // operation that should not be executed too often.\n                        // @ts-ignore\n                        root.style.height = `${height}px`;\n                        c.scrollTop += border - dy;\n                    }\n                }\n                else {\n                    dy = y - c.scrollTop;\n                    if (dy < border) {\n                        c.scrollTop -= border - dy;\n                    }\n                }\n            }\n        }\n        else if (this.isAllowAutoPanning() &&\n            panningHandler &&\n            !panningHandler.isActive()) {\n            panningHandler.getPanningManager().panTo(x + this.getPanDx(), y + this.getPanDy());\n        }\n    }\n    /**\n     * Returns the size of the border and padding on all four sides of the\n     * container. The left, top, right and bottom borders are stored in the x, y,\n     * width and height of the returned {@link Rectangle}, respectively.\n     */\n    getBorderSizes() {\n        const css = getCurrentStyle(this.container);\n        return new Rectangle(parseCssNumber(css.paddingLeft) +\n            (css.borderLeftStyle != 'none' ? parseCssNumber(css.borderLeftWidth) : 0), parseCssNumber(css.paddingTop) +\n            (css.borderTopStyle != 'none' ? parseCssNumber(css.borderTopWidth) : 0), parseCssNumber(css.paddingRight) +\n            (css.borderRightStyle != 'none' ? parseCssNumber(css.borderRightWidth) : 0), parseCssNumber(css.paddingBottom) +\n            (css.borderBottomStyle != 'none' ? parseCssNumber(css.borderBottomWidth) : 0));\n    }\n    /**\n     * Returns the preferred size of the background page if {@link preferPageSize} is true.\n     */\n    getPreferredPageSize(bounds, width, height) {\n        const tr = this.view.translate;\n        const fmt = this.pageFormat;\n        const ps = this.pageScale;\n        const page = new Rectangle(0, 0, Math.ceil(fmt.width * ps), Math.ceil(fmt.height * ps));\n        const hCount = this.pageBreaksVisible ? Math.ceil(width / page.width) : 1;\n        const vCount = this.pageBreaksVisible ? Math.ceil(height / page.height) : 1;\n        return new Rectangle(0, 0, hCount * page.width + 2 + tr.x, vCount * page.height + 2 + tr.y);\n    }\n    /**\n     * Scales the graph such that the complete diagram fits into {@link AbstractGraph.container} and returns the current scale in the view.\n     * To fit an initial graph prior to rendering, set {@link GraphView.rendering} to `false` prior to changing the model\n     * and execute the following after changing the model.\n     *\n     * ```javascript\n     * graph.view.rendering = false;\n     * // here, change the model\n     * graph.fit();\n     * graph.view.rendering = true;\n     * graph.refresh();\n     * ```\n     *\n     * To fit and center the graph, use {@link FitPlugin.fitCenter}.\n     *\n     * @param border Optional number that specifies the border. Default is {@link border}.\n     * @param keepOrigin Optional boolean that specifies if the translate should be changed. Default is `false`.\n     * @param margin Optional margin in pixels. Default is `0`.\n     * @param enabled Optional boolean that specifies if the scale should be set or just returned. Default is `true`.\n     * @param ignoreWidth Optional boolean that specifies if the width should be ignored. Default is `false`.\n     * @param ignoreHeight Optional boolean that specifies if the height should be ignored. Default is `false`.\n     * @param maxHeight Optional maximum height.\n     */\n    fit(border = this.getBorder(), keepOrigin = false, margin = 0, enabled = true, ignoreWidth = false, ignoreHeight = false, maxHeight = null) {\n        const { container, view } = this;\n        if (container) {\n            // Adds spacing and border from css\n            const cssBorder = this.getBorderSizes();\n            let w1 = container.offsetWidth - cssBorder.x - cssBorder.width - 1;\n            let h1 = maxHeight != null\n                ? maxHeight\n                : container.offsetHeight - cssBorder.y - cssBorder.height - 1;\n            let bounds = view.getGraphBounds();\n            if (bounds.width > 0 && bounds.height > 0) {\n                if (keepOrigin && bounds.x != null && bounds.y != null) {\n                    bounds = bounds.clone();\n                    bounds.width += bounds.x;\n                    bounds.height += bounds.y;\n                    bounds.x = 0;\n                    bounds.y = 0;\n                }\n                // LATER: Use unscaled bounding boxes to fix rounding errors\n                const originalScale = view.scale;\n                let w2 = bounds.width / originalScale;\n                let h2 = bounds.height / originalScale;\n                // Fits to the size of the background image if required\n                if (this.backgroundImage) {\n                    w2 = Math.max(w2, this.backgroundImage.width - bounds.x / originalScale);\n                    h2 = Math.max(h2, this.backgroundImage.height - bounds.y / originalScale);\n                }\n                const b = (keepOrigin ? border : 2 * border) + margin + 1;\n                w1 -= b;\n                h1 -= b;\n                let newScale = ignoreWidth\n                    ? h1 / h2\n                    : ignoreHeight\n                        ? w1 / w2\n                        : Math.min(w1 / w2, h1 / h2);\n                if (this.minFitScale != null) {\n                    newScale = Math.max(newScale, this.minFitScale);\n                }\n                if (this.maxFitScale != null) {\n                    newScale = Math.min(newScale, this.maxFitScale);\n                }\n                if (enabled) {\n                    if (!keepOrigin) {\n                        if (!hasScrollbars(container)) {\n                            const x0 = bounds.x != null\n                                ? Math.floor(view.translate.x -\n                                    bounds.x / originalScale +\n                                    border / newScale +\n                                    margin / 2)\n                                : border;\n                            const y0 = bounds.y != null\n                                ? Math.floor(view.translate.y -\n                                    bounds.y / originalScale +\n                                    border / newScale +\n                                    margin / 2)\n                                : border;\n                            view.scaleAndTranslate(newScale, x0, y0);\n                        }\n                        else {\n                            view.setScale(newScale);\n                            const newBounds = this.getGraphBounds();\n                            if (newBounds.x != null) {\n                                container.scrollLeft = newBounds.x;\n                            }\n                            if (newBounds.y != null) {\n                                container.scrollTop = newBounds.y;\n                            }\n                        }\n                    }\n                    else if (view.scale != newScale) {\n                        view.setScale(newScale);\n                    }\n                }\n                else {\n                    return newScale;\n                }\n            }\n        }\n        return view.scale;\n    }\n    /**\n     * Resizes the container for the given graph width and height.\n     */\n    doResizeContainer(width, height) {\n        if (this.maximumContainerSize != null) {\n            width = Math.min(this.maximumContainerSize.width, width);\n            height = Math.min(this.maximumContainerSize.height, height);\n        }\n        const container = this.container;\n        container.style.width = `${Math.ceil(width)}px`;\n        container.style.height = `${Math.ceil(height)}px`;\n    }\n    /*****************************************************************************\n     * Group: UNCLASSIFIED\n     *****************************************************************************/\n    /**\n     * Creates a new handler for the given cell state. This implementation\n     * returns a new {@link EdgeHandler} of the corresponding cell is an edge,\n     * otherwise it returns an {@link VertexHandler}.\n     *\n     * @param state {@link CellState} whose handler should be created.\n     */\n    createHandler(state) {\n        let result = null;\n        if (state.cell.isEdge()) {\n            const source = state.getVisibleTerminalState(true);\n            const target = state.getVisibleTerminalState(false);\n            const geo = state.cell.getGeometry();\n            const edgeStyle = this.getView().getEdgeStyle(state, geo ? geo.points || undefined : undefined, source, target);\n            result = this.createEdgeHandler(state, edgeStyle);\n        }\n        else {\n            result = this.createVertexHandler(state);\n        }\n        return result;\n    }\n    /**\n     * Hooks to create a new {@link EdgeHandler} for the given {@link CellState}.\n     *\n     * This method relies on the registered elements in {@link EdgeStyleRegistry} to know which {@link EdgeHandler} to create.\n     * If the {@link EdgeStyle} is not registered, it will return a default {@link EdgeHandler}.\n     *\n     * @param state {@link CellState} to create the handler for.\n     * @param edgeStyle the {@link EdgeStyleFunction} that let choose the actual edge handler.\n     */\n    createEdgeHandler(state, edgeStyle) {\n        const handlerKind = EdgeStyleRegistry.getHandlerKind(edgeStyle);\n        switch (handlerKind) {\n            case 'elbow':\n                return this.createElbowEdgeHandler(state);\n            case 'segment':\n                return this.createEdgeSegmentHandler(state);\n        }\n        return this.createEdgeHandlerInstance(state);\n    }\n    /*****************************************************************************\n     * Group: Drill down\n     *****************************************************************************/\n    /**\n     * Returns the current root of the displayed cell hierarchy. This is a\n     * shortcut to {@link GraphView.currentRoot} in {@link GraphView}.\n     */\n    getCurrentRoot() {\n        return this.view.currentRoot;\n    }\n    /**\n     * Returns the translation to be used if the given cell is the root cell as\n     * an {@link Point}. This implementation returns null.\n     *\n     * To keep the children at their absolute position while stepping into groups,\n     * this function can be overridden as follows.\n     *\n     * @example\n     * ```javascript\n     * var offset = new mxPoint(0, 0);\n     *\n     * while (cell != null)\n     * {\n     *   var geo = this.model.getGeometry(cell);\n     *\n     *   if (geo != null)\n     *   {\n     *     offset.x -= geo.x;\n     *     offset.y -= geo.y;\n     *   }\n     *\n     *   cell = this.model.getParent(cell);\n     * }\n     *\n     * return offset;\n     * ```\n     *\n     * @param cell {@link Cell} that represents the root.\n     */\n    getTranslateForRoot(cell) {\n        return null;\n    }\n    /**\n     * Returns the offset to be used for the cells inside the given cell. The\n     * root and layer cells may be identified using {@link GraphDataModel.isRoot} and\n     * {@link GraphDataModel.isLayer}. For all other current roots, the\n     * {@link GraphView.currentRoot} field points to the respective cell, so that\n     * the following holds: cell == this.view.currentRoot. This implementation\n     * returns null.\n     *\n     * @param cell {@link Cell} whose offset should be returned.\n     */\n    getChildOffsetForCell(cell) {\n        return null;\n    }\n    /**\n     * Uses the root of the model as the root of the displayed cell hierarchy\n     * and selects the previous root.\n     */\n    home() {\n        const current = this.getCurrentRoot();\n        if (current != null) {\n            this.view.setCurrentRoot(null);\n            const state = this.view.getState(current);\n            if (state != null) {\n                this.setSelectionCell(current);\n            }\n        }\n    }\n    /**\n     * Returns true if the given cell is a valid root for the cell display\n     * hierarchy. This implementation returns true for all non-null values.\n     *\n     * @param cell {@link Cell} which should be checked as a possible root.\n     */\n    isValidRoot(cell) {\n        return !!cell;\n    }\n    /*****************************************************************************\n     * Group: Graph display\n     *****************************************************************************/\n    /**\n     * Returns the bounds of the visible graph. Shortcut to\n     * {@link GraphView.getGraphBounds}. See also: {@link getBoundingBoxFromGeometry}.\n     */\n    getGraphBounds() {\n        return this.view.getGraphBounds();\n    }\n    /**\n     * Returns the bounds inside which the diagram should be kept as an\n     * {@link Rectangle}.\n     */\n    getMaximumGraphBounds() {\n        return this.maximumGraphBounds;\n    }\n    /**\n     * Clears all cell states or the states for the hierarchy starting at the\n     * given cell and validates the graph. This fires a refresh event as the\n     * last step.\n     *\n     * @param cell Optional {@link Cell} for which the cell states should be cleared.\n     */\n    refresh(cell = null) {\n        if (cell) {\n            this.view.clear(cell, false);\n        }\n        else {\n            this.view.clear(undefined, true);\n        }\n        this.view.validate();\n        this.sizeDidChange();\n        this.fireEvent(new EventObject(InternalEvent.REFRESH));\n    }\n    /**\n     * Centers the graph in the container.\n     *\n     * @param horizontal Optional boolean that specifies if the graph should be centered\n     * horizontally. Default is `true`.\n     * @param vertical Optional boolean that specifies if the graph should be centered\n     * vertically. Default is `true`.\n     * @param cx Optional float that specifies the horizontal center. Default is `0.5`.\n     * @param cy Optional float that specifies the vertical center. Default is `0.5`.\n     */\n    center(horizontal = true, vertical = true, cx = 0.5, cy = 0.5) {\n        const container = this.container;\n        const _hasScrollbars = hasScrollbars(this.container);\n        const padding = 2 * this.getBorder();\n        const cw = container.clientWidth - padding;\n        const ch = container.clientHeight - padding;\n        const bounds = this.getGraphBounds();\n        const t = this.view.translate;\n        const s = this.view.scale;\n        let dx = horizontal ? cw - bounds.width : 0;\n        let dy = vertical ? ch - bounds.height : 0;\n        if (!_hasScrollbars) {\n            this.view.setTranslate(horizontal ? Math.floor(t.x - bounds.x / s + (dx * cx) / s) : t.x, vertical ? Math.floor(t.y - bounds.y / s + (dy * cy) / s) : t.y);\n        }\n        else {\n            bounds.x -= t.x;\n            bounds.y -= t.y;\n            const sw = container.scrollWidth;\n            const sh = container.scrollHeight;\n            if (sw > cw) {\n                dx = 0;\n            }\n            if (sh > ch) {\n                dy = 0;\n            }\n            this.view.setTranslate(Math.floor(dx / 2 - bounds.x), Math.floor(dy / 2 - bounds.y));\n            container.scrollLeft = (sw - cw) / 2;\n            container.scrollTop = (sh - ch) / 2;\n        }\n    }\n    /**\n     * Returns `true` if perimeter points should be computed such that the resulting edge has only horizontal or vertical segments.\n     *\n     * This method relies on the registered elements in {@link EdgeStyleRegistry} to know if the {@link CellStateStyle.edgeStyle} of the {@link CellState} is orthogonal.\n     * If the {@link EdgeStyle} is not registered, it is considered as NOT orthogonal.\n     *\n     * @param edge {@link CellState} that represents the edge.\n     */\n    isOrthogonal(edge) {\n        const orthogonal = edge.style.orthogonal;\n        if (!isNullish(orthogonal)) {\n            return orthogonal;\n        }\n        // fallback when the orthogonal style is not defined\n        const edgeStyle = this.view.getEdgeStyle(edge);\n        return EdgeStyleRegistry.isOrthogonal(edgeStyle);\n    }\n    /*****************************************************************************\n     * Group: Graph appearance\n     *****************************************************************************/\n    /**\n     * Returns the {@link backgroundImage} as an {@link Image}.\n     */\n    getBackgroundImage() {\n        return this.backgroundImage;\n    }\n    /**\n     * Sets the new {@link backgroundImage}.\n     *\n     * @param image New {@link Image} to be used for the background.\n     */\n    setBackgroundImage(image) {\n        this.backgroundImage = image;\n    }\n    /**\n     * Returns the textual representation for the given cell.\n     *\n     * This implementation returns the node name or string-representation of the user object.\n     *\n     *\n     * The following returns the label attribute from the cells user object if it is an XML node.\n     *\n     * @example\n     * ```javascript\n     * graph.convertValueToString = function(cell)\n     * {\n     * \treturn cell.getAttribute('label');\n     * }\n     * ```\n     *\n     * See also: {@link cellLabelChanged}.\n     *\n     * @param cell {@link Cell} whose textual representation should be returned.\n     */\n    convertValueToString(cell) {\n        const value = cell.getValue();\n        if (value != null) {\n            if (isNode(value)) {\n                return value.nodeName;\n            }\n            if (typeof value.toString === 'function') {\n                return value.toString();\n            }\n        }\n        return '';\n    }\n    /**\n     * Returns the string to be used as the link for the given cell.\n     *\n     * This implementation returns null.\n     *\n     * @param cell {@link Cell} whose link should be returned.\n     */\n    getLinkForCell(cell) {\n        return null;\n    }\n    /**\n     * Returns the value of {@link border}.\n     */\n    getBorder() {\n        return this.border;\n    }\n    /**\n     * Sets the value of {@link border}.\n     *\n     * @param value Positive integer that represents the border to be used.\n     */\n    setBorder(value) {\n        this.border = value;\n    }\n    /*****************************************************************************\n     * Group: Graph behaviour\n     *****************************************************************************/\n    /**\n     * Returns {@link resizeContainer}.\n     */\n    isResizeContainer() {\n        return this.resizeContainer;\n    }\n    /**\n     * Sets {@link resizeContainer}.\n     *\n     * @param value Boolean indicating if the container should be resized.\n     */\n    setResizeContainer(value) {\n        this.resizeContainer = value;\n    }\n    /**\n     * Returns true if the graph is {@link enabled}.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Specifies if the graph should allow any interactions. This\n     * implementation updates {@link enabled}.\n     *\n     * @param value Boolean indicating if the graph should be enabled.\n     */\n    setEnabled(value) {\n        this.enabled = value;\n    }\n    /**\n     * Returns {@link multigraph} as a boolean.\n     */\n    isMultigraph() {\n        return this.multigraph;\n    }\n    /**\n     * Specifies if the graph should allow multiple connections between the\n     * same pair of vertices.\n     *\n     * @param value Boolean indicating if the graph allows multiple connections\n     * between the same pair of vertices.\n     */\n    setMultigraph(value) {\n        this.multigraph = value;\n    }\n    /**\n     * Returns {@link allowLoops} as a boolean.\n     */\n    isAllowLoops() {\n        return this.allowLoops;\n    }\n    /**\n     * Specifies if loops are allowed.\n     *\n     * @param value Boolean indicating if loops are allowed.\n     */\n    setAllowLoops(value) {\n        this.allowLoops = value;\n    }\n    /**\n     * Returns {@link recursiveResize}.\n     *\n     * @param state {@link CellState} that is being resized.\n     */\n    isRecursiveResize(state = null) {\n        return this.recursiveResize;\n    }\n    /**\n     * Sets {@link recursiveResize}.\n     *\n     * @param value New boolean value for {@link recursiveResize}.\n     */\n    setRecursiveResize(value) {\n        this.recursiveResize = value;\n    }\n    /**\n     * Returns a decimal number representing the amount of the width and height\n     * of the given cell that is allowed to overlap its parent. A value of 0\n     * means all children must stay inside the parent, 1 means the child is\n     * allowed to be placed outside of the parent such that it touches one of\n     * the parents sides. If {@link isAllowOverlapParent} returns false for the given\n     * cell, then this method returns 0.\n     *\n     * @param cell {@link Cell} for which the overlap ratio should be returned.\n     */\n    getOverlap(cell) {\n        return this.isAllowOverlapParent(cell) ? this.defaultOverlap : 0;\n    }\n    /**\n     * Returns true if the given cell is allowed to be placed outside the\n     * parents area.\n     *\n     * @param cell {@link Cell} that represents the child to be checked.\n     */\n    isAllowOverlapParent(cell) {\n        return false;\n    }\n    /*****************************************************************************\n     * Group: Cell retrieval\n     *****************************************************************************/\n    /**\n     * Returns {@link defaultParent} or {@link GraphView.currentRoot} or the first child\n     * of {@link GraphDataModel.root} if both are null. The value returned by\n     * this function should be used as the parent for new cells (aka default\n     * layer).\n     */\n    getDefaultParent() {\n        let parent = this.getCurrentRoot();\n        if (!parent) {\n            parent = this.defaultParent;\n            if (!parent) {\n                const root = this.getDataModel().getRoot();\n                parent = root.getChildAt(0);\n            }\n        }\n        return parent;\n    }\n    /**\n     * Sets the {@link defaultParent} to the given cell. Set this to null to return\n     * the first child of the root in getDefaultParent.\n     */\n    setDefaultParent(cell) {\n        this.defaultParent = cell;\n    }\n    /**\n     * Destroys the graph and all its resources.\n     */\n    destroy() {\n        if (!this.destroyed) {\n            this.destroyed = true;\n            Object.values(this.plugins).forEach((p) => p.onDestroy());\n            this.view.destroy();\n            if (this.model && this.graphModelChangeListener) {\n                this.getDataModel().removeListener(this.graphModelChangeListener);\n                this.graphModelChangeListener = null;\n            }\n        }\n    }\n}\n// This introduces a side effect, but it is necessary to ensure the Graph is enriched with all properties and methods defined in mixins.\n// It is only called when Graph is imported, so the Graph definition is always consistent.\n// And this doesn't impact the tree-shaking.\napplyGraphMixins(AbstractGraph);\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalEvent from '../event/InternalEvent';\nimport EventObject from '../event/EventObject';\n/**\n * Implements a composite undoable edit. Here is an example for a custom change\n * which gets executed via the model:\n *\n * ```javascript\n * function CustomChange(model, name)\n * {\n *   this.model = model;\n *   this.name = name;\n *   this.previous = name;\n * };\n *\n * execute = ()=>\n * {\n *   let tmp = this.model.name;\n *   this.model.name = this.previous;\n *   this.previous = tmp;\n * };\n *\n * let name = prompt('Enter name');\n * graph.model.execute(new CustomChange(graph.model, name));\n * ```\n *\n * Event: mxEvent.EXECUTED\n *\n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n *\n * Event: mxEvent.START_EDIT\n *\n * Fires before a set of changes will be executed in <undo> or <redo>.\n * This event contains no properties.\n *\n * Event: mxEvent.END_EDIT\n *\n * Fires after a set of changes was executed in <undo> or <redo>.\n * This event contains no properties.\n *\n * Constructor: mxUndoableEdit\n *\n * Constructs a new undoable edit for the given source.\n */\nclass UndoableEdit {\n    constructor(source, significant = true) {\n        /**\n         * Array that contains the changes that make up this edit. The changes are\n         * expected to either have an undo and redo function, or an execute\n         * function. Default is an empty array.\n         */\n        this.changes = [];\n        /**\n         * Specifies if the undoable change is significant.\n         * Default is true.\n         */\n        this.significant = true;\n        /**\n         * Specifies if this edit has been undone. Default is false.\n         */\n        this.undone = false;\n        /**\n         * Specifies if this edit has been redone. Default is false.\n         */\n        this.redone = false;\n        this.source = source;\n        this.changes = [];\n        this.significant = significant;\n    }\n    /**\n     * Returns true if the this edit contains no changes.\n     */\n    isEmpty() {\n        return this.changes.length === 0;\n    }\n    /**\n     * Returns <significant>.\n     */\n    isSignificant() {\n        return this.significant;\n    }\n    /**\n     * Adds the specified change to this edit. The change is an object that is\n     * expected to either have an undo and redo, or an execute function.\n     */\n    add(change) {\n        this.changes.push(change);\n    }\n    /**\n     * Hook to notify any listeners of the changes after an <undo> or <redo>\n     * has been carried out. This implementation is empty.\n     */\n    notify() {\n        return;\n    }\n    /**\n     * Hook to free resources after the edit has been removed from the command\n     * history. This implementation is empty.\n     */\n    die() {\n        return;\n    }\n    /**\n     * Undoes all changes in this edit.\n     */\n    undo() {\n        if (!this.undone) {\n            this.source.fireEvent(new EventObject(InternalEvent.START_EDIT));\n            const count = this.changes.length;\n            for (let i = count - 1; i >= 0; i--) {\n                const change = this.changes[i];\n                if (change.execute) {\n                    change.execute();\n                }\n                else if (change.undo) {\n                    change.undo();\n                }\n                // New global executed event\n                this.source.fireEvent(new EventObject(InternalEvent.EXECUTED, { change }));\n            }\n            this.undone = true;\n            this.redone = false;\n            this.source.fireEvent(new EventObject(InternalEvent.END_EDIT));\n        }\n        this.notify();\n    }\n    /**\n     * Redoes all changes in this edit.\n     */\n    redo() {\n        if (!this.redone) {\n            this.source.fireEvent(new EventObject(InternalEvent.START_EDIT));\n            const count = this.changes.length;\n            for (let i = 0; i < count; i += 1) {\n                const change = this.changes[i];\n                if (change.execute != null) {\n                    change.execute();\n                }\n                else if (change.redo != null) {\n                    change.redo();\n                }\n                // New global executed event\n                this.source.fireEvent(new EventObject(InternalEvent.EXECUTED, { change }));\n            }\n            this.undone = false;\n            this.redone = true;\n            this.source.fireEvent(new EventObject(InternalEvent.END_EDIT));\n        }\n        this.notify();\n    }\n}\nexport default UndoableEdit;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Action to change a cell's collapsed state in a model.\n *\n * @category Change\n */\nclass CollapseChange {\n    constructor(model, cell, collapsed) {\n        this.model = model;\n        this.cell = cell;\n        this.collapsed = collapsed;\n        this.previous = collapsed;\n    }\n    /**\n     * Changes the collapsed state of {@link cell} to {@link previous} using {@link GraphDataModel.collapsedStateForCellChanged}.\n     */\n    execute() {\n        this.collapsed = this.previous;\n        this.previous = this.model.collapsedStateForCellChanged(this.cell, this.previous);\n    }\n}\nexport default CollapseChange;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Action to change a cell's visible state in a model.\n *\n * @category Change\n */\nclass VisibleChange {\n    constructor(model, cell, visible) {\n        this.model = model;\n        this.cell = cell;\n        this.visible = visible;\n        this.previous = visible;\n    }\n    /**\n     * Changes the visible state of {@link cell} to {@link previous} using {@link GraphDataModel.visibleStateForCellChanged}.\n     */\n    execute() {\n        this.visible = this.previous;\n        this.previous = this.model.visibleStateForCellChanged(this.cell, this.previous);\n    }\n}\nexport default VisibleChange;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2018, JGraph Ltd\nCopyright (c) 2006-2018, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from './event/EventSource';\nimport UndoableEdit from './undoable_changes/UndoableEdit';\nimport CellPath from './cell/CellPath';\nimport Cell from './cell/Cell';\nimport { isNumeric } from '../util/mathUtils';\nimport EventObject from './event/EventObject';\nimport InternalEvent from './event/InternalEvent';\nimport ChildChange from './undoable_changes/ChildChange';\nimport CollapseChange from './undoable_changes/CollapseChange';\nimport GeometryChange from './undoable_changes/GeometryChange';\nimport RootChange from './undoable_changes/RootChange';\nimport StyleChange from './undoable_changes/StyleChange';\nimport TerminalChange from './undoable_changes/TerminalChange';\nimport ValueChange from './undoable_changes/ValueChange';\nimport VisibleChange from './undoable_changes/VisibleChange';\n/**\n * Extends {@link EventSource} to implement a graph model. The graph model acts as\n * a wrapper around the cells which are in charge of storing the actual graph\n * data structure. The model acts as a transactional wrapper with event\n * notification for all changes, whereas the cells contain the atomic\n * operations for updating the actual data structure.\n *\n * ### Layers\n *\n * The cell hierarchy in the model must have a top-level root cell which\n * contains the layers (typically one default layer), which in turn contain the\n * top-level cells of the layers. This means each cell is contained in a layer.\n * If no layers are required, then all new cells should be added to the default\n * layer.\n *\n * Layers are useful for hiding and showing groups of cells, or for placing\n * groups of cells on top of other cells in the display. To identify a layer,\n * the {@link isLayer} function is used. It returns true if the parent of the given\n * cell is the root of the model.\n *\n * ### Events\n *\n * See events section for more details. There is a new set of events for\n * tracking transactional changes as they happen. The events are called\n * startEdit for the initial beginUpdate, executed for each executed change\n * and endEdit for the terminal endUpdate. The executed event contains a\n * property called change which represents the change after execution.\n *\n * ### Encoding the model\n *\n * #### To encode a graph model, use the following code:\n *\n * ```javascript\n * var enc = new Codec();\n * var node = enc.encode(graph.getDataModel());\n * ```\n *\n * This will create an XML node that contains all the model information.\n *\n * #### Encoding and decoding changes:\n *\n * For the encoding of changes, a graph model listener is required that encodes\n * each change from the given array of changes.\n *\n * ```javascript\n * model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n *   var nodes = [];\n *   var codec = new Codec();\n *\n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     nodes.push(codec.encode(changes[i]));\n *   }\n *   // do something with the nodes\n * });\n * ```\n *\n * For the decoding and execution of changes, the codec needs a lookup function\n * that allows it to resolve cell IDs as follows:\n *\n * ```javascript\n * var codec = new Codec();\n * codec.lookup(id)\n * {\n *   return model.getCell(id);\n * }\n * ```\n *\n * For each encoded change (represented by a node), the following code can be\n * used to carry out the decoding and create a change object.\n *\n * ```javascript\n * var changes = [];\n * var change = codec.decode(node);\n * change.model = model;\n * change.execute();\n * changes.push(change);\n * ```\n *\n * The changes can then be dispatched using the model as follows.\n *\n * ```javascript\n * var edit = new mxUndoableEdit(model, false);\n * edit.changes = changes;\n *\n * edit.notify()\n * {\n *   edit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n *   \t'edit', edit, 'changes', edit.changes));\n *   edit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n *   \t'edit', edit, 'changes', edit.changes));\n * }\n *\n * model.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n * model.fireEvent(new mxEventObject(mxEvent.CHANGE,\n *    'edit', edit, 'changes', changes));\n * ```\n *\n * Event: mxEvent.CHANGE\n *\n * Fires when an undoable edit is dispatched. The `edit` property\n * contains the {@link UndoableEdit}. The `changes` property contains\n * the array of atomic changes inside the undoable edit. The changes property\n * is **deprecated**, please use edit.changes instead.\n *\n * ### Example\n *\n * For finding newly inserted cells, the following code can be used:\n *\n * ```javascript\n * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n *\n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     var change = changes[i];\n *\n *     if (change instanceof mxChildChange &&\n *       change.change.previous == null)\n *     {\n *       graph.startEditingAtCell(change.child);\n *       break;\n *     }\n *   }\n * });\n * ```\n *\n * Event: mxEvent.NOTIFY\n *\n * Same as {@link Event#CHANGE}, this event can be used for classes that need to\n * implement a sync mechanism between this model and, say, a remote model. In\n * such a setup, only local changes should trigger a notify event and all\n * changes should trigger a change event.\n *\n * Event: mxEvent.EXECUTE\n *\n * Fires between begin- and endUpdate and after an atomic change was executed\n * in the model. The `change` property contains the atomic change\n * that was executed.\n *\n * Event: mxEvent.EXECUTED\n *\n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The `change` property contains the change that was executed.\n *\n * Event: mxEvent.BEGIN_UPDATE\n *\n * Fires after the {@link updateLevel} was incremented in {@link beginUpdate}. This event\n * contains no properties.\n *\n * Event: mxEvent.START_EDIT\n *\n * Fires after the {@link updateLevel} was changed from 0 to 1. This event\n * contains no properties.\n *\n * Event: mxEvent.END_UPDATE\n *\n * Fires after the {@link updateLevel} was decreased in {@link endUpdate} but before any\n * notification or change dispatching. The `edit` property contains\n * the {@link currentEdit}.\n *\n * Event: mxEvent.END_EDIT\n *\n * Fires after the {@link updateLevel} was changed from 1 to 0. This event\n * contains no properties.\n *\n * Event: mxEvent.BEFORE_UNDO\n *\n * Fires before the change is dispatched after the update level has reached 0\n * in {@link endUpdate}. The `edit` property contains the {@link currentEdit}.\n *\n * Event: mxEvent.UNDO\n *\n * Fires after the change was dispatched in {@link endUpdate}. The `edit`\n * property contains the {@link currentEdit}.\n *\n * @class GraphDataModel\n */\nexport class GraphDataModel extends EventSource {\n    constructor(root = null) {\n        super();\n        /**\n         * Holds the root cell, which in turn contains the cells that represent the\n         * layers of the diagram as child cells. That is, the actual elements of the\n         * diagram are supposed to live in the third generation of cells and below.\n         */\n        this.root = null;\n        /**\n         * Maps from Ids to cells.\n         */\n        this.cells = {};\n        /**\n         * Specifies if edges should automatically be moved into the nearest common\n         * ancestor of their terminals. Default is true.\n         */\n        this.maintainEdgeParent = true;\n        /**\n         * Specifies if relative edge parents should be ignored for finding the nearest\n         * common ancestors of an edge's terminals. Default is true.\n         */\n        this.ignoreRelativeEdgeParent = true;\n        /**\n         * Specifies if the model should automatically create Ids for new cells.\n         * Default is true.\n         */\n        this.createIds = true;\n        /**\n         * Defines the prefix of new Ids. Default is an empty string.\n         */\n        this.prefix = '';\n        /**\n         * Defines the postfix of new Ids. Default is an empty string.\n         */\n        this.postfix = '';\n        /**\n         * Specifies the next Id to be created. Initial value is 0.\n         */\n        // nextId: number | string;\n        this.nextId = 0;\n        /**\n         * Holds the changes for the current transaction. If the transaction is\n         * closed then a new object is created for this variable using\n         * {@link createUndoableEdit}.\n         */\n        this.currentEdit = null;\n        /**\n         * Counter for the depth of nested transactions. Each call to {@link beginUpdate}\n         * will increment this number and each call to {@link endUpdate} will decrement\n         * it. When the counter reaches 0, the transaction is closed and the\n         * respective events are fired. Initial value is 0.\n         */\n        this.updateLevel = 0;\n        /**\n         * True if the program flow is currently inside endUpdate.\n         */\n        this.endingUpdate = false;\n        this.currentEdit = this.createUndoableEdit();\n        if (root != null) {\n            this.setRoot(root);\n        }\n        else {\n            this.clear();\n        }\n    }\n    /**\n     * Sets a new root using {@link createRoot}.\n     */\n    clear() {\n        this.setRoot(this.createRoot());\n    }\n    /**\n     * Returns {@link createIds}.\n     */\n    isCreateIds() {\n        return this.createIds;\n    }\n    /**\n     * Sets {@link createIds}.\n     */\n    setCreateIds(value) {\n        this.createIds = value;\n    }\n    /**\n     * Creates a new root cell with a default layer (child 0).\n     */\n    createRoot() {\n        const cell = new Cell();\n        cell.insert(new Cell());\n        return cell;\n    }\n    /**\n     * Returns the {@link Cell} for the specified Id or null if no cell can be\n     * found for the given Id.\n     *\n     * @param {string} id  A string representing the Id of the cell.\n     */\n    getCell(id) {\n        return this.cells ? this.cells[id] : null;\n    }\n    filterCells(cells, filter) {\n        return cells.filter(filter);\n    }\n    getRoot(cell = null) {\n        return cell ? cell.getRoot() : this.root;\n    }\n    /**\n     * Sets the {@link root} of the model using {@link RootChange} and adds the change to\n     * the current transaction. This resets all datastructures in the model and\n     * is the preferred way of clearing an existing model. Returns the new\n     * root.\n     *\n     * Example:\n     *\n     * ```javascript\n     * var root = new mxCell();\n     * root.insert(new mxCell());\n     * model.setRoot(root);\n     * ```\n     *\n     * @param {Cell} root  that specifies the new root.\n     */\n    setRoot(root) {\n        this.execute(new RootChange(this, root));\n        return root;\n    }\n    /**\n     * Inner callback to change the root of the model and update the internal\n     * datastructures, such as {@link cells} and {@link nextId}. Returns the previous root.\n     *\n     * @param {Cell} root  that specifies the new root.\n     */\n    rootChanged(root) {\n        const oldRoot = this.root;\n        this.root = root;\n        // Resets counters and datastructures\n        this.nextId = 0;\n        this.cells = null;\n        this.cellAdded(root);\n        return oldRoot;\n    }\n    /**\n     * Returns true if the given cell is the root of the model and a non-null\n     * value.\n     *\n     * @param {Cell} cell  that represents the possible root.\n     */\n    isRoot(cell = null) {\n        return cell != null && this.root === cell;\n    }\n    /**\n     * Returns true if {@link isRoot} returns true for the parent of the given cell.\n     *\n     * @param cell  that represents the possible layer.\n     */\n    isLayer(cell) {\n        return cell ? this.isRoot(cell.getParent()) : false;\n    }\n    /**\n     * Returns true if the model contains the given {@link Cell}.\n     *\n     * @param {Cell} cell  that specifies the cell.\n     */\n    contains(cell) {\n        return this.root.isAncestor(cell);\n    }\n    /**\n     * Adds the specified child to the parent at the given index using\n     * {@link ChildChange} and adds the change to the current transaction. If no\n     * index is specified then the child is appended to the parent's array of\n     * children. Returns the inserted child.\n     *\n     * @param {Cell} parent  that specifies the parent to contain the child.\n     * @param {Cell} child  that specifies the child to be inserted.\n     * @param index  Optional integer that specifies the index of the child.\n     */\n    add(parent, child, index = null) {\n        if (child !== parent && parent != null && child != null) {\n            // Appends the child if no index was specified\n            if (index == null) {\n                index = parent.getChildCount();\n            }\n            const parentChanged = parent !== child.getParent();\n            this.execute(new ChildChange(this, parent, child, index));\n            // Maintains the edges parents by moving the edges\n            // into the nearest common ancestor of its terminals\n            if (this.maintainEdgeParent && parentChanged) {\n                this.updateEdgeParents(child);\n            }\n        }\n        return child;\n    }\n    /**\n     * Inner callback to update {@link cells} when a cell has been added. This\n     * implementation resolves collisions by creating new Ids. To change the\n     * ID of a cell after it was inserted into the model, use the following\n     * code:\n     *\n     * (code\n     * delete model.cells[cell.getId()];\n     * cell.setId(newId);\n     * model.cells[cell.getId()] = cell;\n     * ```\n     *\n     * If the change of the ID should be part of the command history, then the\n     * cell should be removed from the model and a clone with the new ID should\n     * be reinserted into the model instead.\n     *\n     * @param {Cell} cell  that specifies the cell that has been added.\n     */\n    cellAdded(cell) {\n        if (cell != null) {\n            // Creates an Id for the cell if not Id exists\n            if (cell.getId() == null && this.createIds) {\n                cell.setId(this.createId(cell));\n            }\n            if (cell.getId() != null) {\n                let collision = this.getCell(cell.getId());\n                if (collision !== cell) {\n                    // Creates new Id for the cell\n                    // as long as there is a collision\n                    while (collision != null) {\n                        cell.setId(this.createId(cell));\n                        collision = this.getCell(cell.getId());\n                    }\n                    // Lazily creates the cells dictionary\n                    if (this.cells == null) {\n                        this.cells = {};\n                    }\n                    this.cells[cell.getId()] = cell;\n                }\n            }\n            // Makes sure IDs of deleted cells are not reused\n            if (isNumeric(String(cell.getId()))) {\n                this.nextId = Math.max(this.nextId, parseInt(cell.getId()));\n            }\n            // Recursively processes child cells\n            for (const child of cell.getChildren()) {\n                this.cellAdded(child);\n            }\n        }\n    }\n    /**\n     * Hook method to create an Id for the specified cell. This implementation\n     * concatenates {@link prefix}, id and {@link postfix} to create the Id and increments\n     * {@link nextId}. The cell is ignored by this implementation, but can be used in\n     * overridden methods to prefix the Ids with eg. the cell type.\n     *\n     * @param {Cell} cell  to create the Id for.\n     */\n    createId(cell) {\n        const id = this.nextId;\n        this.nextId++;\n        return this.prefix + id + this.postfix;\n    }\n    /**\n     * Updates the parent for all edges that are connected to cell or one of\n     * its descendants using {@link updateEdgeParent}.\n     */\n    updateEdgeParents(cell, root = this.getRoot(cell)) {\n        // Updates edges on children first\n        const childCount = cell.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            const child = cell.getChildAt(i);\n            this.updateEdgeParents(child, root);\n        }\n        // Updates the parents of all connected edges\n        const edgeCount = cell.getEdgeCount();\n        const edges = [];\n        for (let i = 0; i < edgeCount; i += 1) {\n            edges.push(cell.getEdgeAt(i));\n        }\n        for (let i = 0; i < edges.length; i += 1) {\n            const edge = edges[i];\n            // Updates edge parent if edge and child have\n            // a common root node (does not need to be the\n            // model root node)\n            if (root.isAncestor(edge)) {\n                this.updateEdgeParent(edge, root);\n            }\n        }\n    }\n    /**\n     * Inner callback to update the parent of the specified {@link Cell} to the\n     * nearest-common-ancestor of its two terminals.\n     *\n     * @param {Cell} edge  that specifies the edge.\n     * @param {Cell} root  that represents the current root of the model.\n     */\n    updateEdgeParent(edge, root) {\n        let source = edge.getTerminal(true);\n        let target = edge.getTerminal(false);\n        let cell = null;\n        // Uses the first non-relative descendants of the source terminal\n        while (source != null &&\n            !source.isEdge() &&\n            source.geometry != null &&\n            source.geometry.relative) {\n            source = source.getParent();\n        }\n        // Uses the first non-relative descendants of the target terminal\n        while (target != null &&\n            this.ignoreRelativeEdgeParent &&\n            !target.isEdge() &&\n            target.geometry != null &&\n            target.geometry.relative) {\n            target = target.getParent();\n        }\n        if (root.isAncestor(source) && root.isAncestor(target)) {\n            if (source === target) {\n                cell = source ? source.getParent() : null;\n            }\n            else if (source) {\n                cell = source.getNearestCommonAncestor(target);\n            }\n            if (cell != null &&\n                (cell.getParent() !== this.root || cell.isAncestor(edge)) &&\n                edge &&\n                edge.getParent() !== cell) {\n                let geo = edge.getGeometry();\n                if (geo != null) {\n                    const origin1 = edge.getParent().getOrigin();\n                    const origin2 = cell.getOrigin();\n                    const dx = origin2.x - origin1.x;\n                    const dy = origin2.y - origin1.y;\n                    geo = geo.clone();\n                    geo.translate(-dx, -dy);\n                    this.setGeometry(edge, geo);\n                }\n                this.add(cell, edge, cell.getChildCount());\n            }\n        }\n    }\n    /**\n     * Removes the specified cell from the model using {@link ChildChange} and adds\n     * the change to the current transaction. This operation will remove the\n     * cell and all of its children from the model. Returns the removed cell.\n     *\n     * @param {Cell} cell  that should be removed.\n     */\n    remove(cell) {\n        if (cell === this.root) {\n            this.setRoot(null);\n        }\n        else if (cell.getParent() != null) {\n            this.execute(new ChildChange(this, null, cell));\n        }\n        return cell;\n    }\n    /**\n     * Inner callback to update {@link cells} when a cell has been removed.\n     *\n     * @param {Cell} cell  that specifies the cell that has been removed.\n     */\n    cellRemoved(cell) {\n        if (cell != null && this.cells != null) {\n            // Recursively processes child cells\n            const childCount = cell.getChildCount();\n            for (let i = childCount - 1; i >= 0; i--) {\n                this.cellRemoved(cell.getChildAt(i));\n            }\n            // Removes the dictionary entry for the cell\n            if (this.cells != null && cell.getId() != null) {\n                // @ts-ignore\n                delete this.cells[cell.getId()];\n            }\n        }\n    }\n    /**\n     * Inner callback to update the parent of a cell using {@link Cell#insert}\n     * on the parent and return the previous parent.\n     *\n     * @param {Cell} cell  to update the parent for.\n     * @param {Cell} parent  that specifies the new parent of the cell.\n     * @param index  Optional integer that defines the index of the child\n     * in the parent's child array.\n     */\n    parentForCellChanged(cell, parent, index) {\n        const previous = cell.getParent();\n        if (parent != null) {\n            if (parent !== previous || previous.getIndex(cell) !== index) {\n                parent.insert(cell, index);\n            }\n        }\n        else if (previous != null) {\n            const oldIndex = previous.getIndex(cell);\n            previous.remove(oldIndex);\n        }\n        // Adds or removes the cell from the model\n        const par = parent ? this.contains(parent) : null;\n        const pre = this.contains(previous);\n        if (par && !pre) {\n            this.cellAdded(cell);\n        }\n        else if (pre && !par) {\n            this.cellRemoved(cell);\n        }\n        return previous;\n    }\n    /**\n     * Sets the source or target terminal of the given {@link Cell} using\n     * {@link TerminalChange} and adds the change to the current transaction.\n     * This implementation updates the parent of the edge using {@link updateEdgeParent}\n     * if required.\n     *\n     * @param {Cell} edge  that specifies the edge.\n     * @param {Cell} terminal  that specifies the new terminal.\n     * @param isSource  Boolean indicating if the terminal is the new source or\n     * target terminal of the edge.\n     */\n    // setTerminal(edge: mxCell, terminal: mxCell, isSource: boolean): mxCell;\n    setTerminal(edge, terminal, isSource) {\n        const terminalChanged = terminal !== edge.getTerminal(isSource);\n        this.execute(new TerminalChange(this, edge, terminal, isSource));\n        if (this.maintainEdgeParent && terminalChanged) {\n            this.updateEdgeParent(edge, this.getRoot());\n        }\n        return terminal;\n    }\n    /**\n     * Sets the source and target {@link Cell} of the given {@link Cell} in a single\n     * transaction using {@link setTerminal} for each end of the edge.\n     *\n     * @param {Cell} edge  that specifies the edge.\n     * @param {Cell} source  that specifies the new source terminal.\n     * @param {Cell} target  that specifies the new target terminal.\n     */\n    // setTerminals(edge: mxCell, source: mxCell, target: mxCell): void;\n    setTerminals(edge, source, target) {\n        this.beginUpdate();\n        try {\n            this.setTerminal(edge, source, true);\n            this.setTerminal(edge, target, false);\n        }\n        finally {\n            this.endUpdate();\n        }\n    }\n    /**\n     * Inner helper function to update the terminal of the edge using\n     * {@link Cell#insertEdge} and return the previous terminal.\n     *\n     * @param {Cell} edge  that specifies the edge to be updated.\n     * @param {Cell} terminal  that specifies the new terminal.\n     * @param isSource  Boolean indicating if the terminal is the new source or\n     * target terminal of the edge.\n     */\n    // terminalForCellChanged(edge: mxCell, terminal: mxCell, isSource: boolean): mxCell;\n    terminalForCellChanged(edge, terminal, isSource = false) {\n        const previous = edge.getTerminal(isSource);\n        if (terminal != null) {\n            terminal.insertEdge(edge, isSource);\n        }\n        else if (previous != null) {\n            previous.removeEdge(edge, isSource);\n        }\n        return previous;\n    }\n    /**\n     * Returns all edges between the given source and target pair. If directed\n     * is true, then only edges from the source to the target are returned,\n     * otherwise, all edges between the two cells are returned.\n     *\n     * @param {Cell} source  that defines the source terminal of the edge to be\n     * returned.\n     * @param {Cell} target  that defines the target terminal of the edge to be\n     * returned.\n     * @param directed  Optional boolean that specifies if the direction of the\n     * edge should be taken into account. Default is false.\n     */\n    getEdgesBetween(source, target, directed = false) {\n        const tmp1 = source.getEdgeCount();\n        const tmp2 = target.getEdgeCount();\n        // Assumes the source has less connected edges\n        let terminal = source;\n        let edgeCount = tmp1;\n        // Uses the smaller array of connected edges\n        // for searching the edge\n        if (tmp2 < tmp1) {\n            edgeCount = tmp2;\n            terminal = target;\n        }\n        const result = [];\n        // Checks if the edge is connected to the correct\n        // cell and returns the first match\n        for (let i = 0; i < edgeCount; i += 1) {\n            const edge = terminal.getEdgeAt(i);\n            const src = edge.getTerminal(true);\n            const trg = edge.getTerminal(false);\n            const directedMatch = src === source && trg === target;\n            const oppositeMatch = trg === source && src === target;\n            if (directedMatch || (!directed && oppositeMatch)) {\n                result.push(edge);\n            }\n        }\n        return result;\n    }\n    /**\n     * Sets the user object of then given {@link Cell} using {@link ValueChange}\n     * and adds the change to the current transaction.\n     *\n     * @param {Cell} cell  whose user object should be changed.\n     * @param value  Object that defines the new user object.\n     */\n    setValue(cell, value) {\n        this.execute(new ValueChange(this, cell, value));\n        return value;\n    }\n    /**\n     * Inner callback to update the user object of the given {@link Cell}\n     * using {@link Cell#valueChanged} and return the previous value,\n     * that is, the return value of {@link Cell#valueChanged}.\n     *\n     * To change a specific attribute in an XML node, the following code can be\n     * used.\n     *\n     * ```javascript\n     * graph.getDataModel().valueForCellChanged(cell, value)\n     * {\n     *   var previous = cell.value.getAttribute('label');\n     *   cell.value.setAttribute('label', value);\n     *\n     *   return previous;\n     * };\n     * ```\n     */\n    valueForCellChanged(cell, value) {\n        return cell.valueChanged(value);\n    }\n    /**\n     * Sets the {@link Geometry} of the given {@link Cell}. The actual update\n     * of the cell is carried out in {@link geometryForCellChanged}. The\n     * {@link GeometryChange} action is used to encapsulate the change.\n     *\n     * @param {Cell} cell  whose geometry should be changed.\n     * @param {Geometry} geometry  that defines the new geometry.\n     */\n    setGeometry(cell, geometry) {\n        if (geometry !== cell.getGeometry()) {\n            this.execute(new GeometryChange(this, cell, geometry));\n        }\n        return geometry;\n    }\n    /**\n     * Inner callback to update the {@link Geometry} of the given {@link Cell} using\n     * {@link Cell#setGeometry} and return the previous {@link Geometry}.\n     */\n    geometryForCellChanged(cell, geometry) {\n        const previous = cell.getGeometry();\n        cell.setGeometry(geometry);\n        return previous;\n    }\n    /**\n     * Sets the style of the given {@link Cell} using {@link StyleChange} and adds the change to the current transaction.\n     *\n     * **IMPORTANT**: Do not pass {@link Cell.getStyle} as value of the `style` parameter. Otherwise, no style change is performed, so the view won't be updated.\n     * Always get a clone of the style of the cell with {@link Cell.getClonedStyle}, then update it and pass the updated style to this method.\n     *\n     * @param cell  whose style should be changed.\n     * @param style the new cell style to set.\n     */\n    setStyle(cell, style) {\n        // To investigate in the future: it may be more convenient to do a deep comparison to prevent unnecessary changes\n        // If the passed style is the same as the current style without being the same instance, we don't need to do anything\n        // With the current implementation, a style change is executed when the styles are deep equal.\n        if (style !== cell.getStyle()) {\n            this.execute(new StyleChange(this, cell, style));\n        }\n    }\n    /**\n     * Inner callback to update the style of the given {@link Cell}  using {@link Cell#setStyle} and return the previous style.\n     *\n     * **IMPORTANT**: to fully work, this method should not receive `cell.getStyle` as value of the `style` parameter. See {@link setStyle} for more information.\n     *\n     * @param cell  whose style should be changed.\n     * @param style the new cell style to set.\n     */\n    styleForCellChanged(cell, style) {\n        const previous = cell.getStyle();\n        cell.setStyle(style);\n        return previous;\n    }\n    /**\n     * Sets the collapsed state of the given {@link Cell} using {@link CollapseChange}\n     * and adds the change to the current transaction.\n     *\n     * @param {Cell} cell  whose collapsed state should be changed.\n     * @param collapsed  Boolean that specifies the new collpased state.\n     */\n    setCollapsed(cell, collapsed) {\n        if (collapsed !== cell.isCollapsed()) {\n            this.execute(new CollapseChange(this, cell, collapsed));\n        }\n        return collapsed;\n    }\n    /**\n     * Inner callback to update the collapsed state of the\n     * given {@link Cell} using {@link Cell#setCollapsed} and return\n     * the previous collapsed state.\n     *\n     * @param {Cell} cell  that specifies the cell to be updated.\n     * @param collapsed  Boolean that specifies the new collapsed state.\n     */\n    collapsedStateForCellChanged(cell, collapsed) {\n        const previous = cell.isCollapsed();\n        cell.setCollapsed(collapsed);\n        return previous;\n    }\n    /**\n     * Sets the visible state of the given {@link Cell} using {@link VisibleChange} and\n     * adds the change to the current transaction.\n     *\n     * @param {Cell} cell  whose visible state should be changed.\n     * @param visible  Boolean that specifies the new visible state.\n     */\n    setVisible(cell, visible) {\n        if (visible !== cell.isVisible()) {\n            this.execute(new VisibleChange(this, cell, visible));\n        }\n        return visible;\n    }\n    /**\n     * Inner callback to update the visible state of the\n     * given {@link Cell} using {@link Cell#setCollapsed} and return\n     * the previous visible state.\n     *\n     * @param {Cell} cell  that specifies the cell to be updated.\n     * @param visible  Boolean that specifies the new visible state.\n     */\n    visibleStateForCellChanged(cell, visible) {\n        const previous = cell.isVisible();\n        cell.setVisible(visible);\n        return previous;\n    }\n    /**\n     * Executes the given edit and fires events if required. The edit object\n     * requires an execute function which is invoked. The edit is added to the\n     * {@link currentEdit} between {@link beginUpdate} and {@link endUpdate} calls, so that\n     * events will be fired if this execute is an individual transaction, that\n     * is, if no previous {@link beginUpdate} calls have been made without calling\n     * {@link endUpdate}. This implementation fires an {@link execute} event before\n     * executing the given change.\n     *\n     * @param change  Object that described the change.\n     */\n    execute(change) {\n        change.execute();\n        this.beginUpdate();\n        this.currentEdit.add(change);\n        this.fireEvent(new EventObject(InternalEvent.EXECUTE, { change }));\n        // New global executed event\n        this.fireEvent(new EventObject(InternalEvent.EXECUTED, { change }));\n        this.endUpdate();\n    }\n    /**\n     * Updates the model in a transaction.\n     * This is a shortcut to the usage of {@link beginUpdate} and the {@link endUpdate} methods.\n     *\n     * ```javascript\n     * const model = graph.getDataModel();\n     * const parent = graph.getDefaultParent();\n     * const index = model.getChildCount(parent);\n     * model.batchUpdate(() => {\n     *   model.add(parent, v1, index);\n     *   model.add(parent, v2, index+1);\n     * });\n     * ```\n     *\n     * @param fn the update to be performed in the transaction.\n     */\n    batchUpdate(fn) {\n        this.beginUpdate();\n        try {\n            fn();\n        }\n        finally {\n            this.endUpdate();\n        }\n    }\n    /**\n     * Increments the {@link updateLevel} by one. The event notification\n     * is queued until {@link updateLevel} reaches 0 by use of\n     * {@link endUpdate}.\n     *\n     * All changes on {@link GraphDataModel} are transactional,\n     * that is, they are executed in a single undoable change\n     * on the model (without transaction isolation).\n     * Therefore, if you want to combine any\n     * number of changes into a single undoable change,\n     * you should group any two or more API calls that\n     * modify the graph model between {@link beginUpdate}\n     * and {@link endUpdate} calls as shown here:\n     *\n     * ```javascript\n     * const model = graph.getDataModel();\n     * const parent = graph.getDefaultParent();\n     * const index = model.getChildCount(parent);\n     * model.beginUpdate();\n     * try\n     * {\n     *   model.add(parent, v1, index);\n     *   model.add(parent, v2, index+1);\n     * }\n     * finally\n     * {\n     *   model.endUpdate();\n     * }\n     * ```\n     *\n     * Of course there is a shortcut for appending a\n     * sequence of cells into the default parent:\n     *\n     * ```javascript\n     * graph.addCells([v1, v2]).\n     * ```\n     */\n    beginUpdate() {\n        this.updateLevel += 1;\n        this.fireEvent(new EventObject(InternalEvent.BEGIN_UPDATE));\n        if (this.updateLevel === 1) {\n            this.fireEvent(new EventObject(InternalEvent.START_EDIT));\n        }\n    }\n    /**\n     * Decrements the {@link updateLevel} by one and fires an {@link undo}\n     * event if the {@link updateLevel} reaches 0. This function\n     * indirectly fires a {@link change} event by invoking the notify\n     * function on the {@link currentEdit} und then creates a new\n     * {@link currentEdit} using {@link createUndoableEdit}.\n     *\n     * The {@link undo} event is fired only once per edit, whereas\n     * the {@link change} event is fired whenever the notify\n     * function is invoked, that is, on undo and redo of\n     * the edit.\n     */\n    endUpdate() {\n        this.updateLevel -= 1;\n        if (this.updateLevel === 0) {\n            this.fireEvent(new EventObject(InternalEvent.END_EDIT));\n        }\n        if (!this.endingUpdate) {\n            this.endingUpdate = this.updateLevel === 0;\n            this.fireEvent(new EventObject(InternalEvent.END_UPDATE, { edit: this.currentEdit }));\n            try {\n                if (this.endingUpdate && !this.currentEdit.isEmpty()) {\n                    this.fireEvent(new EventObject(InternalEvent.BEFORE_UNDO, { edit: this.currentEdit }));\n                    const tmp = this.currentEdit;\n                    this.currentEdit = this.createUndoableEdit();\n                    tmp.notify();\n                    this.fireEvent(new EventObject(InternalEvent.UNDO, { edit: tmp }));\n                }\n            }\n            finally {\n                this.endingUpdate = false;\n            }\n        }\n    }\n    /**\n     * Creates a new {@link UndoableEdit} that implements the\n     * notify function to fire a {@link change} and {@link notify} event\n     * through the {@link UndoableEdit}'s source.\n     *\n     * @param significant  Optional boolean that specifies if the edit to be created is\n     * significant. Default is true.\n     */\n    createUndoableEdit(significant = true) {\n        const edit = new UndoableEdit(this, significant);\n        edit.notify = () => {\n            // LATER: Remove changes property (deprecated)\n            edit.source.fireEvent(new EventObject(InternalEvent.CHANGE, { edit, changes: edit.changes }));\n            edit.source.fireEvent(new EventObject(InternalEvent.NOTIFY, { edit, changes: edit.changes }));\n        };\n        return edit;\n    }\n    /**\n     * Merges the children of the given cell into the given target cell inside\n     * this model. All cells are cloned unless there is a corresponding cell in\n     * the model with the same id, in which case the source cell is ignored and\n     * all edges are connected to the corresponding cell in this model. Edges\n     * are considered to have no identity and are always cloned unless the\n     * cloneAllEdges flag is set to false, in which case edges with the same\n     * id in the target model are reconnected to reflect the terminals of the\n     * source edges.\n     */\n    mergeChildren(from, to, cloneAllEdges = true) {\n        this.beginUpdate();\n        try {\n            const mapping = {};\n            this.mergeChildrenImpl(from, to, cloneAllEdges, mapping);\n            // Post-processes all edges in the mapping and\n            // reconnects the terminals to the corresponding\n            // cells in the target model\n            for (const key in mapping) {\n                const cell = mapping[key];\n                let terminal = cell.getTerminal(true);\n                if (terminal != null) {\n                    terminal = mapping[CellPath.create(terminal)];\n                    this.setTerminal(cell, terminal, true);\n                }\n                terminal = cell.getTerminal(false);\n                if (terminal != null) {\n                    terminal = mapping[CellPath.create(terminal)];\n                    this.setTerminal(cell, terminal, false);\n                }\n            }\n        }\n        finally {\n            this.endUpdate();\n        }\n    }\n    /**\n     * Clones the children of the source cell into the given target cell in\n     * this model and adds an entry to the mapping that maps from the source\n     * cell to the target cell with the same id or the clone of the source cell\n     * that was inserted into this model.\n     */\n    mergeChildrenImpl(from, to, cloneAllEdges, mapping = {}) {\n        this.beginUpdate();\n        try {\n            const childCount = from.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                const cell = from.getChildAt(i);\n                if (typeof cell.getId === 'function') {\n                    const id = cell.getId();\n                    let target = id != null && (!cell.isEdge() || !cloneAllEdges) ? this.getCell(id) : null;\n                    // Clones and adds the child if no cell exists for the id\n                    if (target == null) {\n                        const clone = cell.clone();\n                        clone.setId(id);\n                        // Sets the terminals from the original cell to the clone\n                        // because the lookup uses strings not cells in JS\n                        clone.setTerminal(cell.getTerminal(true), true);\n                        clone.setTerminal(cell.getTerminal(false), false);\n                        // Do *NOT* use model.add as this will move the edge away\n                        // from the parent in updateEdgeParent if maintainEdgeParent\n                        // is enabled in the target model\n                        target = to.insert(clone);\n                        this.cellAdded(target);\n                    }\n                    // Stores the mapping for later reconnecting edges\n                    mapping[CellPath.create(cell)] = target;\n                    // Recurses\n                    this.mergeChildrenImpl(cell, target, cloneAllEdges, mapping);\n                }\n            }\n        }\n        finally {\n            this.endUpdate();\n        }\n    }\n}\nexport default GraphDataModel;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { BaseRegistry } from '../../../internal/BaseRegistry';\nclass EdgeMarkerRegistryImpl extends BaseRegistry {\n    createMarker(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) {\n        const markerFunction = this.get(type);\n        return markerFunction\n            ? markerFunction(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n            : null;\n    }\n}\n/**\n * A registry that stores the {@link MarkerFactoryFunction}s and their configuration to let generate {@link MarkerFunction}.\n *\n * The name used to register the marker is the marker type. It is then used to create the marker with {@link createMarker}.\n *\n * @category Configuration\n * @category Style\n * @since 0.20.0\n */\nexport const EdgeMarkerRegistry = new EdgeMarkerRegistryImpl();\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { DEFAULT_MARKERSIZE, NONE } from '../../../util/Constants';\nimport PolylineShape from './PolylineShape';\nimport { EdgeMarkerRegistry } from '../../style/marker/EdgeMarkerRegistry';\n/**\n * Extends {@link PolylineShape} to implement a connector shape including a polyline (a line with multiple points)\n * that allows for arrow heads on either side.\n *\n * The shape is used to represent edges, not vertices.\n *\n * This shape is registered under `connector` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * @category Edge Shapes\n */\nclass ConnectorShape extends PolylineShape {\n    constructor(points, stroke, strokewidth) {\n        super(points, stroke, strokewidth);\n    }\n    /**\n     * Updates the {@link boundingBox} for this shape using {@link createBoundingBox}\n     * and {@link augmentBoundingBox} and stores the result in {@link boundingBox}.\n     */\n    updateBoundingBox() {\n        this.useSvgBoundingBox = this.style?.curved ?? false;\n        super.updateBoundingBox();\n    }\n    /**\n     * Paints the line shape.\n     */\n    paintEdgeShape(c, pts) {\n        // The indirection via functions for markers is needed in\n        // order to apply the offsets before painting the line and\n        // paint the markers after painting the line.\n        const sourceMarker = this.createMarker(c, pts, true);\n        const targetMarker = this.createMarker(c, pts, false);\n        super.paintEdgeShape(c, pts);\n        // Disables shadows, dashed styles\n        c.setShadow(false);\n        c.setDashed(false);\n        if (sourceMarker) {\n            const strokeColor = this.style?.startStrokeColor ?? this.stroke;\n            c.setStrokeColor(strokeColor);\n            c.setFillColor(this.style?.startFillColor ?? strokeColor);\n            sourceMarker();\n        }\n        if (targetMarker) {\n            const strokeColor = this.style?.endStrokeColor ?? this.stroke;\n            c.setStrokeColor(strokeColor);\n            c.setFillColor(this.style?.endFillColor ?? strokeColor);\n            targetMarker();\n        }\n    }\n    /**\n     * Prepares the marker by adding offsets in pts and returning a function to paint the marker.\n     */\n    createMarker(c, pts, source) {\n        if (!this.style)\n            return null;\n        let result = null;\n        const n = pts.length;\n        const type = (source ? this.style.startArrow : this.style.endArrow) || NONE;\n        let p0 = source ? pts[1] : pts[n - 2];\n        const pe = source ? pts[0] : pts[n - 1];\n        if (type !== NONE && p0 !== null && pe !== null) {\n            let count = 1;\n            // Uses next non-overlapping point\n            while (count < n - 1 &&\n                Math.round(p0.x - pe.x) === 0 &&\n                Math.round(p0.y - pe.y) === 0) {\n                p0 = source ? pts[1 + count] : pts[n - 2 - count];\n                count++;\n            }\n            // Computes the norm and the inverse norm\n            const dx = pe.x - p0.x;\n            const dy = pe.y - p0.y;\n            const dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n            const unitX = dx / dist;\n            const unitY = dy / dist;\n            const size = (source ? this.style.startSize : this.style.endSize) ?? DEFAULT_MARKERSIZE;\n            // Allow for stroke width in the end point used and the\n            // orthogonal vectors describing the direction of the marker\n            const filled = (source ? this.style.startFill : this.style.endFill) ?? true;\n            result = EdgeMarkerRegistry.createMarker(c, this, type, pe, unitX, unitY, size, source, this.strokeWidth, filled);\n        }\n        return result;\n    }\n    /**\n     * Augments the bounding box with the strokewidth and shadow offsets.\n     */\n    augmentBoundingBox(bbox) {\n        super.augmentBoundingBox(bbox);\n        if (!this.style)\n            return;\n        // Adds marker sizes\n        let size = 0;\n        if (this.style.startArrow !== NONE) {\n            size = (this.style.startSize ?? DEFAULT_MARKERSIZE) + 1;\n        }\n        if (this.style.endArrow !== NONE) {\n            size = Math.max(size, this.style.endSize ?? DEFAULT_MARKERSIZE) + 1;\n        }\n        bbox.grow(size * this.scale);\n    }\n}\nexport default ConnectorShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Client from '../../../Client';\nimport { ABSOLUTE_LINE_HEIGHT, DEFAULT_FONTFAMILY, DEFAULT_FONTSIZE, DEFAULT_FONTSTYLE, DEFAULT_TEXT_DIRECTION, FONT_STYLE_MASK, NONE, WORD_WRAP, LINE_HEIGHT, } from '../../../util/Constants';\nimport { getBoundingBox } from '../../../util/mathUtils';\nimport { getAlignmentAsPoint } from '../../../util/styleUtils';\nimport Point from '../../geometry/Point';\nimport Shape from '../Shape';\nimport Rectangle from '../../geometry/Rectangle';\nimport { htmlEntities, replaceTrailingNewlines, trim } from '../../../util/StringUtils';\nimport { isNode } from '../../../util/domUtils';\nimport SvgCanvas2D from '../../canvas/SvgCanvas2D';\nimport { matchBinaryMask } from '../../../internal/utils';\n/**\n * Extends {@link Shape} to implement a text shape.\n *\n * This shape is **NOT** registered in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * To change vertical text from \"bottom to top\" to \"top to bottom\", the following code can be used:\n * ```javascript\n * TextShape.prototype.verticalTextRotation = 90;\n * ```\n *\n * @category Vertex Shapes\n */\nclass TextShape extends Shape {\n    constructor(value, bounds, align = 'center', valign = 'middle', color = 'black', family = DEFAULT_FONTFAMILY, size = DEFAULT_FONTSIZE, fontStyle = DEFAULT_FONTSTYLE, spacing = 2, spacingTop = 0, spacingRight = 0, spacingBottom = 0, spacingLeft = 0, horizontal = true, background = NONE, border = NONE, wrap = false, clipped = false, overflow = 'visible', labelPadding = 0, textDirection = DEFAULT_TEXT_DIRECTION) {\n        super();\n        this.margin = null;\n        this.unrotatedBoundingBox = null;\n        this.flipH = false;\n        this.flipV = false;\n        /**\n         * Specifies the spacing to be added to the top spacing. Default is 0. Use the\n         * value 5 here to get the same label positions as in mxGraph 1.x.\n         */\n        this.baseSpacingTop = 0;\n        /**\n         * Specifies the spacing to be added to the bottom spacing. Default is 0. Use the\n         * value 1 here to get the same label positions as in mxGraph 1.x.\n         */\n        this.baseSpacingBottom = 0;\n        /**\n         * Specifies the spacing to be added to the left spacing. Default is 0.\n         */\n        this.baseSpacingLeft = 0;\n        /**\n         * Specifies the spacing to be added to the right spacing. Default is 0.\n         */\n        this.baseSpacingRight = 0;\n        /**\n         * Specifies if linefeeds in HTML labels should be replaced with BR tags.\n         * Default is true.\n         */\n        this.replaceLinefeeds = true;\n        /**\n         * Rotation for vertical text. Default is -90 (bottom to top).\n         */\n        this.verticalTextRotation = -90;\n        /**\n         * Specifies if the string size should be measured in <updateBoundingBox> if\n         * the label is clipped and the label position is center and middle. If this is\n         * true, then the bounding box will be set to <bounds>. Default is true.\n         * <ignoreStringSize> has precedence over this switch.\n         */\n        this.ignoreClippedStringSize = true;\n        /**\n         * Specifies if the actual string size should be measured. If disabled the\n         * boundingBox will not ignore the actual size of the string, otherwise\n         * <bounds> will be used instead. Default is false.\n         */\n        this.ignoreStringSize = false;\n        /**\n         * Contains the last rendered text value. Used for caching.\n         */\n        this.lastValue = null;\n        /**\n         * Specifies if caching for HTML labels should be enabled. Default is true.\n         */\n        this.cacheEnabled = true;\n        this.value = value;\n        this.bounds = bounds;\n        this.color = color ?? 'black';\n        this.align = align ?? 'center';\n        this.valign = valign ?? 'middle';\n        this.family = family ?? DEFAULT_FONTFAMILY;\n        this.size = size ?? DEFAULT_FONTSIZE;\n        this.fontStyle = fontStyle ?? DEFAULT_FONTSTYLE;\n        this.spacing = spacing ?? 2;\n        this.spacingTop = this.spacing + (spacingTop ?? 0);\n        this.spacingRight = this.spacing + (spacingRight ?? 0);\n        this.spacingBottom = this.spacing + (spacingBottom ?? 0);\n        this.spacingLeft = this.spacing + (spacingLeft ?? 0);\n        this.horizontal = horizontal ?? true;\n        this.background = background;\n        this.border = border;\n        this.wrap = wrap ?? false;\n        this.clipped = clipped ?? false;\n        this.overflow = overflow ?? 'visible';\n        this.labelPadding = labelPadding ?? 0;\n        this.textDirection = textDirection;\n        this.rotation = 0;\n        this.updateMargin();\n    }\n    /**\n     * Disables offset in IE9 for crisper image output.\n     */\n    getSvgScreenOffset() {\n        return 0;\n    }\n    /**\n     * Returns true if the bounds are not null and all of its variables are numeric.\n     */\n    checkBounds() {\n        return (!isNaN(this.scale) &&\n            isFinite(this.scale) &&\n            this.scale > 0 &&\n            this.bounds &&\n            !isNaN(this.bounds.x) &&\n            !isNaN(this.bounds.y) &&\n            !isNaN(this.bounds.width) &&\n            !isNaN(this.bounds.height));\n    }\n    /**\n     * Generic rendering code.\n     */\n    paint(c, update = false) {\n        // Scale is passed-through to canvas\n        const s = this.scale;\n        const x = this.bounds.x / s;\n        const y = this.bounds.y / s;\n        const w = this.bounds.width / s;\n        const h = this.bounds.height / s;\n        this.updateTransform(c, x, y, w, h);\n        this.configureCanvas(c, x, y, w, h);\n        if (update) {\n            c.updateText(x, y, w, h, this.align, this.valign, this.wrap, this.overflow, this.clipped, this.getTextRotation(), this.node);\n        }\n        else {\n            // Checks if text contains HTML markup\n            const realHtml = isNode(this.value) || this.dialect === 'strictHtml';\n            // Always renders labels as HTML in VML\n            const fmt = realHtml ? 'html' : '';\n            let val = this.value;\n            if (!realHtml && fmt === 'html') {\n                // @ts-ignore\n                val = htmlEntities(val, false);\n            }\n            if (fmt === 'html' && !isNode(this.value)) {\n                val = replaceTrailingNewlines(val, '<div><br></div>');\n            }\n            // Handles trailing newlines to make sure they are visible in rendering output\n            val =\n                !isNode(this.value) && this.replaceLinefeeds && fmt === 'html'\n                    ? val.replace(/\\n/g, '<br/>')\n                    : val;\n            let dir = this.textDirection;\n            if (dir === 'auto' && !realHtml) {\n                dir = this.getAutoDirection();\n            }\n            if (dir !== 'ltr' && dir !== 'rtl') {\n                dir = '';\n            }\n            c.text(x, y, w, h, val, this.align, this.valign, this.wrap, fmt, this.overflow, this.clipped, this.getTextRotation(), dir);\n        }\n    }\n    /**\n     * Renders the text using the given DOM nodes.\n     */\n    redraw() {\n        if (this.visible &&\n            this.checkBounds() &&\n            this.cacheEnabled &&\n            this.lastValue === this.value &&\n            (isNode(this.value) || this.dialect === 'strictHtml')) {\n            if (this.node.nodeName === 'DIV') {\n                this.redrawHtmlShape();\n                this.updateBoundingBox();\n            }\n            else {\n                const canvas = this.createCanvas();\n                if (canvas) {\n                    // Specifies if events should be handled\n                    canvas.pointerEvents = this.pointerEvents;\n                    this.paint(canvas, true);\n                    this.destroyCanvas(canvas);\n                    this.updateBoundingBox();\n                }\n            }\n        }\n        else {\n            super.redraw();\n            if (isNode(this.value) || this.dialect === 'strictHtml') {\n                this.lastValue = this.value;\n            }\n            else {\n                this.lastValue = null;\n            }\n        }\n    }\n    /**\n     * Resets all styles.\n     */\n    resetStyles() {\n        super.resetStyles();\n        this.color = 'black';\n        this.align = 'center';\n        this.valign = 'middle';\n        this.family = DEFAULT_FONTFAMILY;\n        this.size = DEFAULT_FONTSIZE;\n        this.fontStyle = DEFAULT_FONTSTYLE;\n        this.spacing = 2;\n        this.spacingTop = 2;\n        this.spacingRight = 2;\n        this.spacingBottom = 2;\n        this.spacingLeft = 2;\n        this.horizontal = true;\n        this.background = NONE;\n        this.border = NONE;\n        this.textDirection = DEFAULT_TEXT_DIRECTION;\n        this.margin = null;\n    }\n    /**\n     * Extends mxShape to update the text styles.\n     *\n     * @param state <CellState> of the corresponding cell.\n     */\n    apply(state) {\n        const old = this.spacing;\n        super.apply(state);\n        if (this.style) {\n            this.fontStyle = this.style.fontStyle ?? this.fontStyle;\n            this.family = this.style.fontFamily ?? this.family;\n            this.size = this.style.fontSize ?? this.size;\n            this.color = this.style.fontColor ?? this.color;\n            this.align = this.style.align ?? this.align;\n            this.valign = this.style.verticalAlign ?? this.valign;\n            this.spacing = this.style.spacing ?? this.spacing;\n            this.spacingTop = (this.style.spacingTop ?? this.spacingTop - old) + this.spacing;\n            this.spacingRight =\n                (this.style.spacingRight ?? this.spacingRight - old) + this.spacing;\n            this.spacingBottom =\n                (this.style.spacingBottom ?? this.spacingBottom - old) + this.spacing;\n            this.spacingLeft =\n                (this.style.spacingLeft ?? this.spacingLeft - old) + this.spacing;\n            this.horizontal = this.style.horizontal ?? this.horizontal;\n            this.background = this.style.labelBackgroundColor ?? this.background;\n            this.border = this.style.labelBorderColor ?? this.border;\n            this.textDirection = this.style.textDirection ?? DEFAULT_TEXT_DIRECTION;\n            this.opacity = this.style.textOpacity ?? 100;\n            this.updateMargin();\n        }\n        this.flipV = false;\n        this.flipH = false;\n    }\n    /**\n     * Used to determine the automatic text direction.\n     *\n     * Returns 'ltr' or 'rtl' depending on the contents of {@link value}.\n     *\n     * This is not invoked for HTML, wrapped content or if {@link value} is a DOM node.\n     */\n    getAutoDirection() {\n        // Looks for strong (directional) characters\n        const tmp = /[A-Za-z\\u05d0-\\u065f\\u066a-\\u06ef\\u06fa-\\u07ff\\ufb1d-\\ufdff\\ufe70-\\ufefc]/.exec(String(this.value));\n        // Returns the direction defined by the character\n        return tmp && tmp.length > 0 && tmp[0] > 'z' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Returns the node that contains the rendered input.\n     */\n    getContentNode() {\n        let result = this.node;\n        if (result) {\n            // Rendered with no foreignObject\n            if (!result.ownerSVGElement) {\n                // @ts-ignore\n                result = this.node.firstChild.firstChild;\n            }\n            else {\n                // Innermost DIV that contains the actual content\n                // @ts-ignore\n                result = result.firstChild.firstChild.firstChild.firstChild.firstChild;\n            }\n        }\n        return result;\n    }\n    /**\n     * Updates the <boundingBox> for this shape using the given node and position.\n     */\n    updateBoundingBox() {\n        let { node } = this;\n        this.boundingBox = this.bounds.clone();\n        const rot = this.getTextRotation();\n        const h = this.style?.labelPosition ?? 'center';\n        const v = this.style?.verticalLabelPosition ?? 'middle';\n        if (!this.ignoreStringSize &&\n            node &&\n            this.overflow !== 'fill' &&\n            (!this.clipped || !this.ignoreClippedStringSize || h !== 'center' || v !== 'middle')) {\n            let ow = null;\n            let oh = null;\n            if (node.firstChild &&\n                node.firstChild.firstChild &&\n                node.firstChild.firstChild.nodeName === 'foreignObject') {\n                // Uses second inner DIV for font metrics\n                // @ts-ignore\n                node = node.firstChild.firstChild.firstChild.firstChild;\n                // @ts-ignore\n                oh = node.offsetHeight * this.scale;\n                if (this.overflow === 'width') {\n                    ow = this.boundingBox.width;\n                }\n                else {\n                    // @ts-ignore\n                    ow = node.offsetWidth * this.scale;\n                }\n            }\n            else {\n                try {\n                    const b = node.getBBox();\n                    // Workaround for bounding box of empty string\n                    if (typeof this.value === 'string' && trim(this.value)?.length === 0) {\n                        this.boundingBox = null;\n                    }\n                    else if (b.width === 0 && b.height === 0) {\n                        this.boundingBox = null;\n                    }\n                    else {\n                        this.boundingBox = new Rectangle(b.x, b.y, b.width, b.height);\n                    }\n                    return;\n                }\n                catch (e) {\n                    // Ignores NS_ERROR_FAILURE in FF if container display is none.\n                }\n            }\n            if (ow && oh) {\n                this.boundingBox = new Rectangle(this.bounds.x, this.bounds.y, ow, oh);\n            }\n        }\n        if (this.boundingBox) {\n            const margin = this.margin;\n            if (rot !== 0) {\n                // Accounts for pre-rotated x and y\n                const bbox = (getBoundingBox(new Rectangle(margin.x * this.boundingBox.width, margin.y * this.boundingBox.height, this.boundingBox.width, this.boundingBox.height), rot, new Point(0, 0)));\n                this.unrotatedBoundingBox = Rectangle.fromRectangle(this.boundingBox);\n                this.unrotatedBoundingBox.x += margin.x * this.unrotatedBoundingBox.width;\n                this.unrotatedBoundingBox.y += margin.y * this.unrotatedBoundingBox.height;\n                this.boundingBox.x += bbox.x;\n                this.boundingBox.y += bbox.y;\n                this.boundingBox.width = bbox.width;\n                this.boundingBox.height = bbox.height;\n            }\n            else {\n                this.boundingBox.x += margin.x * this.boundingBox.width;\n                this.boundingBox.y += margin.y * this.boundingBox.height;\n                this.unrotatedBoundingBox = null;\n            }\n        }\n    }\n    /**\n     * Returns 0 to avoid using rotation in the canvas via updateTransform.\n     */\n    getShapeRotation() {\n        return 0;\n    }\n    /**\n     * Returns the rotation for the text label of the corresponding shape.\n     */\n    getTextRotation() {\n        return this.state && this.state.shape ? this.state.shape.getTextRotation() : 0;\n    }\n    /**\n     * Inverts the bounds if {@link Shape#isBoundsInverted} returns true or if the\n     * horizontal style is false.\n     */\n    isPaintBoundsInverted() {\n        return !this.horizontal && !!this.state && this.state.cell.isVertex();\n    }\n    /**\n     * Sets the state of the canvas for drawing the shape.\n     */\n    configureCanvas(c, x, y, w, h) {\n        super.configureCanvas(c, x, y, w, h);\n        c.setFontColor(this.color);\n        c.setFontBackgroundColor(this.background);\n        c.setFontBorderColor(this.border);\n        c.setFontFamily(this.family);\n        c.setFontSize(this.size);\n        c.setFontStyle(this.fontStyle);\n    }\n    /**\n     * Private helper function to create SVG elements\n     */\n    getHtmlValue() {\n        let val = this.value;\n        if (this.dialect !== 'strictHtml') {\n            val = htmlEntities(val, false);\n        }\n        // Handles trailing newlines to make sure they are visible in rendering output\n        val = replaceTrailingNewlines(val, '<div><br></div>');\n        val = this.replaceLinefeeds ? val.replace(/\\n/g, '<br/>') : val;\n        return val;\n    }\n    /**\n     * Private helper function to create SVG elements\n     */\n    getTextCss() {\n        const lh = ABSOLUTE_LINE_HEIGHT ? `${this.size * LINE_HEIGHT}px` : LINE_HEIGHT;\n        let css = `display: inline-block; font-size: ${this.size}px; ` +\n            `font-family: ${this.family}; color: ${this.color}; line-height: ${lh}; pointer-events: ${this.pointerEvents ? 'all' : 'none'}; `;\n        matchBinaryMask(this.fontStyle, FONT_STYLE_MASK.BOLD) &&\n            (css += 'font-weight: bold; ');\n        matchBinaryMask(this.fontStyle, FONT_STYLE_MASK.ITALIC) &&\n            (css += 'font-style: italic; ');\n        const txtDecor = [];\n        matchBinaryMask(this.fontStyle, FONT_STYLE_MASK.UNDERLINE) &&\n            txtDecor.push('underline');\n        matchBinaryMask(this.fontStyle, FONT_STYLE_MASK.STRIKETHROUGH) &&\n            txtDecor.push('line-through');\n        txtDecor.length > 0 && (css += `text-decoration: ${txtDecor.join(' ')}; `);\n        return css;\n    }\n    /**\n     * Updates the HTML node(s) to reflect the latest bounds and scale.\n     */\n    redrawHtmlShape() {\n        const w = Math.max(0, Math.round(this.bounds.width / this.scale));\n        const h = Math.max(0, Math.round(this.bounds.height / this.scale));\n        const flex = `position: absolute; left: ${Math.round(this.bounds.x)}px; ` +\n            `top: ${Math.round(this.bounds.y)}px; pointer-events: none; `;\n        const block = this.getTextCss();\n        const margin = this.margin;\n        const node = this.node;\n        SvgCanvas2D.createCss(w + 2, h, this.align, this.valign, this.wrap, this.overflow, this.clipped, this.background !== NONE ? htmlEntities(this.background, true) : null, this.border !== NONE ? htmlEntities(this.border, true) : null, flex, block, this.scale, (dx, dy, flex, item, block, ofl) => {\n            const r = this.getTextRotation();\n            let tr = (this.scale !== 1 ? `scale(${this.scale}) ` : '') +\n                (r !== 0 ? `rotate(${r}deg) ` : '') +\n                (margin.x !== 0 || margin.y !== 0\n                    ? `translate(${margin.x * 100}%,${margin.y * 100}%)`\n                    : '');\n            if (tr !== '') {\n                tr = `transform-origin: 0 0; transform: ${tr}; `;\n            }\n            if (ofl === '') {\n                flex += item;\n                item = `display:inline-block; min-width: 100%; ${tr}`;\n            }\n            else {\n                item += tr;\n                if (Client.IS_SF) {\n                    item += '-webkit-clip-path: content-box;';\n                }\n            }\n            if (this.opacity < 100) {\n                block += `opacity: ${this.opacity / 100}; `;\n            }\n            node.setAttribute('style', flex);\n            const html = isNode(this.value)\n                ? // @ts-ignore\n                    this.value.outerHTML\n                : this.getHtmlValue();\n            if (!node.firstChild) {\n                node.innerHTML = `<div><div>${html}</div></div>`;\n            }\n            // @ts-ignore\n            node.firstChild.firstChild.setAttribute('style', block);\n            // @ts-ignore\n            node.firstChild.setAttribute('style', item);\n        });\n    }\n    /**\n     * Sets the inner HTML of the given element to the <value>.\n     */\n    updateInnerHtml(elt) {\n        if (isNode(this.value)) {\n            // @ts-ignore\n            elt.innerHTML = this.value.outerHTML;\n        }\n        else {\n            let val = this.value;\n            if (this.dialect !== 'strictHtml') {\n                // LATER: Can be cached in updateValue\n                val = htmlEntities(val, false);\n            }\n            // Handles trailing newlines to make sure they are visible in rendering output\n            val = replaceTrailingNewlines(val, '<div>&nbsp;</div>');\n            val = this.replaceLinefeeds ? val.replace(/\\n/g, '<br/>') : val;\n            val = `<div style=\"display:inline-block;_display:inline;\">${val}</div>`;\n            elt.innerHTML = val;\n        }\n    }\n    /**\n     * Updates the HTML node(s) to reflect the latest bounds and scale.\n     */\n    updateValue() {\n        const node = this.node;\n        if (isNode(this.value)) {\n            node.innerHTML = '';\n            node.appendChild(this.value);\n        }\n        else {\n            let val = this.value;\n            if (this.dialect !== 'strictHtml') {\n                val = htmlEntities(val, false);\n            }\n            // Handles trailing newlines to make sure they are visible in rendering output\n            val = replaceTrailingNewlines(val, '<div><br></div>');\n            val = this.replaceLinefeeds ? val.replace(/\\n/g, '<br/>') : val;\n            const bg = this.background !== NONE ? this.background : null;\n            const bd = this.border !== NONE ? this.border : null;\n            if (this.overflow === 'fill' || this.overflow === 'width') {\n                if (bg) {\n                    node.style.backgroundColor = bg;\n                }\n                if (bd) {\n                    node.style.border = `1px solid ${bd}`;\n                }\n            }\n            else {\n                let css = '';\n                if (bg) {\n                    css += `background-color:${htmlEntities(bg, true)};`;\n                }\n                if (bd) {\n                    css += `border:1px solid ${htmlEntities(bd, true)};`;\n                }\n                // Wrapper DIV for background, zoom needed for inline in quirks\n                // and to measure wrapped font sizes in all browsers\n                // FIXME: Background size in quirks mode for wrapped text\n                const lh = ABSOLUTE_LINE_HEIGHT ? `${this.size * LINE_HEIGHT}px` : LINE_HEIGHT;\n                val =\n                    `<div style=\"zoom:1;${css}display:inline-block;_display:inline;text-decoration:inherit;` +\n                        `padding-bottom:1px;padding-right:1px;line-height:${lh}\">${val}</div>`;\n            }\n            node.innerHTML = val;\n            // Sets text direction\n            const divs = node.getElementsByTagName('div');\n            if (divs.length > 0) {\n                let dir = this.textDirection;\n                if (dir === 'auto' && this.dialect !== 'strictHtml') {\n                    dir = this.getAutoDirection();\n                }\n                if (dir === 'ltr' || dir === 'rtl') {\n                    divs[divs.length - 1].setAttribute('dir', dir);\n                }\n                else {\n                    divs[divs.length - 1].removeAttribute('dir');\n                }\n            }\n        }\n    }\n    /**\n     * Updates the HTML node(s) to reflect the latest bounds and scale.\n     */\n    updateFont(node) {\n        const { style } = node;\n        // @ts-ignore\n        style.lineHeight = ABSOLUTE_LINE_HEIGHT\n            ? `${this.size * LINE_HEIGHT}px`\n            : LINE_HEIGHT;\n        style.fontSize = `${this.size}px`;\n        style.fontFamily = this.family;\n        style.verticalAlign = 'top';\n        style.color = this.color;\n        matchBinaryMask(this.fontStyle, FONT_STYLE_MASK.BOLD)\n            ? (style.fontWeight = 'bold')\n            : (style.fontWeight = '');\n        matchBinaryMask(this.fontStyle, FONT_STYLE_MASK.ITALIC)\n            ? (style.fontStyle = 'italic')\n            : (style.fontStyle = '');\n        const txtDecor = [];\n        matchBinaryMask(this.fontStyle, FONT_STYLE_MASK.UNDERLINE) &&\n            txtDecor.push('underline');\n        matchBinaryMask(this.fontStyle, FONT_STYLE_MASK.STRIKETHROUGH) &&\n            txtDecor.push('line-through');\n        txtDecor.length > 0 && (style.textDecoration = txtDecor.join(' '));\n        if (this.align === 'center') {\n            style.textAlign = 'center';\n        }\n        else if (this.align === 'right') {\n            style.textAlign = 'right';\n        }\n        else {\n            style.textAlign = 'left';\n        }\n    }\n    /**\n     * Updates the HTML node(s) to reflect the latest bounds and scale.\n     */\n    updateSize(node, enableWrap = false) {\n        const w = Math.max(0, Math.round(this.bounds.width / this.scale));\n        const h = Math.max(0, Math.round(this.bounds.height / this.scale));\n        const { style } = node;\n        // NOTE: Do not use maxWidth here because wrapping will\n        // go wrong if the cell is outside of the viewable area\n        if (this.clipped) {\n            style.overflow = 'hidden';\n            style.maxHeight = `${h}px`;\n            style.maxWidth = `${w}px`;\n        }\n        else if (this.overflow === 'fill') {\n            style.width = `${w + 1}px`;\n            style.height = `${h + 1}px`;\n            style.overflow = 'hidden';\n        }\n        else if (this.overflow === 'width') {\n            style.width = `${w + 1}px`;\n            style.maxHeight = `${h + 1}px`;\n            style.overflow = 'hidden';\n        }\n        if (this.wrap && w > 0) {\n            style.wordWrap = WORD_WRAP;\n            style.whiteSpace = 'normal';\n            style.width = `${w}px`;\n            if (enableWrap && this.overflow !== 'fill' && this.overflow !== 'width') {\n                let sizeDiv = node;\n                if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName === 'DIV') {\n                    // @ts-ignore\n                    sizeDiv = sizeDiv.firstChild;\n                    if (node.style.wordWrap === 'break-word') {\n                        sizeDiv.style.width = '100%';\n                    }\n                }\n                let tmp = sizeDiv.offsetWidth;\n                // Workaround for text measuring in hidden containers\n                if (tmp === 0) {\n                    const prev = node.parentNode;\n                    node.style.visibility = 'hidden';\n                    document.body.appendChild(node);\n                    tmp = sizeDiv.offsetWidth;\n                    node.style.visibility = '';\n                    prev.appendChild(node);\n                }\n                tmp += 3;\n                if (this.clipped) {\n                    tmp = Math.min(tmp, w);\n                }\n                style.width = `${tmp}px`;\n            }\n        }\n        else {\n            style.whiteSpace = 'nowrap';\n        }\n    }\n    /**\n     * Returns the spacing as an {@link Point}.\n     */\n    updateMargin() {\n        this.margin = getAlignmentAsPoint(this.align, this.valign);\n    }\n    /**\n     * Returns the spacing as an {@link Point}.\n     */\n    getSpacing() {\n        let dx = 0;\n        let dy = 0;\n        if (this.align === 'center') {\n            dx = (this.spacingLeft - this.spacingRight) / 2;\n        }\n        else if (this.align === 'right') {\n            dx = -this.spacingRight - this.baseSpacingRight;\n        }\n        else {\n            dx = this.spacingLeft + this.baseSpacingLeft;\n        }\n        if (this.valign === 'middle') {\n            dy = (this.spacingTop - this.spacingBottom) / 2;\n        }\n        else if (this.valign === 'bottom') {\n            dy = -this.spacingBottom - this.baseSpacingBottom;\n        }\n        else {\n            dy = this.spacingTop + this.baseSpacingTop;\n        }\n        return new Point(dx, dy);\n    }\n}\nexport default TextShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { BaseRegistry } from '../../internal/BaseRegistry';\n/**\n * A registry that stores the {@link ShapeConstructor}s and their configuration.\n *\n * For adding new shapes you should use {@link ShapeRegistry.add}.\n *\n * Names generally used to register the built-in shapes:\n * - actor\n * - arrow\n * - arrow connector (for edges)\n * - cloud\n * - connector (for edges)\n * - cylinder\n * - double ellipse\n * - ellipse\n * - hexagon\n * - image\n * - label\n * - line (for edges)\n * - rectangle\n * - rhombus\n * - swimlane\n * - triangle\n *\n * @since 0.20.0\n * @category Configuration\n * @category Shape\n */\nexport const ShapeRegistry = new BaseRegistry();\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { BaseRegistry } from '../../../internal/BaseRegistry';\n/**\n * A registry that stores the {@link StencilShape}s and their configuration.\n *\n * Here is an example showing how to add stencils:\n * ```javascript\n * const response = requestUtils.load('test/stencils.xml');\n * const root = response.getDocumentElement(); // <shapes> node\n * let shape = root.firstChild;\n *\n * while (shape) {\n *   if (shape.nodeType === constants.NODE_TYPE.ELEMENT) {\n *    StencilShapeRegistry.add(shape.getAttribute('name'), new StencilShape(shape));\n *  }\n *\n *  shape = shape.nextSibling;\n * }\n *\n * The XSD for the stencil description is available in the `stencils.xsd` file.\n * ```\n *\n * @category Configuration\n * @category Shape\n */\nexport const StencilShapeRegistry = new BaseRegistry();\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2017, JGraph Ltd\nCopyright (c) 2006-2017, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport RectangleShape from '../shape/node/RectangleShape';\nimport ConnectorShape from '../shape/edge/ConnectorShape';\nimport ImageShape from '../shape/node/ImageShape';\nimport TextShape from '../shape/node/TextShape';\nimport { DEFAULT_FONTFAMILY, DEFAULT_FONTSIZE, DEFAULT_FONTSTYLE, DEFAULT_TEXT_DIRECTION, NONE, } from '../../util/Constants';\nimport { getRotatedPoint, mod, toRadians } from '../../util/mathUtils';\nimport { convertPoint } from '../../util/styleUtils';\nimport { equalEntries, equalPoints } from '../../util/arrayUtils';\nimport Rectangle from '../geometry/Rectangle';\nimport { ShapeRegistry } from '../shape/ShapeRegistry';\nimport { StencilShapeRegistry } from '../shape/stencil/StencilShapeRegistry';\nimport InternalEvent from '../event/InternalEvent';\nimport Client from '../../Client';\nimport InternalMouseEvent from '../event/InternalMouseEvent';\nimport Dictionary from '../../util/Dictionary';\nimport EventObject from '../event/EventObject';\nimport Point from '../geometry/Point';\nimport Shape from '../shape/Shape';\nimport { getClientX, getClientY, getSource } from '../../util/EventUtils';\nimport { isNode } from '../../util/domUtils';\nconst placeholderStyleValues = ['inherit', 'swimlane', 'indicated'];\nconst placeholderStyleProperties = [\n    'fillColor',\n    'strokeColor',\n    'gradientColor',\n    'fontColor',\n];\n/**\n * Renders {@link Cell}s into a document object model.\n *\n * In general, the `CellRenderer` is in charge of creating, redrawing and destroying the shape and label associated with a cell state,\n * as well as some other graphical objects, namely controls and overlays.\n *\n * The shape hierarchy in the display (i.e. the hierarchy in which the DOM nodes appear in the document) does not reflect the cell hierarchy.\n * The shapes are a (flat) sequence of shapes and labels inside the draw pane of the {@link GraphView}, with some exceptions,\n * namely the HTML labels being placed directly inside the graph container for certain browsers.\n */\nclass CellRenderer {\n    constructor() {\n        /**\n         * Defines the default shape for edges.\n         * @default {@link ConnectorShape}\n         */\n        this.defaultEdgeShape = ConnectorShape;\n        /**\n         * Defines the default shape for vertices.\n         * @default {@link RectangleShape}.\n         */\n        this.defaultVertexShape = RectangleShape;\n        /**\n         * Defines the default shape for labels.\n         * @default {@link TextShape}.\n         */\n        this.defaultTextShape = TextShape;\n        /**\n         * Specifies if the folding icon should ignore the horizontal orientation of a swimlane.\n         * @default true.\n         */\n        this.legacyControlPosition = true;\n        /**\n         * Specifies if spacing and label position should be ignored if overflow is fill or width.\n         * @default true for backwards compatibility.\n         */\n        this.legacySpacing = true;\n        /**\n         * Antialiasing option for new shapes.\n         * @default true.\n         */\n        this.antiAlias = true;\n        /**\n         * Minimum stroke width for SVG output.\n         */\n        this.minSvgStrokeWidth = 1;\n        /**\n         * Specifies if the enabled state of the graph should be ignored in the control\n         * click handler (to allow folding in disabled graphs).\n         * @default false.\n         */\n        this.forceControlClickHandler = false;\n    }\n    /**\n     * Initializes the shape in the given state by calling its init method with\n     * the correct container after configuring it using {@link configureShape}.\n     *\n     * @param state {@link CellState} for which the shape should be initialized.\n     */\n    initializeShape(state) {\n        if (state.shape) {\n            state.shape.dialect = state.view.graph.dialect;\n            this.configureShape(state);\n            state.shape.init(state.view.getDrawPane());\n        }\n    }\n    /**\n     * Creates and returns the shape for the given cell state.\n     *\n     * @param state {@link CellState} for which the shape should be created.\n     */\n    createShape(state) {\n        // Checks if there is a stencil for the name and creates a shape instance for the stencil if one exists\n        const stencil = StencilShapeRegistry.get(state.style.shape);\n        if (stencil) {\n            return new Shape(stencil);\n        }\n        const shapeConstructor = this.getShapeConstructor(state);\n        return new shapeConstructor();\n    }\n    /**\n     * Creates the indicator shape for the given cell state.\n     *\n     * @param state {@link CellState} for which the indicator shape should be created.\n     */\n    createIndicatorShape(state) {\n        if (state.shape) {\n            state.shape.indicatorShape = this.getShape(state.getIndicatorShape());\n        }\n    }\n    /**\n     * Returns the shape for the given name from {@link ShapeRegistry}.\n     */\n    getShape(name) {\n        return ShapeRegistry.get(name);\n    }\n    /**\n     * Returns the constructor to be used for creating the shape.\n     */\n    getShapeConstructor(state) {\n        let ctor = this.getShape(state.style.shape);\n        if (!ctor) {\n            ctor = state.cell.isEdge() ? this.defaultEdgeShape : this.defaultVertexShape;\n        }\n        return ctor;\n    }\n    /**\n     * Configures the shape for the given cell state.\n     *\n     * @param state {@link CellState} for which the shape should be configured.\n     */\n    configureShape(state) {\n        const shape = state.shape;\n        if (shape) {\n            shape.apply(state);\n            shape.imageSrc = state.getImageSrc() || null;\n            shape.indicatorColor = state.getIndicatorColor() || NONE;\n            shape.indicatorStrokeColor = state.style.indicatorStrokeColor || NONE;\n            shape.indicatorGradientColor = state.getIndicatorGradientColor() || NONE;\n            if (state.style.indicatorDirection) {\n                shape.indicatorDirection = state.style.indicatorDirection;\n            }\n            shape.indicatorImageSrc = state.getIndicatorImageSrc() || null;\n            this.postConfigureShape(state);\n        }\n    }\n    /**\n     * Replaces any reserved words used for attributes, eg. inherit,\n     * indicated or swimlane for colors in the shape for the given state.\n     * This implementation resolves these keywords on the fill, stroke\n     * and gradient color keys.\n     */\n    postConfigureShape(state) {\n        if (state.shape) {\n            this.resolveColor(state, 'indicatorGradientColor', 'gradientColor');\n            this.resolveColor(state, 'indicatorColor', 'fillColor');\n            this.resolveColor(state, 'gradient', 'gradientColor');\n            this.resolveColor(state, 'stroke', 'strokeColor');\n            this.resolveColor(state, 'fill', 'fillColor');\n        }\n    }\n    /**\n     * Check if style properties supporting placeholders requires resolution.\n     */\n    checkPlaceholderStyles(state) {\n        // LATER: Check if the color has actually changed\n        for (const property of placeholderStyleProperties) {\n            if (placeholderStyleValues.includes(state.style[property])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n     * the respective color on the shape.\n     */\n    resolveColor(state, field, key) {\n        const shape = key === 'fontColor' ? state.text : state.shape;\n        if (shape) {\n            const graph = state.view.graph;\n            // @ts-ignore\n            const value = shape[field];\n            let referenced = null;\n            if (value === 'inherit') {\n                referenced = state.cell.getParent();\n            }\n            else if (value === 'swimlane') {\n                // @ts-ignore\n                shape[field] =\n                    key === 'strokeColor' || key === 'fontColor' ? '#000000' : '#ffffff';\n                if (state.cell.getTerminal(false)) {\n                    referenced = state.cell.getTerminal(false);\n                }\n                else {\n                    referenced = state.cell;\n                }\n                referenced = graph.getSwimlane(referenced);\n                key = graph.swimlaneIndicatorColorAttribute;\n            }\n            else if (value === 'indicated' && state.shape) {\n                // @ts-ignore\n                shape[field] = state.shape.indicatorColor;\n            }\n            else if (key !== 'fillColor' && value === 'fillColor' && state.shape) {\n                // @ts-ignore\n                shape[field] = state.style.fillColor;\n            }\n            else if (key !== 'strokeColor' && value === 'strokeColor' && state.shape) {\n                // @ts-ignore\n                shape[field] = state.style.strokeColor;\n            }\n            if (referenced) {\n                const rstate = graph.getView().getState(referenced);\n                // @ts-ignore\n                shape[field] = null;\n                if (rstate) {\n                    const rshape = key === 'fontColor' ? rstate.text : rstate.shape;\n                    if (rshape && field !== 'indicatorColor') {\n                        // @ts-ignore\n                        shape[field] = rshape[field];\n                    }\n                    else {\n                        // @ts-ignore\n                        shape[field] = rstate.style[key];\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Returns the value to be used for the label.\n     *\n     * @param state {@link CellState} for which the label should be created.\n     */\n    getLabelValue(state) {\n        const graph = state.view.graph;\n        return graph.getLabel(state.cell);\n    }\n    /**\n     * Creates the label for the given cell state.\n     *\n     * @param state {@link CellState} for which the label should be created.\n     * @param value the label value.\n     */\n    createLabel(state, value) {\n        const graph = state.view.graph;\n        if ((state.style.fontSize || 0) > 0 || state.style.fontSize == null) {\n            // Avoids using DOM node for empty labels\n            const isForceHtml = graph.isHtmlLabel(state.cell) || isNode(value);\n            state.text = new this.defaultTextShape(value, new Rectangle(), state.style.align ?? 'center', state.getVerticalAlign(), state.style.fontColor, state.style.fontFamily, state.style.fontSize, state.style.fontStyle, state.style.spacing, state.style.spacingTop, state.style.spacingRight, state.style.spacingBottom, state.style.spacingLeft, state.style.horizontal, state.style.labelBackgroundColor, state.style.labelBorderColor, graph.isWrapping(state.cell) && graph.isHtmlLabel(state.cell), graph.isLabelClipped(state.cell), state.style.overflow, state.style.labelPadding, state.style.textDirection ?? DEFAULT_TEXT_DIRECTION);\n            state.text.opacity = state.style.textOpacity ?? 100;\n            state.text.dialect = isForceHtml ? 'strictHtml' : graph.dialect;\n            state.text.style = state.style;\n            state.text.state = state;\n            this.initializeLabel(state, state.text);\n            // Workaround for touch devices routing all events for a mouse gesture\n            // (down, move, up) via the initial DOM node. IE additionally redirects\n            // the event via the initial DOM node but the event source is the node\n            // under the mouse, so we need to check if this is the case and force\n            // getCellAt for the subsequent mouseMoves and the final mouseUp.\n            let forceGetCell = false;\n            const getState = (evt) => {\n                let result = state;\n                if (Client.IS_TOUCH || forceGetCell) {\n                    const x = getClientX(evt);\n                    const y = getClientY(evt);\n                    // Dispatches the drop event to the graph which\n                    // consumes and executes the source function\n                    const pt = convertPoint(graph.container, x, y);\n                    result = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n                }\n                return result;\n            };\n            // TODO: Add handling for special touch device gestures\n            InternalEvent.addGestureListeners(state.text.node, (evt) => {\n                if (this.isLabelEvent(state, evt)) {\n                    graph.fireMouseEvent(InternalEvent.MOUSE_DOWN, new InternalMouseEvent(evt, state));\n                    const source = getSource(evt);\n                    forceGetCell =\n                        // @ts-ignore nodeName should exist.\n                        graph.dialect !== 'svg' && source.nodeName === 'IMG';\n                }\n            }, (evt) => {\n                if (this.isLabelEvent(state, evt)) {\n                    graph.fireMouseEvent(InternalEvent.MOUSE_MOVE, new InternalMouseEvent(evt, getState(evt)));\n                }\n            }, (evt) => {\n                if (this.isLabelEvent(state, evt)) {\n                    graph.fireMouseEvent(InternalEvent.MOUSE_UP, new InternalMouseEvent(evt, getState(evt)));\n                    forceGetCell = false;\n                }\n            });\n            // Uses double click timeout in mxGraph for quirks mode\n            if (graph.isNativeDblClickEnabled()) {\n                InternalEvent.addListener(state.text.node, 'dblclick', (evt) => {\n                    if (this.isLabelEvent(state, evt)) {\n                        graph.dblClick(evt, state.cell);\n                        InternalEvent.consume(evt);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Initializes the label with a suitable container.\n     *\n     * @param state {@link CellState} whose label should be initialized.\n     * @param shape {@link Shape} that represents the label.\n     */\n    initializeLabel(state, shape) {\n        if (Client.IS_SVG && Client.NO_FO && shape.dialect !== 'svg') {\n            const graph = state.view.graph;\n            shape.init(graph.container);\n        }\n        else {\n            shape.init(state.view.getDrawPane());\n        }\n    }\n    /**\n     * Creates the actual shape for showing the overlay for the given cell state.\n     *\n     * @param state {@link CellState} for which the overlay should be created.\n     */\n    createCellOverlays(state) {\n        const graph = state.view.graph;\n        const cellOverlays = graph.getCellOverlays(state.cell);\n        const createdOverlays = new Dictionary();\n        for (const cellOverlay of cellOverlays) {\n            const shape = state.overlays.remove(cellOverlay);\n            if (shape) {\n                createdOverlays.put(cellOverlay, shape);\n                continue;\n            }\n            const overlayShape = this.createOverlayShape(state, cellOverlay);\n            overlayShape.dialect = graph.dialect;\n            overlayShape.overlay = cellOverlay;\n            this.initializeOverlay(state, overlayShape);\n            this.installCellOverlayListeners(state, cellOverlay, overlayShape);\n            this.configureOverlayShape(state, cellOverlay, overlayShape);\n            createdOverlays.put(cellOverlay, overlayShape);\n        }\n        // Removes unused\n        state.overlays.visit((id, shape) => {\n            shape.destroy();\n        });\n        state.overlays = createdOverlays;\n    }\n    /**\n     * Create the Shape of the overlay.\n     *\n     * @param _state {@link CellState} for which the overlay shape should be created.\n     * @param cellOverlay {@link CellOverlay} used to create the Shape of the overlay.\n     * @since 0.16.0\n     */\n    createOverlayShape(_state, cellOverlay) {\n        const overlayShape = new ImageShape(new Rectangle(), cellOverlay.image.src);\n        overlayShape.preserveImageAspect = false;\n        return overlayShape;\n    }\n    /**\n     * Initializes the given overlay.\n     *\n     * @param state {@link CellState}  for which the overlay should be created.\n     * @param overlay {@link Shape} that represents the overlay.\n     */\n    initializeOverlay(state, overlay) {\n        overlay.init(state.view.getOverlayPane());\n    }\n    /**\n     * Installs the listeners for the given {@link CellState} , {@link CellOverlay} and {@link Shape} that represents the overlay.\n     */\n    installCellOverlayListeners(state, overlay, shape) {\n        const graph = state.view.graph;\n        InternalEvent.addListener(shape.node, 'click', (evt) => {\n            if (graph.isEditing()) {\n                graph.stopEditing(!graph.isInvokesStopCellEditing());\n            }\n            overlay.fireEvent(new EventObject(InternalEvent.CLICK, { event: evt, cell: state.cell }));\n        });\n        InternalEvent.addGestureListeners(shape.node, (evt) => {\n            InternalEvent.consume(evt);\n        }, (evt) => {\n            graph.fireMouseEvent(InternalEvent.MOUSE_MOVE, new InternalMouseEvent(evt, state));\n        });\n        if (Client.IS_TOUCH) {\n            InternalEvent.addListener(shape.node, 'touchend', (evt) => {\n                overlay.fireEvent(new EventObject(InternalEvent.CLICK, { event: evt, cell: state.cell }));\n            });\n        }\n    }\n    /**\n     * Configure the Shape of the overlay. Generally, it is used to configure the DOM node of the Shape\n     *\n     * The default implementation set the cursor in the DOM node of the Shape based on the {@link CellOverlay.cursor}.\n     *\n     * @param _state {@link CellState} for which the overlay shape should be created.\n     * @param cellOverlay {@link CellOverlay} used to create the Shape of the overlay.\n     * @param overlayShape the {@link Shape} of the overlay.\n     * @since 0.16.0\n     */\n    configureOverlayShape(_state, cellOverlay, overlayShape) {\n        if (cellOverlay.cursor) {\n            overlayShape.node.style.cursor = cellOverlay.cursor;\n        }\n    }\n    /**\n     * Creates the control for the given cell state.\n     *\n     * @param state {@link CellState}  for which the control should be created.\n     */\n    createControl(state) {\n        const graph = state.view.graph;\n        const image = graph.getFoldingImage(state);\n        if (graph.isFoldingEnabled() && image) {\n            if (!state.control) {\n                const b = new Rectangle(0, 0, image.width, image.height);\n                state.control = new ImageShape(b, image.src);\n                state.control.preserveImageAspect = false;\n                state.control.dialect = graph.dialect;\n                this.initControl(state, state.control, true, this.createControlClickHandler(state));\n            }\n        }\n        else if (state.control) {\n            state.control.destroy();\n            state.control = null;\n        }\n    }\n    /**\n     * Hook for creating the click handler for the folding icon.\n     *\n     * @param state {@link CellState}  whose control click handler should be returned.\n     */\n    createControlClickHandler(state) {\n        const graph = state.view.graph;\n        return (evt) => {\n            if (this.forceControlClickHandler || graph.isEnabled()) {\n                const collapse = !state.cell.isCollapsed();\n                graph.foldCells(collapse, false, [state.cell], false, evt);\n                InternalEvent.consume(evt);\n            }\n        };\n    }\n    /**\n     * Initializes the given control and returns the corresponding DOM node.\n     *\n     * @param state {@link CellState} for which the control should be initialized.\n     * @param control {@link Shape} to be initialized.\n     * @param handleEvents Boolean indicating if mousedown and mousemove should fire events via the graph.\n     * @param clickHandler Optional function to implement clicks on the control.\n     */\n    initControl(state, control, handleEvents, clickHandler) {\n        const graph = state.view.graph;\n        // In the special case where the label is in HTML and the display is SVG the image\n        // should go into the graph container directly in order to be clickable. Otherwise\n        // it is obscured by the HTML label that overlaps the cell.\n        const isForceHtml = graph.isHtmlLabel(state.cell) && Client.NO_FO && graph.dialect === 'svg';\n        if (isForceHtml) {\n            control.dialect = 'preferHtml';\n            control.init(graph.container);\n            control.node.style.zIndex = String(1);\n        }\n        else {\n            control.init(state.view.getOverlayPane());\n        }\n        const node = control.node;\n        // Workaround for missing click event on iOS is to check tolerance below\n        if (clickHandler && !Client.IS_IOS) {\n            if (graph.isEnabled()) {\n                node.style.cursor = 'pointer';\n            }\n            InternalEvent.addListener(node, 'click', clickHandler);\n        }\n        if (handleEvents) {\n            let first = null;\n            InternalEvent.addGestureListeners(node, (evt) => {\n                first = new Point(getClientX(evt), getClientY(evt));\n                graph.fireMouseEvent(InternalEvent.MOUSE_DOWN, new InternalMouseEvent(evt, state));\n                InternalEvent.consume(evt);\n            }, (evt) => {\n                graph.fireMouseEvent(InternalEvent.MOUSE_MOVE, new InternalMouseEvent(evt, state));\n            }, (evt) => {\n                graph.fireMouseEvent(InternalEvent.MOUSE_UP, new InternalMouseEvent(evt, state));\n                InternalEvent.consume(evt);\n            });\n            // Uses capture phase for event interception to stop bubble phase\n            if (clickHandler && Client.IS_IOS) {\n                node.addEventListener('touchend', (evt) => {\n                    if (first) {\n                        const tol = graph.getEventTolerance();\n                        if (Math.abs(first.x - getClientX(evt)) < tol &&\n                            Math.abs(first.y - getClientY(evt)) < tol) {\n                            clickHandler.call(clickHandler, evt);\n                            InternalEvent.consume(evt);\n                        }\n                    }\n                }, true);\n            }\n        }\n        return node;\n    }\n    /**\n     * Returns `true` if the event is for the shape of the given state.\n     *\n     * This implementation always returns `true`.\n     *\n     * @param state {@link CellState}  whose shape fired the event.\n     * @param evt Mouse event which was fired.\n     */\n    isShapeEvent(state, evt) {\n        return true;\n    }\n    /**\n     * Returns `true` if the event is for the label of the given state.\n     *\n     * This implementation always returns `true`.\n     *\n     * @param state {@link CellState}  whose label fired the event.\n     * @param evt Mouse event which was fired.\n     */\n    isLabelEvent(state, evt) {\n        return true;\n    }\n    /**\n     * Installs the event listeners for the given cell state.\n     *\n     * @param state {@link CellState}  for which the event listeners should be isntalled.\n     */\n    installListeners(state) {\n        const graph = state.view.graph;\n        // Workaround for touch devices routing all events for a mouse\n        // gesture (down, move, up) via the initial DOM node. Same for\n        // HTML images in all IE versions (VML images are working).\n        const getState = (evt) => {\n            let result = state;\n            const source = getSource(evt);\n            if ((source &&\n                graph.dialect !== 'svg' &&\n                // @ts-ignore nodeName should exist\n                source.nodeName === 'IMG') ||\n                Client.IS_TOUCH) {\n                const x = getClientX(evt);\n                const y = getClientY(evt);\n                // Dispatches the drop event to the graph which\n                // consumes and executes the source function\n                const pt = convertPoint(graph.container, x, y);\n                const cell = graph.getCellAt(pt.x, pt.y);\n                result = cell ? graph.view.getState(cell) : null;\n            }\n            return result;\n        };\n        if (state.shape) {\n            InternalEvent.addGestureListeners(state.shape.node, (evt) => {\n                if (this.isShapeEvent(state, evt)) {\n                    graph.fireMouseEvent(InternalEvent.MOUSE_DOWN, new InternalMouseEvent(evt, state));\n                }\n            }, (evt) => {\n                if (this.isShapeEvent(state, evt)) {\n                    graph.fireMouseEvent(InternalEvent.MOUSE_MOVE, new InternalMouseEvent(evt, getState(evt)));\n                }\n            }, (evt) => {\n                if (this.isShapeEvent(state, evt)) {\n                    graph.fireMouseEvent(InternalEvent.MOUSE_UP, new InternalMouseEvent(evt, getState(evt)));\n                }\n            });\n            // Uses double click timeout in mxGraph for quirks mode\n            if (graph.isNativeDblClickEnabled()) {\n                InternalEvent.addListener(state.shape.node, 'dblclick', (evt) => {\n                    if (this.isShapeEvent(state, evt)) {\n                        graph.dblClick(evt, state.cell);\n                        InternalEvent.consume(evt);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Redraws the label for the given cell state.\n     *\n     * @param state {@link CellState}  whose label should be redrawn.\n     */\n    redrawLabel(state, forced) {\n        const graph = state.view.graph;\n        const value = this.getLabelValue(state);\n        const wrapping = graph.isWrapping(state.cell);\n        const clipping = graph.isLabelClipped(state.cell);\n        const isForceHtml = graph.isHtmlLabel(state.cell) || (value && isNode(value));\n        const dialect = isForceHtml ? 'strictHtml' : graph.dialect;\n        const overflow = state.style.overflow ?? 'visible';\n        if (state.text &&\n            (state.text.wrap !== wrapping ||\n                state.text.clipped !== clipping ||\n                state.text.overflow !== overflow ||\n                state.text.dialect !== dialect)) {\n            state.text.destroy();\n            state.text = null;\n        }\n        if (state.text == null && value != null && (isNode(value) || value.length > 0)) {\n            this.createLabel(state, value);\n        }\n        else if (state.text != null && (value == null || value.length == 0)) {\n            state.text.destroy();\n            state.text = null;\n        }\n        if (state.text != null) {\n            // Forced is true if the style has changed, so to get the updated\n            // result in getLabelBounds we apply the new style to the shape\n            if (forced) {\n                // Checks if a full repaint is needed\n                if (state.text.lastValue != null && this.isTextShapeInvalid(state, state.text)) {\n                    // Forces a full repaint\n                    state.text.lastValue = null;\n                }\n                state.text.resetStyles();\n                state.text.apply(state);\n                // Special case where value is obtained via hook in graph\n                state.text.valign = state.getVerticalAlign();\n            }\n            const bounds = this.getLabelBounds(state);\n            const nextScale = this.getTextScale(state);\n            this.resolveColor(state, 'color', 'fontColor');\n            if (forced ||\n                state.text.value !== value ||\n                state.text.wrap !== wrapping ||\n                state.text.overflow !== overflow ||\n                state.text.clipped !== clipping ||\n                state.text.scale !== nextScale ||\n                state.text.dialect !== dialect ||\n                state.text.bounds == null ||\n                !state.text.bounds.equals(bounds)) {\n                state.text.dialect = dialect;\n                state.text.value = value;\n                state.text.bounds = bounds;\n                state.text.scale = nextScale;\n                state.text.wrap = wrapping;\n                state.text.clipped = clipping;\n                state.text.overflow = overflow;\n                // Preserves visible state\n                // @ts-ignore\n                const vis = state.text.node.style.visibility;\n                this.redrawLabelShape(state.text);\n                // @ts-ignore\n                state.text.node.style.visibility = vis;\n            }\n        }\n    }\n    /**\n     * Returns true if the style for the text shape has changed.\n     *\n     * @param state {@link CellState}  whose label should be checked.\n     * @param shape {@link Text} shape to be checked.\n     */\n    isTextShapeInvalid(state, shape) {\n        function check(property, styleName, defaultValue) {\n            let result = false;\n            // Workaround for spacing added to directional spacing\n            if (styleName === 'spacingTop' ||\n                styleName === 'spacingRight' ||\n                styleName === 'spacingBottom' ||\n                styleName === 'spacingLeft') {\n                result =\n                    // @ts-ignore\n                    parseFloat(String(shape[property])) - parseFloat(String(shape.spacing)) !==\n                        (state.style[styleName] || defaultValue);\n            }\n            else {\n                // @ts-ignore\n                result = shape[property] !== (state.style[styleName] || defaultValue);\n            }\n            return result;\n        }\n        return (check('fontStyle', 'fontStyle', DEFAULT_FONTSTYLE) ||\n            check('family', 'fontFamily', DEFAULT_FONTFAMILY) ||\n            check('size', 'fontSize', DEFAULT_FONTSIZE) ||\n            check('color', 'fontColor', 'black') ||\n            check('align', 'align', '') ||\n            check('valign', 'verticalAlign', '') ||\n            check('spacing', 'spacing', 2) ||\n            check('spacingTop', 'spacingTop', 0) ||\n            check('spacingRight', 'spacingRight', 0) ||\n            check('spacingBottom', 'spacingBottom', 0) ||\n            check('spacingLeft', 'spacingLeft', 0) ||\n            check('horizontal', 'horizontal', true) ||\n            check('background', 'labelBackgroundColor', null) ||\n            check('border', 'labelBorderColor', null) ||\n            check('opacity', 'textOpacity', 100) ||\n            check('textDirection', 'textDirection', DEFAULT_TEXT_DIRECTION));\n    }\n    /**\n     * Called to invoked redraw on the given text shape.\n     *\n     * @param shape {@link Text} shape to be redrawn.\n     */\n    redrawLabelShape(shape) {\n        shape.redraw();\n    }\n    /**\n     * Returns the scaling used for the label of the given state\n     *\n     * @param state {@link CellState}  whose label scale should be returned.\n     */\n    getTextScale(state) {\n        return state.view.scale;\n    }\n    /**\n     * Returns the bounds to be used to draw the label of the given state.\n     *\n     * @param state {@link CellState}  whose label bounds should be returned.\n     */\n    getLabelBounds(state) {\n        const { scale } = state.view;\n        const isEdge = state.cell.isEdge();\n        let bounds = new Rectangle(state.absoluteOffset.x, state.absoluteOffset.y);\n        if (isEdge) {\n            // @ts-ignore\n            const spacing = state.text.getSpacing();\n            bounds.x += spacing.x * scale;\n            bounds.y += spacing.y * scale;\n            const geo = state.cell.getGeometry();\n            if (geo != null) {\n                bounds.width = Math.max(0, geo.width * scale);\n                bounds.height = Math.max(0, geo.height * scale);\n            }\n        }\n        else {\n            // Inverts label position\n            // @ts-ignore\n            if (state.text.isPaintBoundsInverted()) {\n                const tmp = bounds.x;\n                bounds.x = bounds.y;\n                bounds.y = tmp;\n            }\n            bounds.x += state.x;\n            bounds.y += state.y;\n            // Minimum of 1 fixes alignment bug in HTML labels\n            bounds.width = Math.max(1, state.width);\n            bounds.height = Math.max(1, state.height);\n        }\n        // @ts-ignore\n        if (state.text.isPaintBoundsInverted()) {\n            // Rotates around center of state\n            const t = (state.width - state.height) / 2;\n            bounds.x += t;\n            bounds.y -= t;\n            const tmp = bounds.width;\n            bounds.width = bounds.height;\n            bounds.height = tmp;\n        }\n        // Shape can modify its label bounds\n        if (state.shape != null) {\n            const hpos = state.style.labelPosition ?? 'center';\n            const vpos = state.style.verticalLabelPosition ?? 'middle';\n            if (hpos === 'center' && vpos === 'middle') {\n                bounds = state.shape.getLabelBounds(bounds);\n            }\n        }\n        // Label width style overrides actual label width\n        const lw = state.style.labelWidth ?? null;\n        if (lw != null) {\n            bounds.width = lw * scale;\n        }\n        if (!isEdge) {\n            this.rotateLabelBounds(state, bounds);\n        }\n        return bounds;\n    }\n    /**\n     * Adds the shape rotation to the given label bounds and\n     * applies the alignment and offsets.\n     *\n     * @param state {@link CellState}  whose label bounds should be rotated.\n     * @param bounds {@link Rectangle} the rectangle to be rotated.\n     */\n    rotateLabelBounds(state, bounds) {\n        const textShape = state.text;\n        bounds.y -= textShape.margin.y * bounds.height;\n        bounds.x -= textShape.margin.x * bounds.width;\n        if (!this.legacySpacing ||\n            (state.style.overflow !== 'fill' && state.style.overflow !== 'width')) {\n            const s = state.view.scale;\n            const spacing = textShape.getSpacing();\n            bounds.x += spacing.x * s;\n            bounds.y += spacing.y * s;\n            const hpos = state.style.labelPosition ?? 'center';\n            const vpos = state.style.verticalLabelPosition ?? 'middle';\n            const lw = state.style.labelWidth ?? null;\n            bounds.width = Math.max(0, bounds.width -\n                (hpos === 'center' && lw == null\n                    ? textShape.spacingLeft * s + textShape.spacingRight * s\n                    : 0));\n            bounds.height = Math.max(0, bounds.height -\n                (vpos === 'middle' ? textShape.spacingTop * s + textShape.spacingBottom * s : 0));\n        }\n        // @ts-ignore\n        const theta = textShape.getTextRotation();\n        // Only needed if rotated around another center\n        if (theta !== 0 &&\n            state != null &&\n            // @ts-ignore\n            state.cell.isVertex()) {\n            const cx = state.getCenterX();\n            const cy = state.getCenterY();\n            if (bounds.x !== cx || bounds.y !== cy) {\n                const rad = theta * (Math.PI / 180);\n                const pt = getRotatedPoint(new Point(bounds.x, bounds.y), Math.cos(rad), Math.sin(rad), new Point(cx, cy));\n                bounds.x = pt.x;\n                bounds.y = pt.y;\n            }\n        }\n    }\n    /**\n     * Redraws the overlays for the given cell state.\n     *\n     * @param state {@link CellState}  whose overlays should be redrawn.\n     */\n    redrawCellOverlays(state, forced = false) {\n        this.createCellOverlays(state);\n        if (state.overlays != null) {\n            const rot = mod(state.style.rotation ?? 0, 90);\n            const rad = toRadians(rot);\n            const cos = Math.cos(rad);\n            const sin = Math.sin(rad);\n            state.overlays.visit((id, shape) => {\n                // @ts-ignore\n                const bounds = shape.overlay.getBounds(state);\n                if (!state.cell.isEdge()) {\n                    if (state.shape != null && rot !== 0) {\n                        let cx = bounds.getCenterX();\n                        let cy = bounds.getCenterY();\n                        const point = getRotatedPoint(new Point(cx, cy), cos, sin, new Point(state.getCenterX(), state.getCenterY()));\n                        cx = point.x;\n                        cy = point.y;\n                        bounds.x = Math.round(cx - bounds.width / 2);\n                        bounds.y = Math.round(cy - bounds.height / 2);\n                    }\n                }\n                if (forced ||\n                    shape.bounds == null ||\n                    shape.scale !== state.view.scale ||\n                    !shape.bounds.equals(bounds)) {\n                    shape.bounds = bounds;\n                    shape.scale = state.view.scale;\n                    shape.redraw();\n                }\n            });\n        }\n    }\n    /**\n     * Redraws the control for the given cell state.\n     *\n     * @param state {@link CellState}  whose control should be redrawn.\n     */\n    redrawControl(state, forced = false) {\n        const image = state.view.graph.getFoldingImage(state);\n        if (state.control != null && image != null) {\n            const bounds = this.getControlBounds(state, image.width, image.height);\n            const r = this.legacyControlPosition\n                ? (state.style.rotation ?? 0)\n                : state.shape.getTextRotation();\n            const s = state.view.scale;\n            if (forced ||\n                state.control.scale !== s ||\n                !state.control.bounds.equals(bounds) ||\n                state.control.rotation !== r) {\n                state.control.rotation = r;\n                state.control.bounds = bounds;\n                state.control.scale = s;\n                state.control.redraw();\n            }\n        }\n    }\n    /**\n     * Returns the bounds to be used to draw the control (folding icon) of the given state.\n     */\n    getControlBounds(state, w, h) {\n        if (state.control != null) {\n            const s = state.view.scale;\n            let cx = state.getCenterX();\n            let cy = state.getCenterY();\n            if (!state.cell.isEdge()) {\n                cx = state.x + w * s;\n                cy = state.y + h * s;\n                if (state.shape != null) {\n                    // TODO: Factor out common code\n                    let rot = state.shape.getShapeRotation();\n                    if (this.legacyControlPosition) {\n                        rot = state.style.rotation ?? 0;\n                    }\n                    else if (state.shape.isPaintBoundsInverted()) {\n                        const t = (state.width - state.height) / 2;\n                        cx += t;\n                        cy -= t;\n                    }\n                    if (rot !== 0) {\n                        const rad = toRadians(rot);\n                        const cos = Math.cos(rad);\n                        const sin = Math.sin(rad);\n                        const point = getRotatedPoint(new Point(cx, cy), cos, sin, new Point(state.getCenterX(), state.getCenterY()));\n                        cx = point.x;\n                        cy = point.y;\n                    }\n                }\n            }\n            return state.cell.isEdge()\n                ? new Rectangle(Math.round(cx - (w / 2) * s), Math.round(cy - (h / 2) * s), Math.round(w * s), Math.round(h * s))\n                : new Rectangle(Math.round(cx - (w / 2) * s), Math.round(cy - (h / 2) * s), Math.round(w * s), Math.round(h * s));\n        }\n        return null;\n    }\n    /**\n     * Inserts the given {@link CellState} after the given nodes in the DOM.\n     *\n     * @param state {@link CellState} to be inserted.\n     * @param node Node in {@link GraphView.drawPane} after which the shapes should be inserted.\n     * @param htmlNode Node in the graph container after which the shapes should be inserted that\n     * will not go into the {@link GraphView.drawPane} (e.g. HTML labels without foreignObjects).\n     */\n    insertStateAfter(state, node, htmlNode) {\n        const graph = state.view.graph;\n        const shapes = this.getShapesForState(state);\n        for (let i = 0; i < shapes.length; i += 1) {\n            // @ts-ignore\n            if (shapes[i] != null && shapes[i].node != null) {\n                const html = \n                // @ts-ignore\n                shapes[i].node.parentNode !== state.view.getDrawPane() &&\n                    // @ts-ignore\n                    shapes[i].node.parentNode !== state.view.getOverlayPane();\n                const temp = html ? htmlNode : node;\n                // @ts-ignore\n                if (temp != null && temp.nextSibling !== shapes[i].node) {\n                    if (temp.nextSibling == null) {\n                        // @ts-ignore\n                        temp.parentNode.appendChild(shapes[i].node);\n                    }\n                    else {\n                        // @ts-ignore\n                        temp.parentNode.insertBefore(shapes[i].node, temp.nextSibling);\n                    }\n                }\n                else if (temp == null) {\n                    // Special case: First HTML node should be first sibling after canvas\n                    // @ts-ignore\n                    const shapeNode = shapes[i].node;\n                    if (shapeNode.parentNode === graph.container) {\n                        let { canvas } = state.view;\n                        while (canvas != null && canvas.parentNode !== graph.container) {\n                            // @ts-ignore\n                            canvas = canvas.parentNode;\n                        }\n                        if (canvas != null && canvas.nextSibling != null) {\n                            if (canvas.nextSibling !== shapeNode) {\n                                // @ts-ignore\n                                shapeNode.parentNode.insertBefore(shapeNode, canvas.nextSibling);\n                            }\n                        }\n                        else {\n                            // @ts-ignore\n                            shapeNode.parentNode.appendChild(shapeNode);\n                        }\n                    }\n                    else if (shapeNode.parentNode != null &&\n                        shapeNode.parentNode.firstChild != null &&\n                        shapeNode.parentNode.firstChild != shapeNode) {\n                        // Inserts the node as the first child of the parent to implement the order\n                        shapeNode.parentNode.insertBefore(shapeNode, shapeNode.parentNode.firstChild);\n                    }\n                }\n                if (html) {\n                    // @ts-ignore\n                    htmlNode = shapes[i].node;\n                }\n                else {\n                    // @ts-ignore\n                    node = shapes[i].node;\n                }\n            }\n        }\n        return [node, htmlNode];\n    }\n    /**\n     * Returns the {@link Shape}s for the given cell state in the order in which they should appear in the DOM.\n     *\n     * @param state {@link CellState}  whose shapes should be returned.\n     */\n    getShapesForState(state) {\n        return [state.shape, state.text, state.control];\n    }\n    /**\n     * Updates the bounds or points and scale of the shapes for the given cell\n     * state. This is called in mxGraphView.validatePoints as the last step of\n     * updating all cells.\n     *\n     * @param state {@link CellState}  for which the shapes should be updated.\n     * @param force Optional boolean that specifies if the cell should be reconfiured\n     * and redrawn without any additional checks.\n     * @param rendering Optional boolean that specifies if the cell should actually\n     * be drawn into the DOM. If this is false then redraw and/or reconfigure\n     * will not be called on the shape.\n     */\n    redraw(state, force = false, rendering = true) {\n        const shapeChanged = this.redrawShape(state, force, rendering);\n        if (state.shape != null && rendering) {\n            this.redrawLabel(state, shapeChanged);\n            this.redrawCellOverlays(state, shapeChanged);\n            this.redrawControl(state, shapeChanged);\n        }\n    }\n    /**\n     * Redraws the shape for the given cell state.\n     *\n     * @param state {@link CellState}  whose label should be redrawn.\n     */\n    redrawShape(state, force = false, rendering = true) {\n        let shapeChanged = false;\n        const graph = state.view.graph;\n        // Forces creation of new shape if shape style has changed\n        if (state.shape != null &&\n            state.shape.style != null &&\n            state.style != null &&\n            state.shape.style.shape !== state.style.shape) {\n            state.shape.destroy();\n            state.shape = null;\n        }\n        const selectionCellsHandler = graph.getPlugin('SelectionCellsHandler');\n        if (state.shape == null &&\n            graph.container != null &&\n            state.cell !== state.view.currentRoot &&\n            (state.cell.isVertex() || state.cell.isEdge())) {\n            state.shape = this.createShape(state);\n            if (state.shape != null) {\n                state.shape.minSvgStrokeWidth = this.minSvgStrokeWidth;\n                state.shape.antiAlias = this.antiAlias;\n                this.createIndicatorShape(state);\n                this.initializeShape(state);\n                this.createCellOverlays(state);\n                this.installListeners(state);\n                // Forces a refresh of the handler if one exists\n                selectionCellsHandler?.updateHandler(state);\n            }\n        }\n        else if (!force &&\n            state.shape != null &&\n            (!equalEntries(state.shape.style, state.style) ||\n                this.checkPlaceholderStyles(state))) {\n            state.shape.resetStyles();\n            this.configureShape(state);\n            // LATER: Ignore update for realtime to fix reset of current gesture\n            selectionCellsHandler?.updateHandler(state);\n            force = true;\n        }\n        // Updates indicator shape\n        if (state.shape != null &&\n            state.shape.indicatorShape != this.getShape(state.getIndicatorShape())) {\n            if (state.shape.indicator != null) {\n                state.shape.indicator.destroy();\n                state.shape.indicator = null;\n            }\n            this.createIndicatorShape(state);\n            if (state.shape.indicatorShape != null) {\n                state.shape.indicator = new state.shape.indicatorShape();\n                state.shape.indicator.dialect = state.shape.dialect;\n                state.shape.indicator.init(state.node);\n                force = true;\n            }\n        }\n        if (state.shape) {\n            // Handles changes of the collapse icon\n            this.createControl(state);\n            // Redraws the cell if required, ignores changes to bounds if points are\n            // defined as the bounds are updated for the given points inside the shape\n            if (force || this.isShapeInvalid(state, state.shape)) {\n                if (state.absolutePoints.length > 0) {\n                    state.shape.points = state.absolutePoints.slice();\n                    state.shape.bounds = null;\n                }\n                else {\n                    state.shape.points = [];\n                    state.shape.bounds = new Rectangle(state.x, state.y, state.width, state.height);\n                }\n                state.shape.scale = state.view.scale;\n                if (rendering == null || rendering) {\n                    this.doRedrawShape(state);\n                }\n                else {\n                    state.shape.updateBoundingBox();\n                }\n                shapeChanged = true;\n            }\n        }\n        return shapeChanged;\n    }\n    /**\n     * Invokes redraw on the shape of the given state.\n     */\n    doRedrawShape(state) {\n        state.shape?.redraw();\n    }\n    /**\n     * Returns true if the given shape must be repainted.\n     */\n    isShapeInvalid(state, shape) {\n        return (shape.bounds == null ||\n            shape.scale !== state.view.scale ||\n            (state.absolutePoints.length === 0 && !shape.bounds.equals(state)) ||\n            (state.absolutePoints.length > 0 &&\n                !equalPoints(shape.points, state.absolutePoints)));\n    }\n    /**\n     * Destroys the shapes associated with the given cell state.\n     *\n     * @param state {@link CellState}  for which the shapes should be destroyed.\n     */\n    destroy(state) {\n        if (state.shape) {\n            if (state.text) {\n                state.text.destroy();\n                state.text = null;\n            }\n            state.overlays.visit((id, shape) => {\n                shape.destroy();\n            });\n            state.overlays = new Dictionary();\n            if (state.control) {\n                state.control.destroy();\n                state.control = null;\n            }\n            state.shape.destroy();\n            state.shape = null;\n        }\n    }\n}\nexport default CellRenderer;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { NONE } from '../../util/Constants';\n/**\n * Defines the appearance of the cells in a graph. See {@link putCellStyle} for an example\n * of creating a new cell style.\n *\n * Existing styles can be cloned using {@link clone} and turned into a string for debugging\n * using {@link toString}.\n *\n * ### Default Styles\n *\n * The stylesheet contains two built-in styles, which are used if no style is defined for\n * a cell:\n *\n * - `defaultVertex`: default style for vertices\n * - `defaultEdge`: default style for edges\n *\n * ### Example\n *\n * ```javascript\n * const defaultVertexStyle = stylesheet.getDefaultVertexStyle();\n * defaultVertexStyle.rounded = true;\n * const defaultEdgeStyle = stylesheet.getDefaultEdgeStyle();\n * defaultEdgeStyle.edgeStyle = EdgeStyle.EntityRelation;\n * ```\n *\n * @category Style\n */\nexport class Stylesheet {\n    constructor() {\n        this.styles = new Map();\n        this.putDefaultVertexStyle(this.createDefaultVertexStyle());\n        this.putDefaultEdgeStyle(this.createDefaultEdgeStyle());\n    }\n    /**\n     * Creates and returns the default vertex style.\n     */\n    createDefaultVertexStyle() {\n        const style = {};\n        style.shape = 'rectangle';\n        style.perimeter = 'rectanglePerimeter';\n        style.verticalAlign = 'middle';\n        style.align = 'center';\n        style.fillColor = '#C3D9FF';\n        style.strokeColor = '#6482B9';\n        style.fontColor = '#774400';\n        return style;\n    }\n    /**\n     * Creates and returns the default edge style.\n     */\n    createDefaultEdgeStyle() {\n        const style = {};\n        style.shape = 'connector';\n        style.endArrow = 'classic';\n        style.verticalAlign = 'middle';\n        style.align = 'center';\n        style.strokeColor = '#6482B9';\n        style.fontColor = '#446299';\n        return style;\n    }\n    /**\n     * Sets the default style for vertices using `defaultVertex` as the style name.\n     * @param style The style to be stored.\n     */\n    putDefaultVertexStyle(style) {\n        this.putCellStyle('defaultVertex', style);\n    }\n    /**\n     * Sets the default style for edges using `defaultEdge` as the style name.\n     * @param style The style to be stored.\n     */\n    putDefaultEdgeStyle(style) {\n        this.putCellStyle('defaultEdge', style);\n    }\n    /**\n     * Returns the default style for vertices.\n     */\n    getDefaultVertexStyle() {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- the style is set in the constructor\n        return this.styles.get('defaultVertex');\n    }\n    /**\n     * Returns the default style for edges.\n     */\n    getDefaultEdgeStyle() {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- the style is set in the constructor\n        return this.styles.get('defaultEdge');\n    }\n    /**\n     * Stores the given {@link CellStateStyle} under the given name in {@link styles}.\n     *\n     * ### Example\n     *\n     * The following example adds a new style called `rounded` into an existing stylesheet:\n     *\n     * ```javascript\n     * const style = {} as CellStateStyle;\n     * style.shape = 'rectangle';\n     * style.perimeter = 'rectanglePerimeter';\n     * style.rounded = true;\n     * graph.getStylesheet().putCellStyle('rounded', style);\n     * ```\n     *\n     * ### Description\n     *\n     * Note that not all properties will be interpreted by all shapes. For example, the 'line' shape ignores the fill color.\n     * The final call to this method associates the style with a name in the stylesheet.\n     *\n     * The style is used in a cell with the following code:\n     * ```javascript\n     * // model is an instance of GraphDataModel\n     * // style is an instance of CellStyle\n     * model.setStyle(cell, { baseStyleNames: ['rounded'] });\n     * ```\n     *\n     * @param name Name for the style to be stored.\n     * @param style The instance of the style to be stored.\n     */\n    putCellStyle(name, style) {\n        this.styles.set(name, style);\n    }\n    /**\n     * Returns a {@link CellStateStyle} computed by merging the default style, styles referenced in the specified `baseStyleNames`\n     * and the properties of the `cellStyle` parameter.\n     *\n     * The properties are merged by taking the properties from various styles in the following order:\n     *   - default style (if {@link CellStyle.ignoreDefaultStyle} is not set to `true`, otherwise it is ignored)\n     *   - registered styles referenced in `baseStyleNames`, in the order of the array\n     *   - `cellStyle` parameter\n     *\n     * To fully unset a style property i.e. the property is not set even if a value is set in the default style or in the referenced styles,\n     * set the `cellStyle` property to `none`. For example. `cellStyle.fillColor = 'none'`\n     *\n     * @param cellStyle An object that represents the style.\n     * @param defaultStyle Default style used as reference to compute the returned style.\n     */\n    getCellStyle(cellStyle, defaultStyle) {\n        let style = cellStyle.ignoreDefaultStyle ? {} : { ...defaultStyle };\n        if (cellStyle.baseStyleNames) {\n            // creates style with the given baseStyleNames. (merges from left to right)\n            style = cellStyle.baseStyleNames.reduce((acc, styleName) => {\n                return {\n                    ...acc,\n                    ...this.styles.get(styleName),\n                };\n            }, style);\n        }\n        // Merges cellStyle into style\n        for (const key of Object.keys(cellStyle)) {\n            // @ts-ignore\n            if (cellStyle[key] !== undefined) {\n                // @ts-ignore\n                cellStyle[key] == NONE ? delete style[key] : (style[key] = cellStyle[key]);\n            }\n        }\n        // Remove the specific CellStyle properties that may have been copied from the cellStyle parameter to match the method signature\n        'baseStyleNames' in style && delete style.baseStyleNames;\n        'ignoreDefaultStyle' in style && delete style.ignoreDefaultStyle;\n        return style;\n    }\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\n/**\n * Action to change the current root in a view.\n *\n * @category Change\n */\nclass SelectionChange {\n    constructor(graph, added = [], removed = []) {\n        this.graph = graph;\n        this.added = added.slice();\n        this.removed = removed.slice();\n    }\n    /**\n     * Changes the current root of the view.\n     */\n    execute() {\n        const selectionModel = this.graph.getSelectionModel();\n        for (const removed of this.removed) {\n            selectionModel.cellRemoved(removed);\n        }\n        for (const added of this.added) {\n            selectionModel.cellAdded(added);\n        }\n        [this.added, this.removed] = [this.removed, this.added];\n        selectionModel.fireEvent(new EventObject(InternalEvent.CHANGE, { added: this.added, removed: this.removed }));\n    }\n}\nexport default SelectionChange;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from '../view/event/EventSource';\nimport SelectionChange from './undoable_changes/SelectionChange';\nimport UndoableEdit from './undoable_changes/UndoableEdit';\nimport EventObject from './event/EventObject';\nimport InternalEvent from './event/InternalEvent';\nimport { isI18nEnabled } from '../internal/i18n-utils';\n/**\n * Implements the selection model for a graph.\n *\n * Here is a listener that handles all removed selection cells.\n *\n * ```javascript\n * graph.getSelectionModel().addListener(mxEvent.CHANGE, function(sender, evt) {\n *   const cells = evt.getProperty('added');\n *   for (const cell of cells) {\n *     // Handle cell...\n *   }\n * });\n * ```\n *\n *\n * Event: mxEvent.UNDO\n *\n * Fires after the selection was changed in <changeSelection>. The\n * <code>edit</code> property contains the {@link UndoableEdit} which contains the\n * {@link SelectionChange}.\n *\n * Event: mxEvent.CHANGE\n *\n * Fires after the selection changes by executing an {@link SelectionChange}. The\n * <code>added</code> and <code>removed</code> properties contain arrays of\n * cells that have been added to or removed from the selection, respectively.\n * The names are inverted due to historic reasons. This cannot be changed.\n *\n */\nclass GraphSelectionModel extends EventSource {\n    /**\n     * Constructs a new graph selection model for the given {@link AbstractGraph}.\n     * @param graph Reference to the enclosing {@link AbstractGraph}.\n     */\n    constructor(graph) {\n        super();\n        /**\n         * Specifies the resource key for the status message after a long operation.\n         * If the resource for this key does not exist then the value is used as\n         * the status message.\n         * @default 'done'\n         */\n        this.doneResource = isI18nEnabled() ? 'done' : '';\n        /**\n         * Specifies the resource key for the status message while the selection is\n         * being updated. If the resource for this key does not exist then the\n         * value is used as the status message.\n         * @default 'updatingSelection'\n         */\n        this.updatingSelectionResource = isI18nEnabled() ? 'updatingSelection' : '';\n        /**\n         * Specifies if only one selected item at a time is allowed.\n         * @default false.\n         */\n        this.singleSelection = false;\n        this.graph = graph;\n        this.cells = [];\n    }\n    /**\n     * Returns {@link singleSelection} as a boolean.\n     */\n    isSingleSelection() {\n        return this.singleSelection;\n    }\n    /**\n     * Sets the {@link singleSelection} flag.\n     *\n     * @param {boolean} singleSelection Boolean that specifies the new value for\n     * {@link singleSelection}.\n     */\n    setSingleSelection(singleSelection) {\n        this.singleSelection = singleSelection;\n    }\n    /**\n     * Returns true if the given {@link Cell} is selected.\n     */\n    isSelected(cell) {\n        return this.cells.indexOf(cell) >= 0;\n    }\n    /**\n     * Returns true if no cells are currently selected.\n     */\n    isEmpty() {\n        return this.cells.length === 0;\n    }\n    /**\n     * Clears the selection and fires a {@link change} event if the selection was not\n     * empty.\n     */\n    clear() {\n        this.changeSelection(null, this.cells);\n    }\n    /**\n     * Selects the specified {@link Cell} using {@link setCells}.\n     *\n     * @param cell {@link mxCell} to be selected.\n     */\n    setCell(cell) {\n        this.setCells(cell ? [cell] : []);\n    }\n    /**\n     * Selects the given array of {@link Cell} and fires a {@link change} event.\n     *\n     * @param cells Array of {@link Cell} to be selected.\n     */\n    setCells(cells) {\n        if (this.singleSelection) {\n            cells = [this.getFirstSelectableCell(cells)];\n        }\n        const tmp = [];\n        for (let i = 0; i < cells.length; i += 1) {\n            if (this.graph.isCellSelectable(cells[i])) {\n                tmp.push(cells[i]);\n            }\n        }\n        this.changeSelection(tmp, this.cells);\n    }\n    /**\n     * Returns the first selectable cell in the given array of cells.\n     */\n    getFirstSelectableCell(cells) {\n        for (let i = 0; i < cells.length; i += 1) {\n            if (this.graph.isCellSelectable(cells[i])) {\n                return cells[i];\n            }\n        }\n        return null;\n    }\n    /**\n     * Adds the given {@link Cell} to the selection and fires a {@link select} event.\n     *\n     * @param cell {@link mxCell} to add to the selection.\n     */\n    addCell(cell) {\n        this.addCells([cell]);\n    }\n    /**\n     * Adds the given array of {@link Cell} to the selection and fires a {@link select}\n     * event.\n     *\n     * @param cells Array of {@link Cell} to add to the selection.\n     */\n    addCells(cells) {\n        let remove = null;\n        if (this.singleSelection) {\n            remove = this.cells;\n            const selectableCell = this.getFirstSelectableCell(cells);\n            cells = selectableCell ? [selectableCell] : [];\n        }\n        const tmp = [];\n        for (let i = 0; i < cells.length; i += 1) {\n            if (!this.isSelected(cells[i]) && this.graph.isCellSelectable(cells[i])) {\n                tmp.push(cells[i]);\n            }\n        }\n        this.changeSelection(tmp, remove);\n    }\n    /**\n     * Removes the specified {@link Cell} from the selection and fires a {@link select}\n     * event for the remaining cells.\n     *\n     * @param cell {@link mxCell} to remove from the selection.\n     */\n    removeCell(cell) {\n        this.removeCells([cell]);\n    }\n    /**\n     * Removes the specified {@link Cell} from the selection and fires a {@link select}\n     * event for the remaining cells.\n     *\n     * @param cells {@link mxCell}s to remove from the selection.\n     */\n    removeCells(cells) {\n        const tmp = [];\n        for (let i = 0; i < cells.length; i += 1) {\n            if (this.isSelected(cells[i])) {\n                tmp.push(cells[i]);\n            }\n        }\n        this.changeSelection(null, tmp);\n    }\n    /**\n     * Adds/removes the specified arrays of {@link Cell} to/from the selection.\n     *\n     * @param added Array of {@link Cell} to add to the selection.\n     * @param remove Array of {@link Cell} to remove from the selection.\n     */\n    changeSelection(added = null, removed = null) {\n        if ((added && added.length > 0 && added[0]) ||\n            (removed && removed.length > 0 && removed[0])) {\n            const change = new SelectionChange(this.graph, added || [], removed || []);\n            change.execute();\n            const edit = new UndoableEdit(this.graph, false);\n            edit.add(change);\n            this.fireEvent(new EventObject(InternalEvent.UNDO, { edit }));\n        }\n    }\n    /**\n     * Inner callback to add the specified {@link Cell} to the selection. No event\n     * is fired in this implementation.\n     *\n     * Paramters:\n     *\n     * @param cell {@link mxCell} to add to the selection.\n     */\n    cellAdded(cell) {\n        if (!this.isSelected(cell)) {\n            this.cells.push(cell);\n        }\n    }\n    /**\n     * Inner callback to remove the specified {@link Cell} from the selection. No\n     * event is fired in this implementation.\n     *\n     * @param cell {@link mxCell} to remove from the selection.\n     */\n    cellRemoved(cell) {\n        const index = this.cells.indexOf(cell);\n        if (index >= 0) {\n            this.cells.splice(index, 1);\n        }\n    }\n}\nexport default GraphSelectionModel;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventObject from '../event/EventObject';\nimport Point from '../geometry/Point';\nimport InternalEvent from '../event/InternalEvent';\n/**\n * Action to change the current root in a view.\n *\n * @category Change\n */\nclass CurrentRootChange {\n    constructor(view, root) {\n        this.view = view;\n        this.root = root;\n        this.previous = root;\n        this.isUp = root === null;\n        if (!this.isUp) {\n            let tmp = this.view.currentRoot;\n            while (tmp) {\n                if (tmp === root) {\n                    this.isUp = true;\n                    break;\n                }\n                tmp = tmp.getParent();\n            }\n        }\n    }\n    /**\n     * Changes the current root of the view.\n     */\n    execute() {\n        const tmp = this.view.currentRoot;\n        this.view.currentRoot = this.previous;\n        this.previous = tmp;\n        const translate = this.view.graph.getTranslateForRoot(this.view.currentRoot);\n        if (translate) {\n            this.view.translate = new Point(-translate.x, -translate.y);\n        }\n        if (this.isUp) {\n            this.view.clear(this.view.currentRoot, true, true);\n            this.view.validate(null);\n        }\n        else {\n            this.view.refresh();\n        }\n        const name = this.isUp ? InternalEvent.UP : InternalEvent.DOWN;\n        this.view.fireEvent(new EventObject(name, { root: this.view.currentRoot, previous: this.previous }));\n        this.isUp = !this.isUp;\n    }\n}\nexport default CurrentRootChange;\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { BaseRegistry } from '../../../internal/BaseRegistry';\n/**\n * A registry that stores the {@link PerimeterFunction}s.\n *\n * @since 0.20.0\n * @category Style\n * @category Configuration\n */\nexport const PerimeterRegistry = new BaseRegistry();\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from './geometry/Point';\nimport Rectangle from './geometry/Rectangle';\nimport Dictionary from '../util/Dictionary';\nimport EventSource from './event/EventSource';\nimport EventObject from './event/EventObject';\nimport RectangleShape from './shape/node/RectangleShape';\nimport { NS_SVG } from '../util/Constants';\nimport Client from '../Client';\nimport InternalEvent from './event/InternalEvent';\nimport { convertPoint, getCurrentStyle, getOffset } from '../util/styleUtils';\nimport { getRotatedPoint, ptSegDistSq, relativeCcw, toRadians } from '../util/mathUtils';\nimport { GlobalConfig } from '../util/config';\nimport CellState from './cell/CellState';\nimport UndoableEdit from './undoable_changes/UndoableEdit';\nimport ImageShape from './shape/node/ImageShape';\nimport InternalMouseEvent from './event/InternalMouseEvent';\nimport CurrentRootChange from './undoable_changes/CurrentRootChange';\nimport { getClientX, getClientY, getSource, isConsumed } from '../util/EventUtils';\nimport { clone } from '../util/cloneUtils';\nimport { EdgeStyleRegistry } from './style/edge/EdgeStyleRegistry';\nimport { PerimeterRegistry } from './style/perimeter/PerimeterRegistry';\nimport { doEval } from '../internal/utils';\nimport { isI18nEnabled } from '../internal/i18n-utils';\n/**\n * @class GraphView\n * @extends {EventSource}\n *\n * Extends {@link EventSource} to implement a view for a graph. This class is in\n * charge of computing the absolute coordinates for the relative child\n * geometries, the points for perimeters and edge styles and keeping them\n * cached in {@link CellState}s for faster retrieval. The states are updated\n * whenever the model or the view state (translate, scale) changes. The scale\n * and translate are honoured in the bounds.\n *\n * #### Event: mxEvent.UNDO\n *\n * Fires after the root was changed in {@link setCurrentRoot}. The `edit`\n * property contains the {@link UndoableEdit} which contains the\n * {@link CurrentRootChange}.\n *\n * #### Event: mxEvent.SCALE_AND_TRANSLATE\n *\n * Fires after the scale and translate have been changed in {@link scaleAndTranslate}.\n * The `scale`, `previousScale`, `translate`\n * and `previousTranslate` properties contain the new and previous\n * scale and translate, respectively.\n *\n * #### Event: mxEvent.SCALE\n *\n * Fires after the scale was changed in {@link setScale}. The `scale` and\n * `previousScale` properties contain the new and previous scale.\n *\n * #### Event: mxEvent.TRANSLATE\n *\n * Fires after the translate was changed in {@link setTranslate}. The\n * `translate` and `previousTranslate` properties contain\n * the new and previous value for translate.\n *\n * #### Event: mxEvent.DOWN and mxEvent.UP\n *\n * Fire if the current root is changed by executing an {@link CurrentRootChange}.\n * The event name depends on the location of the root in the cell hierarchy\n * with respect to the current root. The `root` and\n * `previous` properties contain the new and previous root,\n * respectively.\n */\nexport class GraphView extends EventSource {\n    constructor(graph) {\n        super();\n        // TODO: Document me!\n        this.backgroundImage = null;\n        this.backgroundPageShape = null;\n        this.EMPTY_POINT = new Point();\n        /**\n         * Specifies the resource key for the status message after a long operation.\n         * If the resource for this key does not exist then the value is used as\n         * the status message.\n         * @default 'done'\n         */\n        this.doneResource = isI18nEnabled() ? 'done' : '';\n        /**\n         * Specifies the resource key for the status message while the document is\n         * being updated. If the resource for this key does not exist then the\n         * value is used as the status message.\n         * @default 'updatingSelection'\n         */\n        this.updatingDocumentResource = isI18nEnabled() ? 'updatingDocument' : '';\n        /**\n         * Specifies if string values in cell styles should be evaluated using {@link eval}.\n         *\n         * This will only be used if the string values can't be mapped to objects using {@link EdgeStyleRegistry} or  {@link PerimeterRegistry} when resolving {@link CellStateStyle.edgeStyle} and {@link CellStateStyle.perimeter} respectively.\n         *\n         * **WARNING**: Enabling this switch carries a possible security risk.\n         *\n         * @default false\n         */\n        this.allowEval = false;\n        /**\n         * Specifies if a gesture should be captured when it goes outside of the\n         * graph container. Default is true.\n         */\n        this.captureDocumentGesture = true;\n        /**\n         * Specifies if shapes should be created, updated and destroyed using the\n         * methods of {@link cellRenderer} in {@link graph}. Default is true.\n         */\n        this.rendering = true;\n        /**\n         * {@link Cell} that acts as the root of the displayed cell hierarchy.\n         */\n        this.currentRoot = null;\n        this.graphBounds = new Rectangle();\n        this.scale = 1;\n        /**\n         * {@link Point} that specifies the current translation. Default is a new\n         * empty {@link Point}.\n         */\n        this.translate = new Point();\n        this.states = new Dictionary();\n        /**\n         * Specifies if the style should be updated in each validation step. If this\n         * is false then the style is only updated if the state is created or if the\n         * style of the cell was changed. Default is false.\n         */\n        this.updateStyle = false;\n        /**\n         * During validation, this contains the last DOM node that was processed.\n         */\n        this.lastNode = null;\n        /**\n         * During validation, this contains the last HTML DOM node that was processed.\n         */\n        this.lastHtmlNode = null;\n        /**\n         * During validation, this contains the last edge's DOM node that was processed.\n         */\n        this.lastForegroundNode = null;\n        /**\n         * During validation, this contains the last edge HTML DOM node that was processed.\n         */\n        this.lastForegroundHtmlNode = null;\n        this.endHandler = null;\n        this.moveHandler = null;\n        this.graph = graph;\n    }\n    /**\n     * Returns {@link graphBounds}.\n     */\n    getGraphBounds() {\n        return this.graphBounds;\n    }\n    /**\n     * Sets {@link graphBounds}.\n     */\n    setGraphBounds(value) {\n        this.graphBounds = value;\n    }\n    /**\n     * Returns the {@link scale}.\n     */\n    getScale() {\n        return this.scale;\n    }\n    /**\n     * Sets the scale and fires a {@link scale} event before calling {@link revalidate} followed\n     * by {@link AbstractGraph.sizeDidChange}.\n     *\n     * @param value Decimal value that specifies the new scale (1 is 100%).\n     */\n    setScale(value) {\n        const previousScale = this.scale;\n        if (previousScale !== value) {\n            this.scale = value;\n            if (this.isEventsEnabled()) {\n                this.viewStateChanged();\n            }\n        }\n        this.fireEvent(new EventObject(InternalEvent.SCALE, { scale: value, previousScale }));\n    }\n    /**\n     * Returns the {@link translate}.\n     */\n    getTranslate() {\n        return this.translate;\n    }\n    isRendering() {\n        return this.rendering;\n    }\n    setRendering(value) {\n        this.rendering = value;\n    }\n    /**\n     * Sets the translation and fires a {@link translate} event before calling\n     * {@link revalidate} followed by {@link AbstractGraph.sizeDidChange}. The translation is the\n     * negative of the origin.\n     *\n     * @param dx X-coordinate of the translation.\n     * @param dy Y-coordinate of the translation.\n     */\n    setTranslate(dx, dy) {\n        const previousTranslate = new Point(this.translate.x, this.translate.y);\n        if (this.translate.x !== dx || this.translate.y !== dy) {\n            this.translate.x = dx;\n            this.translate.y = dy;\n            if (this.isEventsEnabled()) {\n                this.viewStateChanged();\n            }\n        }\n        this.fireEvent(new EventObject(InternalEvent.TRANSLATE, {\n            translate: this.translate,\n            previousTranslate: previousTranslate,\n        }));\n    }\n    /**\n     * Returns {@link allowEval}.\n     */\n    isAllowEval() {\n        return this.allowEval;\n    }\n    /**\n     * Sets {@link allowEval}.\n     */\n    setAllowEval(value) {\n        this.allowEval = value;\n    }\n    /**\n     * Returns {@link states}.\n     */\n    getStates() {\n        return this.states;\n    }\n    /**\n     * Sets {@link states}.\n     */\n    setStates(value) {\n        this.states = value;\n    }\n    /**\n     * Returns the DOM node that contains the background-, draw-, overlay- and decorator- panes.\n     */\n    getCanvas() {\n        return this.canvas;\n    }\n    /**\n     * Returns the DOM node that represents the background layer.\n     */\n    getBackgroundPane() {\n        return this.backgroundPane;\n    }\n    /**\n     * Returns the DOM node that represents the main drawing layer.\n     */\n    getDrawPane() {\n        return this.drawPane;\n    }\n    /**\n     * Returns the DOM node that represents the layer above the drawing layer.\n     */\n    getOverlayPane() {\n        return this.overlayPane;\n    }\n    /**\n     * Returns the DOM node that represents the topmost drawing layer.\n     */\n    getDecoratorPane() {\n        return this.decoratorPane;\n    }\n    /**\n     * Returns the union of all {@link CellState}s for the given array of {@link Cell}.\n     *\n     * @param cells Array of {@link Cell} whose bounds should be returned.\n     */\n    getBounds(cells) {\n        let result = null;\n        if (cells.length > 0) {\n            for (let i = 0; i < cells.length; i += 1) {\n                if (cells[i].isVertex() || cells[i].isEdge()) {\n                    const state = this.getState(cells[i]);\n                    if (state) {\n                        if (!result) {\n                            result = Rectangle.fromRectangle(state);\n                        }\n                        else {\n                            result.add(state);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Sets and returns the current root and fires an {@link undo} event before\n     * calling {@link AbstractGraph.sizeDidChange}.\n     *\n     * @param root {@link Cell} that specifies the root of the displayed cell hierarchy.\n     */\n    setCurrentRoot(root) {\n        if (this.currentRoot !== root) {\n            const change = new CurrentRootChange(this, root);\n            change.execute();\n            const edit = new UndoableEdit(this, true);\n            edit.add(change);\n            this.fireEvent(new EventObject(InternalEvent.UNDO, { edit }));\n            this.graph.sizeDidChange();\n            this.currentRoot = root;\n        }\n        return root;\n    }\n    /**\n     * Sets the scale and translation and fires a {@link scale} and {@link translate} event\n     * before calling {@link revalidate} followed by {@link AbstractGraph.sizeDidChange}.\n     *\n     * @param scale Decimal value that specifies the new scale (1 is 100%).\n     * @param dx X-coordinate of the translation.\n     * @param dy Y-coordinate of the translation.\n     */\n    scaleAndTranslate(scale, dx, dy) {\n        const previousScale = this.scale;\n        const previousTranslate = new Point(this.translate.x, this.translate.y);\n        if (this.scale !== scale || this.translate.x !== dx || this.translate.y !== dy) {\n            this.scale = scale;\n            this.translate.x = dx;\n            this.translate.y = dy;\n            if (this.isEventsEnabled()) {\n                this.viewStateChanged();\n            }\n        }\n        this.fireEvent(new EventObject(InternalEvent.SCALE_AND_TRANSLATE, {\n            scale,\n            previousScale,\n            translate: this.translate,\n            previousTranslate: previousTranslate,\n        }));\n    }\n    /**\n     * Invoked after {@link scale} and/or {@link translate} has changed.\n     */\n    viewStateChanged() {\n        this.revalidate();\n        this.graph.sizeDidChange();\n    }\n    /**\n     * Clears the view if {@link currentRoot} is not null and revalidates.\n     */\n    refresh() {\n        if (this.currentRoot) {\n            this.clear();\n        }\n        this.revalidate();\n    }\n    /**\n     * Revalidates the complete view with all cell states.\n     */\n    revalidate() {\n        this.invalidate();\n        this.validate();\n    }\n    /**\n     * Removes the state of the given cell and all descendants if the given\n     * cell is not the current root.\n     *\n     * @param cell Optional {@link Cell} for which the state should be removed. Default\n     * is the root of the model.\n     * @param force Boolean indicating if the current root should be ignored for\n     * recursion.\n     */\n    clear(cell, force = false, recurse = true) {\n        if (!cell) {\n            cell = this.graph.getDataModel().getRoot();\n        }\n        if (cell) {\n            this.removeState(cell);\n            if (recurse && (force || cell !== this.currentRoot)) {\n                const childCount = cell.getChildCount();\n                for (let i = 0; i < childCount; i += 1) {\n                    this.clear(cell.getChildAt(i), force);\n                }\n            }\n            else {\n                this.invalidate(cell);\n            }\n        }\n    }\n    /**\n     * Invalidates the state of the given cell, all its descendants and\n     * connected edges.\n     *\n     * @param cell Optional {@link Cell} to be invalidated. Default is the root of the\n     * model.\n     */\n    invalidate(cell = null, recurse = true, includeEdges = true) {\n        const model = this.graph.getDataModel();\n        cell = cell ?? model.getRoot();\n        if (cell) {\n            const state = this.getState(cell);\n            if (state) {\n                state.invalid = true;\n            }\n            // Avoids infinite loops for invalid graphs\n            if (!cell.invalidating) {\n                cell.invalidating = true;\n                // Recursively invalidates all descendants\n                if (recurse) {\n                    const childCount = cell.getChildCount();\n                    for (let i = 0; i < childCount; i += 1) {\n                        const child = cell.getChildAt(i);\n                        this.invalidate(child, recurse, includeEdges);\n                    }\n                }\n                // Propagates invalidation to all connected edges\n                if (includeEdges) {\n                    const edgeCount = cell.getEdgeCount();\n                    for (let i = 0; i < edgeCount; i += 1) {\n                        this.invalidate(cell.getEdgeAt(i), recurse, includeEdges);\n                    }\n                }\n                cell.invalidating = false;\n            }\n        }\n    }\n    /**\n     * Calls {@link validateCell} and {@link validateCellState} and updates the {@link graphBounds}\n     * using {@link getBoundingBox}. Finally, the background is validated using\n     * {@link validateBackground}.\n     *\n     * @param cell Optional {@link Cell} to be used as the root of the validation.\n     * Default is {@link currentRoot} or the root of the model.\n     */\n    validate(cell = null) {\n        const t0 = GlobalConfig.logger.enter('GraphView.validate');\n        this.resetValidationState();\n        const c = cell || (this.currentRoot ?? this.graph.getDataModel().getRoot());\n        if (c) {\n            const graphBounds = this.getBoundingBox(this.validateCellState(c ? this.validateCell(c) : null));\n            this.setGraphBounds(graphBounds ?? this.getEmptyBounds());\n            this.validateBackground();\n            this.resetValidationState();\n        }\n        GlobalConfig.logger.leave('GraphView.validate', t0);\n    }\n    /**\n     * Returns the bounds for an empty graph. This returns a rectangle at\n     * {@link translate} with the size of 0 x 0.\n     */\n    getEmptyBounds() {\n        return new Rectangle(this.translate.x * this.scale, this.translate.y * this.scale);\n    }\n    /**\n     * Returns the bounding box of the shape and the label for the given\n     * {@link CellState} and its children if recurse is true.\n     *\n     * @param state {@link CellState} whose bounding box should be returned.\n     * @param recurse Optional boolean indicating if the children should be included.\n     * Default is true.\n     */\n    getBoundingBox(state = null, recurse = true) {\n        let bbox = null;\n        if (state) {\n            if (state.shape && state.shape.boundingBox) {\n                bbox = state.shape.boundingBox.clone();\n            }\n            // Adds label bounding box to graph bounds\n            if (state.text && state.text.boundingBox) {\n                if (bbox) {\n                    bbox.add(state.text.boundingBox);\n                }\n                else {\n                    bbox = state.text.boundingBox.clone();\n                }\n            }\n            if (recurse) {\n                const childCount = state.cell.getChildCount();\n                for (let i = 0; i < childCount; i += 1) {\n                    const bounds = this.getBoundingBox(this.getState(state.cell.getChildAt(i)));\n                    if (bounds) {\n                        if (!bbox) {\n                            bbox = bounds;\n                        }\n                        else {\n                            bbox.add(bounds);\n                        }\n                    }\n                }\n            }\n        }\n        return bbox;\n    }\n    /**\n     * Creates and returns the shape used as the background page.\n     *\n     * @param bounds {@link Rectangle} that represents the bounds of the shape.\n     */\n    createBackgroundPageShape(bounds) {\n        return new RectangleShape(bounds, 'white', 'black');\n    }\n    /**\n     * Calls {@link validateBackgroundImage} and {@link validateBackgroundPage}.\n     */\n    validateBackground() {\n        this.validateBackgroundImage();\n        this.validateBackgroundPage();\n    }\n    /**\n     * Validates the background image.\n     */\n    validateBackgroundImage() {\n        const bg = this.graph.getBackgroundImage();\n        if (bg) {\n            if (!this.backgroundImage || this.backgroundImage.imageSrc !== bg.src) {\n                if (this.backgroundImage) {\n                    this.backgroundImage.destroy();\n                }\n                const bounds = new Rectangle(0, 0, 1, 1);\n                this.backgroundImage = new ImageShape(bounds, bg.src);\n                this.backgroundImage.dialect = this.graph.dialect;\n                this.backgroundImage.init(this.backgroundPane);\n                this.backgroundImage.redraw();\n            }\n            this.redrawBackgroundImage(this.backgroundImage, bg);\n        }\n        else if (this.backgroundImage) {\n            this.backgroundImage.destroy();\n            this.backgroundImage = null;\n        }\n    }\n    /**\n     * Validates the background page.\n     */\n    validateBackgroundPage() {\n        const graph = this.graph;\n        if (graph.pageVisible) {\n            const bounds = this.getBackgroundPageBounds();\n            if (this.backgroundPageShape == null) {\n                this.backgroundPageShape = this.createBackgroundPageShape(bounds);\n                this.backgroundPageShape.scale = this.scale;\n                this.backgroundPageShape.isShadow = true;\n                this.backgroundPageShape.dialect = this.graph.dialect;\n                this.backgroundPageShape.init(this.backgroundPane);\n                this.backgroundPageShape.redraw();\n                if (this.backgroundPageShape.node) {\n                    // Adds listener for double click handling on background\n                    if (graph.isNativeDblClickEnabled()) {\n                        InternalEvent.addListener(this.backgroundPageShape.node, 'dblclick', ((evt) => {\n                            graph.dblClick(evt);\n                        }));\n                    }\n                    // Adds basic listeners for graph event dispatching outside the\n                    // container and finishing the handling of a single gesture\n                    InternalEvent.addGestureListeners(this.backgroundPageShape.node, (evt) => {\n                        graph.fireMouseEvent(InternalEvent.MOUSE_DOWN, new InternalMouseEvent(evt));\n                    }, (evt) => {\n                        const tooltipHandler = graph.getPlugin('TooltipHandler');\n                        // Hides the tooltip if mouse is outside container\n                        if (tooltipHandler && tooltipHandler.isHideOnHover()) {\n                            tooltipHandler.hide();\n                        }\n                        if (graph.isMouseDown && !isConsumed(evt)) {\n                            graph.fireMouseEvent(InternalEvent.MOUSE_MOVE, new InternalMouseEvent(evt));\n                        }\n                    }, (evt) => {\n                        graph.fireMouseEvent(InternalEvent.MOUSE_UP, new InternalMouseEvent(evt));\n                    });\n                }\n            }\n            else {\n                this.backgroundPageShape.scale = this.scale;\n                this.backgroundPageShape.bounds = bounds;\n                this.backgroundPageShape.redraw();\n            }\n        }\n        else if (this.backgroundPageShape) {\n            this.backgroundPageShape.destroy();\n            this.backgroundPageShape = null;\n        }\n    }\n    /**\n     * Returns the bounds for the background page.\n     */\n    getBackgroundPageBounds() {\n        const fmt = this.graph.pageFormat;\n        const ps = this.scale * this.graph.pageScale;\n        return new Rectangle(this.scale * this.translate.x, this.scale * this.translate.y, fmt.width * ps, fmt.height * ps);\n    }\n    /**\n     * Updates the bounds and redraws the background image.\n     *\n     * Example:\n     *\n     * If the background image should not be scaled, this can be replaced with\n     * the following.\n     *\n     * @example\n     * ```javascript\n     * redrawBackground(backgroundImage, bg)\n     * {\n     *   backgroundImage.bounds.x = this.translate.x;\n     *   backgroundImage.bounds.y = this.translate.y;\n     *   backgroundImage.bounds.width = bg.width;\n     *   backgroundImage.bounds.height = bg.height;\n     *\n     *   backgroundImage.redraw();\n     * };\n     * ```\n     *\n     * @param backgroundImage {@link ImageShape} that represents the background image.\n     * @param bg {@link Image} that specifies the image and its dimensions.\n     */\n    redrawBackgroundImage(backgroundImage, bg) {\n        backgroundImage.scale = this.scale;\n        if (backgroundImage.bounds) {\n            const bounds = backgroundImage.bounds;\n            bounds.x = this.scale * this.translate.x;\n            bounds.y = this.scale * this.translate.y;\n            bounds.width = this.scale * bg.width;\n            bounds.height = this.scale * bg.height;\n        }\n        backgroundImage.redraw();\n    }\n    /**\n     * Recursively creates the cell state for the given cell if visible is true and\n     * the given cell is visible. If the cell is not visible but the state exists\n     * then it is removed using {@link removeState}.\n     *\n     * @param cell {@link Cell} whose {@link CellState} should be created.\n     * @param visible Optional boolean indicating if the cell should be visible. Default\n     * is true.\n     */\n    validateCell(cell, visible = true) {\n        visible = visible && cell.isVisible();\n        const state = this.getState(cell, visible);\n        if (state && !visible) {\n            this.removeState(cell);\n        }\n        else {\n            const childCount = cell.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                this.validateCell(cell.getChildAt(i), visible && (!cell.isCollapsed() || cell === this.currentRoot));\n            }\n        }\n        return cell;\n    }\n    /**\n     * Validates and repaints the {@link CellState} for the given {@link Cell}.\n     *\n     * @param cell {@link Cell} whose {@link CellState} should be validated.\n     * @param recurse Optional boolean indicating if the children of the cell should be\n     * validated. Default is true.\n     */\n    validateCellState(cell, recurse = true) {\n        let state = null;\n        if (cell) {\n            state = this.getState(cell);\n            if (state) {\n                if (state.invalid) {\n                    state.invalid = false;\n                    if (!state.style || state.invalidStyle) {\n                        state.style = this.graph.getCellStyle(state.cell);\n                        state.invalidStyle = false;\n                    }\n                    if (cell !== this.currentRoot) {\n                        this.validateCellState(cell.getParent(), false);\n                    }\n                    state.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, true), false), true);\n                    state.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, false), false), false);\n                    this.updateCellState(state);\n                    // Repaint happens immediately after the cell is validated\n                    if (cell !== this.currentRoot && !state.invalid) {\n                        this.graph.cellRenderer.redraw(state, false, this.isRendering());\n                        // Handles changes to vertex paint bounds after update of rendering shape\n                        state.updateCachedBounds();\n                    }\n                }\n                if (recurse && !state.invalid) {\n                    // Updates order in DOM if recursively traversing\n                    if (state.shape) {\n                        this.stateValidated(state);\n                    }\n                    const childCount = cell.getChildCount();\n                    for (let i = 0; i < childCount; i += 1) {\n                        this.validateCellState(cell.getChildAt(i));\n                    }\n                }\n            }\n        }\n        return state;\n    }\n    /**\n     * Updates the given {@link CellState}.\n     *\n     * @param state {@link CellState} to be updated.\n     */\n    updateCellState(state) {\n        const absoluteOffset = state.absoluteOffset;\n        const origin = state.origin;\n        absoluteOffset.x = 0;\n        absoluteOffset.y = 0;\n        origin.x = 0;\n        origin.y = 0;\n        state.length = 0;\n        if (state.cell !== this.currentRoot) {\n            const parent = state.cell.getParent();\n            const pState = parent ? this.getState(parent) : null;\n            if (pState && pState.cell !== this.currentRoot) {\n                origin.x += pState.origin.x;\n                origin.y += pState.origin.y;\n            }\n            let offset = this.graph.getChildOffsetForCell(state.cell);\n            if (offset) {\n                origin.x += offset.x;\n                origin.y += offset.y;\n            }\n            const geo = state.cell.getGeometry();\n            if (geo) {\n                if (!state.cell.isEdge()) {\n                    offset = geo.offset ? geo.offset : this.EMPTY_POINT;\n                    if (geo.relative && pState) {\n                        if (pState.cell.isEdge()) {\n                            const point = this.getPoint(pState, geo);\n                            if (point) {\n                                origin.x += point.x / this.scale - pState.origin.x - this.translate.x;\n                                origin.y += point.y / this.scale - pState.origin.y - this.translate.y;\n                            }\n                        }\n                        else {\n                            origin.x += geo.x * pState.unscaledWidth + offset.x;\n                            origin.y += geo.y * pState.unscaledHeight + offset.y;\n                        }\n                    }\n                    else {\n                        absoluteOffset.x = this.scale * offset.x;\n                        absoluteOffset.y = this.scale * offset.y;\n                        origin.x += geo.x;\n                        origin.y += geo.y;\n                    }\n                }\n                state.x = this.scale * (this.translate.x + origin.x);\n                state.y = this.scale * (this.translate.y + origin.y);\n                state.width = this.scale * geo.width;\n                state.unscaledWidth = geo.width;\n                state.height = this.scale * geo.height;\n                state.unscaledHeight = geo.height;\n                if (state.cell.isVertex()) {\n                    this.updateVertexState(state, geo);\n                }\n                if (state.cell.isEdge()) {\n                    this.updateEdgeState(state, geo);\n                }\n            }\n        }\n        state.updateCachedBounds();\n    }\n    /**\n     * Validates the given cell state.\n     */\n    updateVertexState(state, geo) {\n        const parent = state.cell.getParent();\n        const pState = parent ? this.getState(parent) : null;\n        if (geo.relative && pState && !pState.cell.isEdge()) {\n            const alpha = toRadians(pState.style.rotation ?? 0);\n            if (alpha !== 0) {\n                const cos = Math.cos(alpha);\n                const sin = Math.sin(alpha);\n                const ct = new Point(state.getCenterX(), state.getCenterY());\n                const cx = new Point(pState.getCenterX(), pState.getCenterY());\n                const pt = getRotatedPoint(ct, cos, sin, cx);\n                state.x = pt.x - state.width / 2;\n                state.y = pt.y - state.height / 2;\n            }\n        }\n        this.updateVertexLabelOffset(state);\n    }\n    /**\n     * Validates the given cell state.\n     */\n    updateEdgeState(state, geo) {\n        const source = state.getVisibleTerminalState(true);\n        const target = state.getVisibleTerminalState(false);\n        // This will remove edges with no terminals and no terminal points\n        // as such edges are invalid and produce NPEs in the edge styles.\n        // Also removes connected edges that have no visible terminals.\n        if ((state.cell.getTerminal(true) && !source) ||\n            (!source && !geo.getTerminalPoint(true)) ||\n            (state.cell.getTerminal(false) && !target) ||\n            (!target && !geo.getTerminalPoint(false))) {\n            this.clear(state.cell, true);\n        }\n        else {\n            this.updateFixedTerminalPoints(state, source, target);\n            this.updatePoints(state, geo.points, source, target);\n            this.updateFloatingTerminalPoints(state, source, target);\n            const pts = state.absolutePoints;\n            if (state.cell !== this.currentRoot &&\n                (pts == null || pts.length < 2 || pts[0] == null || pts[pts.length - 1] == null)) {\n                // This will remove edges with invalid points from the list of states in the view.\n                // Happens if the one of the terminals and the corresponding terminal point is null.\n                this.clear(state.cell, true);\n            }\n            else {\n                this.updateEdgeBounds(state);\n                this.updateEdgeLabelOffset(state);\n            }\n        }\n    }\n    /**\n     * Updates the absoluteOffset of the given vertex cell state. This takes\n     * into account the label position styles.\n     *\n     * @param state {@link CellState} whose absolute offset should be updated.\n     */\n    updateVertexLabelOffset(state) {\n        const h = state.style.labelPosition ?? 'center';\n        if (h === 'left') {\n            let lw = state.style.labelWidth ?? null;\n            if (lw != null) {\n                lw *= this.scale;\n            }\n            else {\n                lw = state.width;\n            }\n            // @ts-ignore\n            state.absoluteOffset.x -= lw;\n        }\n        else if (h === 'right') {\n            // @ts-ignore\n            state.absoluteOffset.x += state.width;\n        }\n        else if (h === 'center') {\n            const lw = state.style.labelWidth ?? null;\n            if (lw != null) {\n                // Aligns text block with given width inside the vertex width\n                const align = state.style.align ?? 'center';\n                let dx = 0;\n                if (align === 'center') {\n                    dx = 0.5;\n                }\n                else if (align === 'right') {\n                    dx = 1;\n                }\n                if (dx !== 0) {\n                    // @ts-ignore\n                    state.absoluteOffset.x -= (lw * this.scale - state.width) * dx;\n                }\n            }\n        }\n        const v = state.style.verticalLabelPosition ?? 'middle';\n        if (v === 'top') {\n            // @ts-ignore\n            state.absoluteOffset.y -= state.height;\n        }\n        else if (v === 'bottom') {\n            // @ts-ignore\n            state.absoluteOffset.y += state.height;\n        }\n    }\n    /**\n     * Resets the current validation state.\n     */\n    resetValidationState() {\n        this.lastNode = null;\n        this.lastHtmlNode = null;\n        this.lastForegroundNode = null;\n        this.lastForegroundHtmlNode = null;\n    }\n    /**\n     * Invoked when a state has been processed in {@link validatePoints}. This is used\n     * to update the order of the DOM nodes of the shape.\n     *\n     * @param state {@link CellState} that represents the cell state.\n     */\n    stateValidated(state) {\n        const graph = this.graph;\n        const fg = (state.cell.isEdge() && graph.keepEdgesInForeground) ||\n            (state.cell.isVertex() && graph.keepEdgesInBackground);\n        const htmlNode = fg\n            ? this.lastForegroundHtmlNode || this.lastHtmlNode\n            : this.lastHtmlNode;\n        const node = fg ? this.lastForegroundNode || this.lastNode : this.lastNode;\n        const result = graph.cellRenderer.insertStateAfter(state, node, htmlNode);\n        if (fg) {\n            this.lastForegroundHtmlNode = result[1];\n            this.lastForegroundNode = result[0];\n        }\n        else {\n            this.lastHtmlNode = result[1];\n            this.lastNode = result[0];\n        }\n    }\n    /**\n     * Sets the initial absolute terminal points in the given state before the edge\n     * style is computed.\n     *\n     * @param edge {@link CellState} whose initial terminal points should be updated.\n     * @param source {@link CellState} which represents the source terminal.\n     * @param target {@link CellState} which represents the target terminal.\n     */\n    updateFixedTerminalPoints(edge, source, target) {\n        this.updateFixedTerminalPoint(edge, source, true, this.graph.getConnectionConstraint(edge, source, true));\n        this.updateFixedTerminalPoint(edge, target, false, this.graph.getConnectionConstraint(edge, target, false));\n    }\n    /**\n     * Sets the fixed source or target terminal point on the given edge.\n     *\n     * @param edge {@link CellState} whose terminal point should be updated.\n     * @param terminal {@link CellState} which represents the actual terminal.\n     * @param source Boolean that specifies if the terminal is the source.\n     * @param constraint {@link ConnectionConstraint} that specifies the connection.\n     */\n    updateFixedTerminalPoint(edge, terminal, source, constraint) {\n        edge.setAbsoluteTerminalPoint(this.getFixedTerminalPoint(edge, terminal, source, constraint), source);\n    }\n    /**\n     * Returns the fixed source or target terminal point for the given edge.\n     *\n     * @param edge {@link CellState} whose terminal point should be returned.\n     * @param terminal {@link CellState} which represents the actual terminal.\n     * @param source Boolean that specifies if the terminal is the source.\n     * @param constraint {@link ConnectionConstraint} that specifies the connection.\n     */\n    getFixedTerminalPoint(edge, terminal, source, constraint) {\n        let pt = null;\n        if (constraint && terminal) {\n            pt = this.graph.getConnectionPoint(terminal, constraint, false); // FIXME Rounding introduced bugs when calculating label positions -> , this.graph.isOrthogonal(edge));\n        }\n        if (!pt && !terminal) {\n            const s = this.scale;\n            const tr = this.translate;\n            const orig = edge.origin;\n            const geo = edge.cell.getGeometry();\n            pt = geo.getTerminalPoint(source);\n            if (pt) {\n                pt = new Point(s * (tr.x + pt.x + orig.x), s * (tr.y + pt.y + orig.y));\n            }\n        }\n        return pt;\n    }\n    /**\n     * Updates the bounds of the given cell state to reflect the bounds of the stencil\n     * if it has a fixed aspect and returns the previous bounds as an {@link Rectangle} if\n     * the bounds have been modified or null otherwise.\n     *\n     * @param state {@link CellState} whose bounds should be updated.\n     */\n    updateBoundsFromStencil(state) {\n        let previous = null;\n        if (state &&\n            state.shape &&\n            state.shape.stencil &&\n            state.shape.stencil.aspect === 'fixed') {\n            previous = Rectangle.fromRectangle(state);\n            const asp = state.shape.stencil.computeAspect(null, // this argument is not used\n            state.x, state.y, state.width, state.height);\n            state.setRect(asp.x, asp.y, state.shape.stencil.w0 * asp.width, state.shape.stencil.h0 * asp.height);\n        }\n        return previous;\n    }\n    /**\n     * Updates the absolute points in the given state using the specified array\n     * of {@link Point} as the relative points.\n     *\n     * @param edge {@link CellState} whose absolute points should be updated.\n     * @param points Array of {@link Point} that constitute the relative points.\n     * @param source {@link CellState} that represents the source terminal.\n     * @param target {@link CellState} that represents the target terminal.\n     */\n    updatePoints(edge, points, source, target) {\n        const pts = [];\n        pts.push(edge.absolutePoints[0]);\n        const edgeStyle = this.getEdgeStyle(edge, points, source, target);\n        if (edgeStyle && source) {\n            // target can be null\n            const src = this.getTerminalPort(edge, source, true);\n            const trg = target ? this.getTerminalPort(edge, target, false) : null;\n            // Uses the stencil bounds for routing and restores after routing\n            const srcBounds = this.updateBoundsFromStencil(src);\n            const trgBounds = this.updateBoundsFromStencil(trg);\n            edgeStyle(edge, src, trg, points, pts);\n            // Restores previous bounds\n            if (src && srcBounds) {\n                src.setRect(srcBounds.x, srcBounds.y, srcBounds.width, srcBounds.height);\n            }\n            if (trg && trgBounds) {\n                trg.setRect(trgBounds.x, trgBounds.y, trgBounds.width, trgBounds.height);\n            }\n        }\n        else if (points) {\n            for (let i = 0; i < points.length; i += 1) {\n                if (points[i]) {\n                    const pt = clone(points[i]);\n                    pts.push(this.transformControlPoint(edge, pt));\n                }\n            }\n        }\n        const tmp = edge.absolutePoints;\n        pts.push(tmp[tmp.length - 1]);\n        edge.absolutePoints = pts;\n    }\n    /**\n     * Transforms the given control point to an absolute point.\n     */\n    transformControlPoint(state, pt, ignoreScale = false) {\n        if (state && pt) {\n            const orig = state.origin;\n            const scale = ignoreScale ? 1 : this.scale;\n            return new Point(scale * (pt.x + this.translate.x + orig.x), scale * (pt.y + this.translate.y + orig.y));\n        }\n        return null;\n    }\n    /**\n     * Returns `true` if the given edge should be routed with {@link AbstractGraph.defaultLoopStyle}\n     * or the {@link CellStateStyle.orthogonalLoop} defined for the given edge.\n     * This implementation returns `true` if the given edge is a loop and does not\n     */\n    isLoopStyleEnabled(edge, points = [], source = null, target = null) {\n        const sc = this.graph.getConnectionConstraint(edge, source, true);\n        const tc = this.graph.getConnectionConstraint(edge, target, false);\n        if ((points == null || points.length < 2) &&\n            !((edge.style.orthogonalLoop ?? false) ||\n                ((sc == null || sc.point == null) && (tc == null || tc.point == null)))) {\n            return source != null && source === target;\n        }\n        return false;\n    }\n    /**\n     * Returns the edge style function to be used to render the given edge state.\n     */\n    getEdgeStyle(edge, points = [], source = null, target = null) {\n        let edgeStyle = this.isLoopStyleEnabled(edge, points, source, target)\n            ? (edge.style.loopStyle ?? this.graph.defaultLoopStyle)\n            : !(edge.style.noEdgeStyle ?? false)\n                ? edge.style.edgeStyle\n                : null;\n        // Converts string values to objects\n        if (typeof edgeStyle === 'string') {\n            let tmp = EdgeStyleRegistry.get(edgeStyle);\n            if (!tmp && this.isAllowEval()) {\n                tmp = doEval(edgeStyle);\n            }\n            edgeStyle = tmp;\n        }\n        if (typeof edgeStyle === 'function') {\n            return edgeStyle;\n        }\n        return null;\n    }\n    /**\n     * Updates the terminal points in the given state after the edge style was\n     * computed for the edge.\n     *\n     * @param state {@link CellState} whose terminal points should be updated.\n     * @param source {@link CellState} that represents the source terminal.\n     * @param target {@link CellState} that represents the target terminal.\n     */\n    updateFloatingTerminalPoints(state, source, target) {\n        const pts = state.absolutePoints;\n        const p0 = pts[0];\n        const pe = pts[pts.length - 1];\n        if (!pe && target) {\n            this.updateFloatingTerminalPoint(state, target, source, false);\n        }\n        if (!p0 && source) {\n            this.updateFloatingTerminalPoint(state, source, target, true);\n        }\n    }\n    /**\n     * Updates the absolute terminal point in the given state for the given\n     * start and end state, where start is the source if source is true.\n     *\n     * @param edge {@link CellState} whose terminal point should be updated.\n     * @param start {@link CellState} for the terminal on \"this\" side of the edge.\n     * @param end {@link CellState} for the terminal on the other side of the edge.\n     * @param source Boolean indicating if start is the source terminal state.\n     */\n    updateFloatingTerminalPoint(edge, start, end, source) {\n        edge.setAbsoluteTerminalPoint(this.getFloatingTerminalPoint(edge, start, end, source), source);\n    }\n    /**\n     * Returns the floating terminal point for the given edge, start and end\n     * state, where start is the source if source is true.\n     *\n     * @param edge {@link CellState} whose terminal point should be returned.\n     * @param start {@link CellState} for the terminal on \"this\" side of the edge.\n     * @param end {@link CellState} for the terminal on the other side of the edge.\n     * @param source Boolean indicating if start is the source terminal state.\n     */\n    getFloatingTerminalPoint(edge, start, end, source) {\n        start = this.getTerminalPort(edge, start, source);\n        let next = this.getNextPoint(edge, end, source);\n        const orth = this.graph.isOrthogonal(edge);\n        const alpha = toRadians(start.style.rotation ?? 0);\n        const center = new Point(start.getCenterX(), start.getCenterY());\n        if (alpha !== 0) {\n            const cos = Math.cos(-alpha);\n            const sin = Math.sin(-alpha);\n            next = getRotatedPoint(next, cos, sin, center);\n        }\n        let border = edge.style.perimeterSpacing ?? 0;\n        border +=\n            edge.style[source ? 'sourcePerimeterSpacing' : 'targetPerimeterSpacing'] ?? 0;\n        let pt = this.getPerimeterPoint(start, next, alpha === 0 && orth, border);\n        if (pt && alpha !== 0) {\n            const cos = Math.cos(alpha);\n            const sin = Math.sin(alpha);\n            pt = getRotatedPoint(pt, cos, sin, center);\n        }\n        return pt;\n    }\n    /**\n     * Returns an {@link CellState} that represents the source or target terminal or\n     * port for the given edge.\n     *\n     * @param state {@link CellState} that represents the state of the edge.\n     * @param terminal {@link CellState} that represents the terminal.\n     * @param source Boolean indicating if the given terminal is the source terminal.\n     */\n    getTerminalPort(state, terminal, source = false) {\n        const key = source ? 'sourcePort' : 'targetPort';\n        const id = state.style[key];\n        if (id) {\n            const cell = this.graph.getDataModel().getCell(id);\n            if (cell) {\n                const tmp = this.getState(cell, false);\n                // Only uses ports where a cell state exists\n                if (tmp) {\n                    terminal = tmp;\n                }\n            }\n        }\n        return terminal;\n    }\n    /**\n     * Returns an {@link Point} that defines the location of the intersection point between\n     * the perimeter and the line between the center of the shape and the given point.\n     *\n     * @param terminal {@link CellState} for the source or target terminal.\n     * @param next {@link Point} that lies outside the given terminal.\n     * @param orthogonal Boolean that specifies if the orthogonal projection onto\n     * the perimeter should be returned. If this is false then the intersection\n     * of the perimeter and the line between the next and the center point is\n     * returned.\n     * @param border Optional border between the perimeter and the shape.\n     */\n    getPerimeterPoint(terminal, next, orthogonal, border = 0) {\n        let point = null;\n        if (terminal != null) {\n            const perimeter = this.getPerimeterFunction(terminal);\n            if (perimeter != null && next != null) {\n                const bounds = this.getPerimeterBounds(terminal, border);\n                if (bounds.width > 0 || bounds.height > 0) {\n                    point = new Point(next.x, next.y);\n                    let flipH = false;\n                    let flipV = false;\n                    if (terminal.cell.isVertex()) {\n                        flipH = !!terminal.style.flipH;\n                        flipV = !!terminal.style.flipV;\n                        if (flipH) {\n                            point.x = 2 * bounds.getCenterX() - point.x;\n                        }\n                        if (flipV) {\n                            point.y = 2 * bounds.getCenterY() - point.y;\n                        }\n                    }\n                    point = perimeter(bounds, terminal, point, orthogonal);\n                    if (point != null) {\n                        if (flipH) {\n                            point.x = 2 * bounds.getCenterX() - point.x;\n                        }\n                        if (flipV) {\n                            point.y = 2 * bounds.getCenterY() - point.y;\n                        }\n                    }\n                }\n            }\n            if (point == null) {\n                point = this.getPoint(terminal);\n            }\n        }\n        return point;\n    }\n    /**\n     * Returns the x-coordinate of the center point for automatic routing.\n     */\n    getRoutingCenterX(state) {\n        const f = state.style ? (state.style.routingCenterX ?? 0) : 0;\n        return state.getCenterX() + f * state.width;\n    }\n    /**\n     * Returns the y-coordinate of the center point for automatic routing.\n     */\n    getRoutingCenterY(state) {\n        const f = state.style ? (state.style.routingCenterY ?? 0) : 0;\n        return state.getCenterY() + f * state.height;\n    }\n    /**\n     * Returns the perimeter bounds for the given terminal, edge pair as an\n     * {@link Rectangle}.\n     *\n     * If you have a model where each terminal has a relative child that should\n     * act as the graphical endpoint for a connection from/to the terminal, then\n     * this method can be replaced as follows:\n     *\n     * @example\n     * ```javascript\n     * var oldGetPerimeterBounds = getPerimeterBounds;\n     * getPerimeterBounds(terminal, edge, isSource)\n     * {\n     *   var model = this.graph.getDataModel();\n     *   var childCount = model.getChildCount(terminal.cell);\n     *\n     *   if (childCount > 0)\n     *   {\n     *     var child = model.getChildAt(terminal.cell, 0);\n     *     var geo = model.getGeometry(child);\n     *\n     *     if (geo != null &&\n     *         geo.relative)\n     *     {\n     *       var state = this.getState(child);\n     *\n     *       if (state != null)\n     *       {\n     *         terminal = state;\n     *       }\n     *     }\n     *   }\n     *\n     *   return oldGetPerimeterBounds.apply(this, arguments);\n     * };\n     * ```\n     *\n     * @param terminal CellState that represents the terminal.\n     * @param border Number that adds a border between the shape and the perimeter.\n     */\n    getPerimeterBounds(terminal, border = 0) {\n        border += terminal.style.perimeterSpacing ?? 0;\n        return terminal.getPerimeterBounds(border * this.scale);\n    }\n    /**\n     * Returns the perimeter function for the given state.\n     */\n    getPerimeterFunction(state) {\n        let perimeter = state.style.perimeter;\n        // Converts string values to objects\n        if (typeof perimeter === 'string') {\n            let tmp = PerimeterRegistry.get(perimeter);\n            if (tmp == null && this.isAllowEval()) {\n                tmp = doEval(perimeter);\n            }\n            perimeter = tmp;\n        }\n        if (typeof perimeter === 'function') {\n            return perimeter;\n        }\n        return null;\n    }\n    /**\n     * Returns the nearest point in the list of absolute points or the center\n     * of the opposite terminal.\n     *\n     * @param edge {@link CellState} that represents the edge.\n     * @param opposite {@link CellState} that represents the opposite terminal.\n     * @param source Boolean indicating if the next point for the source or target\n     * should be returned.\n     */\n    getNextPoint(edge, opposite, source = false) {\n        const pts = edge.absolutePoints;\n        let point = null;\n        if (pts.length >= 2) {\n            const count = pts.length;\n            point = pts[source ? Math.min(1, count - 1) : Math.max(0, count - 2)];\n        }\n        if (!point && opposite) {\n            point = new Point(opposite.getCenterX(), opposite.getCenterY());\n        }\n        return point; // shouldn't return null, but really?\n    }\n    /**\n     * Returns the nearest ancestor terminal that is visible. The edge appears\n     * to be connected to this terminal on the display. The result of this method\n     * is cached in {@link CellState.getVisibleTerminalState}.\n     *\n     * @param edge {@link Cell} whose visible terminal should be returned.\n     * @param source Boolean that specifies if the source or target terminal\n     * should be returned.\n     */\n    getVisibleTerminal(edge, source) {\n        const model = this.graph.getDataModel();\n        let result = edge.getTerminal(source);\n        let best = result;\n        while (result && result !== this.currentRoot) {\n            if ((best && !best.isVisible()) || result.isCollapsed()) {\n                best = result;\n            }\n            result = result.getParent();\n        }\n        // Checks if the result is valid for the current view state\n        if (best &&\n            (!model.contains(best) ||\n                best.getParent() === model.getRoot() ||\n                best === this.currentRoot)) {\n            best = null;\n        }\n        return best;\n    }\n    /**\n     * Updates the given state using the bounding box of the absolute points.\n     * Also updates {@link CellState.terminalDistance}, {@link CellState.length} and\n     * {@link CellState.segments}.\n     *\n     * @param state {@link CellState} whose bounds should be updated.\n     */\n    updateEdgeBounds(state) {\n        const points = state.absolutePoints;\n        const p0 = points[0];\n        const pe = points[points.length - 1];\n        if (p0 && pe && (p0.x !== pe.x || p0.y !== pe.y)) {\n            const dx = pe.x - p0.x;\n            const dy = pe.y - p0.y;\n            state.terminalDistance = Math.sqrt(dx * dx + dy * dy);\n        }\n        else {\n            state.terminalDistance = 0;\n        }\n        let length = 0;\n        const segments = [];\n        let pt = p0;\n        if (pt) {\n            let minX = pt.x;\n            let minY = pt.y;\n            let maxX = minX;\n            let maxY = minY;\n            for (let i = 1; i < points.length; i += 1) {\n                const tmp = points[i];\n                if (tmp) {\n                    const dx = pt.x - tmp.x;\n                    const dy = pt.y - tmp.y;\n                    const segment = Math.sqrt(dx * dx + dy * dy);\n                    segments.push(segment);\n                    length += segment;\n                    pt = tmp;\n                    minX = Math.min(pt.x, minX);\n                    minY = Math.min(pt.y, minY);\n                    maxX = Math.max(pt.x, maxX);\n                    maxY = Math.max(pt.y, maxY);\n                }\n            }\n            state.length = length;\n            state.segments = segments;\n            const markerSize = 1; // TODO: include marker size\n            state.x = minX;\n            state.y = minY;\n            state.width = Math.max(markerSize, maxX - minX);\n            state.height = Math.max(markerSize, maxY - minY);\n        }\n    }\n    /**\n     * Returns the absolute point on the edge for the given relative\n     * {@link Geometry} as an {@link Point}. The edge is represented by the given\n     * {@link CellState}.\n     *\n     * @param state {@link CellState} that represents the state of the parent edge.\n     * @param geometry {@link Geometry} that represents the relative location.\n     */\n    getPoint(state, geometry = null) {\n        let x = state.getCenterX();\n        let y = state.getCenterY();\n        if (state.segments != null && (geometry == null || geometry.relative)) {\n            const gx = geometry != null ? geometry.x / 2 : 0;\n            const pointCount = state.absolutePoints.length;\n            const dist = Math.round((gx + 0.5) * state.length);\n            let segment = state.segments[0];\n            let length = 0;\n            let index = 1;\n            while (dist >= Math.round(length + segment) && index < pointCount - 1) {\n                length += segment;\n                segment = state.segments[index++];\n            }\n            const factor = segment === 0 ? 0 : (dist - length) / segment;\n            const p0 = state.absolutePoints[index - 1];\n            const pe = state.absolutePoints[index];\n            if (p0 != null && pe != null) {\n                let gy = 0;\n                let offsetX = 0;\n                let offsetY = 0;\n                if (geometry != null) {\n                    gy = geometry.y;\n                    const { offset } = geometry;\n                    if (offset != null) {\n                        offsetX = offset.x;\n                        offsetY = offset.y;\n                    }\n                }\n                const dx = pe.x - p0.x;\n                const dy = pe.y - p0.y;\n                const nx = segment === 0 ? 0 : dy / segment;\n                const ny = segment === 0 ? 0 : dx / segment;\n                x = p0.x + dx * factor + (nx * gy + offsetX) * this.scale;\n                y = p0.y + dy * factor - (ny * gy - offsetY) * this.scale;\n            }\n        }\n        else if (geometry != null) {\n            const { offset } = geometry;\n            if (offset != null) {\n                x += offset.x;\n                y += offset.y;\n            }\n        }\n        return new Point(x, y);\n    }\n    /**\n     * Gets the relative point that describes the given, absolute label\n     * position for the given edge state.\n     *\n     * @param edgeState {@link CellState} that represents the state of the parent edge.\n     * @param x Specifies the x-coordinate of the absolute label location.\n     * @param y Specifies the y-coordinate of the absolute label location.\n     */\n    getRelativePoint(edgeState, x, y) {\n        const geometry = edgeState.cell.getGeometry();\n        if (geometry) {\n            const absolutePoints = edgeState.absolutePoints;\n            const pointCount = absolutePoints.length;\n            if (geometry.relative && pointCount > 1) {\n                const totalLength = edgeState.length;\n                const { segments } = edgeState;\n                // Works out which line segment the point of the label is closest to\n                let p0 = absolutePoints[0];\n                let pe = absolutePoints[1];\n                let minDist = ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n                let length = 0;\n                let index = 0;\n                let tmp = 0;\n                for (let i = 2; i < pointCount; i += 1) {\n                    p0 = pe;\n                    pe = absolutePoints[i];\n                    const dist = ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n                    tmp += segments[i - 2];\n                    if (dist <= minDist) {\n                        minDist = dist;\n                        index = i - 1;\n                        length = tmp;\n                    }\n                }\n                const seg = segments[index];\n                p0 = absolutePoints[index];\n                pe = absolutePoints[index + 1];\n                const x2 = p0.x;\n                const y2 = p0.y;\n                const x1 = pe.x;\n                const y1 = pe.y;\n                let px = x;\n                let py = y;\n                const xSegment = x2 - x1;\n                const ySegment = y2 - y1;\n                px -= x1;\n                py -= y1;\n                let projlenSq = 0;\n                px = xSegment - px;\n                py = ySegment - py;\n                const dotprod = px * xSegment + py * ySegment;\n                if (dotprod <= 0.0) {\n                    projlenSq = 0;\n                }\n                else {\n                    projlenSq = (dotprod * dotprod) / (xSegment * xSegment + ySegment * ySegment);\n                }\n                let projlen = Math.sqrt(projlenSq);\n                if (projlen > seg) {\n                    projlen = seg;\n                }\n                let yDistance = Math.sqrt(ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y));\n                const direction = relativeCcw(p0.x, p0.y, pe.x, pe.y, x, y);\n                if (direction === -1) {\n                    yDistance = -yDistance;\n                }\n                // Constructs the relative point for the label\n                return new Point(((totalLength / 2 - length - projlen) / totalLength) * -2, yDistance / this.scale);\n            }\n        }\n        return new Point();\n    }\n    /**\n     * Updates {@link CellState.absoluteOffset} for the given state. The absolute\n     * offset is normally used for the position of the edge label. It is\n     * calculated from the geometry as an absolute offset from the center\n     * between the two endpoints if the geometry is absolute, or as the\n     * relative distance between the center along the line and the absolute\n     * orthogonal distance if the geometry is relative.\n     *\n     * @param state {@link CellState} whose absolute offset should be updated.\n     */\n    updateEdgeLabelOffset(state) {\n        const points = state.absolutePoints;\n        const absoluteOffset = state.absoluteOffset;\n        absoluteOffset.x = state.getCenterX();\n        absoluteOffset.y = state.getCenterY();\n        if (points.length > 0 && state.segments) {\n            const geometry = state.cell.getGeometry();\n            if (geometry) {\n                if (geometry.relative) {\n                    const offset = this.getPoint(state, geometry);\n                    state.absoluteOffset = offset;\n                }\n                else {\n                    const p0 = points[0];\n                    const pe = points[points.length - 1];\n                    if (p0 && pe) {\n                        const dx = pe.x - p0.x;\n                        const dy = pe.y - p0.y;\n                        let x0 = 0;\n                        let y0 = 0;\n                        const off = geometry.offset;\n                        if (off) {\n                            x0 = off.x;\n                            y0 = off.y;\n                        }\n                        const x = p0.x + dx / 2 + x0 * this.scale;\n                        const y = p0.y + dy / 2 + y0 * this.scale;\n                        absoluteOffset.x = x;\n                        absoluteOffset.y = y;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Returns the {@link CellState} for the given cell. If create is true, then\n     * the state is created if it does not yet exist.\n     *\n     * @param cell {@link Cell} for which the {@link CellState} should be returned.\n     * @param create Optional boolean indicating if a new state should be created\n     * if it does not yet exist. Default is false.\n     */\n    getState(cell, create = false) {\n        let state = this.states.get(cell);\n        if (create && (!state || this.updateStyle) && cell.isVisible()) {\n            if (!state) {\n                state = this.createState(cell);\n                this.states.put(cell, state);\n            }\n            else {\n                state.style = this.graph.getCellStyle(cell);\n            }\n        }\n        return state;\n    }\n    /**\n     * Returns the {@link CellState}s for the given array of {@link Cell}. The array\n     * contains all states that are not null, that is, the returned array may\n     * have less elements than the given array. If no argument is given, then\n     * this returns {@link states}.\n     */\n    getCellStates(cells = null) {\n        if (!cells) {\n            return this.states.getValues();\n        }\n        const result = [];\n        for (const cell of cells) {\n            const state = this.getState(cell);\n            if (state) {\n                result.push(state);\n            }\n        }\n        return result;\n    }\n    /**\n     * Removes and returns the {@link CellState} for the given cell.\n     *\n     * @param cell {@link Cell} for which the {@link CellState} should be removed.\n     */\n    removeState(cell) {\n        const state = this.states.remove(cell);\n        if (state) {\n            this.graph.cellRenderer.destroy(state);\n            state.invalid = true;\n            state.destroy();\n        }\n        return state;\n    }\n    /**\n     * Creates and returns an {@link CellState} for the given cell and initializes\n     * it using {@link cellRenderer.initialize}.\n     *\n     * @param cell {@link Cell} for which a new {@link CellState} should be created.\n     */\n    createState(cell) {\n        return new CellState(this, cell, this.graph.getCellStyle(cell));\n    }\n    /**\n     * Returns true if the event origin is one of the drawing panes or\n     * containers of the view.\n     */\n    isContainerEvent(evt) {\n        const source = getSource(evt);\n        return (source &&\n            (source === this.graph.container ||\n                // @ts-ignore parentNode may exist\n                source.parentNode === this.backgroundPane ||\n                // @ts-ignore parentNode may exist\n                (source.parentNode && source.parentNode.parentNode === this.backgroundPane) ||\n                source === this.canvas.parentNode ||\n                source === this.canvas ||\n                source === this.backgroundPane ||\n                source === this.drawPane ||\n                source === this.overlayPane ||\n                source === this.decoratorPane));\n    }\n    isScrollEvent(evt) {\n        const graph = this.graph;\n        const offset = getOffset(graph.container);\n        const eventClientPosition = evt instanceof MouseEvent\n            ? [evt.clientX, evt.clientY]\n            : [evt.touches[0].clientX, evt.touches[0].clientY];\n        const pt = new Point(eventClientPosition[0] - offset.x, eventClientPosition[1] - offset.y);\n        const container = graph.container;\n        const outWidth = container.offsetWidth;\n        const inWidth = container.clientWidth;\n        if (outWidth > inWidth && pt.x > inWidth + 2 && pt.x <= outWidth) {\n            return true;\n        }\n        const outHeight = container.offsetHeight;\n        const inHeight = container.clientHeight;\n        return outHeight > inHeight && pt.y > inHeight + 2 && pt.y <= outHeight;\n    }\n    /**\n     * Initializes the graph event dispatch loop for the specified container\n     * and invokes {@link create} to create the required DOM nodes for the display.\n     */\n    init() {\n        this.installListeners();\n        this.createSvg();\n    }\n    /**\n     * Installs the required listeners in the container.\n     */\n    installListeners() {\n        const graph = this.graph;\n        const { container } = graph;\n        // Support for touch device gestures (eg. pinch to zoom)\n        // Double-tap handling is implemented in mxGraph.fireMouseEvent\n        if (Client.IS_TOUCH) {\n            InternalEvent.addListener(container, 'gesturestart', ((evt) => {\n                graph.fireGestureEvent(evt);\n                InternalEvent.consume(evt);\n            }));\n            InternalEvent.addListener(container, 'gesturechange', ((evt) => {\n                graph.fireGestureEvent(evt);\n                InternalEvent.consume(evt);\n            }));\n            InternalEvent.addListener(container, 'gestureend', ((evt) => {\n                graph.fireGestureEvent(evt);\n                InternalEvent.consume(evt);\n            }));\n        }\n        // Fires event only for one pointer per gesture\n        let pointerId = null;\n        // Adds basic listeners for graph event dispatching\n        InternalEvent.addGestureListeners(container, ((evt) => {\n            // Condition to avoid scrollbar events starting a rubberband selection\n            if (this.isContainerEvent(evt) &&\n                ((!Client.IS_GC && !Client.IS_SF) || !this.isScrollEvent(evt))) {\n                graph.fireMouseEvent(InternalEvent.MOUSE_DOWN, new InternalMouseEvent(evt));\n                // @ts-ignore\n                pointerId = evt.pointerId;\n            }\n        }), (evt) => {\n            if (this.isContainerEvent(evt) &&\n                // @ts-ignore\n                (pointerId === null || evt.pointerId === pointerId)) {\n                graph.fireMouseEvent(InternalEvent.MOUSE_MOVE, new InternalMouseEvent(evt));\n            }\n        }, (evt) => {\n            if (this.isContainerEvent(evt)) {\n                graph.fireMouseEvent(InternalEvent.MOUSE_UP, new InternalMouseEvent(evt));\n            }\n            pointerId = null;\n        });\n        // Adds listener for double click handling on background, this does always\n        // use native event handler, we assume that the DOM of the background\n        // does not change during the double click\n        InternalEvent.addListener(container, 'dblclick', ((evt) => {\n            if (this.isContainerEvent(evt)) {\n                graph.dblClick(evt);\n            }\n        }));\n        // Workaround for touch events which started on some DOM node\n        // on top of the container, in which case the cells under the\n        // mouse for the move and up events are not detected.\n        const getState = (evt) => {\n            let state = null;\n            // Workaround for touch events which started on some DOM node\n            // on top of the container, in which case the cells under the\n            // mouse for the move and up events are not detected.\n            if (Client.IS_TOUCH) {\n                const x = getClientX(evt);\n                const y = getClientY(evt);\n                // Dispatches the drop event to the graph which\n                // consumes and executes the source function\n                const pt = convertPoint(container, x, y);\n                const cell = graph.getCellAt(pt.x, pt.y);\n                if (cell)\n                    state = graph.view.getState(cell);\n            }\n            return state;\n        };\n        // Adds basic listeners for graph event dispatching outside the\n        // container and finishing the handling of a single gesture\n        // Implemented via graph event dispatch loop to avoid duplicate events\n        // in Firefox and Chrome\n        graph.addMouseListener({\n            mouseDown: () => {\n                const popupMenuHandler = graph.getPlugin('PopupMenuHandler');\n                popupMenuHandler?.hideMenu();\n            },\n            mouseMove: () => {\n                return;\n            },\n            mouseUp: () => {\n                return;\n            },\n        });\n        this.moveHandler = (evt) => {\n            const tooltipHandler = graph.getPlugin('TooltipHandler');\n            // Hides the tooltip if mouse is outside container\n            if (tooltipHandler && tooltipHandler.isHideOnHover()) {\n                tooltipHandler.hide();\n            }\n            if (this.captureDocumentGesture &&\n                graph.isMouseDown &&\n                graph.container != null &&\n                !this.isContainerEvent(evt) &&\n                graph.container.style.display !== 'none' &&\n                graph.container.style.visibility !== 'hidden' &&\n                !isConsumed(evt)) {\n                graph.fireMouseEvent(InternalEvent.MOUSE_MOVE, new InternalMouseEvent(evt, getState(evt)));\n            }\n        };\n        this.endHandler = (evt) => {\n            if (this.captureDocumentGesture &&\n                graph.isMouseDown &&\n                graph.container != null &&\n                !this.isContainerEvent(evt) &&\n                graph.container.style.display !== 'none' &&\n                graph.container.style.visibility !== 'hidden') {\n                graph.fireMouseEvent(InternalEvent.MOUSE_UP, new InternalMouseEvent(evt));\n            }\n        };\n        InternalEvent.addGestureListeners(document, null, this.moveHandler, this.endHandler);\n    }\n    /**\n     * Creates and returns the DOM nodes for the SVG display.\n     */\n    createSvg() {\n        const { container } = this.graph;\n        const canvas = (this.canvas = document.createElementNS(NS_SVG, 'g'));\n        // For background image\n        this.backgroundPane = document.createElementNS(NS_SVG, 'g');\n        canvas.appendChild(this.backgroundPane);\n        // Adds two layers (background is early feature)\n        this.drawPane = document.createElementNS(NS_SVG, 'g');\n        canvas.appendChild(this.drawPane);\n        this.overlayPane = document.createElementNS(NS_SVG, 'g');\n        canvas.appendChild(this.overlayPane);\n        this.decoratorPane = document.createElementNS(NS_SVG, 'g');\n        canvas.appendChild(this.decoratorPane);\n        const root = document.createElementNS(NS_SVG, 'svg');\n        root.style.left = '0px';\n        root.style.top = '0px';\n        root.style.width = '100%';\n        root.style.height = '100%';\n        // NOTE: In standards mode, the SVG must have block layout\n        // in order for the container DIV to not show scrollbars.\n        root.style.display = 'block';\n        root.appendChild(this.canvas);\n        if (container != null) {\n            container.appendChild(root);\n            this.updateContainerStyle(container);\n        }\n    }\n    /**\n     * Creates the DOM nodes for the HTML display.\n     */\n    createHtml() {\n        const container = this.graph.container;\n        if (container != null) {\n            this.canvas = this.createHtmlPane('100%', '100%');\n            this.canvas.style.overflow = 'hidden';\n            // Uses minimal size for inner DIVs on Canvas. This is required\n            // for correct event processing in IE. If we have an overlapping\n            // DIV then the events on the cells are only fired for labels.\n            this.backgroundPane = this.createHtmlPane('1px', '1px');\n            this.drawPane = this.createHtmlPane('1px', '1px');\n            this.overlayPane = this.createHtmlPane('1px', '1px');\n            this.decoratorPane = this.createHtmlPane('1px', '1px');\n            this.canvas.appendChild(this.backgroundPane);\n            this.canvas.appendChild(this.drawPane);\n            this.canvas.appendChild(this.overlayPane);\n            this.canvas.appendChild(this.decoratorPane);\n            container.appendChild(this.canvas);\n            this.updateContainerStyle(container);\n        }\n    }\n    /**\n     * Updates the size of the HTML canvas.\n     */\n    updateHtmlCanvasSize(width, height) {\n        if (this.graph.container != null) {\n            const ow = this.graph.container.offsetWidth;\n            const oh = this.graph.container.offsetHeight;\n            if (ow < width) {\n                this.canvas.style.width = width + 'px';\n            }\n            else {\n                this.canvas.style.width = '100%';\n            }\n            if (oh < height) {\n                this.canvas.style.height = height + 'px';\n            }\n            else {\n                this.canvas.style.height = '100%';\n            }\n        }\n    }\n    /**\n     * Creates and returns a drawing pane in HTML (DIV).\n     */\n    createHtmlPane(width, height) {\n        const pane = document.createElement('DIV');\n        if (width != null && height != null) {\n            pane.style.position = 'absolute';\n            pane.style.left = '0px';\n            pane.style.top = '0px';\n            pane.style.width = width;\n            pane.style.height = height;\n        }\n        else {\n            pane.style.position = 'relative';\n        }\n        return pane;\n    }\n    /**\n     * Updates the style of the container after installing the SVG DOM elements.\n     */\n    updateContainerStyle(container) {\n        // Workaround for offset of container\n        const style = getCurrentStyle(container);\n        if (style != null && style.position == 'static') {\n            container.style.position = 'relative';\n        }\n        // Disables built-in pan and zoom in IE10 and later\n        if (Client.IS_POINTER) {\n            container.style.touchAction = 'none';\n        }\n    }\n    /**\n     * Destroys the view and all its resources.\n     */\n    destroy() {\n        let root = null;\n        if (this.canvas && this.canvas instanceof SVGElement) {\n            root = this.canvas.ownerSVGElement;\n        }\n        if (!root) {\n            root = this.canvas;\n        }\n        if (root && root.parentNode) {\n            this.clear(this.currentRoot, true);\n            InternalEvent.removeGestureListeners(document, null, this.moveHandler, this.endHandler);\n            InternalEvent.release(this.graph.container);\n            root.parentNode.removeChild(root);\n            this.moveHandler = null;\n            this.endHandler = null;\n            // @ts-expect-error Can be null when destroyed.\n            this.canvas = null;\n            // @ts-expect-error Can be null when destroyed.\n            this.backgroundPane = null;\n            // @ts-expect-error Can be null when destroyed.\n            this.drawPane = null;\n            // @ts-expect-error Can be null when destroyed.\n            this.overlayPane = null;\n            // @ts-expect-error Can be null when destroyed.\n            this.decoratorPane = null;\n        }\n    }\n}\nexport default GraphView;\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { AbstractGraph } from './AbstractGraph';\nimport GraphDataModel from './GraphDataModel';\nimport CellRenderer from './cell/CellRenderer';\nimport { Stylesheet } from './style/Stylesheet';\nimport GraphSelectionModel from './GraphSelectionModel';\nimport GraphView from './GraphView';\n/**\n * An implementation of {@link AbstractGraph} that does not load any default built-ins (plugins, style elements).\n *\n * This class is optimized for production environments by enabling efficient tree-shaking.\n *\n * For evaluation and prototyping purposes, consider using {@link Graph}, which requires less configuration.\n *\n * @category Graph\n */\nexport class BaseGraph extends AbstractGraph {\n    initializeCollaborators(options) {\n        this.cellRenderer = options?.cellRenderer ?? new CellRenderer();\n        this.model = options?.model ?? new GraphDataModel();\n        this.setSelectionModel(options?.selectionModel?.(this) ?? new GraphSelectionModel(this));\n        this.setStylesheet(options?.stylesheet ?? new Stylesheet());\n        this.view = options?.view?.(this) ?? new GraphView(this);\n    }\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport Point from '../../geometry/Point';\nimport { LINE_ARCSIZE } from '../../../util/Constants';\n/**\n * Extends {@link Shape} to implement a rhombus (aka diamond) shape.\n *\n * This shape is registered under `rhombus` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * @category Vertex Shapes\n */\nclass RhombusShape extends Shape {\n    constructor(bounds, fill, stroke, strokewidth = 1) {\n        super();\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokewidth;\n    }\n    /**\n     * Adds roundable support.\n     */\n    // isRoundable(): boolean;\n    isRoundable() {\n        return true;\n    }\n    /**\n     * Generic painting implementation.\n     * @param {mxAbstractCanvas2D} c\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     */\n    paintVertexShape(c, x, y, w, h) {\n        const hw = w / 2;\n        const hh = h / 2;\n        const arcSize = (this.style?.arcSize ?? LINE_ARCSIZE) / 2;\n        c.begin();\n        this.addPoints(c, [\n            new Point(x + hw, y),\n            new Point(x + w, y + hh),\n            new Point(x + hw, y + h),\n            new Point(x, y + hh),\n        ], this.isRounded, arcSize, true);\n        c.fillAndStroke();\n    }\n}\nexport default RhombusShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport { NONE } from '../../../util/Constants';\n/**\n * Extends {@link Shape} to implement a cylinder shape.\n *\n * This shape is registered under `cylinder` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * If a custom shape with one filled area and an overlay path is needed, then this shape's {@link redrawPath} should be overridden.\n *\n * @category Vertex Shapes\n */\nclass CylinderShape extends Shape {\n    constructor(bounds, fill, stroke, strokeWidth = 1) {\n        super();\n        /**\n         * Defines the maximum height of the top and bottom part of the cylinder shape.\n         */\n        this.maxHeight = 40;\n        /**\n         * Sets stroke tolerance to 0 for SVG.\n         */\n        this.svgStrokeTolerance = 0;\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n    }\n    /**\n     * Redirects to redrawPath for subclasses to work.\n     */\n    paintVertexShape(c, x, y, w, h) {\n        c.translate(x, y);\n        c.begin();\n        this.redrawPath(c, x, y, w, h, false);\n        c.fillAndStroke();\n        if (!this.outline || !this.style || !(this.style.backgroundOutline ?? false)) {\n            c.setShadow(false);\n            c.begin();\n            this.redrawPath(c, x, y, w, h, true);\n            c.stroke();\n        }\n    }\n    /**\n     * Redirects to redrawPath for subclasses to work.\n     */\n    getCylinderSize(x, y, w, h) {\n        return Math.min(this.maxHeight, Math.round(h / 5));\n    }\n    /**\n     * Draws the path for this shape.\n     */\n    redrawPath(c, x, y, w, h, isForeground = false) {\n        const dy = this.getCylinderSize(x, y, w, h);\n        if ((isForeground && this.fill !== NONE) || (!isForeground && this.fill === NONE)) {\n            c.moveTo(0, dy);\n            c.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n            // Needs separate shapes for correct hit-detection\n            if (!isForeground) {\n                c.stroke();\n                c.begin();\n            }\n        }\n        if (!isForeground) {\n            c.moveTo(0, dy);\n            c.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n            c.lineTo(w, h - dy);\n            c.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n            c.close();\n        }\n    }\n}\nexport default CylinderShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport { NONE } from '../../../util/Constants';\n/**\n * Extends {@link Shape} to implement an actor shape.\n *\n * This shape is registered under `actor` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * If a custom shape with one filled area is needed, then this shape's {@link redrawPath} method should be overridden\n * like in the following example:\n *\n * ```typescript\n * class SampleShape extends ActorShape {\n *   redrawPath(c: AbstractCanvas2D, x: number, y: number, w: number, h: number) {\n *     path.moveTo(0, 0);\n *     path.lineTo(w, h);\n *     // ...\n *     path.close();\n *   }\n * }\n * ```\n *\n * @category Vertex Shapes\n */\nclass ActorShape extends Shape {\n    constructor(bounds = null, fill = NONE, stroke = NONE, strokeWidth = 1) {\n        super();\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n    }\n    /**\n     * Redirects to redrawPath for subclasses to work.\n     */\n    paintVertexShape(c, x, y, w, h) {\n        c.translate(x, y);\n        c.begin();\n        this.redrawPath(c, x, y, w, h);\n        c.fillAndStroke();\n    }\n    /**\n     * Draws the path for this shape.\n     */\n    redrawPath(c, x, y, w, h) {\n        const width = w / 3;\n        c.moveTo(0, h);\n        c.curveTo(0, (3 * h) / 5, 0, (2 * h) / 5, w / 2, (2 * h) / 5);\n        c.curveTo(w / 2 - width, (2 * h) / 5, w / 2 - width, 0, w / 2, 0);\n        c.curveTo(w / 2 + width, 0, w / 2 + width, (2 * h) / 5, w / 2, (2 * h) / 5);\n        c.curveTo(w, (2 * h) / 5, w, (3 * h) / 5, w, h);\n        c.close();\n    }\n}\nexport default ActorShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\nimport ActorShape from './ActorShape';\nimport { LINE_ARCSIZE } from '../../../util/Constants';\n/**\n * Implementation of the triangle shape.\n *\n * This shape is registered under `triangle` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * @category Vertex Shapes\n */\nclass TriangleShape extends ActorShape {\n    constructor() {\n        super();\n    }\n    /**\n     * Adds roundable support.\n     * @returns {boolean}\n     */\n    isRoundable() {\n        return true;\n    }\n    /**\n     * Draws the path for this shape.\n     * @param {mxAbstractCanvas2D} c\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     */\n    redrawPath(c, x, y, w, h) {\n        const arcSize = (this.style?.arcSize ?? LINE_ARCSIZE) / 2;\n        this.addPoints(c, [new Point(0, 0), new Point(w, 0.5 * h), new Point(0, h)], this.isRounded, arcSize, true);\n    }\n}\nexport default TriangleShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ActorShape from './ActorShape';\nimport Point from '../../geometry/Point';\nimport { LINE_ARCSIZE } from '../../../util/Constants';\n/**\n * Implementation of the hexagon shape.\n *\n * This shape is registered under `hexagon` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * @category Vertex Shapes\n */\nclass HexagonShape extends ActorShape {\n    constructor() {\n        super();\n    }\n    /**\n     * Draws the path for this shape.\n     */\n    redrawPath(c, x, y, w, h) {\n        const arcSize = (this.style?.arcSize ?? LINE_ARCSIZE) / 2;\n        this.addPoints(c, [\n            new Point(0.25 * w, 0),\n            new Point(0.75 * w, 0),\n            new Point(w, 0.5 * h),\n            new Point(0.75 * w, h),\n            new Point(0.25 * w, h),\n            new Point(0, 0.5 * h),\n        ], this.isRounded, arcSize, true);\n    }\n}\nexport default HexagonShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ActorShape from './ActorShape';\n/**\n * Extends {@link ActorShape} to implement a cloud shape.\n *\n * This shape is registered under `cloud` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * @category Vertex Shapes\n */\nclass CloudShape extends ActorShape {\n    constructor(bounds, fill, stroke, strokeWidth = 1) {\n        super();\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n    }\n    /**\n     * Draws the path for this shape.\n     */\n    redrawPath(c, x, y, w, h) {\n        c.moveTo(0.25 * w, 0.25 * h);\n        c.curveTo(0.05 * w, 0.25 * h, 0, 0.5 * h, 0.16 * w, 0.55 * h);\n        c.curveTo(0, 0.66 * h, 0.18 * w, 0.9 * h, 0.31 * w, 0.8 * h);\n        c.curveTo(0.4 * w, h, 0.7 * w, h, 0.8 * w, 0.8 * h);\n        c.curveTo(w, 0.8 * h, w, 0.6 * h, 0.875 * w, 0.5 * h);\n        c.curveTo(w, 0.3 * h, 0.8 * w, 0.1 * h, 0.625 * w, 0.2 * h);\n        c.curveTo(0.5 * w, 0.05 * h, 0.3 * w, 0.05 * h, 0.25 * w, 0.25 * h);\n        c.close();\n    }\n}\nexport default CloudShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\n/**\n * Extends {@link Shape} to implement a horizontal line shape.\n *\n * The shape is used to represent edges, not vertices.\n *\n * This shape is registered under `line` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * @category Edge Shapes\n */\nclass LineShape extends Shape {\n    constructor(bounds, stroke, strokeWidth = 1, vertical = false) {\n        super();\n        this.bounds = bounds;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n        this.vertical = vertical;\n    }\n    /**\n     * Redirects to redrawPath for subclasses to work.\n     * @param {AbstractCanvas2D} c\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     */\n    paintVertexShape(c, x, y, w, h) {\n        c.begin();\n        if (this.vertical) {\n            const mid = x + w / 2;\n            c.moveTo(mid, y);\n            c.lineTo(mid, y + h);\n        }\n        else {\n            const mid = y + h / 2;\n            c.moveTo(x, mid);\n            c.lineTo(x + w, mid);\n        }\n        c.stroke();\n    }\n}\nexport default LineShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport { ARROW_SIZE, ARROW_SPACING, ARROW_WIDTH } from '../../../util/Constants';\n/**\n * Extends {@link Shape} to implement an arrow shape.\n *\n * The shape is used to represent edges, not vertices.\n *\n * This shape is registered under `arrow` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * @category Edge Shapes\n */\nclass ArrowShape extends Shape {\n    constructor(points, fill, stroke, strokeWidth = 1, arrowWidth = ARROW_WIDTH, spacing = ARROW_SPACING, endSize = ARROW_SIZE) {\n        super();\n        this.points = points;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n        this.arrowWidth = arrowWidth;\n        this.spacing = spacing;\n        this.endSize = endSize;\n    }\n    /**\n     * Augments the bounding box with the edge width and markers.\n     */\n    augmentBoundingBox(bbox) {\n        super.augmentBoundingBox(bbox);\n        const w = Math.max(this.arrowWidth, this.endSize);\n        bbox.grow((w / 2 + this.strokeWidth) * this.scale);\n    }\n    /**\n     * Paints the line shape.\n     */\n    paintEdgeShape(c, pts) {\n        // Geometry of arrow\n        const spacing = ARROW_SPACING;\n        const width = ARROW_WIDTH;\n        const arrow = ARROW_SIZE;\n        // Base vector (between end points)\n        const p0 = pts[0];\n        const pe = pts[pts.length - 1];\n        const dx = pe.x - p0.x;\n        const dy = pe.y - p0.y;\n        const dist = Math.sqrt(dx * dx + dy * dy);\n        const length = dist - 2 * spacing - arrow;\n        // Computes the norm and the inverse norm\n        const nx = dx / dist;\n        const ny = dy / dist;\n        const basex = length * nx;\n        const basey = length * ny;\n        const floorx = (width * ny) / 3;\n        const floory = (-width * nx) / 3;\n        // Computes points\n        const p0x = p0.x - floorx / 2 + spacing * nx;\n        const p0y = p0.y - floory / 2 + spacing * ny;\n        const p1x = p0x + floorx;\n        const p1y = p0y + floory;\n        const p2x = p1x + basex;\n        const p2y = p1y + basey;\n        const p3x = p2x + floorx;\n        const p3y = p2y + floory;\n        // p4 not necessary\n        const p5x = p3x - 3 * floorx;\n        const p5y = p3y - 3 * floory;\n        c.begin();\n        c.moveTo(p0x, p0y);\n        c.lineTo(p1x, p1y);\n        c.lineTo(p2x, p2y);\n        c.lineTo(p3x, p3y);\n        c.lineTo(pe.x - spacing * nx, pe.y - spacing * ny);\n        c.lineTo(p5x, p5y);\n        c.lineTo(p5x + floorx, p5y + floory);\n        c.close();\n        c.fillAndStroke();\n    }\n}\nexport default ArrowShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport { ARROW_SIZE, ARROW_SPACING, ARROW_WIDTH, NONE } from '../../../util/Constants';\nimport { relativeCcw } from '../../../util/mathUtils';\n/**\n * Extends {@link Shape} to implement a new rounded arrow shape with support for waypoints and double arrows.\n *\n * The shape is used to represent edges, not vertices.\n *\n * This shape is registered under `arrowConnector` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * @category Edge Shapes\n */\nclass ArrowConnectorShape extends Shape {\n    constructor(points, fill, stroke, strokeWidth = 1, arrowWidth = ARROW_WIDTH, spacing = ARROW_SPACING, endSize = ARROW_SIZE / 5) {\n        super();\n        /**\n         * Allows to use the SVG bounding box in SVG.\n         * @defaultValue `false` for performance reasons.\n         */\n        this.useSvgBoundingBox = true;\n        this.points = points;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n        this.arrowWidth = arrowWidth;\n        this.arrowSpacing = spacing;\n        this.startSize = ARROW_SIZE / 5;\n        this.endSize = endSize;\n    }\n    /**\n     * Hook for subclassers.\n     */\n    isRoundable() {\n        return true;\n    }\n    /**\n     * Overrides mxShape to reset spacing.\n     */\n    resetStyles() {\n        super.resetStyles();\n        this.arrowSpacing = ARROW_SPACING;\n    }\n    /**\n     * Overrides apply to get smooth transition from default start- and endsize.\n     */\n    apply(state) {\n        super.apply(state);\n        if (this.style && this.style.startSize != null && this.style.endSize != null) {\n            this.startSize = this.style.startSize * 3;\n            this.endSize = this.style.endSize * 3;\n        }\n    }\n    /**\n     * Augments the bounding box with the edge width and markers.\n     */\n    augmentBoundingBox(bbox) {\n        super.augmentBoundingBox(bbox);\n        let w = this.getEdgeWidth();\n        if (this.isMarkerStart()) {\n            w = Math.max(w, this.getStartArrowWidth());\n        }\n        if (this.isMarkerEnd()) {\n            w = Math.max(w, this.getEndArrowWidth());\n        }\n        bbox.grow((w / 2 + this.strokeWidth) * this.scale);\n    }\n    /**\n     * Paints the line shape.\n     */\n    paintEdgeShape(c, pts) {\n        // Geometry of arrow\n        let strokeWidth = this.strokeWidth;\n        if (this.outline) {\n            strokeWidth = Math.max(1, this.style?.strokeWidth ?? 0);\n        }\n        const startWidth = this.getStartArrowWidth() + strokeWidth;\n        const endWidth = this.getEndArrowWidth() + strokeWidth;\n        const edgeWidth = this.outline\n            ? this.getEdgeWidth() + strokeWidth\n            : this.getEdgeWidth();\n        const openEnded = this.isOpenEnded();\n        const markerStart = this.isMarkerStart();\n        const markerEnd = this.isMarkerEnd();\n        const spacing = openEnded ? 0 : this.arrowSpacing + strokeWidth / 2;\n        const startSize = this.startSize + strokeWidth;\n        const endSize = this.endSize + strokeWidth;\n        const isRounded = this.isArrowRounded();\n        // Base vector (between first points)\n        const pe = pts[pts.length - 1];\n        // Finds first non-overlapping point\n        let i0 = 1;\n        while (i0 < pts.length - 1 && pts[i0].x === pts[0].x && pts[i0].y === pts[0].y) {\n            i0++;\n        }\n        const dx = pts[i0].x - pts[0].x;\n        const dy = pts[i0].y - pts[0].y;\n        const dist = Math.sqrt(dx * dx + dy * dy);\n        if (dist === 0) {\n            return;\n        }\n        // Computes the norm and the inverse norm\n        let nx = dx / dist;\n        let nx2;\n        let nx1 = nx;\n        let ny = dy / dist;\n        let ny2;\n        let ny1 = ny;\n        let orthx = edgeWidth * ny;\n        let orthy = -edgeWidth * nx;\n        // Stores the inbound function calls in reverse order in fns\n        const fns = [];\n        if (isRounded) {\n            c.setLineJoin('round');\n        }\n        else if (pts.length > 2) {\n            // Only mitre if there are waypoints\n            c.setMiterLimit(1.42);\n        }\n        c.begin();\n        const startNx = nx;\n        const startNy = ny;\n        if (markerStart && !openEnded) {\n            this.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n        }\n        else {\n            const outStartX = pts[0].x + orthx / 2 + spacing * nx;\n            const outStartY = pts[0].y + orthy / 2 + spacing * ny;\n            const inEndX = pts[0].x - orthx / 2 + spacing * nx;\n            const inEndY = pts[0].y - orthy / 2 + spacing * ny;\n            if (openEnded) {\n                c.moveTo(outStartX, outStartY);\n                fns.push(() => {\n                    c.lineTo(inEndX, inEndY);\n                });\n            }\n            else {\n                c.moveTo(inEndX, inEndY);\n                c.lineTo(outStartX, outStartY);\n            }\n        }\n        let dx1 = 0;\n        let dy1 = 0;\n        let dist1 = 0;\n        for (let i = 0; i < pts.length - 2; i += 1) {\n            // Work out in which direction the line is bending\n            const pos = relativeCcw(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y, pts[i + 2].x, pts[i + 2].y);\n            dx1 = pts[i + 2].x - pts[i + 1].x;\n            dy1 = pts[i + 2].y - pts[i + 1].y;\n            dist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n            if (dist1 !== 0) {\n                nx1 = dx1 / dist1;\n                ny1 = dy1 / dist1;\n                const tmp1 = nx * nx1 + ny * ny1;\n                const tmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n                // Work out the normal orthogonal to the line through the control point and the edge sides intersection\n                nx2 = nx + nx1;\n                ny2 = ny + ny1;\n                const dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n                if (dist2 !== 0) {\n                    nx2 /= dist2;\n                    ny2 /= dist2;\n                    // Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n                    const strokeWidthFactor = Math.max(tmp, Math.min(this.strokeWidth / 200 + 0.04, 0.35));\n                    const angleFactor = pos !== 0 && isRounded\n                        ? Math.max(0.1, strokeWidthFactor)\n                        : Math.max(tmp, 0.06);\n                    const outX = pts[i + 1].x + (ny2 * edgeWidth) / 2 / angleFactor;\n                    const outY = pts[i + 1].y - (nx2 * edgeWidth) / 2 / angleFactor;\n                    const inX = pts[i + 1].x - (ny2 * edgeWidth) / 2 / angleFactor;\n                    const inY = pts[i + 1].y + (nx2 * edgeWidth) / 2 / angleFactor;\n                    if (pos === 0 || !isRounded) {\n                        // If the two segments are aligned, or if we're not drawing curved sections between segments\n                        // just draw straight to the intersection point\n                        c.lineTo(outX, outY);\n                        ((x, y) => {\n                            fns.push(() => {\n                                c.lineTo(x, y);\n                            });\n                        })(inX, inY);\n                    }\n                    else if (pos === -1) {\n                        const c1x = inX + ny * edgeWidth;\n                        const c1y = inY - nx * edgeWidth;\n                        const c2x = inX + ny1 * edgeWidth;\n                        const c2y = inY - nx1 * edgeWidth;\n                        c.lineTo(c1x, c1y);\n                        c.quadTo(outX, outY, c2x, c2y);\n                        ((x, y) => {\n                            fns.push(() => {\n                                c.lineTo(x, y);\n                            });\n                        })(inX, inY);\n                    }\n                    else {\n                        c.lineTo(outX, outY);\n                        ((x, y) => {\n                            const c1x = outX - ny * edgeWidth;\n                            const c1y = outY + nx * edgeWidth;\n                            const c2x = outX - ny1 * edgeWidth;\n                            const c2y = outY + nx1 * edgeWidth;\n                            fns.push(() => {\n                                c.quadTo(x, y, c1x, c1y);\n                            });\n                            fns.push(() => {\n                                c.lineTo(c2x, c2y);\n                            });\n                        })(inX, inY);\n                    }\n                    nx = nx1;\n                    ny = ny1;\n                }\n            }\n        }\n        orthx = edgeWidth * ny1;\n        orthy = -edgeWidth * nx1;\n        if (markerEnd && !openEnded) {\n            this.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n        }\n        else {\n            c.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n            const inStartX = pe.x - spacing * nx1 - orthx / 2;\n            const inStartY = pe.y - spacing * ny1 - orthy / 2;\n            if (!openEnded) {\n                c.lineTo(inStartX, inStartY);\n            }\n            else {\n                c.moveTo(inStartX, inStartY);\n                fns.splice(0, 0, () => {\n                    c.moveTo(inStartX, inStartY);\n                });\n            }\n        }\n        for (let i = fns.length - 1; i >= 0; i--) {\n            fns[i]();\n        }\n        if (openEnded) {\n            c.end();\n            c.stroke();\n        }\n        else {\n            c.close();\n            c.fillAndStroke();\n        }\n        // Workaround for shadow on top of base arrow\n        c.setShadow(false);\n        // Need to redraw the markers without the low miter limit\n        c.setMiterLimit(4);\n        if (isRounded) {\n            c.setLineJoin('flat');\n        }\n        if (pts.length > 2) {\n            // Only to repaint markers if no waypoints\n            // Need to redraw the markers without the low miter limit\n            c.setMiterLimit(4);\n            if (markerStart && !openEnded) {\n                c.begin();\n                this.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n                c.stroke();\n                c.end();\n            }\n            if (markerEnd && !openEnded) {\n                c.begin();\n                this.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n                c.stroke();\n                c.end();\n            }\n        }\n    }\n    /**\n     * Paints the marker.\n     */\n    paintMarker(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove) {\n        const widthArrowRatio = edgeWidth / arrowWidth;\n        const orthx = (edgeWidth * ny) / 2;\n        const orthy = (-edgeWidth * nx) / 2;\n        const spaceX = (spacing + size) * nx;\n        const spaceY = (spacing + size) * ny;\n        if (initialMove) {\n            c.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n        }\n        else {\n            c.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n        }\n        c.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n        c.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n        c.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n        c.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n    }\n    /**\n     * @returns whether the arrow is rounded\n     */\n    isArrowRounded() {\n        return this.isRounded;\n    }\n    /**\n     * @returns the width of the start arrow\n     */\n    getStartArrowWidth() {\n        return ARROW_WIDTH;\n    }\n    /**\n     * @returns the width of the end arrow\n     */\n    getEndArrowWidth() {\n        return ARROW_WIDTH;\n    }\n    /**\n     * @returns the width of the body of the edge\n     */\n    getEdgeWidth() {\n        return ARROW_WIDTH / 3;\n    }\n    /**\n     * @returns whether the ends of the shape are drawn\n     */\n    isOpenEnded() {\n        return false;\n    }\n    /**\n     * @returns whether the start marker is drawn\n     */\n    isMarkerStart() {\n        return (this.style?.startArrow ?? NONE) !== NONE;\n    }\n    /**\n     * @returns whether the end marker is drawn\n     */\n    isMarkerEnd() {\n        return (this.style?.endArrow ?? NONE) !== NONE;\n    }\n}\nexport default ArrowConnectorShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../../geometry/Rectangle';\nimport Shape from '../Shape';\n/**\n * Extends {@link Shape} to implement a double ellipse shape.\n *\n * This shape is registered under `doubleEllipse` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * If a custom shape is needed to only fill the inner ellipse, then this shape's {@link paintVertexShape} method should be overridden\n * like in the following example:\n *\n * ```typescript\n * class SampleShape extends DoubleEllipseShape {\n *   paintVertexShape(c: AbstractCanvas2D, x: number, y: number, w: number, h: number) {\n *     c.ellipse(x, y, w, h);\n *     c.stroke();\n *\n *     const inset = this.style.margin ?? Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5));\n *     x += inset;\n *     y += inset;\n *     w -= 2 * inset;\n *     h -= 2 * inset;\n *\n *     if (w > 0 && h > 0) {\n *       c.ellipse(x, y, w, h);\n *     }\n *\n *     c.fillAndStroke();\n *   }\n * }\n * ```\n *\n * @category Vertex Shapes\n */\nclass DoubleEllipseShape extends Shape {\n    constructor(bounds, fill, stroke, strokeWidth = 1) {\n        super();\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n    }\n    /**\n     * Paints the background.\n     */\n    paintBackground(c, x, y, w, h) {\n        c.ellipse(x, y, w, h);\n        c.fillAndStroke();\n    }\n    /**\n     * Paints the foreground.\n     */\n    paintForeground(c, x, y, w, h) {\n        if (!this.outline) {\n            const margin = this.style?.margin ?? Math.min(3 + this.strokeWidth, Math.min(w / 5, h / 5));\n            x += margin;\n            y += margin;\n            w -= 2 * margin;\n            h -= 2 * margin;\n            // FIXME: Rounding issues in IE8 standards mode (not in 1.x)\n            if (w > 0 && h > 0) {\n                c.ellipse(x, y, w, h);\n            }\n            c.stroke();\n        }\n    }\n    /**\n     * @returns the bounds for the label.\n     */\n    getLabelBounds(rect) {\n        const margin = this.style?.margin ??\n            Math.min(3 + this.strokeWidth, Math.min(rect.width / 5 / this.scale, rect.height / 5 / this.scale)) * this.scale;\n        return new Rectangle(rect.x + margin, rect.y + margin, rect.width - 2 * margin, rect.height - 2 * margin);\n    }\n}\nexport default DoubleEllipseShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport Rectangle from '../../geometry/Rectangle';\nimport { DEFAULT_STARTSIZE, LINE_ARCSIZE, NONE, RECTANGLE_ROUNDING_FACTOR, } from '../../../util/Constants';\n/**\n * Extends {@link Shape} to implement a swimlane shape.\n *\n * This shape is registered under `swimlane` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * Use:\n * - {@link CellStateStyle.startSize} to define the size of the title region,\n * - {@link CellStateStyle.swimlaneFillColor} for the content area fill,\n * - {@link CellStateStyle.separatorColor} to draw an additional vertical separator,\n * - {@link CellStateStyle.swimlaneLine} to hide the line between the title region and the content area\n *\n * {@link CellStateStyle.horizontal} affects the orientation of this shape, not only its label.\n *\n * @category Vertex Shapes\n */\nclass SwimlaneShape extends Shape {\n    constructor(bounds, fill, stroke, strokeWidth = 1) {\n        super();\n        /**\n         * Default imagewidth and imageheight if an image but no imagewidth\n         * and imageheight are defined in the style. Value is 16.\n         * @type {number}\n         * @default 16\n         */\n        this.imageSize = 16;\n        this.imageSrc = null;\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n    }\n    /**\n     * Adds roundable support.\n     * @param {mxAbstractCanvas2D} c\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     * @returns {boolean}\n     */\n    isRoundable(c, x, y, w, h) {\n        return true;\n    }\n    /**\n     * Returns the bounding box for the gradient box for this shape.\n     */\n    getTitleSize() {\n        return Math.max(0, this.style?.startSize ?? DEFAULT_STARTSIZE);\n    }\n    /**\n     * Returns the bounding box for the gradient box for this shape.\n     */\n    getLabelBounds(rect) {\n        const start = this.getTitleSize();\n        const bounds = new Rectangle(rect.x, rect.y, rect.width, rect.height);\n        const horizontal = this.isHorizontal();\n        const flipH = this.style?.flipH ?? false;\n        const flipV = this.style?.flipV ?? false;\n        // East is default\n        const shapeVertical = this.direction === 'north' || this.direction === 'south';\n        const realHorizontal = horizontal == !shapeVertical;\n        const realFlipH = !realHorizontal &&\n            flipH !== (this.direction === 'south' || this.direction === 'west');\n        const realFlipV = realHorizontal &&\n            flipV !== (this.direction === 'south' || this.direction === 'west');\n        // Shape is horizontal\n        if (!shapeVertical) {\n            const tmp = Math.min(bounds.height, start * this.scale);\n            if (realFlipH || realFlipV) {\n                bounds.y += bounds.height - tmp;\n            }\n            bounds.height = tmp;\n        }\n        else {\n            const tmp = Math.min(bounds.width, start * this.scale);\n            if (realFlipH || realFlipV) {\n                bounds.x += bounds.width - tmp;\n            }\n            bounds.width = tmp;\n        }\n        return bounds;\n    }\n    /**\n     * Returns the bounding box for the gradient box for this shape.\n     */\n    getGradientBounds(c, x, y, w, h) {\n        let start = this.getTitleSize();\n        if (this.isHorizontal()) {\n            start = Math.min(start, h);\n            return new Rectangle(x, y, w, start);\n        }\n        start = Math.min(start, w);\n        return new Rectangle(x, y, start, h);\n    }\n    /**\n     * Returns the arcsize for the swimlane.\n     */\n    getSwimlaneArcSize(w, h, start) {\n        if (this.style?.absoluteArcSize ?? false) {\n            return Math.min(w / 2, Math.min(h / 2, this.style?.arcSize ?? LINE_ARCSIZE / 2));\n        }\n        const f = (this.style?.arcSize ?? RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n        return start * f * 3;\n    }\n    /**\n     * Paints the swimlane vertex shape.\n     */\n    isHorizontal() {\n        return this.style?.horizontal ?? true;\n    }\n    /**\n     * Paints the swimlane vertex shape.\n     */\n    paintVertexShape(c, x, y, w, h) {\n        let start = this.getTitleSize();\n        const fill = this.style?.swimlaneFillColor ?? NONE;\n        const swimlaneLine = this.style?.swimlaneLine ?? true;\n        let r = 0;\n        if (this.isHorizontal()) {\n            start = Math.min(start, h);\n        }\n        else {\n            start = Math.min(start, w);\n        }\n        c.translate(x, y);\n        if (!this.isRounded) {\n            this.paintSwimlane(c, x, y, w, h, start, fill, swimlaneLine);\n        }\n        else {\n            r = this.getSwimlaneArcSize(w, h, start);\n            r = Math.min((this.isHorizontal() ? h : w) - start, Math.min(start, r));\n            this.paintRoundedSwimlane(c, x, y, w, h, start, r, fill, swimlaneLine);\n        }\n        const sep = this.style?.separatorColor ?? NONE;\n        this.paintSeparator(c, x, y, w, h, start, sep);\n        if (this.imageSrc) {\n            const bounds = this.getImageBounds(x, y, w, h);\n            c.image(bounds.x - x, bounds.y - y, bounds.width, bounds.height, this.imageSrc, false, false, false);\n        }\n        if (this.glass) {\n            c.setShadow(false);\n            this.paintGlassEffect(c, 0, 0, w, start, r);\n        }\n    }\n    /**\n     * Paints the swimlane vertex shape.\n     */\n    paintSwimlane(c, x, y, w, h, start, fill, swimlaneLine) {\n        c.begin();\n        let events = true;\n        if (this.style && this.style.pointerEvents != null) {\n            events = this.style.pointerEvents;\n        }\n        if (!events && this.fill === NONE) {\n            c.pointerEvents = false;\n        }\n        if (this.isHorizontal()) {\n            c.moveTo(0, start);\n            c.lineTo(0, 0);\n            c.lineTo(w, 0);\n            c.lineTo(w, start);\n            c.fillAndStroke();\n            if (start < h) {\n                if (fill === NONE || !events) {\n                    c.pointerEvents = false;\n                }\n                if (fill !== NONE) {\n                    c.setFillColor(fill);\n                }\n                c.begin();\n                c.moveTo(0, start);\n                c.lineTo(0, h);\n                c.lineTo(w, h);\n                c.lineTo(w, start);\n                if (fill === NONE) {\n                    c.stroke();\n                }\n                else {\n                    c.fillAndStroke();\n                }\n            }\n        }\n        else {\n            c.moveTo(start, 0);\n            c.lineTo(0, 0);\n            c.lineTo(0, h);\n            c.lineTo(start, h);\n            c.fillAndStroke();\n            if (start < w) {\n                if (fill === NONE || !events) {\n                    c.pointerEvents = false;\n                }\n                if (fill !== NONE) {\n                    c.setFillColor(fill);\n                }\n                c.begin();\n                c.moveTo(start, 0);\n                c.lineTo(w, 0);\n                c.lineTo(w, h);\n                c.lineTo(start, h);\n                if (fill === NONE) {\n                    c.stroke();\n                }\n                else {\n                    c.fillAndStroke();\n                }\n            }\n        }\n        if (swimlaneLine) {\n            this.paintDivider(c, x, y, w, h, start, fill === NONE);\n        }\n    }\n    /**\n     * Paints the swimlane vertex shape.\n     */\n    paintRoundedSwimlane(c, x, y, w, h, start, r, fill, swimlaneLine) {\n        c.begin();\n        let events = true;\n        if (this.style && this.style.pointerEvents != null) {\n            events = this.style.pointerEvents;\n        }\n        if (!events && this.fill === NONE) {\n            c.pointerEvents = false;\n        }\n        if (this.isHorizontal()) {\n            c.moveTo(w, start);\n            c.lineTo(w, r);\n            c.quadTo(w, 0, w - Math.min(w / 2, r), 0);\n            c.lineTo(Math.min(w / 2, r), 0);\n            c.quadTo(0, 0, 0, r);\n            c.lineTo(0, start);\n            c.fillAndStroke();\n            if (start < h) {\n                if (fill === NONE || !events) {\n                    c.pointerEvents = false;\n                }\n                if (fill !== NONE) {\n                    c.setFillColor(fill);\n                }\n                c.begin();\n                c.moveTo(0, start);\n                c.lineTo(0, h - r);\n                c.quadTo(0, h, Math.min(w / 2, r), h);\n                c.lineTo(w - Math.min(w / 2, r), h);\n                c.quadTo(w, h, w, h - r);\n                c.lineTo(w, start);\n                if (fill === NONE) {\n                    c.stroke();\n                }\n                else {\n                    c.fillAndStroke();\n                }\n            }\n        }\n        else {\n            c.moveTo(start, 0);\n            c.lineTo(r, 0);\n            c.quadTo(0, 0, 0, Math.min(h / 2, r));\n            c.lineTo(0, h - Math.min(h / 2, r));\n            c.quadTo(0, h, r, h);\n            c.lineTo(start, h);\n            c.fillAndStroke();\n            if (start < w) {\n                if (fill === NONE || !events) {\n                    c.pointerEvents = false;\n                }\n                if (fill !== NONE) {\n                    c.setFillColor(fill);\n                }\n                c.begin();\n                c.moveTo(start, h);\n                c.lineTo(w - r, h);\n                c.quadTo(w, h, w, h - Math.min(h / 2, r));\n                c.lineTo(w, Math.min(h / 2, r));\n                c.quadTo(w, 0, w - r, 0);\n                c.lineTo(start, 0);\n                if (fill === NONE) {\n                    c.stroke();\n                }\n                else {\n                    c.fillAndStroke();\n                }\n            }\n        }\n        if (swimlaneLine) {\n            this.paintDivider(c, x, y, w, h, start, fill === NONE);\n        }\n    }\n    /**\n     * Paints the divider between swimlane title and content area.\n     */\n    paintDivider(c, x, y, w, h, start, shadow) {\n        if (!shadow) {\n            c.setShadow(false);\n        }\n        c.begin();\n        if (this.isHorizontal()) {\n            c.moveTo(0, start);\n            c.lineTo(w, start);\n        }\n        else {\n            c.moveTo(start, 0);\n            c.lineTo(start, h);\n        }\n        c.stroke();\n    }\n    /**\n     * Paints the vertical or horizontal separator line between swimlanes.\n     */\n    paintSeparator(c, x, y, w, h, start, color) {\n        if (color !== NONE) {\n            c.setStrokeColor(color);\n            c.setDashed(true);\n            c.begin();\n            if (this.isHorizontal()) {\n                c.moveTo(w, start);\n                c.lineTo(w, h);\n            }\n            else {\n                c.moveTo(start, 0);\n                c.lineTo(w, 0);\n            }\n            c.stroke();\n            c.setDashed(false);\n        }\n    }\n    /**\n     * Paints the swimlane vertex shape.\n     */\n    getImageBounds(x, y, w, h) {\n        if (this.isHorizontal()) {\n            return new Rectangle(x + w - this.imageSize, y, this.imageSize, this.imageSize);\n        }\n        return new Rectangle(x, y, this.imageSize, this.imageSize);\n    }\n}\nexport default SwimlaneShape;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../../geometry/Rectangle';\nimport { DEFAULT_IMAGESIZE, NONE } from '../../../util/Constants';\nimport RectangleShape from './RectangleShape';\n/**\n * Extends {@link RectangleShape} to implement an image shape with a label.\n *\n * This shape is registered under `label` in {@link CellRenderer} when using {@link Graph} or calling {@link registerDefaultShapes}.\n *\n * @category Vertex Shapes\n */\nclass LabelShape extends RectangleShape {\n    /**\n     * Constructs a new label shape.\n     *\n     * @param bounds {@link Rectangle} that defines the bounds. This is stored in {@link bounds}.\n     * @param fill String that defines the fill color. This is stored in {@link fill}.\n     * @param stroke String that defines the stroke color. This is stored in {@link stroke}.\n     * @param strokeWidth Optional integer that defines the stroke width. Default is 1. This is stored in {@link strokeWidth}.\n     */\n    constructor(bounds, fill, stroke, strokeWidth) {\n        super(bounds, fill, stroke, strokeWidth);\n        /**\n         * Default width and height for the image.\n         * @default mxConstants.DEFAULT_IMAGESIZE\n         */\n        this.imageSize = DEFAULT_IMAGESIZE;\n        this.imageSrc = null;\n        /**\n         * Default value for image spacing\n         * @type {number}\n         * @default 2\n         */\n        this.spacing = 2;\n        /**\n         * Default width and height for the indicicator.\n         * @type {number}\n         * @default 10\n         */\n        this.indicatorSize = 10;\n        /**\n         * Default spacing between image and indicator\n         * @default 2\n         * @type {number}\n         */\n        this.indicatorSpacing = 2;\n        this.indicatorImageSrc = null;\n    }\n    /**\n     * Initializes the shape and the <indicator>.\n     */\n    init(container) {\n        super.init(container);\n        if (this.indicatorShape) {\n            this.indicator = new this.indicatorShape();\n            this.indicator.dialect = this.dialect;\n            this.indicator.init(this.node);\n        }\n    }\n    /**\n     * Reconfigures this shape. This will update the colors of the indicator\n     * and reconfigure it if required.\n     */\n    redraw() {\n        if (this.indicator) {\n            this.indicator.fill = this.indicatorColor;\n            this.indicator.stroke = this.indicatorStrokeColor;\n            this.indicator.gradient = this.indicatorGradientColor;\n            this.indicator.direction = this.indicatorDirection;\n            this.indicator.redraw();\n        }\n        super.redraw();\n    }\n    /**\n     * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n     * no indicator shape.\n     */\n    isHtmlAllowed() {\n        return super.isHtmlAllowed() && this.indicatorColor === NONE && !!this.indicatorShape;\n    }\n    /**\n     * Generic background painting implementation.\n     * @param {mxAbstractCanvas2D} c\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     */\n    paintForeground(c, x, y, w, h) {\n        this.paintImage(c, x, y, w, h);\n        this.paintIndicator(c, x, y, w, h);\n        super.paintForeground(c, x, y, w, h);\n    }\n    /**\n     * Generic background painting implementation.\n     * @param {mxAbstractCanvas2D} c\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     */\n    paintImage(c, x, y, w, h) {\n        if (this.imageSrc) {\n            const bounds = this.getImageBounds(x, y, w, h);\n            c.image(bounds.x, bounds.y, bounds.width, bounds.height, this.imageSrc, false, false, false);\n        }\n    }\n    /**\n     * Generic background painting implementation.\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     */\n    getImageBounds(x, y, w, h) {\n        const align = this.style?.imageAlign ?? 'left';\n        const valign = this.style?.verticalAlign ?? 'middle';\n        const width = this.style?.imageWidth ?? DEFAULT_IMAGESIZE;\n        const height = this.style?.imageHeight ?? DEFAULT_IMAGESIZE;\n        const spacing = this.style?.spacing ?? this.spacing + 5;\n        if (align === 'center') {\n            x += (w - width) / 2;\n        }\n        else if (align === 'right') {\n            x += w - width - spacing;\n        } // default is left\n        else {\n            x += spacing;\n        }\n        if (valign === 'top') {\n            y += spacing;\n        }\n        else if (valign === 'bottom') {\n            y += h - height - spacing;\n        } // default is middle\n        else {\n            y += (h - height) / 2;\n        }\n        return new Rectangle(x, y, width, height);\n    }\n    /**\n     * Generic background painting implementation.\n     * @param {AbstractCanvas2D} c\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     */\n    paintIndicator(c, x, y, w, h) {\n        if (this.indicator) {\n            this.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n            this.indicator.paint(c);\n        }\n        else if (this.indicatorImageSrc) {\n            const bounds = this.getIndicatorBounds(x, y, w, h);\n            c.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImageSrc, false, false, false);\n        }\n    }\n    /**\n     * Generic background painting implementation.\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     * @returns {Rectangle}\n     */\n    getIndicatorBounds(x, y, w, h) {\n        const align = this.style?.imageAlign ?? 'left';\n        const valign = this.style?.verticalAlign ?? 'middle';\n        const width = this.style?.indicatorWidth ?? this.indicatorSize;\n        const height = this.style?.indicatorHeight ?? this.indicatorSize;\n        const spacing = this.spacing + 5;\n        if (align === 'right') {\n            x += w - width - spacing;\n        }\n        else if (align === 'center') {\n            x += (w - width) / 2;\n        } // default is left\n        else {\n            x += spacing;\n        }\n        if (valign === 'bottom') {\n            y += h - height - spacing;\n        }\n        else if (valign === 'top') {\n            y += spacing;\n        } // default is middle\n        else {\n            y += (h - height) / 2;\n        }\n        return new Rectangle(x, y, width, height);\n    }\n    /**\n     * Generic background painting implementation.\n     */\n    redrawHtmlShape() {\n        super.redrawHtmlShape();\n        // Removes all children\n        while (this.node.hasChildNodes()) {\n            this.node.removeChild(this.node.lastChild);\n        }\n        if (this.imageSrc && this.bounds) {\n            const node = document.createElement('img');\n            node.style.position = 'relative';\n            node.setAttribute('border', '0');\n            const bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n            bounds.x -= this.bounds.x;\n            bounds.y -= this.bounds.y;\n            node.style.left = `${Math.round(bounds.x)}px`;\n            node.style.top = `${Math.round(bounds.y)}px`;\n            node.style.width = `${Math.round(bounds.width)}px`;\n            node.style.height = `${Math.round(bounds.height)}px`;\n            node.src = this.imageSrc;\n            this.node.appendChild(node);\n        }\n    }\n}\nexport default LabelShape;\n","/*\nCopyright 2024-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { ShapeRegistry } from './ShapeRegistry';\nimport RectangleShape from './node/RectangleShape';\nimport EllipseShape from './node/EllipseShape';\nimport RhombusShape from './node/RhombusShape';\nimport CylinderShape from './node/CylinderShape';\nimport ConnectorShape from './edge/ConnectorShape';\nimport ActorShape from './node/ActorShape';\nimport TriangleShape from './node/TriangleShape';\nimport HexagonShape from './node/HexagonShape';\nimport CloudShape from './node/CloudShape';\nimport LineShape from './edge/LineShape';\nimport ArrowShape from './edge/ArrowShape';\nimport ArrowConnectorShape from './edge/ArrowConnectorShape';\nimport DoubleEllipseShape from './node/DoubleEllipseShape';\nimport SwimlaneShape from './node/SwimlaneShape';\nimport ImageShape from './node/ImageShape';\nimport LabelShape from './node/LabelShape';\nlet isDefaultElementsRegistered = false;\n/**\n * Register default builtin shapes into {@link CellRenderer}.\n *\n * @category Configuration\n * @category Style\n * @since 0.18.0\n */\nexport function registerDefaultShapes() {\n    if (!isDefaultElementsRegistered) {\n        const shapesToRegister = [\n            ['actor', ActorShape],\n            ['arrow', ArrowShape],\n            ['arrowConnector', ArrowConnectorShape],\n            ['cloud', CloudShape],\n            ['connector', ConnectorShape],\n            ['cylinder', CylinderShape],\n            ['doubleEllipse', DoubleEllipseShape],\n            ['ellipse', EllipseShape],\n            ['hexagon', HexagonShape],\n            ['image', ImageShape],\n            ['label', LabelShape],\n            ['line', LineShape],\n            ['rectangle', RectangleShape],\n            ['rhombus', RhombusShape],\n            ['swimlane', SwimlaneShape],\n            ['triangle', TriangleShape],\n        ];\n        for (const [shapeName, shapeClass] of shapesToRegister) {\n            ShapeRegistry.add(shapeName, shapeClass);\n        }\n        isDefaultElementsRegistered = true;\n    }\n}\n/**\n * Unregister all shapes from {@link ShapeRegistry}.\n *\n * @category Configuration\n * @category Style\n * @since 0.18.0\n */\nexport function unregisterAllShapes() {\n    ShapeRegistry.clear();\n    isDefaultElementsRegistered = false;\n}\n","/*\nCopyright 2024-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { EdgeStyle, EdgeMarker, Perimeter } from './builtin-style-elements';\nimport { EdgeStyleRegistry } from './edge/EdgeStyleRegistry';\nimport { EdgeMarkerRegistry } from './marker/EdgeMarkerRegistry';\nimport { PerimeterRegistry } from './perimeter/PerimeterRegistry';\nlet isDefaultEdgeStylesRegistered = false;\n/**\n * Register default builtin {@link EdgeStyle}s in {@link EdgeStyleRegistry}.\n *\n * @category Configuration\n * @category Style\n * @since 0.18.0\n */\nexport const registerDefaultEdgeStyles = () => {\n    if (!isDefaultEdgeStylesRegistered) {\n        const edgeStylesToRegister = [\n            ['elbowEdgeStyle', EdgeStyle.ElbowConnector, { handlerKind: 'elbow' }],\n            ['entityRelationEdgeStyle', EdgeStyle.EntityRelation, {}],\n            ['loopEdgeStyle', EdgeStyle.Loop, { handlerKind: 'elbow', isOrthogonal: false }],\n            ['manhattanEdgeStyle', EdgeStyle.ManhattanConnector, { handlerKind: 'segment' }],\n            ['orthogonalEdgeStyle', EdgeStyle.OrthConnector, { handlerKind: 'segment' }],\n            ['segmentEdgeStyle', EdgeStyle.SegmentConnector, { handlerKind: 'segment' }],\n            ['sideToSideEdgeStyle', EdgeStyle.SideToSide, { handlerKind: 'elbow' }],\n            ['topToBottomEdgeStyle', EdgeStyle.TopToBottom, { handlerKind: 'elbow' }],\n        ];\n        for (const [name, edgeStyle, metadata] of edgeStylesToRegister) {\n            EdgeStyleRegistry.add(name, edgeStyle, {\n                ...metadata,\n                // most edge styles registered here are orthogonal, so set to true by default to avoid to duplicate the configuration code\n                isOrthogonal: metadata.isOrthogonal ?? true,\n            });\n        }\n        isDefaultEdgeStylesRegistered = true;\n    }\n};\nlet isDefaultPerimetersRegistered = false;\n/**\n * Register default builtin {@link Perimeter}s in {@link PerimeterRegistry}.\n *\n * @category Configuration\n * @category Style\n * @since 0.18.0\n */\nexport const registerDefaultPerimeters = () => {\n    if (!isDefaultPerimetersRegistered) {\n        const perimetersToRegister = [\n            ['ellipsePerimeter', Perimeter.EllipsePerimeter],\n            ['hexagonPerimeter', Perimeter.HexagonPerimeter],\n            ['rectanglePerimeter', Perimeter.RectanglePerimeter],\n            ['rhombusPerimeter', Perimeter.RhombusPerimeter],\n            ['trianglePerimeter', Perimeter.TrianglePerimeter],\n        ];\n        for (const [name, perimeter] of perimetersToRegister) {\n            PerimeterRegistry.add(name, perimeter);\n        }\n        isDefaultPerimetersRegistered = true;\n    }\n};\n/**\n * Unregister all {@link EdgeStyle}s and {@link Perimeter}s from their registries.\n *\n * @see unregisterAllEdgeStyles\n * @see unregisterAllPerimeters\n *\n * @category Configuration\n * @category Style\n * @since 0.18.0\n */\nexport const unregisterAllEdgeStylesAndPerimeters = () => {\n    unregisterAllEdgeStyles();\n    unregisterAllPerimeters();\n};\n/**\n * Unregister all {@link EdgeStyle}s from {@link EdgeStyleRegistry}.\n *\n * @category Configuration\n * @category Style\n * @since 0.20.0\n */\nexport const unregisterAllEdgeStyles = () => {\n    EdgeStyleRegistry.clear();\n    isDefaultEdgeStylesRegistered = false;\n};\n/**\n * Unregister all {@link Perimeter}s from {@link PerimeterRegistry}.\n *\n * @category Configuration\n * @category Style\n * @since 0.20.0\n */\nexport const unregisterAllPerimeters = () => {\n    PerimeterRegistry.clear();\n    isDefaultPerimetersRegistered = false;\n};\nlet isDefaultMarkersRegistered = false;\n/**\n *\n * Register default builtin {@link MarkerFactoryFunction}s in {@link EdgeMarkerRegistry}.\n *\n * @category Configuration\n * @category Style\n * @since 0.18.0\n */\nexport const registerDefaultEdgeMarkers = () => {\n    if (!isDefaultMarkersRegistered) {\n        const markersToRegister = [\n            ['classic', EdgeMarker.createArrow(2)],\n            ['classicThin', EdgeMarker.createArrow(3)],\n            ['block', EdgeMarker.createArrow(2)],\n            ['blockThin', EdgeMarker.createArrow(3)],\n            ['open', EdgeMarker.createOpenArrow(2)],\n            ['openThin', EdgeMarker.createOpenArrow(3)],\n            ['oval', EdgeMarker.oval],\n            ['diamond', EdgeMarker.diamond],\n            ['diamondThin', EdgeMarker.diamond],\n        ];\n        for (const [type, factory] of markersToRegister) {\n            EdgeMarkerRegistry.add(type, factory);\n        }\n        isDefaultMarkersRegistered = true;\n    }\n};\n/**\n * Unregister all {@link MarkerFactoryFunction}s from {@link EdgeMarkerRegistry}.\n *\n * @category Configuration\n * @category Style\n * @since 0.18.0\n */\nexport const unregisterAllEdgeMarkers = () => {\n    EdgeMarkerRegistry.clear();\n    isDefaultMarkersRegistered = false;\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { getAlignmentAsPoint, setPrefixedStyle } from '../../util/styleUtils';\nimport Rectangle from '../geometry/Rectangle';\nimport InternalEvent from '../event/InternalEvent';\nimport Client from '../../Client';\nimport { ABSOLUTE_LINE_HEIGHT, DEFAULT_FONTFAMILY, DEFAULT_FONTSIZE, DEFAULT_TEXT_DIRECTION, FONT_STYLE_MASK, LINE_HEIGHT, NONE, WORD_WRAP, } from '../../util/Constants';\nimport TextShape from '../shape/node/TextShape';\nimport { clearSelection, extractTextWithWhitespace, isNode } from '../../util/domUtils';\nimport { htmlEntities, replaceTrailingNewlines } from '../../util/StringUtils';\nimport { getSource, isConsumed, isControlDown, isMetaDown, isShiftDown, } from '../../util/EventUtils';\nimport { matchBinaryMask } from '../../internal/utils';\n/**\n * In-place editor for the graph.\n *\n * To control this editor, use:\n * - {@link AbstractGraph.invokesStopCellEditing}\n * - {@link AbstractGraph.enterStopsCellEditing}\n * - {@link AbstractGraph.escapeEnabled}\n *\n * If {@link AbstractGraph.enterStopsCellEditing} is `true` then ctrl-enter or shift-enter can be used to create a linefeed.\n *\n * The F2 (accept change) and escape keys (undo change) can always be used to stop editing.\n *\n * To customize the location of the textbox in the graph, override {@link getEditorBounds} as follows:\n *\n * ```javascript\n * graph.cellEditor.getEditorBounds = (state) => {\n *   const result = super.getEditorBounds(state);\n *\n *   if (this.graph.getDataModel().isEdge(state.cell)) {\n *     result.x = state.getCenterX() - result.width / 2;\n *     result.y = state.getCenterY() - result.height / 2;\n *   }\n *\n *   return result;\n * };\n * ```\n *\n * Note that this hook is only called if {@link autoSize} is `false`.\n * If {@link autoSize} is `true`, then {@link Shape.getLabelBounds} is used to compute the current bounds of the textbox.\n *\n * The textarea uses the `mxCellEditor` CSS class. You can modify this class in your custom CSS.\n\n * Example:\n *\n * To only allow numeric input in the in-place editor, use the following code.\n *\n * ```javascript\n * const text = graph.cellEditor.textarea;\n *\n * InternalEvent.addListener(text, 'keydown', function (evt) {\n *   if (!(evt.keyCode >= 48 && evt.keyCode <= 57) &&\n *       !(evt.keyCode >= 96 && evt.keyCode <= 105)) {\n *     InternalEvent.consume(evt);\n *   }\n * });\n * ```\n *\n * ### Placeholder\n *\n * To implement a placeholder for cells without a label, use the {@link emptyLabelText} variable.\n *\n *\n * ### Resize the textarea\n *\n * Resize of the textarea is disabled by default.\n * If you want to enable this feature extend {@link init} and set `this.textarea.style.resize = ''`.\n *\n *\n * ### Editing on key press\n *\n * To start editing on a key press event, the container of the graph\n * should have focus or a focusable parent should be used to add the\n * key press handler as follows.\n *\n * ```javascript\n * InternalEvent.addListener(graph.container, 'keypress', (evt) => {\n *   if (!graph.isEditing() && !graph.isSelectionEmpty() && evt.which !== 0\n *       && !eventUtils.isAltDown(evt)\n *       && !eventUtils.isControlDown(evt)\n *       && !eventUtils.isMetaDown(evt)) {\n *     graph.startEditing();\n *\n *     if (Client.IS_FF) {\n *       graph.cellEditor.textarea.value = String.fromCharCode(evt.which);\n *     }\n *   }\n * });\n * ```\n *\n * To allow focus for a DIV, and hence to receive key press events, some browsers require it to have a valid tabindex attribute.\n * In this case the following code may be used to keep the container focused.\n *\n * ```javascript\n * const graphFireMouseEvent = graph.fireMouseEvent;\n * graph.fireMouseEvent = (evtName, me, sender) => {\n *   if (evtName == mxEvent.MOUSE_DOWN) {\n *     this.container.focus();\n *   }\n *\n *   graphFireMouseEvent.apply(this, [evtName, me, sender]);\n * };\n * ```\n *\n * @category Plugin\n */\nclass CellEditorHandler {\n    constructor(graph) {\n        this.clearOnChange = false;\n        this.bounds = null;\n        this.resizeThread = null;\n        this.textDirection = null;\n        /**\n         * Holds the DIV that is used for text editing. Note that this may be null before the first\n         * edit. Instantiated in <init>.\n         */\n        this.textarea = null;\n        /**\n         * Reference to the <Cell> that is currently being edited.\n         */\n        this.editingCell = null;\n        /**\n         * Reference to the event that was used to start editing.\n         */\n        this.trigger = null;\n        /**\n         * Specifies if the label has been modified.\n         */\n        this.modified = false;\n        /**\n         * Specifies if the textarea should be resized while the text is being edited.\n         * Default is true.\n         */\n        this.autoSize = true;\n        /**\n         * Specifies if the text should be selected when editing starts. Default is\n         * true.\n         */\n        this.selectText = true;\n        /**\n         * Text to be displayed for empty labels. Default is '' or '<br>' in Firefox as\n         * a workaround for the missing cursor bug for empty content editable. This can\n         * be set to eg. \"[Type Here]\" to easier visualize editing of empty labels. The\n         * value is only displayed before the first keystroke and is never used as the\n         * actual editing value.\n         */\n        this.emptyLabelText = Client.IS_FF ? '<br>' : '';\n        /**\n         * If true, pressing the escape key will stop editing and not accept the new\n         * value. Change this to false to accept the new value on escape, and cancel\n         * editing on Shift+Escape instead. Default is true.\n         */\n        this.escapeCancelsEditing = true;\n        /**\n         * Reference to the label DOM node that has been hidden.\n         */\n        this.textNode = null;\n        /**\n         * Specifies the zIndex for the textarea. Default is 5.\n         */\n        this.zIndex = 5;\n        /**\n         * Defines the minimum width and height to be used in <resize>. Default is 0x20px.\n         */\n        this.minResize = new Rectangle(0, 20);\n        /**\n         * Correction factor for word wrapping width. Default is 2 in quirks, 0 in IE\n         * 11 and 1 in all other browsers and modes.\n         */\n        // wordWrapPadding: 2 | 1 | 0;\n        this.wordWrapPadding = 0;\n        /**\n         * If <focusLost> should be called if <textarea> loses the focus. Default is false.\n         */\n        this.blurEnabled = false;\n        /**\n         * Holds the initial editing value to check if the current value was modified.\n         */\n        this.initialValue = null;\n        /**\n         * Holds the current temporary horizontal alignment for the cell style. If this\n         * is modified then the current text alignment is changed and the cell style is\n         * updated when the value is applied.\n         */\n        this.align = null;\n        this.graph = graph;\n        // Stops editing after zoom changes\n        this.zoomHandler = () => {\n            if (this.graph.isEditing()) {\n                this.resize();\n            }\n        };\n        // Handling of deleted cells while editing\n        this.changeHandler = (_sender) => {\n            if (this.editingCell && !this.graph.getView().getState(this.editingCell, false)) {\n                this.stopEditing(true);\n            }\n        };\n        this.graph.getView().addListener(InternalEvent.SCALE, this.zoomHandler);\n        this.graph.getView().addListener(InternalEvent.SCALE_AND_TRANSLATE, this.zoomHandler);\n        this.graph.getDataModel().addListener(InternalEvent.CHANGE, this.changeHandler);\n    }\n    /**\n     * Creates the {@link textarea} and installs the event listeners. The key handler\n     * updates the {@link modified} state.\n     */\n    init() {\n        this.textarea = document.createElement('div');\n        this.textarea.className = 'mxCellEditor mxPlainTextEditor';\n        this.textarea.contentEditable = String(true);\n        // Workaround for selection outside DIV if height is 0\n        if (Client.IS_GC) {\n            this.textarea.style.minHeight = '1em';\n        }\n        this.textarea.style.position = 'absolute';\n        this.installListeners(this.textarea);\n    }\n    /**\n     * Called in <stopEditing> if cancel is false to invoke {@link AbstractGraph.labelChanged}.\n     */\n    applyValue(state, value) {\n        this.graph.labelChanged(state.cell, value, this.trigger);\n    }\n    /**\n     * Sets the temporary horizontal alignment for the current editing session.\n     */\n    setAlign(align) {\n        if (this.textarea) {\n            this.textarea.style.textAlign = align;\n        }\n        this.align = align;\n        this.resize();\n    }\n    /**\n     * Gets the initial editing value for the given cell.\n     */\n    getInitialValue(state, trigger) {\n        let result = htmlEntities(this.graph.getEditingValue(state.cell, trigger), false);\n        result = replaceTrailingNewlines(result, '<div><br></div>');\n        return result.replace(/\\n/g, '<br>');\n    }\n    /**\n     * Returns the current editing value.\n     */\n    getCurrentValue(state) {\n        if (!this.textarea)\n            return null;\n        return extractTextWithWhitespace(Array.from(this.textarea.childNodes));\n    }\n    /**\n     * Returns true if <escapeCancelsEditing> is true and shift, control and meta\n     * are not pressed.\n     */\n    // isCancelEditingKeyEvent(evt: Event): boolean;\n    isCancelEditingKeyEvent(evt) {\n        return (this.escapeCancelsEditing ||\n            isShiftDown(evt) ||\n            isControlDown(evt) ||\n            isMetaDown(evt));\n    }\n    /**\n     * Installs listeners for focus, change and standard key event handling.\n     */\n    // installListeners(elt: Element): void;\n    installListeners(elt) {\n        // Applies value if text is dragged\n        // LATER: Gesture mouse events ignored for starting move\n        InternalEvent.addListener(elt, 'dragstart', (evt) => {\n            this.graph.stopEditing(false);\n            InternalEvent.consume(evt);\n        });\n        // Applies value if focus is lost\n        InternalEvent.addListener(elt, 'blur', (evt) => {\n            if (this.blurEnabled) {\n                this.focusLost();\n            }\n        });\n        // Updates modified state and handles placeholder text\n        InternalEvent.addListener(elt, 'keydown', (evt) => {\n            if (!isConsumed(evt)) {\n                if (this.isStopEditingEvent(evt)) {\n                    this.graph.stopEditing(false);\n                    InternalEvent.consume(evt);\n                }\n                else if (evt.keyCode === 27 /* Escape */) {\n                    this.graph.stopEditing(this.isCancelEditingKeyEvent(evt));\n                    InternalEvent.consume(evt);\n                }\n            }\n        });\n        // Keypress only fires if printable key was pressed and handles removing the empty placeholder\n        const keypressHandler = (evt) => {\n            if (this.editingCell != null) {\n                // Clears the initial empty label on the first keystroke\n                // and workaround for FF which fires keypress for delete and backspace\n                if (this.clearOnChange &&\n                    elt.innerHTML === this.getEmptyLabelText() &&\n                    (!Client.IS_FF ||\n                        (evt.keyCode !== 8 /* Backspace */ && evt.keyCode !== 46)) /* Delete */) {\n                    this.clearOnChange = false;\n                    elt.innerHTML = '';\n                }\n            }\n        };\n        InternalEvent.addListener(elt, 'keypress', keypressHandler);\n        InternalEvent.addListener(elt, 'paste', keypressHandler);\n        // Handler for updating the empty label text value after a change\n        const keyupHandler = (evt) => {\n            if (this.editingCell != null) {\n                // Uses an optional text value for sempty labels which is cleared\n                // when the first keystroke appears. This makes it easier to see\n                // that a label is being edited even if the label is empty.\n                // In Safari and FF, an empty text is represented by <BR> which isn't enough to force a valid size\n                const textarea = this.textarea;\n                if (textarea.innerHTML.length === 0 || textarea.innerHTML === '<br>') {\n                    textarea.innerHTML = this.getEmptyLabelText();\n                    this.clearOnChange = textarea.innerHTML.length > 0;\n                }\n                else {\n                    this.clearOnChange = false;\n                }\n            }\n        };\n        InternalEvent.addListener(elt, 'input', keyupHandler);\n        InternalEvent.addListener(elt, 'cut', keyupHandler);\n        InternalEvent.addListener(elt, 'paste', keyupHandler);\n        // Adds automatic resizing of the textbox while typing using input, keyup and/or DOM change events\n        const evtName = 'input';\n        const resizeHandler = (evt) => {\n            if (this.editingCell != null && this.autoSize && !isConsumed(evt)) {\n                // Asynchronous is needed for keydown and shows better results for input events overall\n                // (ie non-blocking and cases where the offsetWidth/-Height was wrong at this time)\n                if (this.resizeThread != null) {\n                    window.clearTimeout(this.resizeThread);\n                }\n                this.resizeThread = window.setTimeout(() => {\n                    this.resizeThread = null;\n                    this.resize();\n                }, 0);\n            }\n        };\n        InternalEvent.addListener(elt, evtName, resizeHandler);\n        InternalEvent.addListener(window, 'resize', resizeHandler);\n        InternalEvent.addListener(elt, 'cut', resizeHandler);\n        InternalEvent.addListener(elt, 'paste', resizeHandler);\n    }\n    /**\n     * Returns true if the given keydown event should stop cell editing. This\n     * returns true if F2 is pressed of if {@link AbstractGraph.enterStopsCellEditing} is true\n     * and enter is pressed without control or shift.\n     */\n    isStopEditingEvent(evt) {\n        return (evt.keyCode === 113 /* F2 */ ||\n            (this.graph.isEnterStopsCellEditing() &&\n                evt.keyCode === 13 /* Enter */ &&\n                !isControlDown(evt) &&\n                !isShiftDown(evt)));\n    }\n    /**\n     * Returns true if this editor is the source for the given native event.\n     */\n    isEventSource(evt) {\n        return getSource(evt) === this.textarea;\n    }\n    /**\n     * Returns {@link odified}.\n     */\n    resize() {\n        const state = this.editingCell\n            ? this.graph.getView().getState(this.editingCell)\n            : null;\n        if (!state) {\n            this.stopEditing(true);\n        }\n        else if (this.textarea != null) {\n            const isEdge = state.cell.isEdge();\n            const { scale } = this.graph.getView();\n            let m = null;\n            if (!this.autoSize || state.style.overflow === 'fill') {\n                // Specifies the bounds of the editor box\n                this.bounds = this.getEditorBounds(state);\n                this.textarea.style.width = `${Math.round(this.bounds.width / scale)}px`;\n                this.textarea.style.height = `${Math.round(this.bounds.height / scale)}px`;\n                // FIXME: Offset when scaled\n                this.textarea.style.left = `${Math.max(0, Math.round(this.bounds.x + 1))}px`;\n                this.textarea.style.top = `${Math.max(0, Math.round(this.bounds.y + 1))}px`;\n                // Installs native word wrapping and avoids word wrap for empty label placeholder\n                if (this.graph.isWrapping(state.cell) &&\n                    (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n                    this.textarea.innerHTML !== this.getEmptyLabelText()) {\n                    this.textarea.style.wordWrap = WORD_WRAP;\n                    this.textarea.style.whiteSpace = 'normal';\n                    if (state.style.overflow !== 'fill') {\n                        this.textarea.style.width = `${Math.round(this.bounds.width / scale) + this.wordWrapPadding}px`;\n                    }\n                }\n                else {\n                    this.textarea.style.whiteSpace = 'nowrap';\n                    if (state.style.overflow !== 'fill') {\n                        this.textarea.style.width = '';\n                    }\n                }\n            }\n            else {\n                const lw = state.style.labelWidth ?? null;\n                m = state.text != null && this.align == null ? state.text.margin : null;\n                if (m == null) {\n                    m = getAlignmentAsPoint(this.align ?? state.style.align ?? 'center', state.style.verticalAlign ?? 'middle');\n                }\n                if (isEdge) {\n                    this.bounds = new Rectangle(state.absoluteOffset.x, state.absoluteOffset.y, 0, 0);\n                    if (lw != null) {\n                        const tmp = (lw + 2) * scale;\n                        this.bounds.width = tmp;\n                        this.bounds.x += m.x * tmp;\n                    }\n                }\n                else {\n                    let bounds = Rectangle.fromRectangle(state);\n                    let hpos = state.style.labelPosition ?? 'center';\n                    let vpos = state.style.verticalLabelPosition ?? 'middle';\n                    bounds =\n                        state.shape != null && hpos === 'center' && vpos === 'middle'\n                            ? state.shape.getLabelBounds(bounds)\n                            : bounds;\n                    if (lw != null) {\n                        bounds.width = lw * scale;\n                    }\n                    if (!state.view.graph.cellRenderer.legacySpacing ||\n                        state.style.overflow !== 'width') {\n                        // @ts-ignore\n                        const dummy = new TextShape(); // FIXME!!!! ===================================================================================================\n                        const spacing = (state.style.spacing ?? 2) * scale;\n                        const spacingTop = ((state.style.spacingTop ?? 0) + dummy.baseSpacingTop) * scale + spacing;\n                        const spacingRight = ((state.style.spacingRight ?? 0) + dummy.baseSpacingRight) * scale +\n                            spacing;\n                        const spacingBottom = ((state.style.spacingBottom ?? 0) + dummy.baseSpacingBottom) * scale +\n                            spacing;\n                        const spacingLeft = ((state.style.spacingLeft ?? 0) + dummy.baseSpacingLeft) * scale + spacing;\n                        hpos =\n                            state.style.labelPosition != null ? state.style.labelPosition : 'center';\n                        vpos =\n                            state.style.verticalLabelPosition != null\n                                ? state.style.verticalLabelPosition\n                                : 'middle';\n                        bounds = new Rectangle(bounds.x + spacingLeft, bounds.y + spacingTop, bounds.width -\n                            (hpos === 'center' && lw == null ? spacingLeft + spacingRight : 0), bounds.height - (vpos === 'middle' ? spacingTop + spacingBottom : 0));\n                    }\n                    this.bounds = new Rectangle(bounds.x + state.absoluteOffset.x, bounds.y + state.absoluteOffset.y, bounds.width, bounds.height);\n                }\n                // Needed for word wrap inside text blocks with oversize lines to match the final result where\n                // the width of the longest line is used as the reference for text alignment in the cell\n                // TODO: Fix word wrapping preview for edge labels in helloworld.html\n                if (this.graph.isWrapping(state.cell) &&\n                    (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n                    this.textarea.innerHTML !== this.getEmptyLabelText()) {\n                    this.textarea.style.wordWrap = WORD_WRAP;\n                    this.textarea.style.whiteSpace = 'normal';\n                    // Forces automatic reflow if text is removed from an oversize label and normal word wrap\n                    const tmp = Math.round(this.bounds.width / scale) + this.wordWrapPadding;\n                    if (this.textarea.style.position !== 'relative') {\n                        this.textarea.style.width = `${tmp}px`;\n                        if (this.textarea.scrollWidth > tmp) {\n                            this.textarea.style.width = `${this.textarea.scrollWidth}px`;\n                        }\n                    }\n                    else {\n                        this.textarea.style.maxWidth = `${tmp}px`;\n                    }\n                }\n                else {\n                    // KNOWN: Trailing cursor in IE9 quirks mode is not visible\n                    this.textarea.style.whiteSpace = 'nowrap';\n                    this.textarea.style.width = '';\n                }\n                const ow = this.textarea.scrollWidth;\n                const oh = this.textarea.scrollHeight;\n                // TODO: Update CSS width and height if smaller than minResize or remove minResize\n                // if (this.minResize != null)\n                // {\n                //  ow = Math.max(ow, this.minResize.width);\n                //  oh = Math.max(oh, this.minResize.height);\n                // }\n                // LATER: Keep in visible area, add fine tuning for pixel precision\n                this.textarea.style.left = `${Math.max(0, Math.round(this.bounds.x - m.x * (this.bounds.width - 2)) + 1)}px`;\n                this.textarea.style.top = `${Math.max(0, Math.round(this.bounds.y - m.y * (this.bounds.height - 4) + (m.y === -1 ? 3 : 0)) + 1)}px`;\n            }\n            setPrefixedStyle(this.textarea.style, 'transformOrigin', '0px 0px');\n            setPrefixedStyle(this.textarea.style, 'transform', `scale(${scale},${scale})${m == null ? '' : ` translate(${m.x * 100}%,${m.y * 100}%)`}`);\n        }\n    }\n    /**\n     * Called if the textarea has lost focus.\n     */\n    focusLost() {\n        this.stopEditing(!this.graph.isInvokesStopCellEditing());\n    }\n    /**\n     * Returns the background color for the in-place editor. This implementation\n     * always returns NONE.\n     */\n    getBackgroundColor(state) {\n        return NONE;\n    }\n    /**\n     * Starts the editor for the given cell.\n     *\n     * @param cell <Cell> to start editing.\n     * @param trigger Optional mouse event that triggered the editor.\n     */\n    startEditing(cell, trigger = null) {\n        this.stopEditing(true);\n        this.align = null;\n        // Creates new textarea instance\n        if (this.textarea == null) {\n            this.init();\n        }\n        const tooltipHandler = this.graph.getPlugin('TooltipHandler');\n        tooltipHandler?.hideTooltip();\n        const state = this.graph.getView().getState(cell);\n        if (state) {\n            // Configures the style of the in-place editor\n            // Notice that the logic here is duplicated with styleUtils.getSizeForString\n            const stateStyle = state.style;\n            const size = stateStyle.fontSize ?? DEFAULT_FONTSIZE;\n            const family = stateStyle.fontFamily ?? DEFAULT_FONTFAMILY;\n            const color = stateStyle.fontColor ?? 'black';\n            const align = stateStyle.align ?? 'left';\n            const fontStyle = stateStyle.fontStyle ?? 0;\n            const bold = matchBinaryMask(fontStyle, FONT_STYLE_MASK.BOLD);\n            const italic = matchBinaryMask(fontStyle, FONT_STYLE_MASK.ITALIC);\n            const txtDecor = [];\n            matchBinaryMask(fontStyle, FONT_STYLE_MASK.UNDERLINE) && txtDecor.push('underline');\n            matchBinaryMask(fontStyle, FONT_STYLE_MASK.STRIKETHROUGH) &&\n                txtDecor.push('line-through');\n            const textarea = this.textarea; // code above ensure it is always set\n            const textareaStyle = textarea.style;\n            textareaStyle.lineHeight = ABSOLUTE_LINE_HEIGHT\n                ? `${Math.round(size * LINE_HEIGHT)}px`\n                : String(LINE_HEIGHT);\n            textareaStyle.backgroundColor = this.getBackgroundColor(state) || 'transparent';\n            textareaStyle.textDecoration = txtDecor.join(' ');\n            textareaStyle.fontWeight = bold ? 'bold' : 'normal';\n            textareaStyle.fontStyle = italic ? 'italic' : '';\n            textareaStyle.fontSize = `${Math.round(size)}px`;\n            textareaStyle.zIndex = String(this.zIndex);\n            textareaStyle.fontFamily = family;\n            textareaStyle.textAlign = align;\n            textareaStyle.outline = 'none';\n            textareaStyle.color = color;\n            let dir = (this.textDirection = stateStyle.textDirection ?? DEFAULT_TEXT_DIRECTION);\n            const stateText = state.text;\n            if (dir === 'auto') {\n                if (stateText !== null &&\n                    stateText.dialect !== 'strictHtml' &&\n                    !isNode(stateText.value)) {\n                    dir = stateText.getAutoDirection();\n                }\n            }\n            if (dir === 'ltr' || dir === 'rtl') {\n                textarea.setAttribute('dir', dir);\n            }\n            else {\n                textarea.removeAttribute('dir');\n            }\n            // Sets the initial editing value\n            textarea.innerHTML = this.getInitialValue(state, trigger) || '';\n            this.initialValue = textarea.innerHTML;\n            // Uses an optional text value for empty labels which is cleared\n            // when the first keystroke appears. This makes it easier to see\n            // that a label is being edited even if the label is empty.\n            if (textarea.innerHTML.length === 0 || textarea.innerHTML === '<br>') {\n                textarea.innerHTML = this.getEmptyLabelText();\n                this.clearOnChange = true;\n            }\n            else {\n                this.clearOnChange = textarea.innerHTML === this.getEmptyLabelText();\n            }\n            // @ts-ignore\n            this.graph.container.appendChild(textarea);\n            // Update this after firing all potential events that could update the cleanOnChange flag\n            this.editingCell = cell;\n            this.trigger = trigger;\n            this.textNode = null;\n            if (stateText !== null && this.isHideLabel(state)) {\n                this.textNode = stateText.node;\n                this.textNode.style.visibility = 'hidden';\n            }\n            // Workaround for initial offsetHeight not ready for heading in markup\n            if (this.autoSize && (state.cell.isEdge() || stateStyle.overflow !== 'fill')) {\n                window.setTimeout(() => {\n                    this.resize();\n                }, 0);\n            }\n            this.resize();\n            // Workaround for NS_ERROR_FAILURE in FF\n            try {\n                // Prefers blinking cursor over no selected text if empty\n                textarea.focus();\n                if (this.isSelectText() &&\n                    textarea.innerHTML.length > 0 &&\n                    (textarea.innerHTML !== this.getEmptyLabelText() || !this.clearOnChange)) {\n                    document.execCommand('selectAll', false);\n                }\n            }\n            catch (e) {\n                // ignore\n            }\n        }\n    }\n    /**\n     * Returns <selectText>.\n     */\n    isSelectText() {\n        return this.selectText;\n    }\n    /**\n    clearSelection() {\n      const selection = window.getSelection();\n  \n      if (selection) {\n        if (selection.empty) {\n          selection.empty();\n        } else if (selection.removeAllRanges) {\n          selection.removeAllRanges();\n        }\n      }\n    }\n  \n    /**\n     * Stops the editor and applies the value if cancel is false.\n     */\n    stopEditing(cancel = false) {\n        if (this.editingCell) {\n            if (this.textNode) {\n                this.textNode.style.visibility = 'visible';\n                this.textNode = null;\n            }\n            const state = !cancel ? this.graph.view.getState(this.editingCell) : null;\n            const textarea = this.textarea;\n            const initial = this.initialValue;\n            this.initialValue = null;\n            this.editingCell = null;\n            this.bounds = null;\n            textarea.blur();\n            clearSelection();\n            if (textarea.parentNode) {\n                textarea.parentNode.removeChild(textarea);\n            }\n            if (this.clearOnChange && textarea.innerHTML === this.getEmptyLabelText()) {\n                textarea.innerHTML = '';\n                this.clearOnChange = false;\n            }\n            if (state && (textarea.innerHTML !== initial || this.align !== null)) {\n                this.prepareTextarea();\n                const value = this.getCurrentValue(state);\n                this.graph.batchUpdate(() => {\n                    if (value !== null) {\n                        this.applyValue(state, value);\n                    }\n                    if (this.align !== null) {\n                        this.graph.setCellStyles('align', this.align, [state.cell]);\n                    }\n                });\n            }\n            this.trigger = null;\n            // Forces new instance on next edit for undo history reset\n            if (this.textarea)\n                InternalEvent.release(this.textarea);\n            this.textarea = null;\n            this.align = null;\n        }\n    }\n    /**\n     * Prepares the textarea for getting its value in <stopEditing>.\n     * This implementation removes the extra trailing linefeed in Firefox.\n     */\n    prepareTextarea() {\n        const textarea = this.textarea;\n        if (textarea.lastChild && textarea.lastChild.nodeName === 'BR') {\n            textarea.removeChild(textarea.lastChild);\n        }\n    }\n    /**\n     * Returns true if the label should be hidden while the cell is being\n     * edited.\n     */\n    isHideLabel(state = null) {\n        return true;\n    }\n    /**\n     * Returns the minimum width and height for editing the given state.\n     */\n    getMinimumSize(state) {\n        const { scale } = this.graph.getView();\n        const textarea = this.textarea;\n        return new Rectangle(0, 0, state.text === null ? 30 : state.text.size * scale + 20, textarea.style.textAlign === 'left' ? 120 : 40);\n    }\n    /**\n     * Returns the {@link Rectangle} that defines the bounds of the editor.\n     */\n    getEditorBounds(state) {\n        const isEdge = state.cell.isEdge();\n        const { scale } = this.graph.getView();\n        const minSize = this.getMinimumSize(state);\n        const minWidth = minSize.width;\n        const minHeight = minSize.height;\n        let result = null;\n        if (!isEdge &&\n            state.view.graph.cellRenderer.legacySpacing &&\n            state.style.overflow === 'fill') {\n            result = state.shape.getLabelBounds(Rectangle.fromRectangle(state));\n        }\n        else {\n            // @ts-ignore\n            const dummy = new TextShape(); // FIXME!!!! ===================================================================================================\n            const spacing = (state.style.spacing ?? 0) * scale;\n            const spacingTop = ((state.style.spacingTop ?? 0) + dummy.baseSpacingTop) * scale + spacing;\n            const spacingRight = ((state.style.spacingRight ?? 0) + dummy.baseSpacingRight) * scale + spacing;\n            const spacingBottom = ((state.style.spacingBottom ?? 0) + dummy.baseSpacingBottom) * scale + spacing;\n            const spacingLeft = ((state.style.spacingLeft ?? 0) + dummy.baseSpacingLeft) * scale + spacing;\n            result = new Rectangle(state.x, state.y, Math.max(minWidth, state.width - spacingLeft - spacingRight), Math.max(minHeight, state.height - spacingTop - spacingBottom));\n            const hpos = state.style.labelPosition != null ? state.style.labelPosition : 'center';\n            const vpos = state.style.verticalLabelPosition != null\n                ? state.style.verticalLabelPosition\n                : 'middle';\n            result =\n                state.shape != null && hpos === 'center' && vpos === 'middle'\n                    ? state.shape.getLabelBounds(result)\n                    : result;\n            if (isEdge) {\n                result.x = state.absoluteOffset.x;\n                result.y = state.absoluteOffset.y;\n                if (state.text != null && state.text.boundingBox != null) {\n                    // Workaround for label containing just spaces in which case\n                    // the bounding box location contains negative numbers\n                    if (state.text.boundingBox.x > 0) {\n                        result.x = state.text.boundingBox.x;\n                    }\n                    if (state.text.boundingBox.y > 0) {\n                        result.y = state.text.boundingBox.y;\n                    }\n                }\n            }\n            else if (state.text != null && state.text.boundingBox != null) {\n                result.x = Math.min(result.x, state.text.boundingBox.x);\n                result.y = Math.min(result.y, state.text.boundingBox.y);\n            }\n            result.x += spacingLeft;\n            result.y += spacingTop;\n            if (state.text != null && state.text.boundingBox != null) {\n                if (!isEdge) {\n                    result.width = Math.max(result.width, state.text.boundingBox.width);\n                    result.height = Math.max(result.height, state.text.boundingBox.height);\n                }\n                else {\n                    result.width = Math.max(minWidth, state.text.boundingBox.width);\n                    result.height = Math.max(minHeight, state.text.boundingBox.height);\n                }\n            }\n            // Applies the horizontal and vertical label positions\n            if (state.cell.isVertex()) {\n                const horizontal = state.style.labelPosition ?? 'center';\n                if (horizontal === 'left') {\n                    result.x -= state.width;\n                }\n                else if (horizontal === 'right') {\n                    result.x += state.width;\n                }\n                const vertical = state.style.verticalLabelPosition != null\n                    ? state.style.verticalLabelPosition\n                    : 'middle';\n                if (vertical === 'top') {\n                    result.y -= state.height;\n                }\n                else if (vertical === 'bottom') {\n                    result.y += state.height;\n                }\n            }\n        }\n        return new Rectangle(Math.round(result.x), Math.round(result.y), Math.round(result.width), Math.round(result.height));\n    }\n    /**\n     * Returns the initial label value to be used of the label of the given\n     * cell is empty. This label is displayed and cleared on the first keystroke.\n     * This implementation returns <emptyLabelText>.\n     *\n     * @param cell <Cell> for which a text for an empty editing box should be\n     * returned.\n     */\n    getEmptyLabelText(cell = null) {\n        return this.emptyLabelText ?? '';\n    }\n    /**\n     * Returns the cell that is currently being edited or null if no cell is\n     * being edited.\n     */\n    getEditingCell() {\n        return this.editingCell;\n    }\n    /**\n     * Destroys the editor and removes all associated resources.\n     */\n    onDestroy() {\n        if (this.textarea) {\n            InternalEvent.release(this.textarea);\n            if (this.textarea.parentNode) {\n                this.textarea.parentNode.removeChild(this.textarea);\n            }\n            this.textarea = null;\n        }\n        this.graph.getDataModel().removeListener(this.changeHandler);\n        this.graph.getView().removeListener(this.zoomHandler);\n    }\n}\nCellEditorHandler.pluginId = 'CellEditorHandler';\nexport default CellEditorHandler;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalEvent from '../event/InternalEvent';\nimport { fit, getScrollOrigin } from '../../util/styleUtils';\nimport { TOOLTIP_VERTICAL_OFFSET } from '../../util/Constants';\nimport { getSource, isMouseEvent } from '../../util/EventUtils';\nimport { isNode } from '../../util/domUtils';\n/**\n * Graph event handler that displays tooltips.\n *\n * {@link AbstractGraph.getTooltip} is used to get the tooltip for a cell or handle.\n *\n * This handler is generally enabled using {@link AbstractGraph.setTooltips}.\n *\n * @category Plugin\n */\nclass TooltipHandler {\n    /**\n     * Creates the tooltip element and appends it to the document body.\n     *\n     */\n    init() {\n        if (document.body) {\n            this.div = document.createElement('div');\n            this.div.className = 'mxTooltip';\n            this.div.style.visibility = 'hidden';\n            document.body.appendChild(this.div);\n            InternalEvent.addGestureListeners(this.div, (evt) => {\n                const source = getSource(evt);\n                // @ts-ignore nodeName may exist\n                if (source && source.nodeName !== 'A') {\n                    this.hideTooltip();\n                }\n            });\n            // Hides tooltips and resets tooltip timer if mouse leaves container\n            InternalEvent.addListener(this.graph.getContainer(), 'mouseleave', (evt) => {\n                if (this.div !== evt.relatedTarget) {\n                    this.hide();\n                }\n            });\n        }\n    }\n    /**\n     * Constructs an event handler that displays tooltips.\n     *\n     * @param graph Reference to the enclosing {@link AbstractGraph}.\n     */\n    constructor(graph) {\n        /**\n         * Specifies the zIndex for the tooltip and its shadow.\n         * @default 10005\n         */\n        this.zIndex = 10005;\n        /**\n         * Delay to show the tooltip in milliseconds.\n         * @default 500\n         */\n        this.delay = 500;\n        /**\n         * Specifies if touch and pen events should be ignored.\n         * @default true\n         */\n        this.ignoreTouchEvents = true;\n        /**\n         * Specifies if the tooltip should be hidden if the mouse is moved over the current cell.\n         * @default false\n         */\n        this.hideOnHover = false;\n        /**\n         * `true` if this handler was destroyed using {@link onDestroy}.\n         */\n        this.destroyed = false;\n        this.lastX = 0;\n        this.lastY = 0;\n        this.state = null;\n        this.stateSource = false;\n        this.thread = null;\n        /**\n         * Specifies if events are handled.\n         * @default false\n         */\n        this.enabled = false;\n        this.graph = graph;\n        this.graph.addMouseListener(this);\n    }\n    /**\n     * Returns `true` if events are handled.\n     *\n     * This implementation returns {@link enabled}.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Enables or disables event handling.\n     *\n     * This implementation updates {@link enabled}.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n    }\n    /**\n     * Returns {@link hideOnHover}.\n     */\n    isHideOnHover() {\n        return this.hideOnHover;\n    }\n    /**\n     * Sets <hideOnHover>.\n     */\n    setHideOnHover(value) {\n        this.hideOnHover = value;\n    }\n    /**\n     * Returns the <CellState> to be used for showing a tooltip for this event.\n     */\n    getStateForEvent(me) {\n        return me.getState();\n    }\n    /**\n     * Handles the event by initiating a rubberband selection.\n     * By consuming the event all subsequent events of the gesture are redirected to this handler.\n     */\n    mouseDown(_sender, me) {\n        this.reset(me, false);\n        this.hideTooltip();\n    }\n    /**\n     * Handles the event by updating the rubberband selection.\n     */\n    mouseMove(_sender, me) {\n        if (me.getX() !== this.lastX || me.getY() !== this.lastY) {\n            this.reset(me, true);\n            const state = this.getStateForEvent(me);\n            if (this.isHideOnHover() ||\n                state !== this.state ||\n                (me.getSource() !== this.node &&\n                    (!this.stateSource ||\n                        (state != null &&\n                            this.stateSource ===\n                                (me.isSource(state.shape) || !me.isSource(state.text)))))) {\n                this.hideTooltip();\n            }\n        }\n        this.lastX = me.getX();\n        this.lastY = me.getY();\n    }\n    /**\n     * Handles the event by resetting the tooltip timer or hiding the existing tooltip.\n     */\n    mouseUp(_sender, me) {\n        this.reset(me, true);\n        this.hideTooltip();\n    }\n    /**\n     * Resets the timer.\n     */\n    resetTimer() {\n        if (this.thread) {\n            window.clearTimeout(this.thread);\n            this.thread = null;\n        }\n    }\n    /**\n     * Resets and/or restarts the timer to trigger the display of the tooltip.\n     */\n    reset(me, restart, state = null) {\n        if (!this.ignoreTouchEvents || isMouseEvent(me.getEvent())) {\n            this.resetTimer();\n            state = state ?? this.getStateForEvent(me);\n            if (restart &&\n                this.isEnabled() &&\n                state &&\n                (!this.div || this.div.style.visibility == 'hidden')) {\n                const node = me.getSource();\n                const x = me.getX();\n                const y = me.getY();\n                const stateSource = me.isSource(state.shape) || me.isSource(state.text);\n                const popupMenuHandler = this.graph.getPlugin('PopupMenuHandler');\n                this.thread = window.setTimeout(() => {\n                    if (state &&\n                        node &&\n                        !this.graph.isEditing() &&\n                        popupMenuHandler &&\n                        !popupMenuHandler.isMenuShowing() &&\n                        !this.graph.isMouseDown) {\n                        // Uses information from inside event cause using the event at\n                        // this (delayed) point in time is not possible in IE as it no\n                        // longer contains the required information (member not found)\n                        const tip = this.graph.getTooltip(state, node, x, y);\n                        this.show(tip, x, y);\n                        this.state = state;\n                        this.node = node;\n                        this.stateSource = stateSource;\n                    }\n                }, this.delay);\n            }\n        }\n    }\n    /**\n     * Hides the tooltip and resets the timer.\n     */\n    hide() {\n        this.resetTimer();\n        this.hideTooltip();\n    }\n    /**\n     * Hides the tooltip.\n     */\n    hideTooltip() {\n        if (this.div) {\n            this.div.style.visibility = 'hidden';\n            this.div.innerHTML = '';\n        }\n    }\n    /**\n     * Shows the tooltip for the specified cell and optional index at the\n     * specified location (with a vertical offset of 10 pixels).\n     */\n    show(tip, x, y) {\n        if (!this.destroyed && tip && tip !== '') {\n            const origin = getScrollOrigin();\n            if (!this.div) {\n                this.init();\n            }\n            this.div.style.zIndex = String(this.zIndex);\n            this.div.style.left = `${x + origin.x}px`;\n            this.div.style.top = `${y + TOOLTIP_VERTICAL_OFFSET + origin.y}px`;\n            if (!isNode(tip)) {\n                this.div.innerHTML = tip.replace(/\\n/g, '<br>');\n            }\n            else {\n                this.div.innerHTML = '';\n                this.div.appendChild(tip);\n            }\n            this.div.style.visibility = '';\n            fit(this.div);\n        }\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes.\n     */\n    onDestroy() {\n        if (!this.destroyed) {\n            this.resetTimer();\n            this.graph.removeMouseListener(this);\n            if (this.div) {\n                InternalEvent.release(this.div);\n            }\n            if (this.div?.parentNode) {\n                this.div.parentNode.removeChild(this.div);\n            }\n            this.destroyed = true;\n            this.div = null;\n        }\n    }\n}\nTooltipHandler.pluginId = 'TooltipHandler';\nexport default TooltipHandler;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from '../event/EventSource';\nimport Dictionary from '../../util/Dictionary';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport { sortCells } from '../../util/styleUtils';\n/**\n * An event handler that manages cell handlers and invokes their mouse event processing functions.\n *\n * ### Events\n *\n * #### InternalEvent.ADD\n *\n * Fires if a cell has been added to the selection.\n * The `state` property contains the {@link CellState} that has been added.\n *\n * #### InternalEvent.REMOVE\n *\n * Fires if a cell has been remove from the selection.\n * The `state` property contains the {@link CellState} that has been removed.\n *\n * @category Plugin\n */\nclass SelectionCellsHandler extends EventSource {\n    constructor(graph) {\n        super();\n        /**\n         * Specifies if events are handled. Default is true.\n         */\n        this.enabled = true;\n        /**\n         * Defines the maximum number of handlers to paint individually. Default is 100.\n         */\n        this.maxHandlers = 100;\n        this.graph = graph;\n        this.handlers = new Dictionary();\n        this.graph.addMouseListener(this);\n        this.refreshHandler = (sender, evt) => {\n            if (this.isEnabled()) {\n                this.refresh();\n            }\n        };\n        this.graph.getSelectionModel().addListener(InternalEvent.CHANGE, this.refreshHandler);\n        this.graph.getDataModel().addListener(InternalEvent.CHANGE, this.refreshHandler);\n        this.graph.getView().addListener(InternalEvent.SCALE, this.refreshHandler);\n        this.graph.getView().addListener(InternalEvent.TRANSLATE, this.refreshHandler);\n        this.graph\n            .getView()\n            .addListener(InternalEvent.SCALE_AND_TRANSLATE, this.refreshHandler);\n        this.graph.getView().addListener(InternalEvent.DOWN, this.refreshHandler);\n        this.graph.getView().addListener(InternalEvent.UP, this.refreshHandler);\n    }\n    /**\n     * Returns <enabled>.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Sets <enabled>.\n     */\n    setEnabled(value) {\n        this.enabled = value;\n    }\n    /**\n     * Returns the handler for the given cell.\n     */\n    getHandler(cell) {\n        return this.handlers.get(cell);\n    }\n    /**\n     * Returns true if the given cell has a handler.\n     */\n    isHandled(cell) {\n        return !!this.getHandler(cell);\n    }\n    /**\n     * Resets all handlers.\n     */\n    reset() {\n        this.handlers.visit((key, handler) => {\n            handler.reset.apply(handler);\n        });\n    }\n    /**\n     * Reloads or updates all handlers.\n     */\n    getHandledSelectionCells() {\n        return this.graph.getSelectionCells();\n    }\n    /**\n     * Reloads or updates all handlers.\n     */\n    refresh() {\n        // Removes all existing handlers\n        const oldHandlers = this.handlers;\n        this.handlers = new Dictionary();\n        // Creates handles for all selection cells\n        const tmp = sortCells(this.getHandledSelectionCells(), false);\n        // Destroys or updates old handlers\n        for (let i = 0; i < tmp.length; i += 1) {\n            const state = this.graph.view.getState(tmp[i]);\n            if (state) {\n                let handler = oldHandlers.remove(tmp[i]);\n                if (handler) {\n                    if (handler.state !== state) {\n                        handler.onDestroy();\n                        handler = null;\n                    }\n                    else if (!this.isHandlerActive(handler)) {\n                        // @ts-ignore refresh may exist\n                        if (handler.refresh)\n                            handler.refresh();\n                        handler.redraw();\n                    }\n                }\n                if (handler) {\n                    this.handlers.put(tmp[i], handler);\n                }\n            }\n        }\n        // Destroys unused handlers\n        oldHandlers.visit((key, handler) => {\n            this.fireEvent(new EventObject(InternalEvent.REMOVE, { state: handler.state }));\n            handler.onDestroy();\n        });\n        // Creates new handlers and updates parent highlight on existing handlers\n        for (let i = 0; i < tmp.length; i += 1) {\n            const state = this.graph.view.getState(tmp[i]);\n            if (state) {\n                let handler = this.handlers.get(tmp[i]);\n                if (!handler) {\n                    handler = this.graph.createHandler(state);\n                    this.fireEvent(new EventObject(InternalEvent.ADD, { state }));\n                    this.handlers.put(tmp[i], handler);\n                }\n                else {\n                    handler.updateParentHighlight();\n                }\n            }\n        }\n    }\n    /**\n     * Returns true if the given handler is active and should not be redrawn.\n     */\n    isHandlerActive(handler) {\n        return handler.index !== null;\n    }\n    /**\n     * Updates the handler for the given shape if one exists.\n     */\n    updateHandler(state) {\n        let handler = this.handlers.remove(state.cell);\n        if (handler) {\n            // Transfers the current state to the new handler\n            const { index } = handler;\n            const x = handler.startX;\n            const y = handler.startY;\n            handler.onDestroy();\n            handler = this.graph.createHandler(state);\n            if (handler) {\n                this.handlers.put(state.cell, handler);\n                if (index !== null) {\n                    handler.start(x, y, index);\n                }\n            }\n        }\n    }\n    /**\n     * Redirects the given event to the handlers.\n     */\n    mouseDown(sender, me) {\n        if (this.graph.isEnabled() && this.isEnabled()) {\n            this.handlers.visit((key, handler) => {\n                handler.mouseDown(sender, me);\n            });\n        }\n    }\n    /**\n     * Redirects the given event to the handlers.\n     */\n    mouseMove(sender, me) {\n        if (this.graph.isEnabled() && this.isEnabled()) {\n            this.handlers.visit((key, handler) => {\n                handler.mouseMove(sender, me);\n            });\n        }\n    }\n    /**\n     * Redirects the given event to the handlers.\n     */\n    mouseUp(sender, me) {\n        if (this.graph.isEnabled() && this.isEnabled()) {\n            this.handlers.visit((key, handler) => {\n                handler.mouseUp(sender, me);\n            });\n        }\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes.\n     */\n    onDestroy() {\n        this.graph.removeMouseListener(this);\n        this.graph.removeListener(this.refreshHandler);\n        this.graph.getDataModel().removeListener(this.refreshHandler);\n        this.graph.getView().removeListener(this.refreshHandler);\n    }\n}\nSelectionCellsHandler.pluginId = 'SelectionCellsHandler';\nexport default SelectionCellsHandler;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from '../view/event/EventSource';\nimport { fit, getDocumentScrollOrigin } from '../util/styleUtils';\nimport EventObject from '../view/event/EventObject';\nimport Client from '../Client';\nimport InternalEvent from '../view/event/InternalEvent';\nimport { write } from '../util/domUtils';\nimport { isLeftMouseButton } from '../util/EventUtils';\n/**\n * Basic popup menu.\n *\n * To add a vertical scrollbar to a given submenu, the following code can be used:\n *\n * ```javascript\n * const popupMenu = new MaxPopupMenu(...);\n * const popupMenuShowMenu = popupMenu.showMenu;\n * popupMenu.showMenu = function() {\n *   popupMenuShowMenu.apply(this, []);\n *\n *   this.div.style.overflowY = 'auto';\n *   this.div.style.overflowX = 'hidden';\n *   this.div.style.maxHeight = '160px';\n * };\n * ```\n *\n * ### `InternalEvent.SHOW`\n *\n * Fires after the menu has been shown in {@link popup}.\n *\n * @category GUI\n */\nclass MaxPopupMenu extends EventSource {\n    constructor(factoryMethod) {\n        super();\n        this.activeRow = null;\n        this.eventReceiver = null;\n        /**\n         * URL of the image to be used for the submenu icon.\n         */\n        this.submenuImage = `${Client.imageBasePath}/submenu.gif`;\n        /**\n         * Specifies the zIndex for the popupmenu and its shadow. Default is 1006.\n         */\n        this.zIndex = 10006;\n        /**\n         * Specifies if popupmenus should be activated by clicking the left mouse\n         * button. Default is false.\n         */\n        this.useLeftButtonForPopup = false;\n        /**\n         * Specifies if events are handled. Default is true.\n         */\n        this.enabled = true;\n        /**\n         * Contains the number of times <addItem> has been called for a new menu.\n         */\n        this.itemCount = 0;\n        /**\n         * Specifies if submenus should be expanded on mouseover. Default is false.\n         */\n        this.autoExpand = false;\n        /**\n         * Specifies if separators should only be added if a menu item follows them.\n         * Default is false.\n         */\n        this.smartSeparators = false;\n        /**\n         * Specifies if any labels should be visible. Default is true.\n         */\n        this.labels = true;\n        this.willAddSeparator = false;\n        this.containsItems = false;\n        if (factoryMethod) {\n            this.factoryMethod = factoryMethod;\n        }\n        // Adds the inner table\n        this.table = document.createElement('table');\n        this.table.className = 'mxPopupMenu';\n        this.tbody = document.createElement('tbody');\n        this.table.appendChild(this.tbody);\n        // Adds the outer div\n        this.div = document.createElement('div');\n        this.div.className = 'mxPopupMenu';\n        this.div.style.display = 'inline';\n        this.div.style.zIndex = String(this.zIndex);\n        this.div.appendChild(this.table);\n        // Disables the context menu on the outer div\n        InternalEvent.disableContextMenu(this.div);\n    }\n    /**\n     * Returns true if events are handled. This implementation\n     * returns <enabled>.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Enables or disables event handling. This implementation\n     * updates <enabled>.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n    }\n    /**\n     * Returns true if the given event is a popupmenu trigger for the optional\n     * given cell.\n     *\n     * @param me {@link MouseEvent} that represents the mouse event.\n     */\n    isPopupTrigger(me) {\n        return (me.isPopupTrigger() ||\n            (this.useLeftButtonForPopup && isLeftMouseButton(me.getEvent())));\n    }\n    /**\n     * Adds the given item to the given parent item. If no parent item is specified\n     * then the item is added to the top-level menu. The return value may be used\n     * as the parent argument, ie. as a submenu item. The return value is the table\n     * row that represents the item.\n     *\n     * Paramters:\n     *\n     * title - String that represents the title of the menu item.\n     * image - Optional URL for the image icon.\n     * funct - Function associated that takes a mouseup or touchend event.\n     * parent - Optional item returned by <addItem>.\n     * iconCls - Optional string that represents the CSS class for the image icon.\n     * IconsCls is ignored if image is given.\n     * enabled - Optional boolean indicating if the item is enabled. Default is true.\n     * active - Optional boolean indicating if the menu should implement any event handling.\n     * Default is true.\n     * noHover - Optional boolean to disable hover state.\n     */\n    addItem(title, image, funct, parent = null, iconCls = null, enabled = true, active = true, noHover = false) {\n        parent = (parent ?? this);\n        this.itemCount++;\n        // Smart separators only added if element contains items\n        if (parent.willAddSeparator) {\n            if (parent.containsItems) {\n                this.addSeparator(parent, true);\n            }\n            parent.willAddSeparator = false;\n        }\n        parent.containsItems = true;\n        const tr = document.createElement('tr');\n        tr.className = 'mxPopupMenuItem';\n        const col1 = document.createElement('td');\n        col1.className = 'mxPopupMenuIcon';\n        // Adds the given image into the first column\n        if (image) {\n            const img = document.createElement('img');\n            img.src = image;\n            col1.appendChild(img);\n        }\n        else if (iconCls) {\n            const div = document.createElement('div');\n            div.className = iconCls;\n            col1.appendChild(div);\n        }\n        tr.appendChild(col1);\n        if (this.labels) {\n            const col2 = document.createElement('td');\n            col2.className = `mxPopupMenuItem${!enabled ? ' mxDisabled' : ''}`;\n            write(col2, title);\n            col2.align = 'left';\n            tr.appendChild(col2);\n            const col3 = document.createElement('td');\n            col3.className = `mxPopupMenuItem${!enabled ? ' mxDisabled' : ''}`;\n            col3.style.paddingRight = '6px';\n            col3.style.textAlign = 'right';\n            tr.appendChild(col3);\n            if (parent.div == null) {\n                this.createSubmenu(parent);\n            }\n        }\n        parent.tbody?.appendChild(tr);\n        if (active && enabled) {\n            InternalEvent.addGestureListeners(tr, (evt) => {\n                this.eventReceiver = tr;\n                if (parent && parent.activeRow != tr && parent.activeRow != parent) {\n                    if (parent.activeRow && parent.activeRow.div.parentNode) {\n                        this.hideSubmenu(parent);\n                    }\n                    if (tr.div) {\n                        this.showSubmenu(parent, tr);\n                        parent.activeRow = tr;\n                    }\n                }\n                InternalEvent.consume(evt);\n            }, (_evt) => {\n                if (parent && parent.activeRow != tr && parent.activeRow != parent) {\n                    if (parent.activeRow && parent.activeRow.div.parentNode) {\n                        this.hideSubmenu(parent);\n                    }\n                    if (this.autoExpand && tr.div) {\n                        this.showSubmenu(parent, tr);\n                        parent.activeRow = tr;\n                    }\n                }\n                // Sets hover style because TR in IE doesn't have hover\n                if (!noHover) {\n                    tr.className = 'mxPopupMenuItemHover';\n                }\n            }, (evt) => {\n                // EventReceiver avoids clicks on a submenu item\n                // which has just been shown in the mousedown\n                if (this.eventReceiver == tr) {\n                    if (parent && parent.activeRow != tr) {\n                        this.hideMenu();\n                    }\n                    funct?.(evt);\n                }\n                this.eventReceiver = null;\n                InternalEvent.consume(evt);\n            });\n            // Resets hover style because TR in IE doesn't have hover\n            if (!noHover) {\n                InternalEvent.addListener(tr, 'mouseout', (_evt) => {\n                    tr.className = 'mxPopupMenuItem';\n                });\n            }\n        }\n        return tr;\n    }\n    /**\n     * Adds a checkmark to the given menuitem.\n     */\n    addCheckmark(item, img) {\n        if (item.firstChild) {\n            const td = item.firstChild.nextSibling;\n            td.style.backgroundImage = `url('${img}')`;\n            td.style.backgroundRepeat = 'no-repeat';\n            td.style.backgroundPosition = '2px 50%';\n        }\n    }\n    /**\n     * Creates the nodes required to add submenu items inside the given parent\n     * item. This is called in <addItem> if a parent item is used for the first\n     * time. This adds various DOM nodes and a <submenuImage> to the parent.\n     *\n     * @param parent An item returned by <addItem>.\n     */\n    createSubmenu(parent) {\n        parent.table = document.createElement('table');\n        parent.table.className = 'mxPopupMenu';\n        parent.tbody = document.createElement('tbody');\n        parent.table.appendChild(parent.tbody);\n        parent.div = document.createElement('div');\n        parent.div.className = 'mxPopupMenu';\n        parent.div.style.position = 'absolute';\n        parent.div.style.display = 'inline';\n        parent.div.style.zIndex = String(this.zIndex);\n        parent.div.appendChild(parent.table);\n        const img = document.createElement('img');\n        img.setAttribute('src', this.submenuImage);\n        // Last column of the submenu item in the parent menu\n        if (parent.firstChild?.nextSibling?.nextSibling) {\n            const td = parent.firstChild.nextSibling.nextSibling;\n            td.appendChild(img);\n        }\n    }\n    /**\n     * Shows the submenu inside the given parent row.\n     */\n    showSubmenu(parent, row) {\n        if (row.div) {\n            row.div.style.left = `${parent.div.offsetLeft + row.offsetLeft + row.offsetWidth - 1}px`;\n            row.div.style.top = `${parent.div.offsetTop + row.offsetTop}px`;\n            document.body.appendChild(row.div);\n            // Moves the submenu to the left side if there is no space\n            const left = row.div.offsetLeft;\n            const width = row.div.offsetWidth;\n            const offset = getDocumentScrollOrigin(document);\n            const b = document.body;\n            const d = document.documentElement;\n            const right = offset.x + (b.clientWidth || d.clientWidth);\n            if (left + width > right) {\n                row.div.style.left = `${Math.max(0, parent.div.offsetLeft - width - 6)}px`;\n            }\n            fit(row.div);\n        }\n    }\n    /**\n     * Adds a horizontal separator in the given parent item or the top-level menu\n     * if no parent is specified.\n     *\n     * @param parent Optional item returned by <addItem>.\n     * @param force Optional boolean to ignore <smartSeparators>. Default is false.\n     */\n    addSeparator(parent = null, force = false) {\n        // Defaults to this instance if no parent (submenu) specified, but\n        // all the necessary DOM elements are present as in PopupMenuItem\n        parent = (parent || this);\n        if (this.smartSeparators && !force) {\n            parent.willAddSeparator = true;\n        }\n        else if (parent.tbody) {\n            parent.willAddSeparator = false;\n            const tr = document.createElement('tr');\n            const col1 = document.createElement('td');\n            col1.className = 'mxPopupMenuIcon';\n            col1.style.padding = '0 0 0 0px';\n            tr.appendChild(col1);\n            const col2 = document.createElement('td');\n            col2.style.padding = '0 0 0 0px';\n            col2.setAttribute('colSpan', '2');\n            const hr = document.createElement('hr');\n            hr.setAttribute('size', '1');\n            col2.appendChild(hr);\n            tr.appendChild(col2);\n            parent.tbody.appendChild(tr);\n        }\n    }\n    /**\n     * Shows the popup menu for the given event and cell.\n     *\n     * Example:\n     *\n     * ```javascript\n     * graph.getPlugin('PanningHandler').popup(x, y, cell, evt)\n     * {\n     *   mxUtils.alert('Hello, World!');\n     * }\n     * ```\n     */\n    popup(x, y, cell, evt) {\n        if (this.div && this.tbody && this.factoryMethod) {\n            this.div.style.left = `${x}px`;\n            this.div.style.top = `${y}px`;\n            // Removes all child nodes from the existing menu\n            while (this.tbody.firstChild) {\n                InternalEvent.release(this.tbody.firstChild);\n                this.tbody.removeChild(this.tbody.firstChild);\n            }\n            this.itemCount = 0;\n            this.factoryMethod(this, cell, evt);\n            if (this.itemCount > 0) {\n                this.showMenu();\n                this.fireEvent(new EventObject(InternalEvent.SHOW));\n            }\n        }\n    }\n    /**\n     * Returns true if the menu is showing.\n     */\n    isMenuShowing() {\n        return this.div && this.div.parentNode == document.body;\n    }\n    /**\n     * Shows the menu.\n     */\n    showMenu() {\n        // Fits the div inside the viewport\n        document.body.appendChild(this.div);\n        fit(this.div);\n    }\n    /**\n     * Removes the menu and all submenus.\n     */\n    hideMenu() {\n        if (this.div) {\n            this.div.parentNode?.removeChild(this.div);\n            this.hideSubmenu(this);\n            this.containsItems = false;\n            this.fireEvent(new EventObject(InternalEvent.HIDE));\n        }\n    }\n    /**\n     * Removes all submenus inside the given parent.\n     *\n     * @param parent An item returned by <addItem>.\n     */\n    hideSubmenu(parent) {\n        if (parent.activeRow) {\n            this.hideSubmenu(parent.activeRow);\n            parent.activeRow.div.parentNode?.removeChild(parent.activeRow.div);\n            parent.activeRow = null;\n        }\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes.\n     */\n    destroy() {\n        if (this.div) {\n            InternalEvent.release(this.div);\n            this.div.parentNode?.removeChild(this.div);\n        }\n    }\n}\nexport default MaxPopupMenu;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport MaxPopupMenu from '../../gui/MaxPopupMenu';\nimport InternalEvent from '../event/InternalEvent';\nimport { getScrollOrigin } from '../../util/styleUtils';\nimport { getMainEvent, isMultiTouchEvent } from '../../util/EventUtils';\n/**\n * Event handler that creates popupmenus.\n *\n * Relates to {@link MaxPopupMenu}.\n *\n * @category Plugin\n */\nclass PopupMenuHandler extends MaxPopupMenu {\n    constructor(graph) {\n        super();\n        this.inTolerance = false;\n        this.popupTrigger = false;\n        /**\n         * Specifies if cells should be selected if a popupmenu is displayed for\n         * them. Default is true.\n         */\n        this.selectOnPopup = true;\n        /**\n         * Specifies if cells should be deselected if a popupmenu is displayed for\n         * the diagram background. Default is true.\n         */\n        this.clearSelectionOnBackground = true;\n        /**\n         * X-coordinate of the mouse down event.\n         */\n        this.triggerX = null;\n        /**\n         * Y-coordinate of the mouse down event.\n         */\n        this.triggerY = null;\n        /**\n         * Screen X-coordinate of the mouse down event.\n         */\n        this.screenX = null;\n        /**\n         * Screen Y-coordinate of the mouse down event.\n         */\n        this.screenY = null;\n        this.graph = graph;\n        this.graph.addMouseListener(this);\n        // Does not show menu if any touch gestures take place after the trigger\n        this.gestureHandler = (sender, eo) => {\n            this.inTolerance = false;\n        };\n        this.graph.addListener(InternalEvent.GESTURE, this.gestureHandler);\n        this.init();\n    }\n    /**\n     * Initializes the shapes required for this vertex handler.\n     */\n    init() {\n        // Hides the tooltip if the mouse is over the context menu\n        InternalEvent.addGestureListeners(this.div, (evt) => {\n            const tooltipHandler = this.graph.getPlugin('TooltipHandler');\n            tooltipHandler?.hide();\n        });\n    }\n    /**\n     * Hook for returning if a cell should be selected for a given {@link MouseEvent}.\n     * This implementation returns <selectOnPopup>.\n     */\n    isSelectOnPopup(me) {\n        return this.selectOnPopup;\n    }\n    /**\n     * Handles the event by initiating the panning. By consuming the event all\n     * subsequent events of the gesture are redirected to this handler.\n     */\n    mouseDown(sender, me) {\n        if (this.isEnabled() && !isMultiTouchEvent(me.getEvent())) {\n            // Hides the popupmenu if is is being displayed\n            this.hideMenu();\n            this.triggerX = me.getGraphX();\n            this.triggerY = me.getGraphY();\n            this.screenX = getMainEvent(me.getEvent()).screenX;\n            this.screenY = getMainEvent(me.getEvent()).screenY;\n            this.popupTrigger = this.isPopupTrigger(me);\n            this.inTolerance = true;\n        }\n    }\n    /**\n     * Handles the event by updating the panning on the graph.\n     */\n    mouseMove(sender, me) {\n        // Popup trigger may change on mouseUp so ignore it\n        if (this.inTolerance && this.screenX != null && this.screenY != null) {\n            if (Math.abs(getMainEvent(me.getEvent()).screenX - this.screenX) >\n                this.graph.getEventTolerance() ||\n                Math.abs(getMainEvent(me.getEvent()).screenY - this.screenY) >\n                    this.graph.getEventTolerance()) {\n                this.inTolerance = false;\n            }\n        }\n    }\n    /**\n     * Handles the event by setting the translation on the view or showing the\n     * popupmenu.\n     */\n    mouseUp(sender, me) {\n        if (this.popupTrigger &&\n            this.inTolerance &&\n            this.triggerX != null &&\n            this.triggerY != null) {\n            const cell = this.getCellForPopupEvent(me);\n            // Selects the cell for which the context menu is being displayed\n            if (this.graph.isEnabled() &&\n                this.isSelectOnPopup(me) &&\n                cell != null &&\n                !this.graph.isCellSelected(cell)) {\n                this.graph.setSelectionCell(cell);\n            }\n            else if (this.clearSelectionOnBackground && cell == null) {\n                this.graph.clearSelection();\n            }\n            // Hides the tooltip if there is one\n            const tooltipHandler = this.graph.getPlugin('TooltipHandler');\n            tooltipHandler?.hide();\n            // Menu is shifted by 1 pixel so that the mouse up event\n            // is routed via the underlying shape instead of the DIV\n            const origin = getScrollOrigin();\n            this.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());\n            me.consume();\n        }\n        this.popupTrigger = false;\n        this.inTolerance = false;\n    }\n    /**\n     * Hook to return the cell for the mouse up popup trigger handling.\n     */\n    getCellForPopupEvent(me) {\n        return me.getCell();\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes.\n     */\n    onDestroy() {\n        this.graph.removeMouseListener(this);\n        this.graph.removeListener(this.gestureHandler);\n        // Supercall\n        super.destroy();\n    }\n}\nPopupMenuHandler.pluginId = 'PopupMenuHandler';\nexport default PopupMenuHandler;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2016, JGraph Ltd\nCopyright (c) 2006-2016, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Geometry from '../geometry/Geometry';\nimport Cell from '../cell/Cell';\nimport Point from '../geometry/Point';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport { DEFAULT_HOTSPOT, DEFAULT_INVALID_COLOR, DEFAULT_VALID_COLOR, HIGHLIGHT_STROKEWIDTH, INVALID_COLOR, NONE, OUTLINE_HIGHLIGHT_COLOR, OUTLINE_HIGHLIGHT_STROKEWIDTH, TOOLTIP_VERTICAL_OFFSET, VALID_COLOR, } from '../../util/Constants';\nimport { getRotatedPoint, toRadians } from '../../util/mathUtils';\nimport { convertPoint, getOffset } from '../../util/styleUtils';\nimport InternalMouseEvent from '../event/InternalMouseEvent';\nimport ImageShape from '../shape/node/ImageShape';\nimport CellMarker from '../cell/CellMarker';\nimport ConstraintHandler from '../handler/ConstraintHandler';\nimport PolylineShape from '../shape/edge/PolylineShape';\nimport EventSource from '../event/EventSource';\nimport Rectangle from '../geometry/Rectangle';\nimport { GlobalConfig } from '../../util/config';\nimport { getClientX, getClientY, isAltDown, isConsumed, isShiftDown, } from '../../util/EventUtils';\n/**\n * Graph event handler that creates new connections.\n * Uses {@link CellMarker} for finding and highlighting the source and target vertices and {@link factoryMethod} to create the edge instance.\n *\n * This handler is enabled using {@link AbstractGraph.setConnectable}.\n *\n * Example:\n *\n * ```javascript\n * new ConnectionHandler(graph, (source, target, style)=>\n * {\n *   edge = new Cell('', new Geometry());\n *   edge.setEdge(true);\n *   edge.setStyle(style);\n *   edge.geometry.relative = true;\n *   return edge;\n * });\n * ```\n *\n * Here is an alternative solution that just sets a specific user object for new edges by overriding {@link insertEdge}.\n *\n * ```javascript\n * originalConnectionHandlerInsertEdge = connectionHandler.insertEdge;\n * connectionHandler.insertEdge = (parent, id, value, source, target, style) => {\n *   value = 'Test';\n *   return originalConnectionHandlerInsertEdge.apply(this, arguments);\n * };\n * ```\n *\n * ### Using images to trigger connections\n *\n * This handler uses {@link CellMarker} to find the source and target cell for\n * the new connection and creates a new edge using {@link connect}. The new edge is\n * created using {@link createEdge} which in turn uses {@link factoryMethod} or creates a\n * new default edge.\n *\n * The handler uses a \"highlight-paradigm\" for indicating if a cell is being\n * used as a source or target terminal, as seen in other diagramming products.\n * In order to allow both, moving and connecting cells at the same time,\n * {@link DEFAULT_HOTSPOT} is used in the handler to determine the hotspot\n * of a cell, that is, the region of the cell which is used to trigger a new\n * connection. The constant is a value between 0 and 1 that specifies the\n * amount of the width and height around the center to be used for the hotspot\n * of a cell and its default value is 0.5. In addition,\n * {@link MIN_HOTSPOT_SIZE} defines the minimum number of pixels for the\n * width and height of the hotspot.\n *\n * This solution, while standards compliant, may be somewhat confusing because\n * there is no visual indicator for the hotspot and the highlight is seen to\n * switch on and off while the mouse is being moved in and out. Furthermore,\n * this paradigm does not allow to create different connections depending on\n * the highlighted hotspot as there is only one hotspot per cell, and it\n * normally does not allow cells to be moved and connected at the same time as\n * there is no clear indication of the connectable area of the cell.\n *\n * To come across these issues, the handle has an additional {@link createIcons} hook\n * with a default implementation that allows to create one icon to be used to\n * trigger new connections. If this icon is specified, then new connections can\n * only be created if the image is clicked while the cell is being highlighted.\n * The {@link createIcons} hook may be overridden to create more than one\n * {@link ImageShape} for creating new connections, but the default implementation\n * supports one image and is used as follows:\n *\n * In order to display the \"connect image\" whenever the mouse is over the cell, an DEFAULT_HOTSPOT of 1 should be used:\n *\n * ```javascript\n * mxConstants.DEFAULT_HOTSPOT = 1;\n * ```\n *\n * In order to avoid confusion with the highlighting, the highlight color should not be used with a connect image:\n *\n * ```javascript\n * mxConstants.HIGHLIGHT_COLOR = null;\n * ```\n *\n * To install the image, the connectImage field of the ConnectionHandler must be assigned a new {@link Image} instance:\n *\n * ```javascript\n * connectImage = new ImageBox('images/green-dot.gif', 14, 14);\n * ```\n *\n * This will use the green-dot.gif with a width and height of 14 pixels as the\n * image to trigger new connections. In createIcons the icon field of the\n * handler will be set in order to remember the icon that has been clicked for\n * creating the new connection. This field will be available under selectedIcon\n * in the connect method, which may be overridden to take the icon that\n * triggered the new connection into account. This is useful if more than one\n * icon may be used to create a connection.\n *\n * ### Events\n *\n * #### InternalEvent.START\n *\n * Fires when a new connection is being created by the user. The `state`\n * property contains the state of the source cell.\n *\n * #### InternalEvent.CONNECT\n *\n * Fires between begin- and endUpdate in {@link connect}. The `cell`\n * property contains the inserted edge, the `event` and `target`\n * properties contain the respective arguments that were passed to {@link connect} (where\n * target corresponds to the dropTarget argument). Finally, the `terminal`\n * property corresponds to the target argument in {@link connect} or the clone of the source\n * terminal if {@link createTarget} is enabled.\n *\n * Note that the target is the cell under the mouse where the mouse button was released.\n * Depending on the logic in the handler, this doesn't necessarily have to be the target\n * of the inserted edge. To print the source, target or any optional ports IDs that the\n * edge is connected to, the following code can be used. To get more details about the\n * actual connection point, {@link AbstractGraph.getConnectionConstraint} can be used. To resolve\n * the port IDs, use {@link GraphDataModel.getCell}.\n *\n * ```javascript\n * graph.getPlugin('ConnectionHandler')?.addListener(mxEvent.CONNECT, (sender, evt) => {\n *   const edge = evt.getProperty('cell');\n *   const source = graph.getDataModel().getTerminal(edge, true);\n *   const target = graph.getDataModel().getTerminal(edge, false);\n *\n *   const style = graph.getCellStyle(edge);\n *   const sourcePortId = style.sourcePort;\n *   const targetPortId = style.targetPort;\n *\n *   GlobalConfig.logger.show();\n *   GlobalConfig.logger.debug('connect', edge, source.id, target.id, sourcePortId, targetPortId);\n * });\n * ```\n *\n * #### InternalEvent.RESET\n *\n * Fires when the {@link reset} method is invoked.\n *\n * @category Plugin\n */\nclass ConnectionHandler extends EventSource {\n    /**\n     * Constructs an event handler that connects vertices using the specified\n     * factory method to create the new edges.\n     *\n     * @param graph Reference to the enclosing {@link AbstractGraph}.\n     * @param factoryMethod Optional function to create the edge. The function takes\n     * the source and target {@link Cell} as the first and second argument and an\n     * optional cell style from the preview as the third argument. It returns\n     * the {@link Cell} that represents the new edge.\n     */\n    constructor(graph, factoryMethod = null) {\n        super();\n        this.previous = null;\n        this.iconState = null;\n        this.icons = [];\n        this.cell = null;\n        this.currentPoint = null;\n        this.sourceConstraint = null;\n        this.shape = null;\n        this.icon = null;\n        this.originalPoint = null;\n        this.currentState = null;\n        this.selectedIcon = null;\n        this.waypoints = [];\n        /**\n         * Function that is used for creating new edges. The function takes the\n         * source and target {@link Cell} as the first and second argument and returns\n         * a new {@link Cell} that represents the edge. This is used in {@link createEdge}.\n         */\n        this.factoryMethod = null;\n        /**\n         * Specifies if icons should be displayed inside the graph container instead\n         * of the overlay pane. This is used for HTML labels on vertices which hide\n         * the connect icon. This has precedence over {@link moveIconBack} when set\n         * to true.\n         * @default `false`\n         */\n        this.moveIconFront = false;\n        /**\n         * Specifies if icons should be moved to the back of the overlay pane. This can\n         * be set to true if the icons of the connection handler conflict with other\n         * handles, such as the vertex label move handle. Default is false.\n         */\n        this.moveIconBack = false;\n        /**\n         * {@link Image} that is used to trigger the creation of a new connection.\n         * This is used in {@link createIcons}.\n         * @default null\n         */\n        this.connectImage = null;\n        /**\n         * Specifies if the connect icon should be centered on the target state\n         * while connections are being previewed. Default is false.\n         */\n        this.targetConnectImage = false;\n        /**\n         * Specifies if events are handled. Default is false.\n         */\n        this.enabled = false;\n        /**\n         * Specifies if new edges should be selected. Default is true.\n         */\n        this.select = true;\n        /**\n         * Specifies if <createTargetVertex> should be called if no target was under the\n         * mouse for the new connection. Setting this to true means the connection\n         * will be drawn as valid if no target is under the mouse, and\n         * <createTargetVertex> will be called before the connection is created between\n         * the source cell and the newly created vertex in <createTargetVertex>, which\n         * can be overridden to create a new target. Default is false.\n         */\n        this.createTarget = false;\n        /**\n         * Holds the current validation error while connections are being created.\n         */\n        this.error = null;\n        /**\n         * Specifies if single clicks should add waypoints on the new edge. Default is\n         * false.\n         */\n        this.waypointsEnabled = false;\n        /**\n         * Specifies if the connection handler should ignore the state of the mouse\n         * button when highlighting the source. Default is false, that is, the\n         * handler only highlights the source if no button is being pressed.\n         */\n        this.ignoreMouseDown = false;\n        /**\n         * Holds the {@link Point} where the mouseDown took place while the handler is\n         * active.\n         */\n        this.first = null;\n        /**\n         * Holds the offset for connect icons during connection preview.\n         * Default is mxPoint(0, {@link Constants#TOOLTIP_VERTICAL_OFFSET}).\n         * Note that placing the icon under the mouse pointer with an\n         * offset of (0,0) will affect hit detection.\n         */\n        this.connectIconOffset = new Point(0, TOOLTIP_VERTICAL_OFFSET);\n        /**\n         * Optional <CellState> that represents the preview edge while the\n         * handler is active. This is created in <createEdgeState>.\n         */\n        this.edgeState = null;\n        /**\n         * Counts the number of mouseDown events since the start. The initial mouse\n         * down event counts as 1.\n         */\n        this.mouseDownCounter = 0;\n        /**\n         * Switch to enable moving the preview away from the mousepointer. This is required in browsers\n         * where the preview cannot be made transparent to events and if the built-in hit detection on\n         * the HTML elements in the page should be used.\n         * @default false\n         */\n        this.movePreviewAway = false;\n        /**\n         * Specifies if connections to the outline of a highlighted target should be\n         * enabled. This will allow to place the connection point along the outline of\n         * the highlighted target.\n         * @default false\n         */\n        this.outlineConnect = false;\n        /**\n         * Specifies if the actual shape of the edge state should be used for the preview.\n         * Default is false. (Ignored if no edge state is created in <createEdgeState>.)\n         */\n        this.livePreview = false;\n        /**\n         * Specifies the cursor to be used while the handler is active.\n         * @default null\n         */\n        this.cursor = null;\n        /**\n         * Defines the cursor for a connectable state.\n         * @default 'pointer'\n         * @since 0.20.0\n         */\n        this.cursorConnect = 'pointer';\n        /**\n         * Specifies if new edges should be inserted before the source vertex in the\n         * cell hierarchy. Default is false for backwards compatibility.\n         */\n        this.insertBeforeSource = false;\n        this.graph = graph;\n        this.factoryMethod = factoryMethod;\n        this.graph.addMouseListener(this);\n        this.marker = this.createMarker();\n        this.constraintHandler = new ConstraintHandler(this.graph);\n        // Redraws the icons if the graph changes\n        this.changeHandler = (sender) => {\n            if (this.iconState) {\n                this.iconState = this.graph.getView().getState(this.iconState.cell);\n            }\n            if (this.iconState) {\n                this.redrawIcons(this.icons, this.iconState);\n                this.constraintHandler.reset();\n            }\n            else if (this.previous && !this.graph.view.getState(this.previous.cell)) {\n                this.reset();\n            }\n        };\n        this.graph.getDataModel().addListener(InternalEvent.CHANGE, this.changeHandler);\n        this.graph.getView().addListener(InternalEvent.SCALE, this.changeHandler);\n        this.graph.getView().addListener(InternalEvent.TRANSLATE, this.changeHandler);\n        this.graph\n            .getView()\n            .addListener(InternalEvent.SCALE_AND_TRANSLATE, this.changeHandler);\n        // Removes the icon if we step into/up or start editing\n        this.drillHandler = (sender) => {\n            this.reset();\n        };\n        this.graph.addListener(InternalEvent.START_EDITING, this.drillHandler);\n        this.graph.getView().addListener(InternalEvent.DOWN, this.drillHandler);\n        this.graph.getView().addListener(InternalEvent.UP, this.drillHandler);\n        // Handles escape keystrokes\n        this.escapeHandler = () => {\n            this.reset();\n        };\n        this.graph.addListener(InternalEvent.ESCAPE, this.escapeHandler);\n    }\n    /**\n     * Returns true if events are handled. This implementation\n     * returns <enabled>.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Enables or disables event handling. This implementation\n     * updates <enabled>.\n     *\n     * @param enabled Boolean that specifies the new enabled state.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n    }\n    /**\n     * Returns <insertBeforeSource> for non-loops and false for loops.\n     *\n     * @param edge <Cell> that represents the edge to be inserted.\n     * @param source <Cell> that represents the source terminal.\n     * @param target <Cell> that represents the target terminal.\n     * @param evt Mousedown event of the connect gesture.\n     * @param dropTarget <Cell> that represents the cell under the mouse when it was\n     * released.\n     */\n    isInsertBefore(edge, source, target, evt, dropTarget) {\n        return this.insertBeforeSource && source !== target;\n    }\n    /**\n     * Returns <createTarget>.\n     *\n     * @param evt Current active native pointer event.\n     */\n    isCreateTarget(evt) {\n        return this.createTarget;\n    }\n    /**\n     * Sets <createTarget>.\n     */\n    setCreateTarget(value) {\n        this.createTarget = value;\n    }\n    /**\n     * Creates the preview shape for new connections.\n     */\n    createShape() {\n        // Creates the edge preview\n        const shape = this.livePreview && this.edgeState\n            ? this.graph.cellRenderer.createShape(this.edgeState)\n            : new PolylineShape([], INVALID_COLOR);\n        if (shape && shape.node) {\n            shape.dialect = 'svg';\n            shape.scale = this.graph.view.scale;\n            shape.pointerEvents = false;\n            shape.isDashed = true;\n            shape.init(this.graph.getView().getOverlayPane());\n            InternalEvent.redirectMouseEvents(shape.node, this.graph, null);\n        }\n        return shape;\n    }\n    /**\n     * Returns true if the given cell is connectable. This is a hook to\n     * disable floating connections. This implementation returns true.\n     */\n    isConnectableCell(cell) {\n        return true;\n    }\n    /**\n     * Creates and returns the {@link CellMarker} used in {@link arker}.\n     */\n    createMarker() {\n        return new ConnectionHandlerCellMarker(this.graph, this);\n    }\n    /**\n     * Starts a new connection for the given state and coordinates.\n     */\n    start(state, x, y, edgeState) {\n        this.previous = state;\n        this.first = new Point(x, y);\n        this.edgeState = edgeState ?? this.createEdgeState();\n        // Marks the source state\n        this.marker.currentColor = this.marker.validColor;\n        this.marker.markedState = state;\n        this.marker.mark();\n        this.fireEvent(new EventObject(InternalEvent.START, { state: this.previous }));\n    }\n    /**\n     * Returns true if the source terminal has been clicked and a new\n     * connection is currently being previewed.\n     */\n    isConnecting() {\n        return !!this.first && !!this.shape;\n    }\n    /**\n     * Returns {@link AbstractGraph.isValidSource} for the given source terminal.\n     *\n     * @param cell <Cell> that represents the source terminal.\n     * @param me {@link MouseEvent} that is associated with this call.\n     */\n    isValidSource(cell, me) {\n        return this.graph.isValidSource(cell);\n    }\n    /**\n     * Returns true. The call to {@link AbstractGraph.isValidTarget} is implicit by calling\n     * {@link AbstractGraph.getEdgeValidationError} in <validateConnection>. This is an\n     * additional hook for disabling certain targets in this specific handler.\n     *\n     * @param cell <Cell> that represents the target terminal.\n     */\n    isValidTarget(cell) {\n        return true;\n    }\n    /**\n     * Returns the error message or an empty string if the connection for the\n     * given source target pair is not valid. Otherwise it returns null. This\n     * implementation uses {@link AbstractGraph.getEdgeValidationError}.\n     *\n     * @param source <Cell> that represents the source terminal.\n     * @param target <Cell> that represents the target terminal.\n     */\n    validateConnection(source, target) {\n        if (!this.isValidTarget(target)) {\n            return '';\n        }\n        return this.graph.getEdgeValidationError(null, source, target);\n    }\n    /**\n     * Hook to return the {@link Image} used for the connection icon of the given\n     * {@link CellState}. This implementation returns {@link connectImage}.\n     *\n     * @param state {@link CellState} whose connect image should be returned.\n     */\n    getConnectImage(state) {\n        return this.connectImage;\n    }\n    /**\n     * Returns true if the state has a HTML label in the graph's container, otherwise\n     * it returns {@link oveIconFront}.\n     *\n     * @param state <CellState> whose connect icons should be returned.\n     */\n    isMoveIconToFrontForState(state) {\n        if (state.text && state.text.node.parentNode === this.graph.container) {\n            return true;\n        }\n        return this.moveIconFront;\n    }\n    /**\n     * Creates the array {@link ImageShape}s that represent the connect icons for\n     * the given {@link CellState}.\n     *\n     * @param state {@link CellState} whose connect icons should be returned.\n     */\n    createIcons(state) {\n        const image = this.getConnectImage(state);\n        if (image) {\n            this.iconState = state;\n            const icons = [];\n            // Cannot use HTML for the connect icons because the icon receives all\n            // mouse move events in IE, must use VML and SVG instead even if the\n            // connect-icon appears behind the selection border and the selection\n            // border consumes the events before the icon gets a chance\n            const bounds = new Rectangle(0, 0, image.width, image.height);\n            const icon = new ImageShape(bounds, image.src, undefined, undefined, 0);\n            icon.preserveImageAspect = false;\n            if (this.isMoveIconToFrontForState(state)) {\n                icon.dialect = 'strictHtml';\n                icon.init(this.graph.container);\n            }\n            else {\n                icon.dialect = 'svg';\n                icon.init(this.graph.getView().getOverlayPane());\n                // Move the icon back in the overlay pane\n                if (this.moveIconBack && icon.node.parentNode && icon.node.previousSibling) {\n                    icon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n                }\n            }\n            icon.node.style.cursor = this.cursorConnect;\n            // Events transparency\n            const getState = () => {\n                return this.currentState ?? state;\n            };\n            // Updates the local icon before firing the mouse down event.\n            const mouseDown = (evt) => {\n                if (!isConsumed(evt)) {\n                    this.icon = icon;\n                    this.graph.fireMouseEvent(InternalEvent.MOUSE_DOWN, new InternalMouseEvent(evt, getState()));\n                }\n            };\n            InternalEvent.redirectMouseEvents(icon.node, this.graph, getState, mouseDown);\n            icons.push(icon);\n            this.redrawIcons(icons, this.iconState);\n            return icons;\n        }\n        return [];\n    }\n    /**\n     * Redraws the given array of {@link ImageShapes}.\n     *\n     * @param icons Array of {@link ImageShapes} to be redrawn.\n     */\n    redrawIcons(icons, state) {\n        if (icons[0] && icons[0].bounds) {\n            const pos = this.getIconPosition(icons[0], state);\n            icons[0].bounds.x = pos.x;\n            icons[0].bounds.y = pos.y;\n            icons[0].redraw();\n        }\n    }\n    // TODO: Document me! ===========================================================================================================\n    getIconPosition(icon, state) {\n        const { scale } = this.graph.getView();\n        let cx = state.getCenterX();\n        let cy = state.getCenterY();\n        if (this.graph.isSwimlane(state.cell)) {\n            const size = this.graph.getStartSize(state.cell);\n            cx = size.width !== 0 ? state.x + (size.width * scale) / 2 : cx;\n            cy = size.height !== 0 ? state.y + (size.height * scale) / 2 : cy;\n            const alpha = toRadians(state.style.rotation ?? 0);\n            if (alpha !== 0) {\n                const cos = Math.cos(alpha);\n                const sin = Math.sin(alpha);\n                const ct = new Point(state.getCenterX(), state.getCenterY());\n                const pt = getRotatedPoint(new Point(cx, cy), cos, sin, ct);\n                cx = pt.x;\n                cy = pt.y;\n            }\n        }\n        return new Point(cx - icon.bounds.width / 2, cy - icon.bounds.height / 2);\n    }\n    /**\n     * Destroys the connect icons and resets the respective state.\n     */\n    destroyIcons() {\n        for (let i = 0; i < this.icons.length; i += 1) {\n            this.icons[i].destroy();\n        }\n        this.icons = [];\n        this.icon = null;\n        this.selectedIcon = null;\n        this.iconState = null;\n    }\n    /**\n     * Returns true if the given mouse down event should start this handler. The\n     * This implementation returns true if the event does not force marquee\n     * selection, and the currentConstraint and currentFocus of the\n     * <constraintHandler> are not null, or <previous> and <error> are not null and\n     * <icons> is null or <icons> and <icon> are not null.\n     */\n    isStartEvent(me) {\n        return ((this.constraintHandler.currentFocus !== null &&\n            this.constraintHandler.currentConstraint !== null) ||\n            (this.previous !== null &&\n                this.error === null &&\n                (this.icons.length === 0 || this.icon !== null)));\n    }\n    /**\n     * Handles the event by initiating a new connection.\n     */\n    mouseDown(_sender, me) {\n        this.mouseDownCounter += 1;\n        if (this.isEnabled() &&\n            this.graph.isEnabled() &&\n            !me.isConsumed() &&\n            !this.isConnecting() &&\n            this.isStartEvent(me)) {\n            if (this.constraintHandler.currentConstraint &&\n                this.constraintHandler.currentFocus &&\n                this.constraintHandler.currentPoint) {\n                this.sourceConstraint = this.constraintHandler.currentConstraint;\n                this.previous = this.constraintHandler.currentFocus;\n                this.first = this.constraintHandler.currentPoint.clone();\n            }\n            else {\n                // Stores the location of the initial mousedown\n                this.first = new Point(me.getGraphX(), me.getGraphY());\n            }\n            this.edgeState = this.createEdgeState(me);\n            this.mouseDownCounter = 1;\n            if (this.waypointsEnabled && !this.shape) {\n                this.waypoints = [];\n                this.shape = this.createShape();\n                if (this.edgeState) {\n                    this.shape.apply(this.edgeState);\n                }\n            }\n            // Stores the starting point in the geometry of the preview\n            if (!this.previous && this.edgeState && this.edgeState.cell.geometry) {\n                const pt = this.graph.getPointForEvent(me.getEvent());\n                this.edgeState.cell.geometry.setTerminalPoint(pt, true);\n            }\n            this.fireEvent(new EventObject(InternalEvent.START, { state: this.previous }));\n            me.consume();\n        }\n        this.selectedIcon = this.icon;\n        this.icon = null;\n    }\n    /**\n     * Returns true if a tap on the given source state should immediately start\n     * connecting. This implementation returns true if the state is not movable\n     * in the graph.\n     */\n    isImmediateConnectSource(state) {\n        return !this.graph.isCellMovable(state.cell);\n    }\n    /**\n     * Hook to return an <CellState> which may be used during the preview.\n     * This implementation returns null.\n     *\n     * Use the following code to create a preview for an existing edge style:\n     *\n     * ```javascript\n     * graph.getPlugin('ConnectionHandler').createEdgeState(me)\n     * {\n     *   var edge = graph.createEdge(null, null, null, null, null, 'edgeStyle=elbowEdgeStyle');\n     *\n     *   return new CellState(this.graph.view, edge, this.graph.getCellStyle(edge));\n     * };\n     * ```\n     */\n    createEdgeState(me) {\n        return null;\n    }\n    /**\n     * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n     * or shift is pressed.\n     */\n    isOutlineConnectEvent(me) {\n        if (!this.currentPoint)\n            return false;\n        const offset = getOffset(this.graph.container);\n        const evt = me.getEvent();\n        const clientX = getClientX(evt);\n        const clientY = getClientY(evt);\n        const doc = document.documentElement;\n        const left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n        const top = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n        const gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n        const gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n        return (this.outlineConnect &&\n            !isShiftDown(me.getEvent()) &&\n            (me.isSource(this.marker.highlight.shape) ||\n                (isAltDown(me.getEvent()) && me.getState() != null) ||\n                this.marker.highlight.isHighlightAt(clientX, clientY) ||\n                ((gridX !== clientX || gridY !== clientY) &&\n                    me.getState() == null &&\n                    this.marker.highlight.isHighlightAt(gridX, gridY))));\n    }\n    /**\n     * Updates the current state for a given mouse move event by using\n     * the {@link arker}.\n     */\n    updateCurrentState(me, point) {\n        this.constraintHandler.update(me, !this.first, false, !this.first || me.isSource(this.marker.highlight.shape) ? null : point);\n        if (this.constraintHandler.currentFocus != null &&\n            this.constraintHandler.currentConstraint != null) {\n            // Handles special case where grid is large and connection point is at actual point in which\n            // case the outline is not followed as long as we're < gridSize / 2 away from that point\n            if (this.marker.highlight &&\n                this.marker.highlight.state &&\n                this.marker.highlight.state.cell === this.constraintHandler.currentFocus.cell &&\n                this.marker.highlight.shape) {\n                // Direct repaint needed if cell already highlighted\n                if (this.marker.highlight.shape.stroke !== 'transparent') {\n                    this.marker.highlight.shape.stroke = 'transparent';\n                    this.marker.highlight.repaint();\n                }\n            }\n            else {\n                this.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n            }\n            // Updates validation state\n            if (this.previous) {\n                this.error = this.validateConnection(this.previous.cell, this.constraintHandler.currentFocus.cell);\n                if (!this.error) {\n                    this.currentState = this.constraintHandler.currentFocus;\n                }\n                if (this.error ||\n                    (this.currentState && !this.isCellEnabled(this.currentState.cell))) {\n                    this.constraintHandler.reset();\n                }\n            }\n        }\n        else {\n            if (this.graph.isIgnoreTerminalEvent(me.getEvent())) {\n                this.marker.reset();\n                this.currentState = null;\n            }\n            else {\n                this.marker.process(me);\n                this.currentState = this.marker.getValidState();\n            }\n            if (this.currentState != null && !this.isCellEnabled(this.currentState.cell)) {\n                this.constraintHandler.reset();\n                this.marker.reset();\n                this.currentState = null;\n            }\n            const outline = this.isOutlineConnectEvent(me);\n            if (this.currentState != null && outline) {\n                // Handles special case where mouse is on outline away from actual end point\n                // in which case the grid is ignored and mouse point is used instead\n                if (me.isSource(this.marker.highlight.shape)) {\n                    point = new Point(me.getGraphX(), me.getGraphY());\n                }\n                const constraint = this.graph.getOutlineConstraint(point, this.currentState, me);\n                this.constraintHandler.setFocus(me, this.currentState, false);\n                this.constraintHandler.currentConstraint = constraint;\n                this.constraintHandler.currentPoint = point;\n            }\n            if (this.outlineConnect) {\n                if (this.marker.highlight != null && this.marker.highlight.shape != null) {\n                    const s = this.graph.view.scale;\n                    if (this.constraintHandler.currentConstraint != null &&\n                        this.constraintHandler.currentFocus != null) {\n                        this.marker.highlight.shape.stroke = OUTLINE_HIGHLIGHT_COLOR;\n                        this.marker.highlight.shape.strokeWidth =\n                            OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n                        this.marker.highlight.repaint();\n                    }\n                    else if (this.marker.hasValidState()) {\n                        const cell = me.getCell();\n                        // Handles special case where actual end point of edge and current mouse point\n                        // are not equal (due to grid snapping) and there is no hit on shape or highlight\n                        // but ignores cases where parent is used for non-connectable child cells\n                        if (cell &&\n                            cell.isConnectable() &&\n                            this.marker.getValidState() !== me.getState()) {\n                            this.marker.highlight.shape.stroke = 'transparent';\n                            this.currentState = null;\n                        }\n                        else {\n                            this.marker.highlight.shape.stroke = DEFAULT_VALID_COLOR;\n                        }\n                        this.marker.highlight.shape.strokeWidth = HIGHLIGHT_STROKEWIDTH / s / s;\n                        this.marker.highlight.repaint();\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Returns true if the given cell does not allow new connections to be created.\n     */\n    isCellEnabled(cell) {\n        return true;\n    }\n    /**\n     * Converts the given point from screen coordinates to model coordinates.\n     */\n    convertWaypoint(point) {\n        const scale = this.graph.getView().getScale();\n        const tr = this.graph.getView().getTranslate();\n        point.x = point.x / scale - tr.x;\n        point.y = point.y / scale - tr.y;\n    }\n    /**\n     * Called to snap the given point to the current preview. This snaps to the\n     * first point of the preview if alt is not pressed.\n     */\n    snapToPreview(me, point) {\n        if (!isAltDown(me.getEvent()) && this.previous) {\n            const tol = (this.graph.getGridSize() * this.graph.view.scale) / 2;\n            const tmp = this.sourceConstraint && this.first\n                ? this.first\n                : new Point(this.previous.getCenterX(), this.previous.getCenterY());\n            if (Math.abs(tmp.x - me.getGraphX()) < tol) {\n                point.x = tmp.x;\n            }\n            if (Math.abs(tmp.y - me.getGraphY()) < tol) {\n                point.y = tmp.y;\n            }\n        }\n    }\n    /**\n     * Handles the event by updating the preview edge or by highlighting\n     * a possible source or target terminal.\n     */\n    mouseMove(_sender, me) {\n        if (!me.isConsumed() &&\n            (this.ignoreMouseDown || this.first || !this.graph.isMouseDown)) {\n            // Handles special case when handler is disabled during highlight\n            if (!this.isEnabled() && this.currentState) {\n                this.destroyIcons();\n                this.currentState = null;\n            }\n            const view = this.graph.getView();\n            const { scale } = view;\n            const tr = view.translate;\n            let point = new Point(me.getGraphX(), me.getGraphY());\n            this.error = null;\n            if (this.graph.isGridEnabledEvent(me.getEvent())) {\n                point = new Point((this.graph.snap(point.x / scale - tr.x) + tr.x) * scale, (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale);\n            }\n            this.snapToPreview(me, point);\n            this.currentPoint = point;\n            if ((this.first || (this.isEnabled() && this.graph.isEnabled())) &&\n                (this.shape ||\n                    !this.first ||\n                    Math.abs(me.getGraphX() - this.first.x) > this.graph.getEventTolerance() ||\n                    Math.abs(me.getGraphY() - this.first.y) > this.graph.getEventTolerance())) {\n                this.updateCurrentState(me, point);\n            }\n            if (this.first) {\n                let constraint = null;\n                let current = point;\n                // Uses the current point from the constraint handler if available\n                if (this.constraintHandler.currentConstraint &&\n                    this.constraintHandler.currentFocus &&\n                    this.constraintHandler.currentPoint) {\n                    constraint = this.constraintHandler.currentConstraint;\n                    current = this.constraintHandler.currentPoint.clone();\n                }\n                else if (this.previous &&\n                    !this.graph.isIgnoreTerminalEvent(me.getEvent()) &&\n                    isShiftDown(me.getEvent())) {\n                    if (Math.abs(this.previous.getCenterX() - point.x) <\n                        Math.abs(this.previous.getCenterY() - point.y)) {\n                        point.x = this.previous.getCenterX();\n                    }\n                    else {\n                        point.y = this.previous.getCenterY();\n                    }\n                }\n                let pt2 = this.first;\n                // Moves the connect icon with the mouse\n                if (this.selectedIcon && this.selectedIcon.bounds) {\n                    const w = this.selectedIcon.bounds.width;\n                    const h = this.selectedIcon.bounds.height;\n                    if (this.currentState && this.targetConnectImage) {\n                        const pos = this.getIconPosition(this.selectedIcon, this.currentState);\n                        this.selectedIcon.bounds.x = pos.x;\n                        this.selectedIcon.bounds.y = pos.y;\n                    }\n                    else {\n                        const bounds = new Rectangle(me.getGraphX() + this.connectIconOffset.x, me.getGraphY() + this.connectIconOffset.y, w, h);\n                        this.selectedIcon.bounds = bounds;\n                    }\n                    this.selectedIcon.redraw();\n                }\n                // Uses edge state to compute the terminal points\n                if (this.edgeState) {\n                    this.updateEdgeState(current, constraint);\n                    current =\n                        this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 1];\n                    pt2 = this.edgeState.absolutePoints[0];\n                }\n                else {\n                    if (this.currentState) {\n                        if (!this.constraintHandler.currentConstraint) {\n                            const tmp = this.getTargetPerimeterPoint(this.currentState, me);\n                            if (tmp != null) {\n                                current = tmp;\n                            }\n                        }\n                    }\n                    // Computes the source perimeter point\n                    if (!this.sourceConstraint && this.previous) {\n                        const next = this.waypoints.length > 0 ? this.waypoints[0] : current;\n                        const tmp = this.getSourcePerimeterPoint(this.previous, next, me);\n                        if (tmp) {\n                            pt2 = tmp;\n                        }\n                    }\n                }\n                // Makes sure the cell under the mousepointer can be detected\n                // by moving the preview shape away from the mouse. This\n                // makes sure the preview shape does not prevent the detection\n                // of the cell under the mousepointer even for slow gestures.\n                if (!this.currentState && this.movePreviewAway && current) {\n                    let tmp = pt2;\n                    if (this.edgeState && this.edgeState.absolutePoints.length >= 2) {\n                        const tmp2 = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 2];\n                        if (tmp2) {\n                            tmp = tmp2;\n                        }\n                    }\n                    if (tmp) {\n                        const dx = current.x - tmp.x;\n                        const dy = current.y - tmp.y;\n                        const len = Math.sqrt(dx * dx + dy * dy);\n                        if (len === 0) {\n                            return;\n                        }\n                        // Stores old point to reuse when creating edge\n                        this.originalPoint = current.clone();\n                        current.x -= (dx * 4) / len;\n                        current.y -= (dy * 4) / len;\n                    }\n                }\n                else {\n                    this.originalPoint = null;\n                }\n                // Creates the preview shape (lazy)\n                if (!this.shape) {\n                    const dx = Math.abs(me.getGraphX() - this.first.x);\n                    const dy = Math.abs(me.getGraphY() - this.first.y);\n                    if (dx > this.graph.getEventTolerance() ||\n                        dy > this.graph.getEventTolerance()) {\n                        this.shape = this.createShape();\n                        if (this.edgeState) {\n                            this.shape.apply(this.edgeState);\n                        }\n                        // Revalidates current connection\n                        this.updateCurrentState(me, point);\n                    }\n                }\n                // Updates the points in the preview edge\n                if (this.shape) {\n                    if (this.edgeState) {\n                        this.shape.points = this.edgeState.absolutePoints;\n                    }\n                    else {\n                        let pts = [pt2];\n                        if (this.waypoints.length > 0) {\n                            pts = pts.concat(this.waypoints);\n                        }\n                        pts.push(current);\n                        this.shape.points = pts;\n                    }\n                    this.drawPreview();\n                }\n                // Makes sure endpoint of edge is visible during connect\n                if (this.cursor) {\n                    this.graph.container.style.cursor = this.cursor;\n                }\n                InternalEvent.consume(me.getEvent());\n                me.consume();\n            }\n            else if (!this.isEnabled() || !this.graph.isEnabled()) {\n                this.constraintHandler.reset();\n            }\n            else if (this.previous !== this.currentState && !this.edgeState) {\n                this.destroyIcons();\n                // Sets the cursor on the current shape\n                if (this.currentState &&\n                    !this.error &&\n                    !this.constraintHandler.currentConstraint) {\n                    this.icons = this.createIcons(this.currentState);\n                    if (this.icons.length === 0) {\n                        this.currentState.setCursor(this.cursorConnect);\n                        me.consume();\n                    }\n                }\n                this.previous = this.currentState;\n            }\n            else if (this.previous === this.currentState &&\n                this.currentState != null &&\n                this.icons.length === 0 &&\n                !this.graph.isMouseDown) {\n                // Makes sure that no cursors are changed\n                me.consume();\n            }\n            if (!this.graph.isMouseDown && this.currentState != null && this.icons != null) {\n                let hitsIcon = false;\n                const target = me.getSource();\n                for (let i = 0; i < this.icons.length && !hitsIcon; i += 1) {\n                    hitsIcon =\n                        target === this.icons[i].node ||\n                            // @ts-ignore parentNode should exist.\n                            (!!target && target.parentNode === this.icons[i].node);\n                }\n                if (!hitsIcon) {\n                    this.updateIcons(this.currentState, this.icons, me);\n                }\n            }\n        }\n        else {\n            this.constraintHandler.reset();\n        }\n    }\n    /**\n     * Updates <edgeState>.\n     */\n    updateEdgeState(current, constraint) {\n        if (!this.edgeState)\n            return;\n        // TODO: Use generic method for writing constraint to style\n        if (this.sourceConstraint && this.sourceConstraint.point) {\n            this.edgeState.style.exitX = this.sourceConstraint.point.x;\n            this.edgeState.style.exitY = this.sourceConstraint.point.y;\n        }\n        if (constraint && constraint.point) {\n            this.edgeState.style.entryX = constraint.point.x;\n            this.edgeState.style.entryY = constraint.point.y;\n        }\n        else {\n            this.edgeState.style.entryX = 0;\n            this.edgeState.style.entryY = 0;\n        }\n        this.edgeState.absolutePoints = [null, this.currentState != null ? null : current];\n        if (this.sourceConstraint) {\n            this.graph.view.updateFixedTerminalPoint(this.edgeState, this.previous, true, this.sourceConstraint);\n        }\n        if (this.currentState != null) {\n            if (constraint == null) {\n                constraint = this.graph.getConnectionConstraint(this.edgeState, this.previous, false);\n            }\n            this.edgeState.setAbsoluteTerminalPoint(null, false);\n            this.graph.view.updateFixedTerminalPoint(this.edgeState, this.currentState, false, constraint);\n        }\n        // Scales and translates the waypoints to the model\n        const realPoints = [];\n        for (let i = 0; i < this.waypoints.length; i += 1) {\n            const pt = this.waypoints[i].clone();\n            this.convertWaypoint(pt);\n            realPoints[i] = pt;\n        }\n        this.graph.view.updatePoints(this.edgeState, realPoints, this.previous, this.currentState);\n        this.graph.view.updateFloatingTerminalPoints(this.edgeState, this.previous, this.currentState);\n    }\n    /**\n     * Returns the perimeter point for the given target state.\n     *\n     * @param state <CellState> that represents the target cell state.\n     * @param _me {@link MouseEvent} that represents the mouse move.\n     */\n    getTargetPerimeterPoint(state, _me) {\n        let result = null;\n        const { view } = state;\n        const targetPerimeter = view.getPerimeterFunction(state);\n        if (targetPerimeter && this.previous && this.edgeState) {\n            const next = this.waypoints.length > 0\n                ? this.waypoints[this.waypoints.length - 1]\n                : new Point(this.previous.getCenterX(), this.previous.getCenterY());\n            const tmp = targetPerimeter(view.getPerimeterBounds(state), this.edgeState, next, false);\n            if (tmp) {\n                result = tmp;\n            }\n        }\n        else {\n            result = new Point(state.getCenterX(), state.getCenterY());\n        }\n        return result;\n    }\n    /**\n     * Hook to update the icon position(s) based on a mouseOver event. This is\n     * an empty implementation.\n     *\n     * @param state <CellState> that represents the target cell state.\n     * @param next {@link Point} that represents the next point along the previewed edge.\n     * @param me {@link MouseEvent} that represents the mouse move.\n     */\n    getSourcePerimeterPoint(state, next, me) {\n        let result = null;\n        const { view } = state;\n        const sourcePerimeter = view.getPerimeterFunction(state);\n        const c = new Point(state.getCenterX(), state.getCenterY());\n        if (sourcePerimeter) {\n            const theta = state.style.rotation ?? 0;\n            const rad = -theta * (Math.PI / 180);\n            if (theta !== 0) {\n                next = getRotatedPoint(new Point(next.x, next.y), Math.cos(rad), Math.sin(rad), c);\n            }\n            let tmp = sourcePerimeter(view.getPerimeterBounds(state), state, next, false);\n            if (tmp) {\n                if (theta !== 0) {\n                    tmp = getRotatedPoint(new Point(tmp.x, tmp.y), Math.cos(-rad), Math.sin(-rad), c);\n                }\n                result = tmp;\n            }\n        }\n        else {\n            result = c;\n        }\n        return result;\n    }\n    /**\n     * Hook to update the icon position(s) based on a mouseOver event. This is\n     * an empty implementation.\n     *\n     * @param state <CellState> under the mouse.\n     * @param icons Array of currently displayed icons.\n     * @param me {@link MouseEvent} that contains the mouse event.\n     */\n    updateIcons(state, icons, me) {\n        // empty\n    }\n    /**\n     * Returns true if the given mouse up event should stop this handler. The\n     * connection will be created if <error> is null. Note that this is only\n     * called if <waypointsEnabled> is true. This implemtation returns true\n     * if there is a cell state in the given event.\n     */\n    isStopEvent(me) {\n        return !!me.getState();\n    }\n    /**\n     * Adds the waypoint for the given event to <waypoints>.\n     */\n    addWaypointForEvent(me) {\n        if (!this.first)\n            return;\n        let point = convertPoint(this.graph.container, me.getX(), me.getY());\n        const dx = Math.abs(point.x - this.first.x);\n        const dy = Math.abs(point.y - this.first.y);\n        const addPoint = this.waypoints.length > 0 ||\n            (this.mouseDownCounter > 1 &&\n                (dx > this.graph.getEventTolerance() || dy > this.graph.getEventTolerance()));\n        if (addPoint) {\n            const { scale } = this.graph.view;\n            point = new Point(this.graph.snap(me.getGraphX() / scale) * scale, this.graph.snap(me.getGraphY() / scale) * scale);\n            this.waypoints.push(point);\n        }\n    }\n    /**\n     * Returns true if the connection for the given constraints is valid. This\n     * implementation returns true if the constraints are not pointing to the\n     * same fixed connection point.\n     */\n    checkConstraints(c1, c2) {\n        return (!c1 ||\n            !c2 ||\n            !c1.point ||\n            !c2.point ||\n            !c1.point.equals(c2.point) ||\n            c1.dx !== c2.dx ||\n            c1.dy !== c2.dy ||\n            c1.perimeter !== c2.perimeter);\n    }\n    /**\n     * Handles the event by inserting the new connection.\n     */\n    mouseUp(_sender, me) {\n        if (!me.isConsumed() && this.isConnecting()) {\n            if (this.waypointsEnabled && !this.isStopEvent(me)) {\n                this.addWaypointForEvent(me);\n                me.consume();\n                return;\n            }\n            const c1 = this.sourceConstraint;\n            const c2 = this.constraintHandler.currentConstraint;\n            const source = this.previous ? this.previous.cell : null;\n            let target = null;\n            if (this.constraintHandler.currentConstraint &&\n                this.constraintHandler.currentFocus) {\n                target = this.constraintHandler.currentFocus.cell;\n            }\n            if (!target && this.currentState) {\n                target = this.currentState.cell;\n            }\n            // Inserts the edge if no validation error exists and if constraints differ\n            if (!this.error &&\n                (!source || !target || source !== target || this.checkConstraints(c1, c2))) {\n                this.connect(source, target, me.getEvent(), me.getCell());\n            }\n            else {\n                // Selects the source terminal for self-references\n                if (this.previous != null &&\n                    this.marker.validState != null &&\n                    this.previous.cell === this.marker.validState.cell) {\n                    this.graph.selectCellForEvent(this.marker.validState.cell, me.getEvent());\n                }\n                // Displays the error message if it is not an empty string,\n                // for empty error messages, the event is silently dropped\n                if (this.error != null && this.error.length > 0) {\n                    this.graph.validationAlert(this.error);\n                }\n            }\n            // Redraws the connect icons and resets the handler state\n            this.destroyIcons();\n            me.consume();\n        }\n        if (this.first != null) {\n            this.reset();\n        }\n    }\n    /**\n     * Resets the state of this handler.\n     */\n    reset() {\n        if (this.shape != null) {\n            this.shape.destroy();\n            this.shape = null;\n        }\n        // Resets the cursor on the container\n        if (this.cursor != null && this.graph.container != null) {\n            this.graph.container.style.cursor = '';\n        }\n        this.destroyIcons();\n        this.marker.reset();\n        this.constraintHandler.reset();\n        this.originalPoint = null;\n        this.currentPoint = null;\n        this.edgeState = null;\n        this.previous = null;\n        this.error = null;\n        this.sourceConstraint = null;\n        this.mouseDownCounter = 0;\n        this.first = null;\n        this.fireEvent(new EventObject(InternalEvent.RESET));\n    }\n    /**\n     * Redraws the preview edge using the color and width returned by\n     * <getEdgeColor> and <getEdgeWidth>.\n     */\n    drawPreview() {\n        this.updatePreview(this.error === null);\n        if (this.shape)\n            this.shape.redraw();\n    }\n    /**\n     * Returns the color used to draw the preview edge. This returns green if\n     * there is no edge validation error and red otherwise.\n     *\n     * @param valid Boolean indicating if the color for a valid edge should be\n     * returned.\n     */\n    updatePreview(valid) {\n        if (this.shape) {\n            this.shape.strokeWidth = this.getEdgeWidth(valid);\n            this.shape.stroke = this.getEdgeColor(valid);\n        }\n    }\n    /**\n     * Returns the color used to draw the preview edge. This returns green if\n     * there is no edge validation error and red otherwise.\n     *\n     * @param valid Boolean indicating if the color for a valid edge should be\n     * returned.\n     */\n    getEdgeColor(valid) {\n        return valid ? VALID_COLOR : INVALID_COLOR;\n    }\n    /**\n     * Returns the width used to draw the preview edge. This returns 3 if\n     * there is no edge validation error and 1 otherwise.\n     *\n     * @param valid Boolean indicating if the width for a valid edge should be\n     * returned.\n     */\n    getEdgeWidth(valid) {\n        return valid ? 3 : 1;\n    }\n    /**\n     * Connects the given source and target using a new edge. This\n     * implementation uses <createEdge> to create the edge.\n     *\n     * @param source <Cell> that represents the source terminal.\n     * @param target <Cell> that represents the target terminal.\n     * @param evt Mousedown event of the connect gesture.\n     * @param dropTarget <Cell> that represents the cell under the mouse when it was\n     * released.\n     */\n    connect(source, target, evt, dropTarget = null) {\n        if (target || this.isCreateTarget(evt) || this.graph.isAllowDanglingEdges()) {\n            // Uses the common parent of source and target or\n            // the default parent to insert the edge\n            const model = this.graph.getDataModel();\n            let terminalInserted = false;\n            let edge = null;\n            model.beginUpdate();\n            try {\n                if (source &&\n                    !target &&\n                    !this.graph.isIgnoreTerminalEvent(evt) &&\n                    this.isCreateTarget(evt)) {\n                    target = this.createTargetVertex(evt, source);\n                    if (target) {\n                        dropTarget = this.graph.getDropTarget([target], evt, dropTarget);\n                        terminalInserted = true;\n                        // Disables edges as drop targets if the target cell was created\n                        // FIXME: Should not shift if vertex was aligned (same in Java)\n                        if (dropTarget == null || !dropTarget.isEdge()) {\n                            const pstate = dropTarget\n                                ? this.graph.getView().getState(dropTarget)\n                                : null;\n                            if (pstate) {\n                                const tmp = target.getGeometry();\n                                if (tmp) {\n                                    tmp.x -= pstate.origin.x;\n                                    tmp.y -= pstate.origin.y;\n                                }\n                            }\n                        }\n                        else {\n                            dropTarget = this.graph.getDefaultParent();\n                        }\n                        this.graph.addCell(target, dropTarget);\n                    }\n                }\n                let parent = this.graph.getDefaultParent();\n                if (source &&\n                    target &&\n                    source.getParent() === target.getParent() &&\n                    source.getParent()?.getParent() !== model.getRoot()) {\n                    parent = source.getParent();\n                    if (source.geometry &&\n                        source.geometry.relative &&\n                        target.geometry &&\n                        target.geometry.relative) {\n                        parent = parent.getParent();\n                    }\n                }\n                // Uses the value of the preview edge state for inserting\n                // the new edge into the graph\n                let value = null;\n                let style = {};\n                if (this.edgeState?.cell) {\n                    value = this.edgeState.cell.value;\n                    style = this.edgeState.cell.style ?? {};\n                }\n                edge = this.insertEdge(parent, '', value, source, target, style);\n                if (edge && source) {\n                    // Updates the connection constraints\n                    this.graph.setConnectionConstraint(edge, source, true, this.sourceConstraint);\n                    this.graph.setConnectionConstraint(edge, target, false, this.constraintHandler.currentConstraint);\n                    // Uses geometry of the preview edge state\n                    if (this.edgeState?.cell?.geometry) {\n                        model.setGeometry(edge, this.edgeState.cell.geometry);\n                    }\n                    parent = source.getParent();\n                    // Inserts edge before source\n                    if (this.isInsertBefore(edge, source, target, evt, dropTarget)) {\n                        const index = null;\n                        let tmp = source;\n                        while (tmp &&\n                            tmp.parent != null &&\n                            tmp.geometry != null &&\n                            tmp.geometry.relative &&\n                            tmp.parent !== edge.parent) {\n                            tmp = tmp.getParent();\n                        }\n                        if (tmp != null && tmp.parent != null && tmp.parent === edge.parent) {\n                            model.add(parent, edge, tmp.parent.getIndex(tmp));\n                        }\n                    }\n                    // Makes sure the edge has a non-null, relative geometry\n                    let geo = edge.getGeometry();\n                    if (geo == null) {\n                        geo = new Geometry();\n                        geo.relative = true;\n                        model.setGeometry(edge, geo);\n                    }\n                    // Uses scaled waypoints in geometry\n                    if (this.waypoints.length > 0) {\n                        const s = this.graph.view.scale;\n                        const tr = this.graph.view.translate;\n                        geo.points = [];\n                        for (let i = 0; i < this.waypoints.length; i += 1) {\n                            const pt = this.waypoints[i];\n                            geo.points.push(new Point(pt.x / s - tr.x, pt.y / s - tr.y));\n                        }\n                    }\n                    if (!target && this.currentPoint) {\n                        const t = this.graph.view.translate;\n                        const s = this.graph.view.scale;\n                        const pt = this.originalPoint != null\n                            ? new Point(this.originalPoint.x / s - t.x, this.originalPoint.y / s - t.y)\n                            : new Point(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n                        pt.x -= this.graph.getPanDx() / this.graph.view.scale;\n                        pt.y -= this.graph.getPanDy() / this.graph.view.scale;\n                        geo.setTerminalPoint(pt, false);\n                    }\n                    this.fireEvent(new EventObject(InternalEvent.CONNECT, 'cell', edge, 'terminal', target, 'event', evt, 'target', dropTarget, 'terminalInserted', terminalInserted));\n                }\n            }\n            catch (e) {\n                GlobalConfig.logger.show();\n                const errorMessage = `Error in ConnectionHandler: ${e instanceof Error ? e.message + '\\n' + e.stack : 'unknown cause'}`;\n                GlobalConfig.logger.debug(errorMessage);\n            }\n            finally {\n                model.endUpdate();\n            }\n            if (this.select) {\n                this.selectCells(edge, terminalInserted ? target : null);\n            }\n        }\n    }\n    /**\n     * Selects the given edge after adding a new connection. The target argument\n     * contains the target vertex if one has been inserted.\n     */\n    selectCells(edge, target) {\n        this.graph.setSelectionCell(edge);\n    }\n    /**\n     * Creates, inserts and returns the new edge for the given parameters. This\n     * implementation does only use <createEdge> if <factoryMethod> is defined,\n     * otherwise {@link AbstractGraph.insertEdge} will be used.\n     */\n    insertEdge(parent, id, value, source, target, style) {\n        if (!this.factoryMethod) {\n            return this.graph.insertEdge(parent, id, value, source, target, style);\n        }\n        let edge = this.createEdge(value, source, target, style);\n        edge = this.graph.addEdge(edge, parent, source, target);\n        return edge;\n    }\n    /**\n     * Hook method for creating new vertices on the fly if no target was\n     * under the mouse. This is only called if <createTarget> is true and\n     * returns null.\n     *\n     * @param evt Mousedown event of the connect gesture.\n     * @param source <Cell> that represents the source terminal.\n     */\n    createTargetVertex(evt, source) {\n        // Uses the first non-relative source\n        let geo = source.getGeometry();\n        while (geo && geo.relative) {\n            source = source.getParent();\n            geo = source.getGeometry();\n        }\n        const clone = this.graph.cloneCell(source);\n        geo = clone.getGeometry();\n        if (geo && this.currentPoint) {\n            const t = this.graph.view.translate;\n            const s = this.graph.view.scale;\n            const point = new Point(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n            geo.x = Math.round(point.x - geo.width / 2 - this.graph.getPanDx() / s);\n            geo.y = Math.round(point.y - geo.height / 2 - this.graph.getPanDy() / s);\n            // Aligns with source if within certain tolerance\n            const tol = this.getAlignmentTolerance();\n            if (tol > 0) {\n                const sourceState = this.graph.view.getState(source);\n                if (sourceState != null) {\n                    const x = sourceState.x / s - t.x;\n                    const y = sourceState.y / s - t.y;\n                    if (Math.abs(x - geo.x) <= tol) {\n                        geo.x = Math.round(x);\n                    }\n                    if (Math.abs(y - geo.y) <= tol) {\n                        geo.y = Math.round(y);\n                    }\n                }\n            }\n        }\n        return clone;\n    }\n    /**\n     * Returns the tolerance for aligning new targets to sources. This returns the grid size / 2.\n     */\n    getAlignmentTolerance(evt) {\n        return this.graph.isGridEnabled()\n            ? this.graph.getGridSize() / 2\n            : this.graph.getSnapTolerance();\n    }\n    /**\n     * Creates and returns a new edge using <factoryMethod> if one exists. If\n     * no factory method is defined, then a new default edge is returned. The\n     * source and target arguments are informal, the actual connection is\n     * setup later by the caller of this function.\n     *\n     * @param value Value to be used for creating the edge.\n     * @param source <Cell> that represents the source terminal.\n     * @param target <Cell> that represents the target terminal.\n     * @param style Optional style from the preview edge.\n     */\n    createEdge(value, source, target, style = {}) {\n        let edge = null;\n        // Creates a new edge using the factoryMethod\n        if (this.factoryMethod != null) {\n            edge = this.factoryMethod(source, target, style);\n        }\n        if (edge == null) {\n            edge = new Cell(value || '');\n            edge.setEdge(true);\n            edge.setStyle(style);\n            const geo = new Geometry();\n            geo.relative = true;\n            edge.setGeometry(geo);\n        }\n        return edge;\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes. This should be\n     * called on all instances. It is called automatically for the built-in\n     * instance created for each {@link AbstractGraph}.\n     */\n    onDestroy() {\n        this.graph.removeMouseListener(this);\n        if (this.shape) {\n            this.shape.destroy();\n            this.shape = null;\n        }\n        if (this.marker) {\n            this.marker.destroy();\n            // @ts-expect-error this.marker is null when it is destroyed.\n            this.marker = null;\n        }\n        if (this.constraintHandler) {\n            this.constraintHandler.onDestroy();\n        }\n        if (this.changeHandler) {\n            this.graph.getDataModel().removeListener(this.changeHandler);\n            this.graph.getView().removeListener(this.changeHandler);\n        }\n        if (this.drillHandler) {\n            this.graph.removeListener(this.drillHandler);\n            this.graph.getView().removeListener(this.drillHandler);\n        }\n        if (this.escapeHandler) {\n            this.graph.removeListener(this.escapeHandler);\n        }\n    }\n}\nConnectionHandler.pluginId = 'ConnectionHandler';\nclass ConnectionHandlerCellMarker extends CellMarker {\n    constructor(graph, connectionHandler, validColor = DEFAULT_VALID_COLOR, invalidColor = DEFAULT_INVALID_COLOR, hotspot = DEFAULT_HOTSPOT) {\n        super(graph, validColor, invalidColor, hotspot);\n        this.hotspotEnabled = true;\n        this.connectionHandler = connectionHandler;\n    }\n    // Overrides to return cell at location only if valid (so that\n    // there is no highlight for invalid cells)\n    getCell(me) {\n        let cell = super.getCell(me);\n        this.connectionHandler.error = null;\n        // Checks for cell at preview point (with grid)\n        if (!cell && this.connectionHandler.currentPoint) {\n            cell = this.connectionHandler.graph.getCellAt(this.connectionHandler.currentPoint.x, this.connectionHandler.currentPoint.y);\n        }\n        // Uses connectable parent vertex if one exists\n        if (cell && !cell.isConnectable() && this.connectionHandler.cell) {\n            const parent = this.connectionHandler.cell.getParent();\n            if (parent && parent.isVertex() && parent.isConnectable()) {\n                cell = parent;\n            }\n        }\n        if (cell) {\n            if ((this.connectionHandler.graph.isSwimlane(cell) &&\n                this.connectionHandler.currentPoint != null &&\n                this.connectionHandler.graph.hitsSwimlaneContent(cell, this.connectionHandler.currentPoint.x, this.connectionHandler.currentPoint.y)) ||\n                !this.connectionHandler.isConnectableCell(cell)) {\n                cell = null;\n            }\n        }\n        if (cell) {\n            if (this.connectionHandler.isConnecting()) {\n                if (this.connectionHandler.previous) {\n                    this.connectionHandler.error = this.connectionHandler.validateConnection(this.connectionHandler.previous.cell, cell);\n                    if (this.connectionHandler.error !== null &&\n                        this.connectionHandler.error.length === 0) {\n                        cell = null;\n                        // Enables create target inside groups\n                        if (this.connectionHandler.isCreateTarget(me.getEvent())) {\n                            this.connectionHandler.error = null;\n                        }\n                    }\n                }\n            }\n            else if (!this.connectionHandler.isValidSource(cell, me)) {\n                cell = null;\n            }\n        }\n        else if (this.connectionHandler.isConnecting() &&\n            !this.connectionHandler.isCreateTarget(me.getEvent()) &&\n            !this.connectionHandler.graph.isAllowDanglingEdges()) {\n            this.connectionHandler.error = '';\n        }\n        return cell;\n    }\n    // Sets the highlight color according to validateConnection\n    isValidState(state) {\n        if (this.connectionHandler.isConnecting()) {\n            return !this.connectionHandler.error;\n        }\n        return super.isValidState(state);\n    }\n    // Overrides to use marker color only in highlight mode or for\n    // target selection\n    getMarkerColor(evt, state, isValid) {\n        return !this.connectionHandler.connectImage || this.connectionHandler.isConnecting()\n            ? super.getMarkerColor(evt, state, isValid)\n            : NONE;\n    }\n    // Overrides to use hotspot only for source selection otherwise\n    // intersects always returns true when over a cell\n    intersects(state, evt) {\n        if (this.connectionHandler.connectImage || this.connectionHandler.isConnecting()) {\n            return true;\n        }\n        return super.intersects(state, evt);\n    }\n}\nexport default ConnectionHandler;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { GUIDE_COLOR, GUIDE_STROKEWIDTH } from '../../util/Constants';\nimport Point from '../geometry/Point';\nimport PolylineShape from '../shape/edge/PolylineShape';\n/**\n * Implements the alignment of selection cells to other cells in the graph.\n *\n * Constructor: mxGuide\n *\n * Constructs a new guide object.\n */\nclass Guide {\n    constructor(graph, states) {\n        /**\n         * Contains the {@link CellState}s that are used for alignment.\n         */\n        this.states = [];\n        /**\n         * Specifies if horizontal guides are enabled. Default is true.\n         */\n        this.horizontal = true;\n        /**\n         * Specifies if vertical guides are enabled. Default is true.\n         */\n        this.vertical = true;\n        /**\n         * Holds the {@link Shape} for the horizontal guide.\n         */\n        this.guideX = null;\n        /**\n         * Holds the {@link Shape} for the vertical guide.\n         */\n        this.guideY = null;\n        /**\n         * Specifies if rounded coordinates should be used. Default is false.\n         */\n        this.rounded = false;\n        /**\n         * Default tolerance in px if grid is disabled. Default is 2.\n         */\n        this.tolerance = 2;\n        this.graph = graph;\n        this.setStates(states);\n    }\n    /**\n     * Sets the {@link CellState}s that should be used for alignment.\n     */\n    setStates(states) {\n        this.states = states;\n    }\n    /**\n     * Returns true if the guide should be enabled for the given native event. This\n     * implementation always returns true.\n     */\n    isEnabledForEvent(evt) {\n        return true;\n    }\n    /**\n     * Returns the tolerance for the guides. Default value is gridSize / 2.\n     */\n    getGuideTolerance(gridEnabled = false) {\n        return gridEnabled && this.graph.isGridEnabled()\n            ? this.graph.getGridSize() / 2\n            : this.tolerance;\n    }\n    /**\n     * Returns the mxShape to be used for painting the respective guide. This\n     * implementation returns a new, dashed and crisp {@link PolylineShape} using\n     * {@link GUIDE_COLOR} and {@link GUIDE_STROKEWIDTH} as the format.\n     *\n     * @param horizontal Boolean that specifies which guide should be created.\n     */\n    createGuideShape(horizontal = false) {\n        // TODO: Should vertical guides be supported here?? ============================\n        const guide = new PolylineShape([], GUIDE_COLOR, GUIDE_STROKEWIDTH);\n        guide.isDashed = true;\n        return guide;\n    }\n    /**\n     * Returns true if the given state should be ignored.\n     * @param state\n     */\n    isStateIgnored(state) {\n        return false;\n    }\n    /**\n     * Moves the <bounds> by the given {@link Point} and returnt the snapped point.\n     */\n    move(bounds = null, delta, gridEnabled = false, clone = false) {\n        if ((this.horizontal || this.vertical) && bounds) {\n            const { scale } = this.graph.getView();\n            const tt = this.getGuideTolerance(gridEnabled) * scale;\n            const b = bounds.clone();\n            b.x += delta.x;\n            b.y += delta.y;\n            let overrideX = false;\n            let stateX = null;\n            let valueX = null;\n            let overrideY = false;\n            let stateY = null;\n            let valueY = null;\n            let ttX = tt;\n            let ttY = tt;\n            const left = b.x;\n            const right = b.x + b.width;\n            const center = b.getCenterX();\n            const top = b.y;\n            const bottom = b.y + b.height;\n            const middle = b.getCenterY();\n            // Snaps the left, center and right to the given x-coordinate\n            const snapX = (x, state, centerAlign) => {\n                let override = false;\n                if (centerAlign && Math.abs(x - center) < ttX) {\n                    delta.x = x - bounds.getCenterX();\n                    ttX = Math.abs(x - center);\n                    override = true;\n                }\n                else if (!centerAlign) {\n                    if (Math.abs(x - left) < ttX) {\n                        delta.x = x - bounds.x;\n                        ttX = Math.abs(x - left);\n                        override = true;\n                    }\n                    else if (Math.abs(x - right) < ttX) {\n                        delta.x = x - bounds.x - bounds.width;\n                        ttX = Math.abs(x - right);\n                        override = true;\n                    }\n                }\n                if (override) {\n                    stateX = state;\n                    valueX = x;\n                    if (!this.guideX) {\n                        this.guideX = this.createGuideShape(true);\n                        // Makes sure to use SVG shapes in order to implement\n                        // event-transparency on the background area of the rectangle since\n                        // HTML shapes do not let mouseevents through even when transparent\n                        this.guideX.dialect = 'svg';\n                        this.guideX.pointerEvents = false;\n                        this.guideX.init(this.graph.getView().getOverlayPane());\n                    }\n                }\n                overrideX = overrideX || override;\n            };\n            // Snaps the top, middle or bottom to the given y-coordinate\n            const snapY = (y, state, centerAlign) => {\n                let override = false;\n                if (centerAlign && Math.abs(y - middle) < ttY) {\n                    delta.y = y - bounds.getCenterY();\n                    ttY = Math.abs(y - middle);\n                    override = true;\n                }\n                else if (!centerAlign) {\n                    if (Math.abs(y - top) < ttY) {\n                        delta.y = y - bounds.y;\n                        ttY = Math.abs(y - top);\n                        override = true;\n                    }\n                    else if (Math.abs(y - bottom) < ttY) {\n                        delta.y = y - bounds.y - bounds.height;\n                        ttY = Math.abs(y - bottom);\n                        override = true;\n                    }\n                }\n                if (override) {\n                    stateY = state;\n                    valueY = y;\n                    if (!this.guideY) {\n                        this.guideY = this.createGuideShape(false);\n                        // Makes sure to use SVG shapes in order to implement\n                        // event-transparency on the background area of the rectangle since\n                        // HTML shapes do not let mouseevents through even when transparent\n                        this.guideY.dialect = 'svg';\n                        this.guideY.pointerEvents = false;\n                        this.guideY.init(this.graph.getView().getOverlayPane());\n                    }\n                }\n                overrideY = overrideY || override;\n            };\n            for (let i = 0; i < this.states.length; i += 1) {\n                const state = this.states[i];\n                if (state && !this.isStateIgnored(state)) {\n                    // Align x\n                    if (this.horizontal) {\n                        snapX(state.getCenterX(), state, true);\n                        snapX(state.x, state, false);\n                        snapX(state.x + state.width, state, false);\n                        // Aligns left and right of shape to center of page\n                        if (!state.cell) {\n                            snapX(state.getCenterX(), state, false);\n                        }\n                    }\n                    // Align y\n                    if (this.vertical) {\n                        snapY(state.getCenterY(), state, true);\n                        snapY(state.y, state, false);\n                        snapY(state.y + state.height, state, false);\n                        // Aligns left and right of shape to center of page\n                        if (!state.cell) {\n                            snapY(state.getCenterY(), state, false);\n                        }\n                    }\n                }\n            }\n            // Moves cells to the raster if not aligned\n            this.graph.snapDelta(delta, bounds, !gridEnabled, overrideX, overrideY);\n            delta = this.getDelta(bounds, stateX, delta.x, stateY, delta.y);\n            // Redraws the guides\n            const c = this.graph.container;\n            if (!overrideX && this.guideX) {\n                this.guideX.node.style.visibility = 'hidden';\n            }\n            else if (this.guideX) {\n                let minY = null;\n                let maxY = null;\n                if (stateX) {\n                    minY = Math.min(bounds.y + delta.y - this.graph.getPanDy(), stateX.y);\n                    maxY = Math.max(bounds.y + bounds.height + delta.y - this.graph.getPanDy(), \n                    // @ts-ignore stateX! doesn't work for some reason...\n                    stateX.y + stateX.height);\n                }\n                if (minY !== null && maxY !== null) {\n                    this.guideX.points = [new Point(valueX, minY), new Point(valueX, maxY)];\n                }\n                else {\n                    this.guideX.points = [\n                        new Point(valueX, -this.graph.getPanDy()),\n                        new Point(valueX, c.scrollHeight - 3 - this.graph.getPanDy()),\n                    ];\n                }\n                this.guideX.stroke = this.getGuideColor(stateX, true);\n                this.guideX.node.style.visibility = 'visible';\n                this.guideX.redraw();\n            }\n            if (!overrideY && this.guideY != null) {\n                this.guideY.node.style.visibility = 'hidden';\n            }\n            else if (this.guideY != null) {\n                let minX = null;\n                let maxX = null;\n                if (stateY != null && bounds != null) {\n                    minX = Math.min(bounds.x + delta.x - this.graph.getPanDx(), stateY.x);\n                    maxX = Math.max(bounds.x + bounds.width + delta.x - this.graph.getPanDx(), \n                    // @ts-ignore\n                    stateY.x + stateY.width);\n                }\n                if (minX != null && maxX != null && valueY !== null) {\n                    this.guideY.points = [new Point(minX, valueY), new Point(maxX, valueY)];\n                }\n                else if (valueY !== null) {\n                    this.guideY.points = [\n                        new Point(-this.graph.getPanDx(), valueY),\n                        new Point(c.scrollWidth - 3 - this.graph.getPanDx(), valueY),\n                    ];\n                }\n                this.guideY.stroke = this.getGuideColor(stateY, false);\n                this.guideY.node.style.visibility = 'visible';\n                this.guideY.redraw();\n            }\n        }\n        return delta;\n    }\n    /**\n     * Rounds to pixels for virtual states (eg. page guides)\n     */\n    getDelta(bounds, stateX = null, dx, stateY = null, dy) {\n        const s = this.graph.view.scale;\n        if (this.rounded || (stateX != null && stateX.cell == null)) {\n            dx = Math.round((bounds.x + dx) / s) * s - bounds.x;\n        }\n        if (this.rounded || (stateY != null && stateY.cell == null)) {\n            dy = Math.round((bounds.y + dy) / s) * s - bounds.y;\n        }\n        return new Point(dx, dy);\n    }\n    /**\n     * Hides all current guides.\n     */\n    getGuideColor(state, horizontal) {\n        return GUIDE_COLOR;\n    }\n    /**\n     * Hides all current guides.\n     */\n    hide() {\n        this.setVisible(false);\n    }\n    /**\n     * Shows or hides the current guides.\n     */\n    setVisible(visible) {\n        if (this.guideX) {\n            this.guideX.node.style.visibility = visible ? 'visible' : 'hidden';\n        }\n        if (this.guideY) {\n            this.guideY.node.style.visibility = visible ? 'visible' : 'hidden';\n        }\n    }\n    /**\n     * Destroys all resources that this object uses.\n     */\n    destroy() {\n        if (this.guideX) {\n            this.guideX.destroy();\n            this.guideX = null;\n        }\n        if (this.guideY) {\n            this.guideY.destroy();\n            this.guideY = null;\n        }\n    }\n}\nexport default Guide;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Client from '../../Client';\nimport InternalEvent from '../event/InternalEvent';\nimport { contains, getRotatedPoint, isNumeric, toRadians } from '../../util/mathUtils';\nimport { convertPoint } from '../../util/styleUtils';\nimport RectangleShape from '../shape/node/RectangleShape';\nimport Guide from '../other/Guide';\nimport Point from '../geometry/Point';\nimport { DROP_TARGET_COLOR, INVALID_CONNECT_TARGET_COLOR, NONE, VALID_COLOR, } from '../../util/Constants';\nimport Dictionary from '../../util/Dictionary';\nimport CellHighlight from '../cell/CellHighlight';\nimport Rectangle from '../geometry/Rectangle';\nimport { getClientX, getClientY, isAltDown, isMultiTouchEvent, } from '../../util/EventUtils';\nimport { EdgeHandlerConfig, VertexHandlerConfig } from '../handler/config';\n/**\n * Graph event handler that handles selection.\n *\n * Individual cells are handled separately by {@link SelectionCellsHandler} using {@link VertexHandler} or one of the {@link EdgeHandler}s.\n * When the {@link SelectionCellsHandler} plugin is registered in the {@link AbstractGraph}, {@link SelectionHandler} interacts with this plugin to propagate global selection events to individual cells.\n *\n * To avoid the container to scroll a moved cell into view, set {@link scrollOnMove} to `false`.\n *\n * @category Plugin\n */\nclass SelectionHandler {\n    /**\n     * Constructs an event handler that creates handles for the selection cells.\n     *\n     * @param graph Reference to the enclosing {@link AbstractGraph}.\n     */\n    constructor(graph) {\n        this.refreshThread = null;\n        /**\n         * Defines the maximum number of cells to paint subhandles\n         * for. Default is 50 for Firefox and 20 for IE. Set this\n         * to 0 if you want an unlimited number of handles to be\n         * displayed. This is only recommended if the number of\n         * cells in the graph is limited to a small number, eg.\n         * 500.\n         */\n        this.maxCells = 50;\n        /**\n         * Specifies if events are handled. Default is true.\n         */\n        this.enabled = true;\n        /**\n         * Specifies if drop targets under the mouse should be enabled. Default is\n         * true.\n         */\n        this.highlightEnabled = true;\n        /**\n         * Specifies if cloning by control-drag is enabled. Default is true.\n         */\n        this.cloneEnabled = true;\n        /**\n         * Specifies if moving is enabled. Default is true.\n         */\n        this.moveEnabled = true;\n        /**\n         * Specifies if other cells should be used for snapping the right, center or\n         * left side of the current selection. Default is false.\n         */\n        this.guidesEnabled = false;\n        /**\n         * Whether the handles of the selection are currently visible.\n         */\n        this.handlesVisible = true;\n        /**\n         * Holds the {@link Guide} instance that is used for alignment.\n         */\n        this.guide = null;\n        /**\n         * Stores the x-coordinate of the current mouse move.\n         */\n        this.currentDx = 0;\n        /**\n         * Stores the y-coordinate of the current mouse move.\n         */\n        this.currentDy = 0;\n        /**\n         * Specifies if a move cursor should be shown if the mouse is over a movable\n         * cell. Default is true.\n         */\n        this.updateCursor = true;\n        /**\n         * Specifies if selecting is enabled. Default is true.\n         */\n        this.selectEnabled = true;\n        /**\n         * Specifies if cells may be moved out of their parents. Default is true.\n         */\n        this.removeCellsFromParent = true;\n        /**\n         * If empty parents should be removed from the model after all child cells\n         * have been moved out. Default is true.\n         */\n        this.removeEmptyParents = false;\n        /**\n         * Specifies if drop events are interpreted as new connections if no other\n         * drop action is defined. Default is false.\n         */\n        this.connectOnDrop = false;\n        /**\n         * Specifies if the view should be scrolled so that a moved cell is visible.\n         * @default true\n         */\n        this.scrollOnMove = true;\n        /**\n         * Specifies the minimum number of pixels for the width and height of a\n         * selection border. Default is 6.\n         */\n        this.minimumSize = 6;\n        /**\n         * Specifies the color of the preview shape. Default is black.\n         */\n        this.previewColor = 'black';\n        /**\n         * Specifies if the graph container should be used for preview. If this is used\n         * then drop target detection relies entirely on {@link AbstractGraph.getCellAt} because\n         * the HTML preview does not \"let events through\". Default is false.\n         */\n        this.htmlPreview = false;\n        /**\n         * Reference to the {@link Shape} that represents the preview.\n         */\n        this.shape = null;\n        /**\n         * Specifies if the grid should be scaled. Default is false.\n         */\n        this.scaleGrid = false;\n        /**\n         * Specifies if the bounding box should allow for rotation. Default is true.\n         */\n        this.rotationEnabled = true;\n        /**\n         * Maximum number of cells for which live preview should be used.  Default is 0 which means no live preview.\n         */\n        this.maxLivePreview = 0;\n        /**\n         * Variable allowLivePreview\n         *\n         * If live preview is allowed on this system.  Default is true for systems with SVG support.\n         */\n        this.allowLivePreview = Client.IS_SVG;\n        this.cell = null;\n        this.delayedSelection = false;\n        this.first = null;\n        this.cells = null;\n        this.bounds = null;\n        this.pBounds = null;\n        this.allCells = new Dictionary();\n        this.cellWasClicked = false;\n        this.cloning = false;\n        this.cellCount = 0;\n        this.target = null;\n        this.suspended = false;\n        this.livePreviewActive = false;\n        this.livePreviewUsed = false;\n        this.highlight = null;\n        this.graph = graph;\n        this.graph.addMouseListener(this);\n        // Repaints the handler after autoscroll\n        this.panHandler = () => {\n            if (!this.suspended) {\n                this.updatePreview();\n                this.updateHint();\n            }\n        };\n        this.graph.addListener(InternalEvent.PAN, this.panHandler);\n        // Handles escape keystrokes\n        this.escapeHandler = (sender, evt) => {\n            this.reset();\n        };\n        this.graph.addListener(InternalEvent.ESCAPE, this.escapeHandler);\n        // Updates the preview box for remote changes\n        this.refreshHandler = (sender, evt) => {\n            // Merges multiple pending calls\n            if (this.refreshThread) {\n                window.clearTimeout(this.refreshThread);\n            }\n            // Waits for the states and handlers to be updated\n            this.refreshThread = window.setTimeout(() => {\n                this.refreshThread = null;\n                if (this.first && !this.suspended && this.cells) {\n                    // Updates preview with no translate to compute bounding box\n                    const dx = this.currentDx;\n                    const dy = this.currentDy;\n                    this.currentDx = 0;\n                    this.currentDy = 0;\n                    this.updatePreview();\n                    this.bounds = this.graph.getView().getBounds(this.cells);\n                    this.pBounds = this.getPreviewBounds(this.cells);\n                    if (this.pBounds == null && !this.livePreviewUsed) {\n                        this.reset();\n                    }\n                    else {\n                        // Restores translate and updates preview\n                        this.currentDx = dx;\n                        this.currentDy = dy;\n                        this.updatePreview();\n                        this.updateHint();\n                        if (this.livePreviewUsed) {\n                            // Forces update to ignore last visible state\n                            this.setHandlesVisibleForCells(this.getSelectionCellsHandler()?.getHandledSelectionCells() ?? [], false, true);\n                            this.updatePreview();\n                        }\n                    }\n                }\n            }, 0);\n        };\n        this.graph.getDataModel().addListener(InternalEvent.CHANGE, this.refreshHandler);\n        this.graph.addListener(InternalEvent.REFRESH, this.refreshHandler);\n        this.keyHandler = (e) => {\n            if (this.graph.container != null &&\n                this.graph.container.style.visibility !== 'hidden' &&\n                this.first != null &&\n                !this.suspended) {\n                const clone = this.graph.isCloneEvent(e) &&\n                    this.graph.isCellsCloneable() &&\n                    this.isCloneEnabled();\n                if (clone !== this.cloning) {\n                    this.cloning = clone;\n                    this.checkPreview();\n                    this.updatePreview();\n                }\n            }\n        };\n        if (typeof document !== 'undefined') {\n            InternalEvent.addListener(document, 'keydown', this.keyHandler);\n            InternalEvent.addListener(document, 'keyup', this.keyHandler);\n        }\n    }\n    /**\n     * Returns <enabled>.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Sets <enabled>.\n     */\n    setEnabled(value) {\n        this.enabled = value;\n    }\n    /**\n     * Returns <cloneEnabled>.\n     */\n    isCloneEnabled() {\n        return this.cloneEnabled;\n    }\n    /**\n     * Sets <cloneEnabled>.\n     *\n     * @param value Boolean that specifies the new clone enabled state.\n     */\n    setCloneEnabled(value) {\n        this.cloneEnabled = value;\n    }\n    /**\n     * Returns {@link oveEnabled}.\n     */\n    isMoveEnabled() {\n        return this.moveEnabled;\n    }\n    /**\n     * Sets {@link oveEnabled}.\n     */\n    setMoveEnabled(value) {\n        this.moveEnabled = value;\n    }\n    /**\n     * Returns <selectEnabled>.\n     */\n    isSelectEnabled() {\n        return this.selectEnabled;\n    }\n    /**\n     * Sets <selectEnabled>.\n     */\n    setSelectEnabled(value) {\n        this.selectEnabled = value;\n    }\n    /**\n     * Returns <removeCellsFromParent>.\n     */\n    isRemoveCellsFromParent() {\n        return this.removeCellsFromParent;\n    }\n    /**\n     * Sets <removeCellsFromParent>.\n     */\n    setRemoveCellsFromParent(value) {\n        this.removeCellsFromParent = value;\n    }\n    /**\n     * Returns true if the given cell and parent should propagate\n     * selection state to the parent.\n     */\n    isPropagateSelectionCell(cell, immediate, me) {\n        const parent = cell.getParent();\n        if (immediate) {\n            const geo = cell.isEdge() ? null : cell.getGeometry();\n            return ((!this.graph.isSiblingSelected(cell) && geo && geo.relative) ||\n                !this.graph.isSwimlane(parent));\n        }\n        return ((!this.graph.isToggleEvent(me.getEvent()) ||\n            (!this.graph.isSiblingSelected(cell) &&\n                !this.graph.isCellSelected(cell) &&\n                !this.graph.isSwimlane(parent)) ||\n            this.graph.isCellSelected(parent)) &&\n            (this.graph.isToggleEvent(me.getEvent()) || !this.graph.isCellSelected(parent)));\n    }\n    /**\n     * Hook to return initial cell for the given event.\n     */\n    getInitialCellForEvent(me) {\n        let state = me.getState();\n        if ((!this.graph.isToggleEvent(me.getEvent()) || !isAltDown(me.getEvent())) &&\n            state &&\n            !this.graph.isCellSelected(state.cell)) {\n            let parent = state.cell.getParent();\n            let next = parent ? this.graph.view.getState(parent) : null;\n            while (next &&\n                !this.graph.isCellSelected(next.cell) &&\n                (next.cell.isVertex() || next.cell.isEdge()) &&\n                this.isPropagateSelectionCell(state.cell, true, me)) {\n                state = next;\n                parent = state.cell.getParent();\n                next = parent ? this.graph.view.getState(parent) : null;\n            }\n        }\n        return state ? state.cell : null;\n    }\n    /**\n     * Hook to return true for delayed selections.\n     */\n    isDelayedSelection(cell, me) {\n        let c = cell;\n        const selectionCellsHandler = this.getSelectionCellsHandler();\n        if (!this.graph.isToggleEvent(me.getEvent()) || !isAltDown(me.getEvent())) {\n            while (c) {\n                if (selectionCellsHandler?.isHandled(c)) {\n                    const cellEditorHandler = this.graph.getPlugin('CellEditorHandler');\n                    return cellEditorHandler?.getEditingCell() !== c;\n                }\n                c = c.getParent();\n            }\n        }\n        return this.graph.isToggleEvent(me.getEvent()) && !isAltDown(me.getEvent());\n    }\n    /**\n     * Implements the delayed selection for the given mouse event.\n     */\n    selectDelayed(me) {\n        const popupMenuHandler = this.graph.getPlugin('PopupMenuHandler');\n        if (!popupMenuHandler || !popupMenuHandler.isPopupTrigger(me)) {\n            let cell = me.getCell();\n            if (cell === null) {\n                cell = this.cell;\n            }\n            if (cell)\n                this.selectCellForEvent(cell, me);\n        }\n    }\n    /**\n     * Selects the given cell for the given {@link MouseEvent}.\n     */\n    selectCellForEvent(cell, me) {\n        const state = this.graph.view.getState(cell);\n        if (state) {\n            if (me.isSource(state.control)) {\n                this.graph.selectCellForEvent(cell, me.getEvent());\n            }\n            else {\n                if (!this.graph.isToggleEvent(me.getEvent()) || !isAltDown(me.getEvent())) {\n                    let parent = cell.getParent();\n                    while (parent &&\n                        this.graph.view.getState(parent) &&\n                        (parent.isVertex() || parent.isEdge()) &&\n                        this.isPropagateSelectionCell(cell, false, me)) {\n                        cell = parent;\n                        parent = cell.getParent();\n                    }\n                }\n                this.graph.selectCellForEvent(cell, me.getEvent());\n            }\n        }\n        return cell;\n    }\n    /**\n     * Consumes the given mouse event. NOTE: This may be used to enable click\n     * events for links in labels on iOS as follows as consuming the initial\n     * touchStart disables firing the subsequent click evnent on the link.\n     *\n     * <code>\n     * consumeMouseEvent(evtName, me)\n     * {\n     *   var source = mxEvent.getSource(me.getEvent());\n     *\n     *   if (!mxEvent.isTouchEvent(me.getEvent()) || source.nodeName != 'A')\n     *   {\n     *     me.consume();\n     *   }\n     * }\n     * </code>\n     */\n    consumeMouseEvent(evtName, me) {\n        me.consume();\n    }\n    /**\n     * Handles the event by selecing the given cell and creating a handle for\n     * it. By consuming the event all subsequent events of the gesture are\n     * redirected to this handler.\n     */\n    mouseDown(sender, me) {\n        if (!me.isConsumed() &&\n            this.isEnabled() &&\n            this.graph.isEnabled() &&\n            me.getState() &&\n            !isMultiTouchEvent(me.getEvent())) {\n            const cell = this.getInitialCellForEvent(me);\n            if (cell) {\n                this.delayedSelection = this.isDelayedSelection(cell, me);\n                this.cell = null;\n                if (this.isSelectEnabled() && !this.delayedSelection) {\n                    this.graph.selectCellForEvent(cell, me.getEvent());\n                }\n                if (this.isMoveEnabled()) {\n                    const geo = cell.getGeometry();\n                    if (geo &&\n                        this.graph.isCellMovable(cell) &&\n                        (!cell.isEdge() ||\n                            this.graph.getSelectionCount() > 1 ||\n                            (geo.points && geo.points.length > 0) ||\n                            !cell.getTerminal(true) ||\n                            !cell.getTerminal(false) ||\n                            this.graph.isAllowDanglingEdges() ||\n                            (this.graph.isCloneEvent(me.getEvent()) && this.graph.isCellsCloneable()))) {\n                        this.start(cell, me.getX(), me.getY());\n                    }\n                    else if (this.delayedSelection) {\n                        this.cell = cell;\n                    }\n                    this.cellWasClicked = true;\n                    this.consumeMouseEvent(InternalEvent.MOUSE_DOWN, me);\n                }\n            }\n        }\n    }\n    /**\n     * Creates an array of cell states which should be used as guides.\n     */\n    getGuideStates() {\n        const parent = this.graph.getDefaultParent();\n        const filter = (cell) => {\n            const geo = cell.getGeometry();\n            return (!!this.graph.view.getState(cell) && cell.isVertex() && !!geo && !geo.relative);\n        };\n        return this.graph.view.getCellStates(parent.filterDescendants(filter));\n    }\n    /**\n     * Returns the cells to be modified by this handler. This implementation\n     * returns all selection cells that are movable, or the given initial cell if\n     * the given cell is not selected and movable. This handles the case of moving\n     * unselectable or unselected cells.\n     *\n     * @param initialCell <Cell> that triggered this handler.\n     */\n    getCells(initialCell) {\n        if (!this.delayedSelection && this.graph.isCellMovable(initialCell)) {\n            return [initialCell];\n        }\n        return this.graph.getMovableCells(this.graph.getSelectionCells());\n    }\n    /**\n     * Returns the {@link Rectangle} used as the preview bounds for\n     * moving the given cells.\n     */\n    getPreviewBounds(cells) {\n        const bounds = this.getBoundingBox(cells);\n        if (bounds) {\n            // Corrects width and height\n            bounds.width = Math.max(0, bounds.width - 1);\n            bounds.height = Math.max(0, bounds.height - 1);\n            if (bounds.width < this.minimumSize) {\n                const dx = this.minimumSize - bounds.width;\n                bounds.x -= dx / 2;\n                bounds.width = this.minimumSize;\n            }\n            else {\n                bounds.x = Math.round(bounds.x);\n                bounds.width = Math.ceil(bounds.width);\n            }\n            if (bounds.height < this.minimumSize) {\n                const dy = this.minimumSize - bounds.height;\n                bounds.y -= dy / 2;\n                bounds.height = this.minimumSize;\n            }\n            else {\n                bounds.y = Math.round(bounds.y);\n                bounds.height = Math.ceil(bounds.height);\n            }\n        }\n        return bounds;\n    }\n    /**\n     * Returns the union of the {@link CellStates} for the given array of {@link Cells}.\n     * For vertices, this method uses the bounding box of the corresponding shape\n     * if one exists. The bounding box of the corresponding text label and all\n     * controls and overlays are ignored. See also: {@link GraphView#getBounds} and\n     * {@link AbstractGraph.getBoundingBox}.\n     *\n     * @param cells Array of {@link Cells} whose bounding box should be returned.\n     */\n    getBoundingBox(cells) {\n        let result = null;\n        if (cells.length > 0) {\n            for (let i = 0; i < cells.length; i += 1) {\n                if (cells[i].isVertex() || cells[i].isEdge()) {\n                    const state = this.graph.view.getState(cells[i]);\n                    if (state) {\n                        let bbox = null;\n                        if (cells[i].isVertex() && state.shape && state.shape.boundingBox) {\n                            bbox = state.shape.boundingBox;\n                        }\n                        if (bbox) {\n                            if (!result) {\n                                result = Rectangle.fromRectangle(bbox);\n                            }\n                            else {\n                                result.add(bbox);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Creates the shape used to draw the preview for the given bounds.\n     */\n    createPreviewShape(bounds) {\n        const shape = new RectangleShape(bounds, NONE, this.previewColor);\n        shape.isDashed = true;\n        if (this.htmlPreview) {\n            shape.dialect = 'strictHtml';\n            shape.init(this.graph.container);\n        }\n        else {\n            // Makes sure to use either VML or SVG shapes in order to implement\n            // event-transparency on the background area of the rectangle since\n            // HTML shapes do not let mouseevents through even when transparent\n            shape.dialect = 'svg';\n            shape.init(this.graph.getView().getOverlayPane());\n            shape.pointerEvents = false;\n            // Workaround for artifacts on iOS\n            if (Client.IS_IOS) {\n                shape.getSvgScreenOffset = () => {\n                    return 0;\n                };\n            }\n        }\n        return shape;\n    }\n    createGuide() {\n        return new Guide(this.graph, this.getGuideStates());\n    }\n    /**\n     * Starts the handling of the mouse gesture.\n     */\n    start(cell, x, y, cells) {\n        this.cell = cell;\n        this.first = convertPoint(this.graph.container, x, y);\n        this.cells = cells ? cells : this.getCells(this.cell);\n        this.bounds = this.graph.getView().getBounds(this.cells);\n        this.pBounds = this.getPreviewBounds(this.cells);\n        this.cloning = false;\n        this.cellCount = 0;\n        for (let i = 0; i < this.cells.length; i += 1) {\n            this.cellCount += this.addStates(this.cells[i], this.allCells);\n        }\n        if (this.guidesEnabled) {\n            this.guide = this.createGuide();\n            const parent = cell.getParent();\n            const ignore = parent.getChildCount() < 2;\n            // Uses connected states as guides\n            const connected = new Dictionary();\n            const opps = this.graph.getOpposites(this.graph.getEdges(this.cell), this.cell);\n            for (let i = 0; i < opps.length; i += 1) {\n                const state = this.graph.view.getState(opps[i]);\n                if (state && !connected.get(state)) {\n                    connected.put(state, true);\n                }\n            }\n            this.guide.isStateIgnored = (state) => {\n                const p = state.cell.getParent();\n                return (!!state.cell &&\n                    ((!this.cloning && !!this.isCellMoving(state.cell)) ||\n                        (state.cell !== (this.target || parent) &&\n                            !ignore &&\n                            !connected.get(state) &&\n                            (!this.target || this.target.getChildCount() >= 2) &&\n                            p !== (this.target || parent))));\n            };\n        }\n    }\n    /**\n     * Adds the states for the given cell recursively to the given dictionary.\n     * @param cell\n     * @param dict\n     */\n    addStates(cell, dict) {\n        const state = this.graph.view.getState(cell);\n        let count = 0;\n        if (state && !dict.get(cell)) {\n            dict.put(cell, state);\n            count++;\n            const childCount = cell.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                count += this.addStates(cell.getChildAt(i), dict);\n            }\n        }\n        return count;\n    }\n    /**\n     * Returns true if the given cell is currently being moved.\n     */\n    isCellMoving(cell) {\n        return this.allCells.get(cell);\n    }\n    /**\n     * Returns true if the guides should be used for the given {@link MouseEvent}.\n     * This implementation returns {@link Guide#isEnabledForEvent}.\n     */\n    useGuidesForEvent(me) {\n        return this.guide\n            ? this.guide.isEnabledForEvent(me.getEvent()) &&\n                !this.graph.isConstrainedEvent(me.getEvent())\n            : true;\n    }\n    /**\n     * Snaps the given vector to the grid and returns the given mxPoint instance.\n     */\n    snap(vector) {\n        const scale = this.scaleGrid ? this.graph.view.scale : 1;\n        vector.x = this.graph.snap(vector.x / scale) * scale;\n        vector.y = this.graph.snap(vector.y / scale) * scale;\n        return vector;\n    }\n    /**\n     * Returns an {@link Point} that represents the vector for moving the cells\n     * for the given {@link MouseEvent}.\n     */\n    getDelta(me) {\n        const point = convertPoint(this.graph.container, me.getX(), me.getY());\n        if (!this.first)\n            return new Point();\n        return new Point(point.x - this.first.x - this.graph.getPanDx(), point.y - this.first.y - this.graph.getPanDy());\n    }\n    /**\n     * Hook for subclassers do show details while the handler is active.\n     */\n    updateHint(me) {\n        return;\n    }\n    /**\n     * Hooks for subclassers to hide details when the handler gets inactive.\n     */\n    removeHint() {\n        return;\n    }\n    /**\n     * Hook for rounding the unscaled vector. This uses Math.round.\n     */\n    roundLength(length) {\n        return Math.round(length * 100) / 100;\n    }\n    /**\n     * Returns true if the given cell is a valid drop target.\n     */\n    isValidDropTarget(target, me) {\n        return this.cell ? this.cell.getParent() !== target : false;\n    }\n    /**\n     * Updates the preview if cloning state has changed.\n     */\n    checkPreview() {\n        if (this.livePreviewActive && this.cloning) {\n            this.resetLivePreview();\n            this.livePreviewActive = false;\n        }\n        else if (this.maxLivePreview >= this.cellCount &&\n            !this.livePreviewActive &&\n            this.allowLivePreview) {\n            if (!this.cloning || !this.livePreviewActive) {\n                this.livePreviewActive = true;\n                this.livePreviewUsed = true;\n            }\n        }\n        else if (!this.livePreviewUsed && !this.shape && this.bounds) {\n            this.shape = this.createPreviewShape(this.bounds);\n        }\n    }\n    /**\n     * Handles the event by highlighting possible drop targets and updating the\n     * preview.\n     */\n    mouseMove(sender, me) {\n        const { graph } = this;\n        if (!me.isConsumed() &&\n            graph.isMouseDown &&\n            this.cell &&\n            this.first &&\n            this.bounds &&\n            !this.suspended) {\n            // Stops moving if a multi touch event is received\n            if (isMultiTouchEvent(me.getEvent())) {\n                this.reset();\n                return;\n            }\n            let delta = this.getDelta(me);\n            const tol = graph.getEventTolerance();\n            if (this.shape ||\n                this.livePreviewActive ||\n                Math.abs(delta.x) > tol ||\n                Math.abs(delta.y) > tol) {\n                // Highlight is used for highlighting drop targets\n                if (!this.highlight) {\n                    this.highlight = new CellHighlight(this.graph, DROP_TARGET_COLOR, 3);\n                }\n                const clone = graph.isCloneEvent(me.getEvent()) &&\n                    graph.isCellsCloneable() &&\n                    this.isCloneEnabled();\n                const gridEnabled = graph.isGridEnabledEvent(me.getEvent());\n                const cell = me.getCell();\n                let hideGuide = true;\n                let target = null;\n                this.cloning = clone;\n                if (graph.isDropEnabled() && this.highlightEnabled && this.cells) {\n                    // Contains a call to getCellAt to find the cell under the mouse\n                    target = graph.getDropTarget(this.cells, me.getEvent(), cell, clone);\n                }\n                let state = target ? graph.getView().getState(target) : null;\n                let highlight = false;\n                if (state && (clone || (target && this.isValidDropTarget(target, me)))) {\n                    if (this.target !== target) {\n                        this.target = target;\n                        this.setHighlightColor(DROP_TARGET_COLOR);\n                    }\n                    highlight = true;\n                }\n                else {\n                    this.target = null;\n                    if (this.connectOnDrop &&\n                        cell &&\n                        this.cells &&\n                        this.cells.length === 1 &&\n                        cell.isVertex() &&\n                        cell.isConnectable()) {\n                        state = graph.getView().getState(cell);\n                        if (state) {\n                            const error = graph.getEdgeValidationError(null, this.cell, cell);\n                            const color = error === null ? VALID_COLOR : INVALID_CONNECT_TARGET_COLOR;\n                            this.setHighlightColor(color);\n                            highlight = true;\n                        }\n                    }\n                }\n                if (state && highlight) {\n                    this.highlight.highlight(state);\n                }\n                else {\n                    this.highlight.hide();\n                }\n                if (this.guide && this.useGuidesForEvent(me)) {\n                    delta = this.guide.move(this.bounds, delta, gridEnabled, clone);\n                    hideGuide = false;\n                }\n                else {\n                    delta = this.graph.snapDelta(delta, this.bounds, !gridEnabled, false, false);\n                }\n                if (this.guide && hideGuide) {\n                    this.guide.hide();\n                }\n                // Constrained movement if shift key is pressed\n                if (graph.isConstrainedEvent(me.getEvent())) {\n                    if (Math.abs(delta.x) > Math.abs(delta.y)) {\n                        delta.y = 0;\n                    }\n                    else {\n                        delta.x = 0;\n                    }\n                }\n                this.checkPreview();\n                if (this.currentDx !== delta.x || this.currentDy !== delta.y) {\n                    this.currentDx = delta.x;\n                    this.currentDy = delta.y;\n                    this.updatePreview();\n                }\n            }\n            this.updateHint(me);\n            this.consumeMouseEvent(InternalEvent.MOUSE_MOVE, me);\n            // Cancels the bubbling of events to the container so\n            // that the droptarget is not reset due to an mouseMove\n            // fired on the container with no associated state.\n            InternalEvent.consume(me.getEvent());\n        }\n        else if ((this.isMoveEnabled() || this.isCloneEnabled()) &&\n            this.updateCursor &&\n            !me.isConsumed() &&\n            (me.getState() || me.sourceState) &&\n            !graph.isMouseDown) {\n            let cursor = graph.getCursorForMouseEvent(me);\n            const cell = me.getCell();\n            if (!cursor && cell && graph.isEnabled() && graph.isCellMovable(cell)) {\n                if (cell.isEdge()) {\n                    cursor = EdgeHandlerConfig.cursorMovable;\n                }\n                else {\n                    cursor = VertexHandlerConfig.cursorMovable;\n                }\n            }\n            // Sets the cursor on the original source state under the mouse\n            // instead of the event source state which can be the parent\n            if (cursor && me.sourceState) {\n                me.sourceState.setCursor(cursor);\n            }\n        }\n    }\n    /**\n     * Updates the bounds of the preview shape.\n     */\n    updatePreview(remote = false) {\n        if (this.livePreviewUsed && !remote) {\n            if (this.cells) {\n                this.setHandlesVisibleForCells(this.getSelectionCellsHandler()?.getHandledSelectionCells() ?? [], false);\n                this.updateLivePreview(this.currentDx, this.currentDy);\n            }\n        }\n        else {\n            this.updatePreviewShape();\n        }\n    }\n    /**\n     * Updates the bounds of the preview shape.\n     */\n    updatePreviewShape() {\n        if (this.shape && this.pBounds) {\n            this.shape.bounds = new Rectangle(Math.round(this.pBounds.x + this.currentDx), Math.round(this.pBounds.y + this.currentDy), this.pBounds.width, this.pBounds.height);\n            this.shape.redraw();\n        }\n    }\n    /**\n     * Updates the bounds of the preview shape.\n     */\n    updateLivePreview(dx, dy) {\n        if (!this.suspended) {\n            const states = [];\n            if (this.allCells) {\n                this.allCells.visit((key, state) => {\n                    const realState = state ? this.graph.view.getState(state.cell) : null;\n                    // Checks if cell was removed or replaced\n                    if (realState !== state && state) {\n                        state.destroy();\n                        if (realState) {\n                            this.allCells.put(state.cell, realState);\n                        }\n                        else {\n                            this.allCells.remove(state.cell);\n                        }\n                        state = realState;\n                    }\n                    if (state) {\n                        // Saves current state\n                        const tempState = state.clone();\n                        states.push([state, tempState]);\n                        // Makes transparent for events to detect drop targets\n                        if (state.shape) {\n                            if (state.shape.originalPointerEvents === null) {\n                                state.shape.originalPointerEvents = state.shape.pointerEvents;\n                            }\n                            state.shape.pointerEvents = false;\n                            if (state.text) {\n                                if (state.text.originalPointerEvents === null) {\n                                    state.text.originalPointerEvents = state.text.pointerEvents;\n                                }\n                                state.text.pointerEvents = false;\n                            }\n                        }\n                        // Temporarily changes position\n                        if (state.cell.isVertex()) {\n                            state.x += dx;\n                            state.y += dy;\n                            // Draws the live preview\n                            if (!this.cloning) {\n                                state.view.graph.cellRenderer.redraw(state, true);\n                                // Forces redraw of connected edges after all states\n                                // have been updated but avoids update of state\n                                state.view.invalidate(state.cell);\n                                state.invalid = false;\n                                // Hides folding icon\n                                if (state.control && state.control.node) {\n                                    state.control.node.style.visibility = 'hidden';\n                                }\n                            }\n                            // Clone live preview may use text bounds\n                            else if (state.text) {\n                                state.text.updateBoundingBox();\n                                // Fixes preview box for edge labels\n                                if (state.text.boundingBox) {\n                                    state.text.boundingBox.x += dx;\n                                    state.text.boundingBox.y += dy;\n                                }\n                                if (state.text.unrotatedBoundingBox) {\n                                    state.text.unrotatedBoundingBox.x += dx;\n                                    state.text.unrotatedBoundingBox.y += dy;\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n            // Resets the handler if everything was removed\n            if (states.length === 0) {\n                this.reset();\n            }\n            else {\n                // Redraws connected edges\n                const s = this.graph.view.scale;\n                for (let i = 0; i < states.length; i += 1) {\n                    const state = states[i][0];\n                    if (state.cell.isEdge()) {\n                        const geometry = state.cell.getGeometry();\n                        const points = [];\n                        if (geometry && geometry.points) {\n                            for (let j = 0; j < geometry.points.length; j++) {\n                                if (geometry.points[j]) {\n                                    points.push(new Point(geometry.points[j].x + dx / s, geometry.points[j].y + dy / s));\n                                }\n                            }\n                        }\n                        let source = state.visibleSourceState;\n                        let target = state.visibleTargetState;\n                        const pts = states[i][1].absolutePoints;\n                        if (source == null || !this.isCellMoving(source.cell)) {\n                            const pt0 = pts[0];\n                            if (pt0) {\n                                state.setAbsoluteTerminalPoint(new Point(pt0.x + dx, pt0.y + dy), true);\n                                source = null;\n                            }\n                        }\n                        else {\n                            state.view.updateFixedTerminalPoint(state, source, true, this.graph.getConnectionConstraint(state, source, true));\n                        }\n                        if (target == null || !this.isCellMoving(target.cell)) {\n                            const ptn = pts[pts.length - 1];\n                            if (ptn) {\n                                state.setAbsoluteTerminalPoint(new Point(ptn.x + dx, ptn.y + dy), false);\n                                target = null;\n                            }\n                        }\n                        else {\n                            state.view.updateFixedTerminalPoint(state, target, false, this.graph.getConnectionConstraint(state, target, false));\n                        }\n                        state.view.updatePoints(state, points, source, target);\n                        state.view.updateFloatingTerminalPoints(state, source, target);\n                        state.view.updateEdgeLabelOffset(state);\n                        state.invalid = false;\n                        // Draws the live preview but avoids update of state\n                        if (!this.cloning) {\n                            state.view.graph.cellRenderer.redraw(state, true);\n                        }\n                    }\n                }\n                this.graph.view.validate();\n                this.redrawHandles(states);\n                this.resetPreviewStates(states);\n            }\n        }\n    }\n    /**\n     * Redraws the preview shape for the given states array.\n     */\n    redrawHandles(states) {\n        const selectionCellsHandler = this.getSelectionCellsHandler();\n        for (let i = 0; i < states.length; i += 1) {\n            const handler = selectionCellsHandler?.getHandler(states[i][0].cell);\n            handler?.redraw(true);\n        }\n    }\n    /**\n     * Resets the given preview states array.\n     */\n    resetPreviewStates(states) {\n        for (let i = 0; i < states.length; i += 1) {\n            states[i][0].setState(states[i][1]);\n        }\n    }\n    /**\n     * Suspends the livew preview.\n     */\n    suspend() {\n        if (!this.suspended) {\n            if (this.livePreviewUsed) {\n                this.updateLivePreview(0, 0);\n            }\n            if (this.shape) {\n                this.shape.node.style.visibility = 'hidden';\n            }\n            if (this.guide) {\n                this.guide.setVisible(false);\n            }\n            this.suspended = true;\n        }\n    }\n    /**\n     * Suspends the livew preview.\n     */\n    resume() {\n        if (this.suspended) {\n            this.suspended = false;\n            if (this.livePreviewUsed) {\n                this.livePreviewActive = true;\n            }\n            if (this.shape) {\n                this.shape.node.style.visibility = 'visible';\n            }\n            if (this.guide) {\n                this.guide.setVisible(true);\n            }\n        }\n    }\n    /**\n     * Resets the livew preview.\n     */\n    resetLivePreview() {\n        this.allCells.visit((key, state) => {\n            // Restores event handling\n            if (state.shape && state.shape.originalPointerEvents !== null) {\n                state.shape.pointerEvents = state.shape.originalPointerEvents;\n                state.shape.originalPointerEvents = null;\n                // Forces repaint even if not moved to update pointer events\n                state.shape.bounds = null;\n                if (state.text && state.text.originalPointerEvents !== null) {\n                    state.text.pointerEvents = state.text.originalPointerEvents;\n                    state.text.originalPointerEvents = null;\n                }\n            }\n            // Shows folding icon\n            if (state.control &&\n                state.control.node &&\n                state.control.node.style.visibility === 'hidden') {\n                state.control.node.style.visibility = '';\n            }\n            // Fixes preview box for edge labels\n            if (!this.cloning) {\n                if (state.text) {\n                    state.text.updateBoundingBox();\n                }\n            }\n            // Forces repaint of connected edges\n            state.view.invalidate(state.cell);\n        });\n        // Repaints all invalid states\n        this.graph.view.validate();\n    }\n    /**\n     * Sets whether the handles attached to the given cells are visible.\n     *\n     * @param cells Array of {@link Cell}s.\n     * @param visible Boolean that specifies if the handles should be visible.\n     * @param force Forces an update of the handler regardless of the last used value.\n     */\n    setHandlesVisibleForCells(cells, visible, force = false) {\n        if (force || this.handlesVisible !== visible) {\n            this.handlesVisible = visible;\n            const selectionCellsHandler = this.getSelectionCellsHandler();\n            for (let i = 0; i < cells.length; i += 1) {\n                const handler = selectionCellsHandler?.getHandler(cells[i]);\n                if (handler) {\n                    handler.setHandlesVisible(visible);\n                    if (visible) {\n                        handler.redraw();\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Sets the color of the rectangle used to highlight drop targets.\n     *\n     * @param color String that represents the new highlight color.\n     */\n    setHighlightColor(color) {\n        if (this.highlight) {\n            this.highlight.setHighlightColor(color);\n        }\n    }\n    /**\n     * Handles the event by applying the changes to the selection cells.\n     */\n    mouseUp(sender, me) {\n        if (!me.isConsumed()) {\n            if (this.livePreviewUsed) {\n                this.resetLivePreview();\n            }\n            if (this.cell &&\n                this.first &&\n                (this.shape || this.livePreviewUsed) &&\n                isNumeric(this.currentDx) &&\n                isNumeric(this.currentDy)) {\n                const { graph } = this;\n                const cell = me.getCell();\n                if (this.connectOnDrop &&\n                    !this.target &&\n                    cell &&\n                    cell.isVertex() &&\n                    cell.isConnectable() &&\n                    graph.isEdgeValid(null, this.cell, cell)) {\n                    const connectionHandler = graph.getPlugin('ConnectionHandler');\n                    connectionHandler?.connect(this.cell, cell, me.getEvent());\n                }\n                else {\n                    const clone = graph.isCloneEvent(me.getEvent()) &&\n                        graph.isCellsCloneable() &&\n                        this.isCloneEnabled();\n                    const { scale } = graph.getView();\n                    const dx = this.roundLength(this.currentDx / scale);\n                    const dy = this.roundLength(this.currentDy / scale);\n                    const target = this.target;\n                    if (target &&\n                        graph.isSplitEnabled() &&\n                        this.cells &&\n                        graph.isSplitTarget(target, this.cells, me.getEvent())) {\n                        graph.splitEdge(target, this.cells, null, dx, dy, me.getGraphX(), me.getGraphY());\n                    }\n                    else if (this.cells) {\n                        this.moveCells(this.cells, dx, dy, clone, this.target, me.getEvent());\n                    }\n                }\n            }\n            else if (this.isSelectEnabled() && this.delayedSelection && this.cell != null) {\n                this.selectDelayed(me);\n            }\n        }\n        // Consumes the event if a cell was initially clicked\n        if (this.cellWasClicked) {\n            this.consumeMouseEvent(InternalEvent.MOUSE_UP, me);\n        }\n        this.reset();\n    }\n    /**\n     * Resets the state of this handler.\n     */\n    reset() {\n        if (this.livePreviewUsed) {\n            this.resetLivePreview();\n            this.setHandlesVisibleForCells(this.getSelectionCellsHandler()?.getHandledSelectionCells() ?? [], true);\n        }\n        this.destroyShapes();\n        this.removeHint();\n        this.delayedSelection = false;\n        this.livePreviewActive = false;\n        this.livePreviewUsed = false;\n        this.cellWasClicked = false;\n        this.suspended = false;\n        this.currentDx = 0;\n        this.currentDy = 0;\n        this.cellCount = 0;\n        this.cloning = false;\n        this.allCells.clear();\n        this.pBounds = null;\n        this.target = null;\n        this.first = null;\n        this.cells = null;\n        this.cell = null;\n    }\n    /**\n     * Returns true if the given cells should be removed from the parent for the specified\n     * mousereleased event.\n     */\n    shouldRemoveCellsFromParent(parent, cells, evt) {\n        if (parent.isVertex()) {\n            const pState = this.graph.getView().getState(parent);\n            if (pState) {\n                let pt = convertPoint(this.graph.container, getClientX(evt), getClientY(evt));\n                const alpha = toRadians(pState.style.rotation ?? 0);\n                if (alpha !== 0) {\n                    const cos = Math.cos(-alpha);\n                    const sin = Math.sin(-alpha);\n                    const cx = new Point(pState.getCenterX(), pState.getCenterY());\n                    pt = getRotatedPoint(pt, cos, sin, cx);\n                }\n                return !contains(pState, pt.x, pt.y);\n            }\n        }\n        return false;\n    }\n    /**\n     * Moves the given cells by the specified amount.\n     */\n    moveCells(cells, dx, dy, clone, target, evt) {\n        if (!this.cell)\n            return;\n        if (clone) {\n            cells = this.graph.getCloneableCells(cells);\n        }\n        // Removes cells from parent\n        const parent = this.cell.getParent();\n        if (!target &&\n            parent &&\n            this.isRemoveCellsFromParent() &&\n            this.shouldRemoveCellsFromParent(parent, cells, evt)) {\n            target = this.graph.getDefaultParent();\n        }\n        // Cloning into locked cells is not allowed\n        clone = !!clone && !this.graph.isCellLocked(target || this.graph.getDefaultParent());\n        this.graph.batchUpdate(() => {\n            const parents = [];\n            // Removes parent if all child cells are removed\n            if (!clone && target && this.removeEmptyParents) {\n                // Collects all non-selected parents\n                const dict = new Dictionary();\n                for (let i = 0; i < cells.length; i += 1) {\n                    dict.put(cells[i], true);\n                }\n                // LATER: Recurse up the cell hierarchy\n                for (let i = 0; i < cells.length; i += 1) {\n                    const par = cells[i].getParent();\n                    if (par && !dict.get(par)) {\n                        dict.put(par, true);\n                        parents.push(par);\n                    }\n                }\n            }\n            // Passes all selected cells in order to correctly clone or move into\n            // the target cell. The method checks for each cell if its movable.\n            cells = this.graph.moveCells(cells, dx, dy, clone, target, evt);\n            // Removes parent if all child cells are removed\n            const temp = [];\n            for (let i = 0; i < parents.length; i += 1) {\n                if (this.shouldRemoveParent(parents[i])) {\n                    temp.push(parents[i]);\n                }\n            }\n            this.graph.removeCells(temp, false);\n        });\n        // Selects the new cells if cells have been cloned\n        if (clone) {\n            this.graph.setSelectionCells(cells);\n        }\n        if (this.isSelectEnabled() && this.scrollOnMove) {\n            this.graph.scrollCellToVisible(cells[0]);\n        }\n    }\n    /**\n     * Returns true if the given parent should be removed after removal of child cells.\n     */\n    shouldRemoveParent(parent) {\n        const state = this.graph.view.getState(parent);\n        return (state != null &&\n            (state.cell.isEdge() || state.cell.isVertex()) &&\n            this.graph.isCellDeletable(state.cell) &&\n            state.cell.getChildCount() === 0 &&\n            state.isTransparentState());\n    }\n    /**\n     * Destroy the preview and highlight shapes.\n     */\n    destroyShapes() {\n        // Destroys the preview dashed rectangle\n        if (this.shape) {\n            this.shape.destroy();\n            this.shape = null;\n        }\n        if (this.guide) {\n            this.guide.destroy();\n            this.guide = null;\n        }\n        // Destroys the drop target highlight\n        if (this.highlight) {\n            this.highlight.destroy();\n            this.highlight = null;\n        }\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes.\n     */\n    onDestroy() {\n        this.graph.removeMouseListener(this);\n        this.graph.removeListener(this.panHandler);\n        this.graph.removeListener(this.escapeHandler);\n        this.graph.getDataModel().removeListener(this.refreshHandler);\n        this.graph.removeListener(this.refreshHandler);\n        InternalEvent.removeListener(document, 'keydown', this.keyHandler);\n        InternalEvent.removeListener(document, 'keyup', this.keyHandler);\n        this.destroyShapes();\n        this.removeHint();\n    }\n    getSelectionCellsHandler() {\n        return this.graph.getPlugin('SelectionCellsHandler');\n    }\n}\nSelectionHandler.pluginId = 'SelectionHandler';\nexport default SelectionHandler;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { hasScrollbars } from '../../util/styleUtils';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\n/**\n * Implements a handler for panning.\n *\n * @category Navigation\n */\nclass PanningManager {\n    constructor(graph) {\n        /**\n         * Damper value for the panning. Default is 1/6.\n         */\n        this.damper = 1 / 6;\n        /**\n         * Delay in milliseconds for the panning. Default is 10.\n         */\n        this.delay = 10;\n        /**\n         * Specifies if mouse events outside of the component should be handled. Default is true.\n         */\n        this.handleMouseOut = true;\n        /**\n         * Border to handle automatic panning inside the component. Default is 0 (disabled).\n         */\n        this.border = 0;\n        this.thread = null;\n        this.active = false;\n        this.tdx = 0;\n        this.tdy = 0;\n        this.t0x = 0;\n        this.t0y = 0;\n        this.dx = 0;\n        this.dy = 0;\n        this.scrollbars = false;\n        this.scrollLeft = 0;\n        this.scrollTop = 0;\n        this.thread = null;\n        this.active = false;\n        this.tdx = 0;\n        this.tdy = 0;\n        this.t0x = 0;\n        this.t0y = 0;\n        this.dx = 0;\n        this.dy = 0;\n        this.scrollbars = false;\n        this.scrollLeft = 0;\n        this.scrollTop = 0;\n        this.mouseListener = {\n            mouseDown: () => {\n                return;\n            },\n            mouseMove: () => {\n                return;\n            },\n            mouseUp: () => {\n                if (this.active) {\n                    this.stop();\n                }\n            },\n        };\n        graph.addMouseListener(this.mouseListener);\n        this.mouseUpListener = () => {\n            if (this.active) {\n                this.stop();\n            }\n        };\n        // Stops scrolling on every mouseup anywhere in the document\n        InternalEvent.addListener(document, 'mouseup', this.mouseUpListener);\n        const createThread = () => {\n            this.scrollbars = hasScrollbars(graph.container);\n            this.scrollLeft = graph.container.scrollLeft;\n            this.scrollTop = graph.container.scrollTop;\n            return window.setInterval(() => {\n                this.tdx -= this.dx;\n                this.tdy -= this.dy;\n                if (this.scrollbars) {\n                    const left = -graph.container.scrollLeft - Math.ceil(this.dx);\n                    const top = -graph.container.scrollTop - Math.ceil(this.dy);\n                    graph.panGraph(left, top);\n                    graph.setPanDx(this.scrollLeft - graph.container.scrollLeft);\n                    graph.setPanDy(this.scrollTop - graph.container.scrollTop);\n                    graph.fireEvent(new EventObject(InternalEvent.PAN));\n                    // TODO: Implement graph.autoExtend\n                }\n                else {\n                    graph.panGraph(this.getDx(), this.getDy());\n                }\n            }, this.delay);\n        };\n        this.isActive = () => {\n            return this.active;\n        };\n        this.getDx = () => {\n            return Math.round(this.tdx);\n        };\n        this.getDy = () => {\n            return Math.round(this.tdy);\n        };\n        this.start = () => {\n            this.t0x = graph.view.translate.x;\n            this.t0y = graph.view.translate.y;\n            this.active = true;\n        };\n        this.panTo = (x, y, w = 0, h = 0) => {\n            if (!this.active) {\n                this.start();\n            }\n            this.scrollLeft = graph.container.scrollLeft;\n            this.scrollTop = graph.container.scrollTop;\n            const c = graph.container;\n            this.dx = x + w - c.scrollLeft - c.clientWidth;\n            if (this.dx < 0 && Math.abs(this.dx) < this.border) {\n                this.dx = this.border + this.dx;\n            }\n            else if (this.handleMouseOut) {\n                this.dx = Math.max(this.dx, 0);\n            }\n            else {\n                this.dx = 0;\n            }\n            if (this.dx == 0) {\n                this.dx = x - c.scrollLeft;\n                if (this.dx > 0 && this.dx < this.border) {\n                    this.dx -= this.border;\n                }\n                else if (this.handleMouseOut) {\n                    this.dx = Math.min(0, this.dx);\n                }\n                else {\n                    this.dx = 0;\n                }\n            }\n            this.dy = y + h - c.scrollTop - c.clientHeight;\n            if (this.dy < 0 && Math.abs(this.dy) < this.border) {\n                this.dy = this.border + this.dy;\n            }\n            else if (this.handleMouseOut) {\n                this.dy = Math.max(this.dy, 0);\n            }\n            else {\n                this.dy = 0;\n            }\n            if (this.dy == 0) {\n                this.dy = y - c.scrollTop;\n                if (this.dy > 0 && this.dy < this.border) {\n                    this.dy -= this.border;\n                }\n                else if (this.handleMouseOut) {\n                    this.dy = Math.min(0, this.dy);\n                }\n                else {\n                    this.dy = 0;\n                }\n            }\n            if (this.dx != 0 || this.dy != 0) {\n                this.dx *= this.damper;\n                this.dy *= this.damper;\n                if (this.thread == null) {\n                    this.thread = createThread();\n                }\n            }\n            else if (this.thread != null) {\n                window.clearInterval(this.thread);\n                this.thread = null;\n            }\n        };\n        this.stop = () => {\n            if (this.active) {\n                this.active = false;\n                if (this.thread != null) {\n                    window.clearInterval(this.thread);\n                    this.thread = null;\n                }\n                this.tdx = 0;\n                this.tdy = 0;\n                if (!this.scrollbars) {\n                    const px = graph.getPanDx();\n                    const py = graph.getPanDy();\n                    if (px != 0 || py != 0) {\n                        graph.panGraph(0, 0);\n                        graph.view.setTranslate(this.t0x + px / graph.view.scale, this.t0y + py / graph.view.scale);\n                    }\n                }\n                else {\n                    graph.setPanDx(0);\n                    graph.setPanDy(0);\n                    graph.fireEvent(new EventObject(InternalEvent.PAN));\n                }\n            }\n        };\n        this.destroy = () => {\n            graph.removeMouseListener(this.mouseListener);\n            InternalEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n        };\n    }\n}\nexport default PanningManager;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from '../event/EventSource';\nimport { hasScrollbars } from '../../util/styleUtils';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport { isConsumed, isControlDown, isLeftMouseButton, isMultiTouchEvent, isPopupTrigger, isShiftDown, } from '../../util/EventUtils';\nimport PanningManager from '../other/PanningManager';\n/**\n * Event handler that pans and creates popupmenus. To use the left\n * mouse button for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>.\n *\n * When registered in the {@link AbstractGraph.constructor} plugins list, it can be enabled using {@link AbstractGraph.setPanning}.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding {@link MouseEvent}.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding {@link MouseEvent}.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding {@link MouseEvent}.\n *\n * @category Plugin\n * @category Navigation\n */\nclass PanningHandler extends EventSource {\n    constructor(graph) {\n        super();\n        this.getPanningManager = () => this.panningManager;\n        /**\n         * Specifies if panning should be active for the left mouse button.\n         * Setting this to true may conflict with {@link RubberBandHandler}. Default is false.\n         */\n        this.useLeftButtonForPanning = false;\n        /**\n         * Specifies if {@link Event#isPopupTrigger} should also be used for panning.\n         */\n        this.usePopupTrigger = true;\n        /**\n         * Specifies if panning should be active even if there is a cell under the\n         * mousepointer. Default is false.\n         */\n        this.ignoreCell = false;\n        /**\n         * Specifies if the panning should be previewed. Default is true.\n         */\n        this.previewEnabled = true;\n        /**\n         * Specifies if the panning steps should be aligned to the grid size.\n         * Default is false.\n         */\n        this.useGrid = false;\n        /**\n         * Specifies if panning should be enabled. Default is false.\n         */\n        this.panningEnabled = false;\n        /**\n         * Specifies if pinch gestures should be handled as zoom. Default is true.\n         */\n        this.pinchEnabled = true;\n        this.initialScale = 0;\n        /**\n         * Specifies the maximum scale. Default is 8.\n         */\n        this.maxScale = 8;\n        /**\n         * Specifies the minimum scale. Default is 0.01.\n         */\n        this.minScale = 0.01;\n        /**\n         * Holds the current horizontal offset.\n         */\n        this.dx = 0;\n        /**\n         * Holds the current vertical offset.\n         */\n        this.dy = 0;\n        /**\n         * Holds the x-coordinate of the start point.\n         */\n        this.startX = 0;\n        /**\n         * Holds the y-coordinate of the start point.\n         */\n        this.startY = 0;\n        this.dx0 = 0;\n        this.dy0 = 0;\n        this.panningTrigger = false;\n        this.active = false;\n        this.mouseDownEvent = null;\n        this.graph = graph;\n        this.graph.addMouseListener(this);\n        // Handles force panning event\n        this.forcePanningHandler = (sender, eo) => {\n            const evtName = eo.getProperty('eventName');\n            const me = eo.getProperty('event');\n            if (evtName === InternalEvent.MOUSE_DOWN && this.isForcePanningEvent(me)) {\n                this.start(me);\n                this.active = true;\n                this.fireEvent(new EventObject(InternalEvent.PAN_START, { event: me }));\n                me.consume();\n            }\n        };\n        this.graph.addListener(InternalEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n        // Handles pinch gestures\n        this.gestureHandler = (sender, eo) => {\n            if (this.isPinchEnabled()) {\n                const evt = eo.getProperty('event');\n                if (!isConsumed(evt) && evt.type === 'gesturestart') {\n                    this.initialScale = this.graph.view.scale;\n                    // Forces start of panning when pinch gesture starts\n                    if (!this.active && this.mouseDownEvent) {\n                        this.start(this.mouseDownEvent);\n                        this.mouseDownEvent = null;\n                    }\n                }\n                else if (evt.type === 'gestureend' && this.initialScale !== 0) {\n                    this.initialScale = 0;\n                }\n                if (this.initialScale !== 0) {\n                    this.zoomGraph(evt);\n                }\n            }\n        };\n        this.graph.addListener(InternalEvent.GESTURE, this.gestureHandler);\n        this.mouseUpListener = () => {\n            if (this.active) {\n                this.reset();\n            }\n        };\n        // Stops scrolling on every mouseup anywhere in the document\n        InternalEvent.addListener(document, 'mouseup', this.mouseUpListener);\n        this.panningManager = new PanningManager(graph);\n    }\n    /**\n     * Returns true if the handler is currently active.\n     */\n    isActive() {\n        return this.active || this.initialScale !== null;\n    }\n    /**\n     * Returns <panningEnabled>.\n     */\n    isPanningEnabled() {\n        return this.panningEnabled;\n    }\n    /**\n     * Sets <panningEnabled>.\n     */\n    setPanningEnabled(value) {\n        this.panningEnabled = value;\n    }\n    /**\n     * Returns <pinchEnabled>.\n     */\n    isPinchEnabled() {\n        return this.pinchEnabled;\n    }\n    /**\n     * Sets <pinchEnabled>.\n     */\n    setPinchEnabled(value) {\n        this.pinchEnabled = value;\n    }\n    /**\n     * Returns true if the given event is a panning trigger for the optional\n     * given cell. This returns true if control-shift is pressed or if\n     * <usePopupTrigger> is true and the event is a popup trigger.\n     */\n    isPanningTrigger(me) {\n        const evt = me.getEvent();\n        return ((this.useLeftButtonForPanning && !me.getState() && isLeftMouseButton(evt)) ||\n            (isControlDown(evt) && isShiftDown(evt)) ||\n            (this.usePopupTrigger && isPopupTrigger(evt)));\n    }\n    /**\n     * Returns true if the given {@link MouseEvent} should start panning. This\n     * implementation always returns true if <ignoreCell> is true or for\n     * multi touch events.\n     */\n    isForcePanningEvent(me) {\n        return this.ignoreCell || isMultiTouchEvent(me.getEvent());\n    }\n    /**\n     * Handles the event by initiating the panning. By consuming the event all\n     * subsequent events of the gesture are redirected to this handler.\n     */\n    mouseDown(sender, me) {\n        this.mouseDownEvent = me;\n        if (!me.isConsumed() &&\n            this.isPanningEnabled() &&\n            !this.active &&\n            this.isPanningTrigger(me)) {\n            this.start(me);\n            this.consumePanningTrigger(me);\n        }\n    }\n    /**\n     * Starts panning at the given event.\n     */\n    start(me) {\n        this.dx0 = -this.graph.container.scrollLeft;\n        this.dy0 = -this.graph.container.scrollTop;\n        // Stores the location of the trigger event\n        this.startX = me.getX();\n        this.startY = me.getY();\n        this.dx = 0;\n        this.dy = 0;\n        this.panningTrigger = true;\n    }\n    /**\n     * Consumes the given {@link MouseEvent} if it was a panning trigger in\n     * {@link ouseDown}. The default is to invoke {@link MouseEvent#consume}. Note that this\n     * will block any further event processing. If you haven't disabled built-in\n     * context menus and require immediate selection of the cell on mouseDown in\n     * Safari and/or on the Mac, then use the following code:\n     *\n     * ```javascript\n     * consumePanningTrigger(me)\n     * {\n     *   if (me.evt.preventDefault)\n     *   {\n     *     me.evt.preventDefault();\n     *   }\n     *\n     *   // Stops event processing in IE\n     *   me.evt.returnValue = false;\n     *\n     *   // Sets local consumed state\n     *   if (!Client.IS_SF && !Client.IS_MAC)\n     *   {\n     *     me.consumed = true;\n     *   }\n     * };\n     * ```\n     */\n    consumePanningTrigger(me) {\n        me.consume();\n    }\n    /**\n     * Handles the event by updating the panning on the graph.\n     */\n    mouseMove(sender, me) {\n        this.dx = me.getX() - this.startX;\n        this.dy = me.getY() - this.startY;\n        if (this.active) {\n            if (this.previewEnabled) {\n                // Applies the grid to the panning steps\n                if (this.useGrid) {\n                    this.dx = this.graph.snap(this.dx);\n                    this.dy = this.graph.snap(this.dy);\n                }\n                this.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n            }\n            this.fireEvent(new EventObject(InternalEvent.PAN, { event: me }));\n        }\n        else if (this.panningTrigger) {\n            const tmp = this.active;\n            // Panning is activated only if the mouse is moved\n            // beyond the graph tolerance\n            this.active =\n                Math.abs(this.dx) > this.graph.getSnapTolerance() ||\n                    Math.abs(this.dy) > this.graph.getSnapTolerance();\n            if (!tmp && this.active) {\n                this.fireEvent(new EventObject(InternalEvent.PAN_START, { event: me }));\n            }\n        }\n        if (this.active || this.panningTrigger) {\n            me.consume();\n        }\n    }\n    /**\n     * Handles the event by setting the translation on the view or showing the\n     * popupmenu.\n     */\n    mouseUp(sender, me) {\n        if (this.active) {\n            if (this.dx !== 0 && this.dy !== 0) {\n                // Ignores if scrollbars have been used for panning\n                if (!this.graph.isUseScrollbarsForPanning() ||\n                    !hasScrollbars(this.graph.container)) {\n                    const { scale } = this.graph.getView();\n                    const t = this.graph.getView().translate;\n                    this.graph.panGraph(0, 0);\n                    this.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n                }\n                me.consume();\n            }\n            this.fireEvent(new EventObject(InternalEvent.PAN_END, { event: me }));\n        }\n        this.reset();\n    }\n    /**\n     * Zooms the graph to the given value and consumed the event if needed.\n     */\n    zoomGraph(evt) {\n        // @ts-ignore evt may have scale property\n        let value = Math.round(this.initialScale * evt.scale * 100) / 100;\n        value = Math.max(this.minScale, value);\n        value = Math.min(this.maxScale, value);\n        if (this.graph.view.scale !== value) {\n            this.graph.zoomTo(value);\n            InternalEvent.consume(evt);\n        }\n    }\n    /**\n     * Handles the event by setting the translation on the view or showing the\n     * popupmenu.\n     */\n    reset() {\n        this.panningTrigger = false;\n        this.mouseDownEvent = null;\n        this.active = false;\n        this.dx = 0;\n        this.dy = 0;\n    }\n    /**\n     * Pans {@link graph} by the given amount.\n     */\n    panGraph(dx, dy) {\n        this.graph.getView().setTranslate(dx, dy);\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes.\n     */\n    onDestroy() {\n        this.graph.removeMouseListener(this);\n        this.graph.removeListener(this.forcePanningHandler);\n        this.graph.removeListener(this.gestureHandler);\n        InternalEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n    }\n}\nPanningHandler.pluginId = 'PanningHandler';\nexport default PanningHandler;\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nfunction keep2digits(value) {\n    return Number(value.toFixed(2));\n}\n/**\n * A plugin providing methods to fit the graph within its container.\n * @since 0.17.0\n * @category Navigation\n * @category Plugin\n */\nexport class FitPlugin {\n    /**\n     * Constructs the plugin that provides `fit` methods.\n     *\n     * @param graph Reference to the enclosing {@link AbstractGraph}.\n     */\n    constructor(graph) {\n        this.graph = graph;\n        /**\n         * Specifies the maximum scale to be applied during fit operations. Set this to `null` to allow any value.\n         * @default 8\n         */\n        this.maxFitScale = 8;\n    }\n    /**\n     * Fit and center the graph within its container.\n     *\n     * @param options Optional options to customize the fit behavior.\n     * @returns The current scale in the view.\n     */\n    fitCenter(options) {\n        // Inspired by the former examples provided in the Graph.fit JSDoc: https://github.com/maxGraph/maxGraph/blob/v0.16.0/packages/core/src/view/Graph.ts#L845-L861\n        const margin = options?.margin ?? 2;\n        const { container, view } = this.graph;\n        const clientWidth = container.clientWidth - 2 * margin;\n        const clientHeight = container.clientHeight - 2 * margin;\n        const bounds = this.graph.getGraphBounds();\n        const originalScale = view.scale;\n        const width = bounds.width / originalScale;\n        const height = bounds.height / originalScale;\n        // Apply workarounds to avoid rounding impact if fitCenter is called multiple times\n        // Use precise scale value when computing translation values, but round the applied scale\n        // Translate using integer values as this is done in Graph.fit\n        let newScale = Math.min(this.maxFitScale ?? Infinity, clientWidth / width, clientHeight / height);\n        const translateX = Math.floor(view.translate.x +\n            (container.clientWidth - width * newScale) / (2 * newScale) -\n            bounds.x / originalScale);\n        const translateY = Math.floor(view.translate.y +\n            (container.clientHeight - height * newScale) / (2 * newScale) -\n            bounds.y / originalScale);\n        newScale = keep2digits(newScale);\n        view.scaleAndTranslate(newScale, translateX, translateY);\n        return newScale;\n    }\n    /** Do nothing here. */\n    onDestroy() {\n        // no-op\n    }\n}\nFitPlugin.pluginId = 'fit';\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2016, JGraph Ltd\nCopyright (c) 2006-2016, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { convertPoint, getOffset, getScrollOrigin, setOpacity, setPrefixedStyle, } from '../../util/styleUtils';\nimport InternalEvent from '../event/InternalEvent';\nimport Point from '../geometry/Point';\nimport InternalMouseEvent from '../event/InternalMouseEvent';\nimport Client from '../../Client';\nimport Rectangle from '../geometry/Rectangle';\nimport { isAltDown, isMultiTouchEvent } from '../../util/EventUtils';\nimport { clearSelection } from '../../util/domUtils';\n/**\n * Event handler that selects rectangular regions.\n *\n * **IMPORTANT**: This is not built-into `maxGraph` i.e. this plugin is not in the `maxGraph` default plugins, see {@link getDefaultPlugins}.\n *\n * To enable rubberband selection in a graph, use the following code.\n *\n * ```javascript\n * const plugins = [\n *   ...getDefaultPlugins(), // or any other plugins you want\n *   RubberBandHandler,\n * ];\n *\n * // Creates the graph with the custom plugins\n * const graph = new Graph(container, undefined, plugins);\n * ```\n *\n * **IMPORTANT**: the RubberBandHandler requires CSS styles in order to work properly.\n * See the CSS rules in the `css/common.css` file provided within the npm package. They relate to the `.mxRubberband` class.\n *\n * @category Plugin\n */\nclass RubberBandHandler {\n    constructor(graph) {\n        this.first = null;\n        this.destroyed = false;\n        this.dragHandler = null;\n        this.dropHandler = null;\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        /**\n         * Specifies the default opacity to be used for the rubberband div.\n         * Valid values are between `0` and `100`.\n         * @default 20\n         */\n        this.defaultOpacity = 20;\n        /**\n         * Specifies if events are handled.\n         * @default true\n         */\n        this.enabled = true;\n        /**\n         * Holds the DIV element which is currently visible.\n         */\n        this.div = null;\n        /**\n         * Holds the DIV element which is used to display the rubberband.\n         */\n        this.sharedDiv = null;\n        /**\n         * Holds the value of the x argument in the last call to {@link update}.\n         */\n        this.currentX = 0;\n        /**\n         * Holds the value of the y argument in the last call to {@link update}.\n         */\n        this.currentY = 0;\n        /**\n         * Optional fade out effect.\n         * @default false\n         */\n        this.fadeOut = false;\n        this.graph = graph;\n        this.graph.addMouseListener(this);\n        // Handles force rubberband event\n        this.forceRubberbandHandler = (sender, evt) => {\n            const evtName = evt.getProperty('eventName');\n            const me = evt.getProperty('event');\n            if (evtName === InternalEvent.MOUSE_DOWN && this.isForceRubberbandEvent(me)) {\n                const offset = getOffset(this.graph.container);\n                const origin = getScrollOrigin(this.graph.container);\n                origin.x -= offset.x;\n                origin.y -= offset.y;\n                this.start(me.getX() + origin.x, me.getY() + origin.y);\n                me.consume(false);\n            }\n        };\n        this.graph.addListener(InternalEvent.FIRE_MOUSE_EVENT, this.forceRubberbandHandler);\n        // Repaints the marquee after autoscroll\n        this.panHandler = () => {\n            this.repaint();\n        };\n        this.graph.addListener(InternalEvent.PAN, this.panHandler);\n        // Does not show menu if any touch gestures take place after the trigger\n        this.gestureHandler = (sender, eo) => {\n            if (this.first) {\n                this.reset();\n            }\n        };\n        this.graph.addListener(InternalEvent.GESTURE, this.gestureHandler);\n    }\n    /**\n     * Creates the rubberband selection shape.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Enables or disables event handling. This implementation updates{@link enabled}.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n    }\n    /**\n     * Returns true if the given {@link MouseEvent} should start rubberband selection.\n     * This implementation returns true if the alt key is pressed.\n     */\n    isForceRubberbandEvent(me) {\n        return isAltDown(me.getEvent());\n    }\n    /**\n     * Handles the event by initiating a rubberband selection.\n     * By consuming the event all subsequent events of the gesture are redirected to this handler.\n     */\n    mouseDown(_sender, me) {\n        if (!me.isConsumed() &&\n            this.isEnabled() &&\n            this.graph.isEnabled() &&\n            !me.getState() &&\n            !isMultiTouchEvent(me.getEvent())) {\n            const offset = getOffset(this.graph.container);\n            const origin = getScrollOrigin(this.graph.container);\n            origin.x -= offset.x;\n            origin.y -= offset.y;\n            this.start(me.getX() + origin.x, me.getY() + origin.y);\n            // Does not prevent the default for this event so that the\n            // event processing chain is still executed even if we start\n            // rubberbanding. This is required eg. in ExtJs to hide the\n            // current context menu. In mouseMove we'll make sure we're\n            // not selecting anything while we're rubberbanding.\n            me.consume(false);\n        }\n    }\n    /**\n     * Creates the rubberband selection shape.\n     */\n    start(x, y) {\n        this.first = new Point(x, y);\n        const { container } = this.graph;\n        function createMouseEvent(evt) {\n            const me = new InternalMouseEvent(evt);\n            const pt = convertPoint(container, me.getX(), me.getY());\n            me.graphX = pt.x;\n            me.graphY = pt.y;\n            return me;\n        }\n        this.dragHandler = (evt) => {\n            this.mouseMove(this.graph, createMouseEvent(evt));\n        };\n        this.dropHandler = (evt) => {\n            this.mouseUp(this.graph, createMouseEvent(evt));\n        };\n        // Workaround for rubberband stopping if the mouse leaves the container in Firefox\n        if (Client.IS_FF) {\n            InternalEvent.addGestureListeners(document, null, this.dragHandler, this.dropHandler);\n        }\n    }\n    /**\n     * Handles the event by updating the rubberband selection.\n     */\n    mouseMove(_sender, me) {\n        if (!me.isConsumed() && this.first) {\n            const origin = getScrollOrigin(this.graph.container);\n            const offset = getOffset(this.graph.container);\n            origin.x -= offset.x;\n            origin.y -= offset.y;\n            const x = me.getX() + origin.x;\n            const y = me.getY() + origin.y;\n            const dx = this.first.x - x;\n            const dy = this.first.y - y;\n            const tol = this.graph.getEventTolerance();\n            if (this.div || Math.abs(dx) > tol || Math.abs(dy) > tol) {\n                if (!this.div) {\n                    this.div = this.createShape();\n                }\n                // Clears selection while rubberbanding. This is required because\n                // the event is not consumed in mouseDown.\n                clearSelection();\n                this.update(x, y);\n                me.consume();\n            }\n        }\n    }\n    /**\n     * Creates the rubberband selection shape.\n     */\n    createShape() {\n        if (!this.sharedDiv) {\n            this.sharedDiv = document.createElement('div');\n            this.sharedDiv.className = 'mxRubberband';\n            setOpacity(this.sharedDiv, this.defaultOpacity);\n        }\n        this.graph.container.appendChild(this.sharedDiv);\n        const result = this.sharedDiv;\n        if (Client.IS_SVG && this.fadeOut) {\n            this.sharedDiv = null;\n        }\n        return result;\n    }\n    /**\n     * Returns true if this handler is active.\n     */\n    isActive(sender, me) {\n        return this.div && this.div.style.display !== 'none';\n    }\n    /**\n     * Handles the event by selecting the region of the rubberband using {@link AbstractGraph.selectRegion}.\n     */\n    mouseUp(_sender, me) {\n        const active = this.isActive();\n        this.reset();\n        if (active) {\n            this.execute(me.getEvent());\n            me.consume();\n        }\n    }\n    /**\n     * Resets the state of this handler and selects the current region for the given event.\n     */\n    execute(evt) {\n        const rect = new Rectangle(this.x, this.y, this.width, this.height);\n        this.graph.selectRegion(rect, evt);\n    }\n    /**\n     * Resets the state of the rubberband selection.\n     */\n    reset() {\n        if (this.div) {\n            if (Client.IS_SVG && this.fadeOut) {\n                const temp = this.div;\n                setPrefixedStyle(temp.style, 'transition', 'all 0.2s linear');\n                temp.style.pointerEvents = 'none';\n                temp.style.opacity = String(0);\n                window.setTimeout(() => {\n                    if (temp.parentNode)\n                        temp.parentNode.removeChild(temp);\n                }, 200);\n            }\n            else {\n                if (this.div.parentNode)\n                    this.div.parentNode.removeChild(this.div);\n            }\n        }\n        InternalEvent.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);\n        this.dragHandler = null;\n        this.dropHandler = null;\n        this.currentX = 0;\n        this.currentY = 0;\n        this.first = null;\n        this.div = null;\n    }\n    /**\n     * Sets <currentX> and <currentY> and calls {@link repaint}.\n     */\n    update(x, y) {\n        this.currentX = x;\n        this.currentY = y;\n        this.repaint();\n    }\n    /**\n     * Computes the bounding box and updates the style of the `div`.\n     */\n    repaint() {\n        if (this.div && this.first) {\n            const x = this.currentX - this.graph.getPanDx();\n            const y = this.currentY - this.graph.getPanDy();\n            this.x = Math.min(this.first.x, x);\n            this.y = Math.min(this.first.y, y);\n            this.width = Math.max(this.first.x, x) - this.x;\n            this.height = Math.max(this.first.y, y) - this.y;\n            const dx = 0;\n            const dy = 0;\n            this.div.style.left = `${this.x + dx}px`;\n            this.div.style.top = `${this.y + dy}px`;\n            this.div.style.width = `${Math.max(1, this.width)}px`;\n            this.div.style.height = `${Math.max(1, this.height)}px`;\n        }\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes.\n     * This does normally not need to be called, it is called automatically when the window unloads.\n     */\n    onDestroy() {\n        if (!this.destroyed) {\n            this.destroyed = true;\n            this.graph.removeMouseListener(this);\n            this.graph.removeListener(this.forceRubberbandHandler);\n            this.graph.removeListener(this.panHandler);\n            this.reset();\n            if (this.sharedDiv) {\n                this.sharedDiv = null;\n            }\n        }\n    }\n}\nRubberBandHandler.pluginId = 'RubberBandHandler';\nexport default RubberBandHandler;\n","/*\nCopyright 2024-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CellEditorHandler from './CellEditorHandler';\nimport TooltipHandler from './TooltipHandler';\nimport SelectionCellsHandler from './SelectionCellsHandler';\nimport PopupMenuHandler from './PopupMenuHandler';\nimport ConnectionHandler from './ConnectionHandler';\nimport SelectionHandler from './SelectionHandler';\nimport PanningHandler from './PanningHandler';\nimport { FitPlugin } from './FitPlugin';\n// Export all plugins and types to have them in the root barrel file\nexport { default as CellEditorHandler } from './CellEditorHandler';\nexport { default as ConnectionHandler } from './ConnectionHandler';\nexport * from './FitPlugin';\nexport { default as PanningHandler } from './PanningHandler';\nexport { default as PopupMenuHandler } from './PopupMenuHandler';\nexport { default as RubberBandHandler } from './RubberBandHandler';\nexport { default as SelectionCellsHandler } from './SelectionCellsHandler';\nexport { default as SelectionHandler } from './SelectionHandler';\nexport { default as TooltipHandler } from './TooltipHandler';\n/**\n * Returns the list of plugins used by default in `maxGraph`.\n *\n * The function returns a new array each time it is called.\n *\n * @category Plugin\n * @since 0.13.0\n */\nexport const getDefaultPlugins = () => [\n    CellEditorHandler,\n    TooltipHandler,\n    SelectionCellsHandler,\n    PopupMenuHandler,\n    ConnectionHandler,\n    SelectionHandler,\n    PanningHandler,\n    FitPlugin,\n];\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { AbstractGraph } from './AbstractGraph';\nimport GraphView from './GraphView';\nimport CellRenderer from './cell/CellRenderer';\nimport GraphDataModel from './GraphDataModel';\nimport { Stylesheet } from './style/Stylesheet';\nimport GraphSelectionModel from './GraphSelectionModel';\nimport { registerDefaultShapes } from './shape/register-shapes';\nimport { registerDefaultEdgeMarkers, registerDefaultEdgeStyles, registerDefaultPerimeters, } from './style/register';\nimport { getDefaultPlugins } from './plugins';\n/**\n * An implementation of {@link AbstractGraph} that automatically loads some default built-ins (plugins, style elements).\n *\n * Good for evaluation and prototyping, but not recommended for production use. Use {@link BaseGraph} instead.\n *\n * @category Graph\n */\nexport class Graph extends AbstractGraph {\n    /**\n     * Creates a new {@link CellRenderer} to be used in this graph.\n     */\n    createCellRenderer() {\n        return new CellRenderer();\n    }\n    /**\n     * Creates a new {@link GraphDataModel} to be used in this graph.\n     */\n    createGraphDataModel() {\n        return new GraphDataModel();\n    }\n    /**\n     * Creates a new {@link GraphView} to be used in this graph.\n     */\n    createGraphView() {\n        return new GraphView(this);\n    }\n    /**\n     * Creates a new {@link GraphSelectionModel} to be used in this graph.\n     */\n    createSelectionModel() {\n        return new GraphSelectionModel(this);\n    }\n    /**\n     * Creates a new {@link Stylesheet} to be used in this graph.\n     */\n    createStylesheet() {\n        return new Stylesheet();\n    }\n    // Register all builtins provided by maxGraph\n    registerDefaults() {\n        registerDefaultEdgeMarkers();\n        registerDefaultEdgeStyles();\n        registerDefaultPerimeters();\n        registerDefaultShapes();\n    }\n    // Use the create factory methods of the class instead of the collaborators because they cannot be passed in the constructor\n    initializeCollaborators(options) {\n        this.cellRenderer = this.createCellRenderer();\n        this.model = options?.model ?? this.createGraphDataModel();\n        this.setSelectionModel(this.createSelectionModel());\n        this.setStylesheet(options?.stylesheet ?? this.createStylesheet());\n        this.view = this.createGraphView();\n    }\n    constructor(container, model, plugins = getDefaultPlugins(), stylesheet) {\n        super({ container, model, plugins, stylesheet: stylesheet ?? undefined });\n    }\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from '../event/EventSource';\nimport InternalEvent from '../event/InternalEvent';\nimport { convertPoint, sortCells } from '../../util/styleUtils';\nimport RootChange from '../undoable_changes/RootChange';\nimport ChildChange from '../undoable_changes/ChildChange';\nimport TerminalChange from '../undoable_changes/TerminalChange';\nimport GeometryChange from '../undoable_changes/GeometryChange';\nimport VisibleChange from '../undoable_changes/VisibleChange';\nimport StyleChange from '../undoable_changes/StyleChange';\nimport EventObject from '../event/EventObject';\nimport { getClientX, getClientY } from '../../util/EventUtils';\n/**\n * Implements a layout manager that runs a given layout after any changes to the graph:\n *\n * ### Example\n *\n * ```javascript\n * const layoutManager = new LayoutManager(graph);\n * layoutManager.getLayout = (cell, eventName) => {\n *   return layout;\n * };\n * ```\n *\n * See {@link getLayout} for a description of the possible eventNames.\n *\n * #### Event: mxEvent.LAYOUT_CELLS\n *\n * Fires between begin- and endUpdate after all cells have been layouted in\n * {@link layoutCells}. The `cells` property contains all cells that have\n * been passed to {@link layoutCells}.\n *\n * @category Layout\n */\nclass LayoutManager extends EventSource {\n    constructor(graph) {\n        super();\n        /**\n         * Specifies if the layout should bubble along\n         * the cell hierarchy.\n         * @default true\n         */\n        this.bubbling = true;\n        /**\n         * Specifies if event handling is enabled.\n         * @default true\n         */\n        this.enabled = true;\n        // Executes the layout before the changes are dispatched\n        this.undoHandler = (sender, evt) => {\n            if (this.isEnabled()) {\n                this.beforeUndo(evt.getProperty('edit'));\n            }\n        };\n        // Notifies the layout of a move operation inside a parent\n        this.moveHandler = (sender, evt) => {\n            if (this.isEnabled()) {\n                this.cellsMoved(evt.getProperty('cells'), evt.getProperty('event'));\n            }\n        };\n        // Notifies the layout of a move operation inside a parent\n        this.resizeHandler = (sender, evt) => {\n            if (this.isEnabled()) {\n                this.cellsResized(evt.getProperty('cells'), evt.getProperty('bounds'), evt.getProperty('previous'));\n            }\n        };\n        this.setGraph(graph);\n    }\n    /**\n     * Returns true if events are handled. This implementation\n     * returns {@link enabled}.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Enables or disables event handling. This implementation\n     * updates {@link enabled}.\n     *\n     * @param enabled Boolean that specifies the new enabled state.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n    }\n    /**\n     * Returns true if a layout should bubble, that is, if the parent layout\n     * should be executed whenever a cell layout (layout of the children of\n     * a cell) has been executed. This implementation returns {@link bubbling}.\n     */\n    isBubbling() {\n        return this.bubbling;\n    }\n    /**\n     * Sets {@link bubbling}.\n     */\n    setBubbling(value) {\n        this.bubbling = value;\n    }\n    /**\n     * Returns the graph that this layout operates on.\n     */\n    getGraph() {\n        return this.graph;\n    }\n    /**\n     * Sets the graph that the layouts operate on.\n     */\n    setGraph(graph) {\n        if (this.graph) {\n            const model = this.graph.getDataModel();\n            model.removeListener(this.undoHandler);\n            this.graph.removeListener(this.moveHandler);\n            this.graph.removeListener(this.resizeHandler);\n        }\n        this.graph = graph;\n        if (this.graph) {\n            const model = this.graph.getDataModel();\n            model.addListener(InternalEvent.BEFORE_UNDO, this.undoHandler);\n            this.graph.addListener(InternalEvent.MOVE_CELLS, this.moveHandler);\n            this.graph.addListener(InternalEvent.RESIZE_CELLS, this.resizeHandler);\n        }\n    }\n    /**\n     * Returns true if the given cell has a layout. This implementation invokes\n     * <getLayout> with {@link Event#LAYOUT_CELLS} as the eventName. Override this\n     * if creating layouts in <getLayout> is expensive and return true if\n     * <getLayout> will return a layout for the given cell for\n     * {@link Event#BEGIN_UPDATE} or {@link Event#END_UPDATE}.\n     */\n    hasLayout(cell) {\n        return !!this.getLayout(cell, InternalEvent.LAYOUT_CELLS);\n    }\n    /**\n     * Returns the layout for the given cell and eventName. Possible\n     * event names are {@link InternalEvent.MOVE_CELLS} and {@link InternalEvent.RESIZE_CELLS}\n     * for callbacks on when cells are moved or resized and\n     * {@link InternalEvent.BEGIN_UPDATE} and {@link InternalEvent.END_UPDATE} for the capture\n     * and bubble phase of the layout after any changes of the model.\n     */\n    getLayout(cell, eventName) {\n        return null;\n    }\n    /**\n     * Called from {@link undoHandler}.\n     *\n     * @param cell Array of {@link Cell} that have been moved.\n     * @param evt Mouse event that represents the mousedown.\n     *\n     * TODO: what is undoableEdit type?\n     */\n    beforeUndo(undoableEdit) {\n        this.executeLayoutForCells(this.getCellsForChanges(undoableEdit.changes));\n    }\n    /**\n     * Called from {@link moveHandler}.\n     *\n     * @param cell Array of {@link Cell} that have been moved.\n     * @param evt Mouse event that represents the mousedown.\n     */\n    cellsMoved(cells, evt) {\n        if (cells.length > 0 && evt) {\n            const point = convertPoint(this.getGraph().container, getClientX(evt), getClientY(evt));\n            for (let i = 0; i < cells.length; i += 1) {\n                const layout = this.getLayout(cells[i].getParent(), InternalEvent.MOVE_CELLS);\n                if (layout) {\n                    layout.moveCell(cells[i], point.x, point.y);\n                }\n            }\n        }\n    }\n    /**\n     * Called from {@link resizeHandler}.\n     *\n     * @param cell Array of {@link Cell} that have been resized.\n     * @param bounds {@link mxRectangle} taht represents the new bounds.\n     */\n    cellsResized(cells = null, bounds = null, prev = null) {\n        if (cells && bounds) {\n            for (let i = 0; i < cells.length; i += 1) {\n                const layout = this.getLayout(cells[i].getParent(), InternalEvent.RESIZE_CELLS);\n                if (layout) {\n                    layout.resizeCell(cells[i], bounds[i], prev?.[i]);\n                }\n            }\n        }\n    }\n    /**\n     * Returns the cells for which a layout should be executed.\n     */\n    getCellsForChanges(changes) {\n        let result = [];\n        for (const change of changes) {\n            if (change instanceof RootChange) {\n                return [];\n            }\n            result = result.concat(this.getCellsForChange(change));\n        }\n        return result;\n    }\n    /**\n     * Executes all layouts which have been scheduled during the\n     * changes.\n     * @param change  mxChildChange|mxTerminalChange|mxVisibleChange|...\n     */\n    getCellsForChange(change) {\n        if (change instanceof ChildChange) {\n            return this.addCellsWithLayout(change.child, this.addCellsWithLayout(change.previous));\n        }\n        if (change instanceof TerminalChange || change instanceof GeometryChange) {\n            return this.addCellsWithLayout(change.cell);\n        }\n        if (change instanceof VisibleChange || change instanceof StyleChange) {\n            return this.addCellsWithLayout(change.cell);\n        }\n        return [];\n    }\n    /**\n     * Adds all ancestors of the given cell that have a layout.\n     */\n    addCellsWithLayout(cell, result = []) {\n        return this.addDescendantsWithLayout(cell, this.addAncestorsWithLayout(cell, result));\n    }\n    /**\n     * Adds all ancestors of the given cell that have a layout.\n     */\n    addAncestorsWithLayout(cell, result = []) {\n        if (cell) {\n            const layout = this.hasLayout(cell);\n            if (layout) {\n                result.push(cell);\n            }\n            if (this.isBubbling()) {\n                this.addAncestorsWithLayout(cell.getParent(), result);\n            }\n        }\n        return result;\n    }\n    /**\n     * Adds all descendants of the given cell that have a layout.\n     */\n    addDescendantsWithLayout(cell, result = []) {\n        if (cell && this.hasLayout(cell)) {\n            for (let i = 0; i < cell.getChildCount(); i += 1) {\n                const child = cell.getChildAt(i);\n                if (this.hasLayout(child)) {\n                    result.push(child);\n                    this.addDescendantsWithLayout(child, result);\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Executes the given layout on the given parent.\n     */\n    executeLayoutForCells(cells) {\n        const sorted = sortCells(cells, false);\n        this.layoutCells(sorted, true);\n        this.layoutCells(sorted.reverse(), false);\n    }\n    /**\n     * Executes all layouts which have been scheduled during the changes.\n     */\n    layoutCells(cells, bubble = false) {\n        if (cells.length > 0) {\n            // Invokes the layouts while removing duplicates\n            const model = this.getGraph().getDataModel();\n            model.batchUpdate(() => {\n                let last = null;\n                for (const cell of cells) {\n                    if (cell !== model.getRoot() && cell !== last) {\n                        this.executeLayout(cell, bubble);\n                        last = cell;\n                    }\n                }\n                this.fireEvent(new EventObject(InternalEvent.LAYOUT_CELLS, { cells }));\n            });\n        }\n    }\n    /**\n     * Executes the given layout on the given parent.\n     */\n    executeLayout(cell, bubble = false) {\n        const layout = this.getLayout(cell, bubble ? InternalEvent.BEGIN_UPDATE : InternalEvent.END_UPDATE);\n        if (layout) {\n            layout.execute(cell);\n        }\n    }\n    /**\n     * Removes all handlers from the {@link graph} and deletes the reference to it.\n     */\n    destroy() {\n        this.setGraph(null);\n    }\n}\nexport default LayoutManager;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalMouseEvent from '../event/InternalMouseEvent';\nimport { NONE, OUTLINE_COLOR, OUTLINE_HANDLE_FILLCOLOR, OUTLINE_HANDLE_STROKECOLOR, OUTLINE_STROKEWIDTH, } from '../../util/Constants';\nimport Point from '../geometry/Point';\nimport Rectangle from '../geometry/Rectangle';\nimport RectangleShape from '../shape/node/RectangleShape';\nimport { BaseGraph } from '../BaseGraph';\nimport ImageShape from '../shape/node/ImageShape';\nimport InternalEvent from '../event/InternalEvent';\nimport { getSource, isMouseEvent } from '../../util/EventUtils';\nimport { hasScrollbars } from '../../util/styleUtils';\nimport { getDefaultPlugins } from '../plugins';\n/**\n * Implements an outline (aka overview or minimap) for a `Graph`.\n *\n * Set {@link updateOnPan} to true to enable updates while the source graph is panning.\n *\n * ### Example\n *\n * ```javascript\n * const outline = new Outline(graph, div);\n * ```\n *\n * To move the graph to the top, left corner the following code can be used.\n *\n * ```javascript\n * const scale = graph.view.scale;\n * const bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x / scale, -bounds.y / scale);\n * ```\n *\n * To toggle the suspended mode, the following can be used.\n *\n * ```javascript\n * outline.suspended = !outline.suspended;\n * if (!outline.suspended) {\n *   outline.update(true);\n * }\n * ```\n *\n * @category Navigation\n */\nclass Outline {\n    constructor(source, container) {\n        // TODO: Document me!!\n        this.sizer = null;\n        this.selectionBorder = null;\n        this.updateHandler = null;\n        this.refreshHandler = null;\n        this.panHandler = null;\n        this.active = null;\n        this.bounds = null;\n        this.zoom = false;\n        this.startX = null;\n        this.startY = null;\n        this.dx0 = null;\n        this.dy0 = null;\n        this.index = null;\n        /**\n         * Reference to the {@link AbstractGraph} that renders the outline.\n         */\n        this.outline = null;\n        /**\n         * Renderhint to be used for the outline graph.\n         * @default faster\n         */\n        this.graphRenderHint = 'exact';\n        /**\n         * Specifies if events are handled.\n         * @default true\n         */\n        this.enabled = true;\n        /**\n         * Specifies a viewport rectangle should be shown.\n         * @default true\n         */\n        this.showViewport = true;\n        /**\n         * Border to be added at the bottom and right.\n         * @default 10\n         */\n        this.border = 10;\n        /**\n         * Specifies the size of the sizer handler.\n         * @default 8\n         */\n        this.sizerSize = 8;\n        /**\n         * Specifies if labels should be visible in the outline.\n         * @default false\n         */\n        this.labelsVisible = false;\n        /**\n         * Specifies if {@link update} should be called for {@link InternalEvent.PAN} in the source\n         * graph.\n         * @default false\n         */\n        this.updateOnPan = false;\n        /**\n         * Optional {@link Image} to be used for the sizer.\n         * @default null\n         */\n        this.sizerImage = null;\n        /**\n         * Minimum scale to be used.\n         * @default 0.0001\n         */\n        this.minScale = 0.0001;\n        /**\n         * Optional boolean flag to suspend updates. This flag will\n         * also suspend repaints of the outline. To toggle this switch, use the\n         * following code.\n         *\n         * @default false\n         *\n         * @example\n         * ```javascript\n         * nav.suspended = !nav.suspended;\n         *\n         * if (!nav.suspended)\n         * {\n         *   nav.update(true);\n         * }\n         * ```\n         */\n        this.suspended = false;\n        this.source = source;\n        if (container) {\n            this.init(container);\n        }\n    }\n    /**\n     * Initializes the outline inside the given container.\n     */\n    init(container) {\n        this.outline = this.createGraph(container);\n        // Do not repaint when suspended\n        const outlineGraphModelChanged = this.outline.graphModelChanged;\n        this.outline.graphModelChanged = (changes) => {\n            if (!this.suspended && this.outline != null) {\n                outlineGraphModelChanged.apply(this.outline, [changes]);\n            }\n        };\n        // Enable faster painting in SVG\n        //const node = <SVGElement>this.outline.getView().getCanvas().parentNode;\n        //node.setAttribute('shape-rendering', 'optimizeSpeed');\n        //node.setAttribute('image-rendering', 'optimizeSpeed');\n        // Hides cursors and labels\n        this.outline.labelsVisible = this.labelsVisible;\n        this.outline.setEnabled(false);\n        this.updateHandler = (sender, evt) => {\n            if (!this.suspended && !this.active) {\n                this.update();\n            }\n        };\n        // Updates the scale of the outline after a change of the main graph\n        this.source.getDataModel().addListener(InternalEvent.CHANGE, this.updateHandler);\n        this.outline.addMouseListener(this);\n        // Adds listeners to keep the outline in sync with the source graph\n        const view = this.source.getView();\n        view.addListener(InternalEvent.SCALE, this.updateHandler);\n        view.addListener(InternalEvent.TRANSLATE, this.updateHandler);\n        view.addListener(InternalEvent.SCALE_AND_TRANSLATE, this.updateHandler);\n        view.addListener(InternalEvent.DOWN, this.updateHandler);\n        view.addListener(InternalEvent.UP, this.updateHandler);\n        // Updates blue rectangle on scroll\n        // @ts-ignore because sender and evt don't seem used\n        InternalEvent.addListener(this.source.container, 'scroll', this.updateHandler);\n        this.panHandler = (sender, evt) => {\n            if (this.updateOnPan) {\n                this.updateHandler(sender, evt);\n            }\n        };\n        this.source.addListener(InternalEvent.PAN, this.panHandler);\n        // Refreshes the graph in the outline after a refresh of the main graph\n        this.refreshHandler = (sender) => {\n            const outline = this.outline;\n            outline?.setStylesheet(this.source.getStylesheet());\n            outline?.refresh();\n        };\n        this.source.addListener(InternalEvent.REFRESH, this.refreshHandler);\n        // Creates the blue rectangle for the viewport\n        this.bounds = new Rectangle(0, 0, 0, 0);\n        this.selectionBorder = new RectangleShape(this.bounds, NONE, OUTLINE_COLOR, OUTLINE_STROKEWIDTH);\n        this.selectionBorder.dialect = this.outline.dialect;\n        this.selectionBorder.init(this.outline.getView().getOverlayPane());\n        const selectionBorderNode = this.selectionBorder.node;\n        // Handles event by catching the initial pointer start and then listening to the\n        // complete gesture on the event target. This is needed because all the events\n        // are routed via the initial element even if that element is removed from the\n        // DOM, which happens when we repaint the selection border and zoom handles.\n        const handler = (evt) => {\n            const t = getSource(evt);\n            const redirect = (evt) => {\n                const outline = this.outline;\n                outline?.fireMouseEvent(InternalEvent.MOUSE_MOVE, new InternalMouseEvent(evt));\n            };\n            const redirect2 = (evt) => {\n                const outline = this.outline;\n                InternalEvent.removeGestureListeners(t, null, redirect, redirect2);\n                outline?.fireMouseEvent(InternalEvent.MOUSE_UP, new InternalMouseEvent(evt));\n            };\n            const outline = this.outline;\n            InternalEvent.addGestureListeners(t, null, redirect, redirect2);\n            outline?.fireMouseEvent(InternalEvent.MOUSE_DOWN, new InternalMouseEvent(evt));\n        };\n        InternalEvent.addGestureListeners(this.selectionBorder.node, handler);\n        // Creates a small blue rectangle for sizing (sizer handle)\n        const sizer = (this.sizer = this.createSizer());\n        const sizerNode = sizer.node;\n        sizer.init(this.outline.getView().getOverlayPane());\n        if (this.enabled) {\n            sizerNode.style.cursor = 'nwse-resize';\n        }\n        InternalEvent.addGestureListeners(this.sizer.node, handler);\n        selectionBorderNode.style.display = this.showViewport ? '' : 'none';\n        sizerNode.style.display = selectionBorderNode.style.display;\n        selectionBorderNode.style.cursor = 'move';\n        this.update(false);\n    }\n    /**\n     * Creates the {@link AbstractGraph} used in the outline.\n     */\n    createGraph(container) {\n        // The Graph here uses the same globally registered style elements as the source Graph.\n        // So we can use BaseGraph here (it doesn't register style elements).\n        const graph = new BaseGraph({\n            container,\n            model: this.source.getDataModel(),\n            // TODO review the list of plugins for the Graph of an Outline\n            // We may not need plugins here as the actions are done on the source Graph, not this one.\n            // If we need to keep using some plugins, it may be necessary to make the plugins array configurable to allow custom plugins\n            // and improve tree-shaking.\n            plugins: getDefaultPlugins(),\n            stylesheet: this.source.getStylesheet(),\n        });\n        graph.options.foldingEnabled = false;\n        graph.autoScroll = false;\n        return graph;\n    }\n    /**\n     * Returns true if events are handled. This implementation\n     * returns {@link enabled}.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Enables or disables event handling. This implementation\n     * updates {@link enabled}.\n     *\n     * @param value Boolean that specifies the new enabled state.\n     */\n    setEnabled(value) {\n        this.enabled = value;\n    }\n    /**\n     * Enables or disables the zoom handling by showing or hiding the respective\n     * handle.\n     *\n     * @param value Boolean that specifies the new enabled state.\n     */\n    setZoomEnabled(value) {\n        // @ts-ignore\n        this.sizer.node.style.visibility = value ? 'visible' : 'hidden';\n    }\n    /**\n     * Invokes {@link update} and revalidate the outline. This method is deprecated.\n     */\n    refresh() {\n        this.update(true);\n    }\n    /**\n     * Creates the shape used as the sizer.\n     */\n    // createSizer(): mxShape;\n    createSizer() {\n        const outline = this.outline;\n        if (this.sizerImage != null) {\n            const sizer = new ImageShape(new Rectangle(0, 0, this.sizerImage.width, this.sizerImage.height), this.sizerImage.src);\n            outline && (sizer.dialect = outline.dialect);\n            return sizer;\n        }\n        const sizer = new RectangleShape(new Rectangle(0, 0, this.sizerSize, this.sizerSize), OUTLINE_HANDLE_FILLCOLOR, OUTLINE_HANDLE_STROKECOLOR);\n        outline && (sizer.dialect = outline.dialect);\n        return sizer;\n    }\n    /**\n     * Returns the size of the source container.\n     */\n    getSourceContainerSize() {\n        return new Rectangle(0, 0, this.source.container.scrollWidth, this.source.container.scrollHeight);\n    }\n    /**\n     * Returns the offset for drawing the outline graph.\n     */\n    getOutlineOffset(scale) {\n        // TODO: Should number -> mxPoint?\n        return null;\n    }\n    /**\n     * Returns the offset for drawing the outline graph.\n     */\n    getSourceGraphBounds() {\n        return this.source.getGraphBounds();\n    }\n    /**\n     * Updates the outline.\n     */\n    update(revalidate = false) {\n        if (this.source != null &&\n            this.source.container != null &&\n            this.outline != null &&\n            this.outline.container != null) {\n            const sourceScale = this.source.view.scale;\n            const scaledGraphBounds = this.getSourceGraphBounds();\n            const unscaledGraphBounds = new Rectangle(scaledGraphBounds.x / sourceScale + this.source.panDx, scaledGraphBounds.y / sourceScale + this.source.panDy, scaledGraphBounds.width / sourceScale, scaledGraphBounds.height / sourceScale);\n            const unscaledFinderBounds = new Rectangle(0, 0, this.source.container.clientWidth / sourceScale, this.source.container.clientHeight / sourceScale);\n            const union = unscaledGraphBounds.clone();\n            union.add(unscaledFinderBounds);\n            // Zooms to the scrollable area if that is bigger than the graph\n            const size = this.getSourceContainerSize();\n            const completeWidth = Math.max(size.width / sourceScale, union.width);\n            const completeHeight = Math.max(size.height / sourceScale, union.height);\n            const availableWidth = Math.max(0, this.outline.container.clientWidth - this.border);\n            const availableHeight = Math.max(0, this.outline.container.clientHeight - this.border);\n            const outlineScale = Math.min(availableWidth / completeWidth, availableHeight / completeHeight);\n            let scale = Number.isNaN(outlineScale)\n                ? this.minScale\n                : Math.max(this.minScale, outlineScale);\n            if (scale > 0) {\n                if (this.outline.getView().scale !== scale) {\n                    this.outline.getView().scale = scale;\n                    revalidate = true;\n                }\n                const navView = this.outline.getView();\n                if (navView.currentRoot !== this.source.getView().currentRoot) {\n                    navView.setCurrentRoot(this.source.getView().currentRoot);\n                }\n                const t = this.source.view.translate;\n                let tx = t.x + this.source.panDx;\n                let ty = t.y + this.source.panDy;\n                const off = this.getOutlineOffset(scale);\n                if (off != null) {\n                    tx += off.x;\n                    ty += off.y;\n                }\n                if (unscaledGraphBounds.x < 0) {\n                    tx -= unscaledGraphBounds.x;\n                }\n                if (unscaledGraphBounds.y < 0) {\n                    ty -= unscaledGraphBounds.y;\n                }\n                if (navView.translate.x !== tx || navView.translate.y !== ty) {\n                    navView.translate.x = tx;\n                    navView.translate.y = ty;\n                    revalidate = true;\n                }\n                // Prepares local variables for computations\n                const t2 = navView.translate;\n                scale = this.source.getView().scale;\n                const scale2 = scale / navView.scale;\n                const scale3 = 1.0 / navView.scale;\n                const { container } = this.source;\n                // Updates the bounds of the viewrect in the navigation\n                this.bounds = new Rectangle((t2.x - t.x - this.source.panDx) / scale3, (t2.y - t.y - this.source.panDy) / scale3, container.clientWidth / scale2, container.clientHeight / scale2);\n                // Adds the scrollbar offset to the finder\n                this.bounds.x += (this.source.container.scrollLeft * navView.scale) / scale;\n                this.bounds.y += (this.source.container.scrollTop * navView.scale) / scale;\n                const selectionBorder = this.selectionBorder;\n                let b = selectionBorder.bounds;\n                if (b.x !== this.bounds.x ||\n                    b.y !== this.bounds.y ||\n                    b.width !== this.bounds.width ||\n                    b.height !== this.bounds.height) {\n                    selectionBorder.bounds = this.bounds;\n                    selectionBorder.redraw();\n                }\n                // Updates the bounds of the zoom handle at the bottom right\n                const sizer = this.sizer;\n                b = sizer.bounds;\n                const b2 = new Rectangle(this.bounds.x + this.bounds.width - b.width / 2, this.bounds.y + this.bounds.height - b.height / 2, b.width, b.height);\n                if (b.x !== b2.x ||\n                    b.y !== b2.y ||\n                    b.width !== b2.width ||\n                    b.height !== b2.height) {\n                    sizer.bounds = b2;\n                    // Avoids update of visibility in redraw for VML\n                    if (sizer.node.style.visibility !== 'hidden') {\n                        sizer.redraw();\n                    }\n                }\n                if (revalidate) {\n                    this.outline.view.revalidate();\n                }\n            }\n        }\n    }\n    /**\n     * Handles the event by starting a translation or zoom.\n     */\n    mouseDown(_sender, me) {\n        if (this.enabled && this.showViewport) {\n            const tol = !isMouseEvent(me.getEvent()) ? this.source.tolerance : 0;\n            const hit = tol > 0\n                ? new Rectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol)\n                : null;\n            this.zoom =\n                me.isSource(this.sizer) ||\n                    // @ts-ignore\n                    (hit != null && intersects(this.sizer.bounds, hit));\n            this.startX = me.getX();\n            this.startY = me.getY();\n            this.active = true;\n            const sourceContainer = this.source.container;\n            if (this.source.useScrollbarsForPanning && hasScrollbars(this.source.container)) {\n                this.dx0 = sourceContainer.scrollLeft;\n                this.dy0 = sourceContainer.scrollTop;\n            }\n            else {\n                this.dx0 = 0;\n                this.dy0 = 0;\n            }\n        }\n        me.consume();\n    }\n    /**\n     * Handles the event by previewing the viewrect in {@link graph} and updating the\n     * rectangle that represents the viewrect in the outline.\n     */\n    mouseMove(_sender, me) {\n        if (this.active) {\n            const myBounds = this.bounds;\n            const sizer = this.sizer;\n            const sizerNode = sizer.node;\n            const selectionBorder = this.selectionBorder;\n            const selectionBorderNode = selectionBorder.node;\n            const source = this.source;\n            const outline = this.outline;\n            selectionBorderNode.style.display = this.showViewport ? '' : 'none';\n            sizerNode.style.display = selectionBorderNode.style.display;\n            const delta = this.getTranslateForEvent(me);\n            let dx = delta.x;\n            let dy = delta.y;\n            let bounds = null;\n            if (outline && !this.zoom) {\n                // Previews the panning on the source graph\n                const { scale } = outline.getView();\n                bounds = new Rectangle(myBounds.x + dx, myBounds.y + dy, myBounds.width, myBounds.height);\n                selectionBorder.bounds = bounds;\n                selectionBorder.redraw();\n                dx /= scale;\n                dx *= source.getView().scale;\n                dy /= scale;\n                dy *= source.getView().scale;\n                source.panGraph(-dx - this.dx0, -dy - this.dy0);\n            }\n            else {\n                // Does *not* preview zooming on the source graph\n                const { container } = this.source;\n                // @ts-ignore\n                const viewRatio = container.clientWidth / container.clientHeight;\n                dy = dx / viewRatio;\n                bounds = new Rectangle(myBounds.x, myBounds.y, Math.max(1, myBounds.width + dx), Math.max(1, myBounds.height + dy));\n                selectionBorder.bounds = bounds;\n                selectionBorder.redraw();\n            }\n            // Updates the zoom handle\n            const b = sizer.bounds;\n            sizer.bounds = new Rectangle(bounds.x + bounds.width - b.width / 2, bounds.y + bounds.height - b.height / 2, b.width, b.height);\n            // Avoids update of visibility in redraw for VML\n            if (sizerNode.style.visibility !== 'hidden') {\n                sizer.redraw();\n            }\n            me.consume();\n        }\n    }\n    /**\n     * Gets the translate for the given mouse event. Here is an example to limit\n     * the outline to stay within positive coordinates:\n     *\n     * @example\n     * ```javascript\n     * outline.getTranslateForEvent(me)\n     * {\n     *   var pt = new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n     *\n     *   if (!this.zoom)\n     *   {\n     *     var tr = this.source.view.translate;\n     *     pt.x = Math.max(tr.x * this.outline.view.scale, pt.x);\n     *     pt.y = Math.max(tr.y * this.outline.view.scale, pt.y);\n     *   }\n     *\n     *   return pt;\n     * };\n     * ```\n     */\n    getTranslateForEvent(me) {\n        return new Point(me.getX() - this.startX, me.getY() - this.startY);\n    }\n    /**\n     * Handles the event by applying the translation or zoom to {@link graph}.\n     */\n    mouseUp(_sender, me) {\n        if (this.active) {\n            const delta = this.getTranslateForEvent(me);\n            let dx = delta.x;\n            let dy = delta.y;\n            const source = this.source;\n            const outline = this.outline;\n            const selectionBorder = this.selectionBorder;\n            if (Math.abs(dx) > 0 || Math.abs(dy) > 0) {\n                if (!this.zoom) {\n                    // Applies the new translation if the source\n                    // has no scrollbars\n                    if (outline &&\n                        (!source.useScrollbarsForPanning || !hasScrollbars(source.container))) {\n                        source.panGraph(0, 0);\n                        dx /= outline.getView().scale;\n                        dy /= outline.getView().scale;\n                        const t = source.getView().translate;\n                        source.getView().setTranslate(t.x - dx, t.y - dy);\n                    }\n                }\n                else {\n                    // Applies the new zoom\n                    const w = selectionBorder.bounds.width;\n                    const { scale } = source.getView();\n                    source.zoomTo(Math.max(this.minScale, scale - (dx * scale) / w), false);\n                }\n                this.update();\n                me.consume();\n            }\n            // Resets the state of the handler\n            this.index = null;\n            this.active = false;\n        }\n    }\n    /**\n     * Destroy this outline and removes all listeners from {@link source}.\n     */\n    destroy() {\n        if (this.source != null) {\n            // @ts-ignore\n            this.source.removeListener(this.panHandler);\n            // @ts-ignore\n            this.source.removeListener(this.refreshHandler);\n            // @ts-ignore\n            this.source.getDataModel().removeListener(this.updateHandler);\n            // @ts-ignore\n            this.source.getView().removeListener(this.updateHandler);\n            // @ts-ignore\n            InternalEvent.removeListener(this.source.container, 'scroll', this.updateHandler);\n            // @ts-ignore\n            this.source = null;\n        }\n        if (this.outline != null) {\n            this.outline.removeMouseListener(this);\n            this.outline.destroy();\n            this.outline = null;\n        }\n        if (this.selectionBorder != null) {\n            this.selectionBorder.destroy();\n            this.selectionBorder = null;\n        }\n        if (this.sizer != null) {\n            this.sizer.destroy();\n            this.sizer = null;\n        }\n    }\n}\nexport default Outline;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2019, JGraph Ltd\nCopyright (c) 2006-2017, draw.io AG\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport Rectangle from '../geometry/Rectangle';\nimport TemporaryCellStates from '../cell/TemporaryCellStates';\nimport InternalEvent from '../event/InternalEvent';\nimport Client from '../../Client';\nimport { intersects } from '../../util/mathUtils';\nimport { addLinkToHead, write } from '../../util/domUtils';\nimport { GlobalConfig } from '../../util/config';\n/**\n * Implements printing of a diagram across multiple pages.\n *\n * The following opens a print preview for an existing graph:\n *\n * ```javascript\n * const preview = new PrintPreview(graph);\n * preview.open();\n * ```\n *\n * Use {@link getScaleForPageCount} as follows in order to print the graph across a given number of pages:\n *\n * ```javascript\n * const pageCount = window.prompt('Enter page count', '1');\n * if (pageCount) {\n *   const scale = printUtils.getScaleForPageCount(pageCount, graph);\n *   const preview = new PrintPreview(graph, scale);\n *   preview.open();\n * }\n * ```\n *\n * ### Additional pages\n *\n * To add additional pages before and after the output, {@link getCoverPages} and {@link getAppendices} can be used, respectively.\n *\n * ```javascript\n * const preview = new PrintPreview(graph, 1);\n *\n * preview.getCoverPages = function(w, h) {\n *   return [this.renderPage(w, h, 0, 0, (div) => {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Cover Page</p>'\n *   }];\n * };\n *\n * preview.getAppendices = function(w, h) {\n *   return [this.renderPage(w, h, 0, 0, (div) => {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Appendix</p>'\n *   }];\n * };\n * preview.open();\n * ```\n *\n * ### CSS\n *\n * The CSS from the original page is not carried over to the print preview.\n * To add CSS to the page, use the `css` argument in the {@link open} function or\n * override {@link writeHead} to add the respective link tags as follows:\n *\n * ```typescript\n * const writeHead = preview.writeHead;\n * preview.writeHead = function(doc: Document, css: string | null): void {\n *   writeHead.apply(this, [doc, css]);\n *   doc.writeln('<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">');\n * };\n * ```\n *\n * ### Padding\n *\n * To add a padding to the page in the preview (but not the print output), use the following code:\n *\n * ```typescript\n * preview.writeHead = function(doc: Document, css: string | null): void {\n *   writeHead.apply(this, [doc, css]);\n *\n *   doc.writeln('<style type=\"text/css\">');\n *   doc.writeln('@media screen {');\n *   doc.writeln('  body > div { padding-top:30px;padding-left:40px;box-sizing:content-box; }');\n *   doc.writeln('}');\n *   doc.writeln('</style>');\n * };\n * ```\n *\n * ### Headers\n *\n * Apart from setting the title argument in the `PrintPreview` constructor you\n * can override {@link renderPage} as follows to add a header to any page:\n *\n * ```javascript\n * const renderPage = printPreview.renderPage;\n * printPreview.renderPage = function(w, h, x, y, content, pageNumber) {\n *   const div = renderPage.apply(this, [w, h, x, y, content, pageNumber]);\n *\n *   const header = document.createElement('div');\n *   header.style.position = 'absolute';\n *   header.style.top = '0px';\n *   header.style.width = '100%';\n *   header.style.textAlign = 'right';\n *   domUtils.write(header, 'Your header here');\n *   div.firstChild.appendChild(header);\n *\n *   return div;\n * };\n * ```\n *\n * The pageNumber argument contains the number of the current page, starting at\n * 1. To display a header on the first page only, check pageNumber and add a\n * vertical offset in the constructor call for the height of the header.\n *\n * ### Page Format\n *\n * For landscape printing, use {@link PAGE_FORMAT_A4_LANDSCAPE} as\n * the pageFormat in {@link getScaleForPageCount} and {@link PrintPreview}.\n * Keep in mind that one can not set the defaults for the print dialog\n * of the operating system from JavaScript so the user must manually choose\n * a page format that matches this setting.\n *\n * You can try passing the following CSS directive to {@link open} to set the\n * page format in the print dialog to landscape. However, this CSS\n * directive seems to be ignored in most major browsers, including IE.\n *\n * ```javascript\n * @page {\n *   size: landscape;\n * }\n * ```\n */\nclass PrintPreview {\n    constructor(graph, scale = null, pageFormat = null, border = null, x0 = 0, y0 = 0, borderColor = null, title = 'Printer-friendly version', pageSelector = null) {\n        /**\n         * The border inset around each side of every page in the preview. This is set\n         * to 0 if autoOrigin is false.\n         * @default 0\n         */\n        this.border = 0;\n        /**\n         * The margin at the top of the page (number).\n         * @default 0\n         */\n        this.marginTop = 0;\n        /**\n         * The margin at the bottom of the page (number).\n         * @default 0\n         */\n        this.marginBottom = 0;\n        /**\n         * Holds the horizontal offset of the output.\n         */\n        this.x0 = 0;\n        /**\n         * Holds the vertical offset of the output.\n         */\n        this.y0 = 0;\n        /**\n         * Specifies if the origin should be automatically computed based on the top,\n         * left corner of the actual diagram contents. The required offset will be added\n         * to {@link x0} and {@link y0} in {@link open}.\n         * @default true\n         */\n        this.autoOrigin = true;\n        /**\n         * Specifies if overlays should be printed.\n         * @default false\n         */\n        this.printOverlays = false;\n        /**\n         * Specifies if controls (such as folding icons) should be printed. Default is\n         * false.\n         */\n        this.printControls = false;\n        /**\n         * Specifies if the background image should be printed.\n         * @default false\n         */\n        this.printBackgroundImage = false;\n        /**\n         * Holds the color value for the page background color.\n         * @default '#ffffff'\n         */\n        this.backgroundColor = '#ffffff';\n        /**\n         * Reference to the preview window.\n         */\n        this.wnd = null;\n        /**\n         * Assign any window here to redirect the rendering in {@link open}.\n         */\n        this.targetWindow = null;\n        /**\n         * Holds the actual number of pages in the preview.\n         */\n        this.pageCount = 0;\n        /**\n         * Specifies is clipping should be used to avoid creating too many cell states\n         * in large diagrams. The bounding box of the cells in the original diagram is\n         * used if this is enabled.\n         * @default true\n         */\n        this.clipping = true;\n        this.graph = graph;\n        this.scale = scale != null ? scale : 1 / graph.pageScale;\n        this.border = border != null ? border : 0;\n        this.pageFormat = Rectangle.fromRectangle(pageFormat != null ? pageFormat : graph.pageFormat);\n        this.title = title;\n        this.x0 = x0;\n        this.y0 = y0;\n        this.borderColor = borderColor;\n        this.pageSelector = pageSelector != null ? pageSelector : true;\n    }\n    /**\n     * Returns {@link wnd}.\n     */\n    getWindow() {\n        return this.wnd;\n    }\n    /**\n     * Returns the string that should go before the HTML tag in the print preview\n     * page. This implementation returns an X-UA meta tag for IE5 in quirks mode,\n     * IE8 in IE8 standards mode and edge in IE9 standards mode.\n     */\n    getDoctype() {\n        const dt = '';\n        return dt;\n    }\n    /**\n     * Adds the given graph to the existing print preview.\n     *\n     * @param css Optional CSS string to be used in the head section.\n     * @param targetWindow Optional window that should be used for rendering. If\n     * this is specified then no HEAD tag, CSS and BODY tag will be written.\n     */\n    appendGraph(graph, scale, x0, y0, forcePageBreaks, keepOpen) {\n        this.graph = graph;\n        this.scale = scale != null ? scale : 1 / graph.pageScale;\n        this.x0 = x0;\n        this.y0 = y0;\n        this.open(null, null, forcePageBreaks, keepOpen);\n    }\n    /**\n     * Shows the print preview window. The window is created here if it does\n     * not exist.\n     *\n     * @param css Optional CSS string to be used in the head section.\n     * @param targetWindow Optional window that should be used for rendering. If\n     * this is specified then no HEAD tag, CSS and BODY tag will be written.\n     */\n    open(css = null, targetWindow = null, forcePageBreaks = false, keepOpen = false) {\n        // Closing the window while the page is being rendered may cause an\n        // exception in IE. This and any other exceptions are simply ignored.\n        const previousInitializeOverlay = this.graph.cellRenderer.initializeOverlay;\n        let div = null;\n        try {\n            // Temporarily overrides the method to redirect rendering of overlays\n            // to the draw pane so that they are visible in the printout\n            if (this.printOverlays) {\n                this.graph.cellRenderer.initializeOverlay = (state, overlay) => {\n                    overlay.init(state.view.getDrawPane());\n                };\n            }\n            if (this.printControls) {\n                this.graph.cellRenderer.initControl = (state, control, handleEvents, clickHandler) => {\n                    control.dialect = state.view.graph.dialect;\n                    control.init(state.view.getDrawPane());\n                    return null;\n                };\n            }\n            this.wnd = targetWindow != null ? targetWindow : this.wnd;\n            let isNewWindow = false;\n            if (this.wnd == null) {\n                isNewWindow = true;\n                this.wnd = window.open();\n            }\n            if (!this.wnd) {\n                throw new Error('Create new window not allowed');\n            }\n            const doc = this.wnd.document;\n            if (isNewWindow) {\n                const dt = this.getDoctype();\n                if (dt != null && dt.length > 0) {\n                    doc.writeln(dt);\n                }\n                if (document.compatMode === 'CSS1Compat') {\n                    doc.writeln('<!DOCTYPE html>');\n                }\n                doc.writeln('<html>');\n                doc.writeln('<head>');\n                this.writeHead(doc, css);\n                doc.writeln('</head>');\n                doc.writeln('<body class=\"mxPage\">');\n            }\n            // Computes the horizontal and vertical page count\n            const bounds = this.graph.getGraphBounds().clone();\n            const currentScale = this.graph.getView().getScale();\n            const sc = currentScale / this.scale;\n            const tr = this.graph.getView().getTranslate();\n            // Uses the absolute origin with no offset for all printing\n            if (!this.autoOrigin) {\n                this.x0 -= tr.x * this.scale;\n                this.y0 -= tr.y * this.scale;\n                bounds.width += bounds.x;\n                bounds.height += bounds.y;\n                bounds.x = 0;\n                bounds.y = 0;\n                this.border = 0;\n            }\n            // Store the available page area\n            const availableWidth = this.pageFormat.width - this.border * 2;\n            const availableHeight = this.pageFormat.height - this.border * 2;\n            // Adds margins to page format\n            this.pageFormat.height += this.marginTop + this.marginBottom;\n            // Compute the unscaled, untranslated bounds to find\n            // the number of vertical and horizontal pages\n            bounds.width /= sc;\n            bounds.height /= sc;\n            const hpages = Math.max(1, Math.ceil((bounds.width + this.x0) / availableWidth));\n            const vpages = Math.max(1, Math.ceil((bounds.height + this.y0) / availableHeight));\n            this.pageCount = hpages * vpages;\n            const writePageSelector = () => {\n                if (this.pageSelector && (vpages > 1 || hpages > 1)) {\n                    const table = this.createPageSelector(vpages, hpages);\n                    doc.body.appendChild(table);\n                }\n            };\n            const addPage = (div, addBreak) => {\n                // Border of the DIV (aka page) inside the document\n                if (this.borderColor != null) {\n                    div.style.borderColor = this.borderColor;\n                    div.style.borderStyle = 'solid';\n                    div.style.borderWidth = '1px';\n                }\n                // Needs to be assigned directly because IE doesn't support\n                // child selectors, eg. body > div { background: white; }\n                div.style.background = this.backgroundColor;\n                if (forcePageBreaks || addBreak) {\n                    div.style.pageBreakAfter = 'always';\n                }\n                // NOTE: We are dealing with cross-window DOM here, which\n                // is a problem in IE, so we copy the HTML markup instead.\n                // The underlying problem is that the graph display markup\n                // creation (in mxShape, mxGraphView) is hardwired to using\n                // document.createElement and hence we must use this document\n                // to create the complete page and then copy it over to the\n                // new window.document. This can be fixed later by using the\n                // ownerDocument of the container in mxShape and mxGraphView.\n                if (isNewWindow && Client.IS_EDGE) {\n                    // For some obscure reason, removing the DIV from the\n                    // parent before fetching its outerHTML has missing\n                    // fillcolor properties and fill children, so the div\n                    // must be removed afterwards to keep the fillcolors.\n                    doc.writeln(div.outerHTML);\n                    div.parentNode.removeChild(div);\n                }\n                else if (Client.IS_EDGE) {\n                    let clone = doc.createElement('div');\n                    clone.innerHTML = div.outerHTML;\n                    clone = clone.getElementsByTagName('div')[0];\n                    doc.body.appendChild(clone);\n                    div.parentNode.removeChild(div);\n                }\n                else {\n                    div.parentNode.removeChild(div);\n                    doc.body.appendChild(div);\n                }\n                if (forcePageBreaks || addBreak) {\n                    this.addPageBreak(doc);\n                }\n            };\n            const cov = this.getCoverPages(this.pageFormat.width, this.pageFormat.height);\n            if (cov) {\n                for (const page of cov) {\n                    addPage(page, true);\n                }\n            }\n            const apx = this.getAppendices(this.pageFormat.width, this.pageFormat.height);\n            // Appends each page to the page output for printing, making\n            // sure there will be a page break after each page (ie. div)\n            for (let i = 0; i < vpages; i += 1) {\n                const dy = (i * availableHeight) / this.scale -\n                    this.y0 / this.scale +\n                    (bounds.y - tr.y * currentScale) / currentScale;\n                for (let j = 0; j < hpages; j++) {\n                    if (this.wnd == null) {\n                        return null;\n                    }\n                    const dx = (j * availableWidth) / this.scale -\n                        this.x0 / this.scale +\n                        (bounds.x - tr.x * currentScale) / currentScale;\n                    const pageNum = i * hpages + j + 1;\n                    const clip = new Rectangle(dx, dy, availableWidth, availableHeight);\n                    div = this.renderPage(this.pageFormat.width, this.pageFormat.height, 0, 0, (div) => {\n                        this.addGraphFragment(-dx, -dy, this.scale, pageNum, div, clip);\n                        if (this.printBackgroundImage) {\n                            this.insertBackgroundImage(div, -dx, -dy);\n                        }\n                    }, pageNum);\n                    // Gives the page a unique ID for later accessing the page\n                    div.setAttribute('id', `mxPage-${pageNum}`);\n                    addPage(div, apx != null || i < vpages - 1 || j < hpages - 1);\n                }\n            }\n            if (apx) {\n                for (const [index, page] of apx.entries()) {\n                    addPage(page, index < apx.length - 1);\n                }\n            }\n            if (isNewWindow && !keepOpen) {\n                this.closeDocument();\n                writePageSelector();\n            }\n            this.wnd.focus();\n        }\n        catch (e) {\n            // Removes the DIV from the document in case of an error\n            if (div != null && div.parentNode != null) {\n                div.parentNode.removeChild(div);\n            }\n        }\n        finally {\n            this.graph.cellRenderer.initializeOverlay = previousInitializeOverlay;\n        }\n        return this.wnd;\n    }\n    /**\n     * Adds a page break to the given document.\n     */\n    addPageBreak(doc) {\n        const hr = doc.createElement('hr');\n        hr.className = 'mxPageBreak';\n        doc.body.appendChild(hr);\n    }\n    /**\n     * Writes the closing tags for body and page after calling {@link writePostfix}.\n     */\n    closeDocument() {\n        try {\n            if (this.wnd != null && this.wnd.document != null) {\n                const doc = this.wnd.document;\n                this.writePostfix(doc);\n                doc.writeln('</body>');\n                doc.writeln('</html>');\n                doc.close();\n                // Removes all event handlers in the print output\n                InternalEvent.release(doc.body);\n            }\n        }\n        catch (e) {\n            // ignore any errors resulting from wnd no longer being available\n        }\n    }\n    /**\n     * Writes the HEAD section into the given document, without the opening and closing HEAD tags.\n     */\n    writeHead(doc, css) {\n        if (this.title != null) {\n            doc.writeln(`<title>${this.title}</title>`);\n        }\n        // Adds all required stylesheets\n        addLinkToHead('stylesheet', `${Client.basePath}/css/common.css`, doc);\n        // Removes horizontal rules and page selector from print output\n        doc.writeln('<style type=\"text/css\">');\n        doc.writeln('@media print {');\n        doc.writeln('  * { -webkit-print-color-adjust: exact; }');\n        doc.writeln('  table.mxPageSelector { display: none; }');\n        doc.writeln('  hr.mxPageBreak { display: none; }');\n        doc.writeln('}');\n        doc.writeln('@media screen {');\n        // NOTE: position: fixed is not supported in IE, so the page selector\n        // position (absolute) needs to be updated in IE (see below)\n        doc.writeln('  table.mxPageSelector { position: fixed; right: 10px; top: 10px;' +\n            'font-family: Arial; font-size:10pt; border: solid 1px darkgray;' +\n            'background: white; border-collapse:collapse; }');\n        doc.writeln('  table.mxPageSelector td { border: solid 1px gray; padding:4px; }');\n        doc.writeln('  body.mxPage { background: gray; }');\n        doc.writeln('}');\n        if (css != null) {\n            doc.writeln(css);\n        }\n        doc.writeln('</style>');\n    }\n    /**\n     * Called before closing the body of the page. This implementation is empty.\n     */\n    writePostfix(doc) {\n        // empty\n    }\n    /**\n     * Creates the page selector table.\n     */\n    createPageSelector(vpages, hpages) {\n        if (!this.wnd) {\n            throw new Error('Popup window not created');\n        }\n        const doc = this.wnd.document;\n        const table = doc.createElement('table');\n        table.className = 'mxPageSelector';\n        table.setAttribute('border', '0');\n        const tbody = doc.createElement('tbody');\n        for (let i = 0; i < vpages; i += 1) {\n            const row = doc.createElement('tr');\n            for (let j = 0; j < hpages; j++) {\n                const pageNum = i * hpages + j + 1;\n                const cell = doc.createElement('td');\n                const a = doc.createElement('a');\n                a.setAttribute('href', `#mxPage-${pageNum}`);\n                // Workaround for FF where the anchor is appended to the URL of the original document\n                if (Client.IS_NS && !Client.IS_SF && !Client.IS_GC) {\n                    const js = `let page = document.getElementById('mxPage-${pageNum}');page.scrollIntoView(true);event.preventDefault();`;\n                    a.setAttribute('onclick', js);\n                }\n                write(a, String(pageNum));\n                cell.appendChild(a);\n                row.appendChild(cell);\n            }\n            tbody.appendChild(row);\n        }\n        table.appendChild(tbody);\n        return table;\n    }\n    /**\n     * Creates a DIV that prints a single page of the given\n     * graph using the given scale and returns the DIV that\n     * represents the page.\n     *\n     * @param w Width of the page in pixels.\n     * @param h Height of the page in pixels.\n     * @param dx Optional horizontal page offset in pixels (used internally).\n     * @param dy Optional vertical page offset in pixels (used internally).\n     * @param content Callback that adds the HTML content to the inner div of a page.\n     * Takes the inner div as the argument.\n     * @param pageNumber Integer representing the page number.\n     */\n    renderPage(w, h, dx, dy, content, pageNumber) {\n        let div = document.createElement('div');\n        let arg = null;\n        try {\n            // Workaround for ignored clipping in IE 9 standards\n            // when printing with page breaks and HTML labels.\n            if (dx !== 0 || dy !== 0) {\n                div.style.position = 'relative';\n                div.style.width = `${w}px`;\n                div.style.height = `${h}px`;\n                div.style.pageBreakInside = 'avoid';\n                const innerDiv = document.createElement('div');\n                innerDiv.style.position = 'relative';\n                innerDiv.style.top = `${this.border}px`;\n                innerDiv.style.left = `${this.border}px`;\n                innerDiv.style.width = `${w - 2 * this.border}px`;\n                innerDiv.style.height = `${h - 2 * this.border}px`;\n                innerDiv.style.overflow = 'hidden';\n                const viewport = document.createElement('div');\n                viewport.style.position = 'relative';\n                viewport.style.marginLeft = `${dx}px`;\n                viewport.style.marginTop = `${dy}px`;\n                innerDiv.appendChild(viewport);\n                div.appendChild(innerDiv);\n                document.body.appendChild(div);\n                arg = viewport;\n            }\n            // FIXME: IE10/11 too many pages\n            else {\n                div.style.width = `${w}px`;\n                div.style.height = `${h}px`;\n                div.style.overflow = 'hidden';\n                div.style.pageBreakInside = 'avoid';\n                const innerDiv = document.createElement('div');\n                innerDiv.style.width = `${w - 2 * this.border}px`;\n                innerDiv.style.height = `${h - 2 * this.border}px`;\n                innerDiv.style.overflow = 'hidden';\n                innerDiv.style.top = `${this.border}px`;\n                innerDiv.style.left = `${this.border}px`;\n                div.appendChild(innerDiv);\n                document.body.appendChild(div);\n                arg = innerDiv;\n            }\n        }\n        catch (e) {\n            if (div && div.parentNode) {\n                div.parentNode.removeChild(div);\n            }\n            div = null;\n            throw e;\n        }\n        content(arg);\n        return div;\n    }\n    /**\n     * Returns the root cell for painting the graph.\n     */\n    getRoot() {\n        let root = this.graph.view.currentRoot;\n        if (root == null) {\n            root = this.graph.getDataModel().getRoot();\n        }\n        return root;\n    }\n    /**\n     * Returns true if CSS transforms should be used for scaling content.\n     * This returns true if foreignObject is supported and we're not in Safari\n     * as it has clipping bugs for transformed CSS content with foreignObjects.\n     */\n    useCssTransforms() {\n        return !Client.NO_FO && !Client.IS_SF;\n    }\n    /**\n     * Adds a graph fragment to the given div.\n     *\n     * @param dx Horizontal translation for the diagram.\n     * @param dy Vertical translation for the diagram.\n     * @param scale Scale for the diagram.\n     * @param pageNumber Number of the page to be rendered.\n     * @param div Div that contains the output.\n     * @param clip Contains the clipping rectangle as an {@link Rectangle}.\n     */\n    addGraphFragment(dx, dy, scale, pageNumber, div, clip) {\n        const view = this.graph.getView();\n        const previousContainer = this.graph.container;\n        this.graph.container = div;\n        const canvas = view.getCanvas();\n        const backgroundPane = view.getBackgroundPane();\n        const drawPane = view.getDrawPane();\n        const overlayPane = view.getOverlayPane();\n        const realScale = scale;\n        if (this.graph.dialect === 'svg') {\n            view.createSvg();\n            // Uses CSS transform for scaling\n            if (this.useCssTransforms()) {\n                const g = view.getDrawPane().parentNode;\n                const prev = g.getAttribute('transform');\n                g.setAttribute('transformOrigin', '0 0');\n                g.setAttribute('transform', `scale(${scale},${scale})` + `translate(${dx},${dy})`);\n                scale = 1;\n                dx = 0;\n                dy = 0;\n            }\n        }\n        else {\n            view.createHtml();\n        }\n        // Disables events on the view\n        const eventsEnabled = view.isEventsEnabled();\n        view.setEventsEnabled(false);\n        // Disables the graph to avoid cursors\n        const graphEnabled = this.graph.isEnabled();\n        this.graph.setEnabled(false);\n        // Resets the translation\n        const translate = view.getTranslate();\n        view.translate = new Point(dx, dy);\n        // Redraws only states that intersect the clip\n        const { redraw } = this.graph.cellRenderer;\n        const { states } = view;\n        const s = view.scale;\n        // Gets the transformed clip for intersection check below\n        if (this.clipping) {\n            const tempClip = new Rectangle((clip.x + translate.x) * s, (clip.y + translate.y) * s, (clip.width * s) / realScale, (clip.height * s) / realScale);\n            // Checks clipping rectangle for speedup\n            // Must create terminal states for edge clipping even if terminal outside of clip\n            this.graph.cellRenderer.redraw = (state, force, rendering) => {\n                if (state != null) {\n                    // Gets original state from graph to find bounding box\n                    const orig = states.get(state.cell);\n                    if (orig != null) {\n                        const bbox = view.getBoundingBox(orig, false);\n                        // Stops rendering if outside clip for speedup but ignores\n                        // edge labels where width and height is set to 0\n                        if (bbox != null &&\n                            bbox.width > 0 &&\n                            bbox.height > 0 &&\n                            !intersects(tempClip, bbox)) {\n                            return;\n                        }\n                    }\n                }\n                redraw.apply(this.graph.cellRenderer, [state, force, rendering]);\n            };\n        }\n        let temp = null;\n        try {\n            // Creates the temporary cell states in the view and\n            // draws them onto the temporary DOM nodes in the view\n            const cells = [this.getRoot()];\n            temp = new TemporaryCellStates(view, scale, cells, null, (state) => {\n                return this.getLinkForCellState(state);\n            });\n        }\n        catch (e) {\n            GlobalConfig.logger.error('PrintPreview unable to generate the preview', e);\n        }\n        finally {\n            // Removes everything but the SVG node\n            let tmp = div.firstChild;\n            while (tmp != null) {\n                const next = tmp.nextSibling;\n                const name = tmp.nodeName.toLowerCase();\n                // Note: Width and height are required in FF 11\n                if (name === 'svg') {\n                    tmp.style.overflow = 'hidden';\n                    tmp.style.position = 'relative';\n                    tmp.style.top = `${this.marginTop}px`;\n                    tmp.setAttribute('width', String(clip.width));\n                    tmp.setAttribute('height', String(clip.height));\n                    tmp.style.width = '';\n                    tmp.style.height = '';\n                }\n                // Tries to fetch all text labels and only text labels\n                else if (tmp.style.cursor !== 'default' && name !== 'div') {\n                    tmp.parentNode.removeChild(tmp);\n                }\n                tmp = next;\n            }\n            // Puts background image behind SVG output\n            if (this.printBackgroundImage) {\n                const svgs = div.getElementsByTagName('svg');\n                if (svgs.length > 0) {\n                    svgs[0].style.position = 'absolute';\n                }\n            }\n            // Completely removes the overlay pane to remove more handles\n            view.overlayPane.parentNode.removeChild(view.overlayPane);\n            // Restores the state of the view\n            this.graph.setEnabled(graphEnabled);\n            this.graph.container = previousContainer;\n            this.graph.cellRenderer.redraw = redraw;\n            view.canvas = canvas;\n            view.backgroundPane = backgroundPane;\n            view.drawPane = drawPane;\n            view.overlayPane = overlayPane;\n            view.translate = translate;\n            if (temp) {\n                temp.destroy();\n            }\n            view.setEventsEnabled(eventsEnabled);\n        }\n    }\n    /**\n     * Returns the link for the given cell state. This returns null.\n     */\n    getLinkForCellState(state) {\n        return this.graph.getLinkForCell(state.cell);\n    }\n    /**\n     * Inserts the background image into the given div.\n     */\n    insertBackgroundImage(div, dx, dy) {\n        const bg = this.graph.backgroundImage;\n        if (bg != null) {\n            const img = document.createElement('img');\n            img.style.position = 'absolute';\n            img.style.marginLeft = `${Math.round(dx * this.scale)}px`;\n            img.style.marginTop = `${Math.round(dy * this.scale)}px`;\n            img.setAttribute('width', String(Math.round(this.scale * bg.width)));\n            img.setAttribute('height', String(Math.round(this.scale * bg.height)));\n            img.src = bg.src;\n            div.insertBefore(img, div.firstChild);\n        }\n    }\n    /**\n     * Returns the pages to be added before the print output. This returns `null`.\n     */\n    getCoverPages(_width, _height) {\n        return null;\n    }\n    /**\n     * Returns the pages to be added after the print output. This returns `null`.\n     */\n    getAppendices(_width, _height) {\n        return null;\n    }\n    /**\n     * Opens the print preview and shows the print dialog.\n     *\n     * @param css Optional CSS string to be used in the head section.\n     */\n    print(css) {\n        const wnd = this.open(css);\n        if (wnd != null) {\n            wnd.print();\n        }\n    }\n    /**\n     * Closes the print preview window.\n     */\n    close() {\n        if (this.wnd != null) {\n            this.wnd.close();\n            this.wnd = null;\n        }\n    }\n}\nexport default PrintPreview;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from '../event/EventSource';\nimport InternalEvent from '../event/InternalEvent';\nimport Rectangle from '../geometry/Rectangle';\n/**\n * Manager for swimlanes and nested swimlanes that sets the size of newly added\n * swimlanes to that of their siblings, and propagates changes to the size of a\n * swimlane to its siblings, if {@link siblings} is true, and its ancestors, if\n * {@link bubbling} is true.\n *\n * @category Layout\n */\nclass SwimlaneManager extends EventSource {\n    constructor(graph, horizontal = true, addEnabled = true, resizeEnabled = true) {\n        super();\n        /**\n         * Specifies if event handling is enabled.\n         * @default true\n         */\n        this.enabled = true;\n        /**\n         * Specifies the orientation of the swimlanes.\n         * @default true\n         */\n        this.horizontal = true;\n        /**\n         * Specifies if newly added cells should be resized to match the size of their\n         * existing siblings.\n         * @default true\n         */\n        this.addEnabled = true;\n        /**\n         * Specifies if resizing of swimlanes should be handled.\n         * @default true\n         */\n        this.resizeEnabled = true;\n        this.horizontal = horizontal;\n        this.addEnabled = addEnabled;\n        this.resizeEnabled = resizeEnabled;\n        this.addHandler = (sender, evt) => {\n            if (this.isEnabled() && this.isAddEnabled()) {\n                this.cellsAdded(evt.getProperty('cells'));\n            }\n        };\n        this.resizeHandler = (sender, evt) => {\n            if (this.isEnabled() && this.isResizeEnabled()) {\n                this.cellsResized(evt.getProperty('cells'));\n            }\n        };\n        this.setGraph(graph);\n    }\n    /**\n     * Returns true if events are handled. This implementation\n     * returns {@link enabled}.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Enables or disables event handling. This implementation\n     * updates {@link enabled}.\n     *\n     * @param enabled Boolean that specifies the new enabled state.\n     */\n    setEnabled(value) {\n        this.enabled = value;\n    }\n    /**\n     * Returns {@link horizontal}.\n     */\n    isHorizontal() {\n        return this.horizontal;\n    }\n    /**\n     * Sets {@link horizontal}.\n     */\n    setHorizontal(value) {\n        this.horizontal = value;\n    }\n    /**\n     * Returns {@link addEnabled}.\n     */\n    isAddEnabled() {\n        return this.addEnabled;\n    }\n    /**\n     * Sets {@link addEnabled}.\n     */\n    setAddEnabled(value) {\n        this.addEnabled = value;\n    }\n    /**\n     * Returns {@link resizeEnabled}.\n     */\n    isResizeEnabled() {\n        return this.resizeEnabled;\n    }\n    /**\n     * Sets {@link resizeEnabled}.\n     */\n    setResizeEnabled(value) {\n        this.resizeEnabled = value;\n    }\n    /**\n     * Returns the graph that this manager operates on.\n     */\n    getGraph() {\n        return this.graph;\n    }\n    /**\n     * Sets the graph that the manager operates on.\n     */\n    setGraph(graph) {\n        if (this.graph) {\n            this.graph.removeListener(this.addHandler);\n            this.graph.removeListener(this.resizeHandler);\n        }\n        // @ts-expect-error this.graph can be null only when it is being destroyed.\n        this.graph = graph;\n        if (this.graph) {\n            this.graph.addListener(InternalEvent.ADD_CELLS, this.addHandler);\n            this.graph.addListener(InternalEvent.CELLS_RESIZED, this.resizeHandler);\n        }\n    }\n    /**\n     * Returns true if the given swimlane should be ignored.\n     */\n    isSwimlaneIgnored(swimlane) {\n        return !this.getGraph().isSwimlane(swimlane);\n    }\n    /**\n     * Returns true if the given cell is horizontal. If the given cell is not a\n     * swimlane, then the global orientation is returned.\n     */\n    isCellHorizontal(cell) {\n        if (this.graph.isSwimlane(cell)) {\n            const style = this.graph.getCellStyle(cell);\n            return style.horizontal ?? true;\n        }\n        return !this.isHorizontal();\n    }\n    /**\n     * Called if any cells have been added.\n     *\n     * @param cell Array of {@link Cell} that have been added.\n     */\n    cellsAdded(cells) {\n        if (cells.length > 0) {\n            this.graph.batchUpdate(() => {\n                for (const cell of cells) {\n                    if (!this.isSwimlaneIgnored(cell)) {\n                        this.swimlaneAdded(cell);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Updates the size of the given swimlane to match that of any existing\n     * siblings swimlanes.\n     *\n     * @param swimlane {@link mxCell} that represents the new swimlane.\n     */\n    swimlaneAdded(swimlane) {\n        const parent = swimlane.getParent();\n        const childCount = parent.getChildCount();\n        let geo = null;\n        // Finds the first valid sibling swimlane as reference\n        for (let i = 0; i < childCount; i += 1) {\n            const child = parent.getChildAt(i);\n            if (child !== swimlane && !this.isSwimlaneIgnored(child)) {\n                geo = child.getGeometry();\n                if (geo) {\n                    break;\n                }\n            }\n        }\n        // Applies the size of the refernece to the newly added swimlane\n        if (geo) {\n            const parentHorizontal = parent ? this.isCellHorizontal(parent) : this.horizontal;\n            this.resizeSwimlane(swimlane, geo.width, geo.height, parentHorizontal);\n        }\n    }\n    /**\n     * Called if any cells have been resizes. Calls {@link swimlaneResized} for all\n     * swimlanes where {@link isSwimlaneIgnored} returns false.\n     *\n     * @param cells Array of {@link Cell} whose size was changed.\n     */\n    cellsResized(cells) {\n        if (cells.length > 0) {\n            this.graph.batchUpdate(() => {\n                // Finds the top-level swimlanes and adds offsets\n                for (const cell of cells) {\n                    if (!this.isSwimlaneIgnored(cell)) {\n                        const geo = cell.getGeometry();\n                        if (geo) {\n                            const size = new Rectangle(0, 0, geo.width, geo.height);\n                            let top = cell;\n                            let current = top;\n                            while (current) {\n                                top = current;\n                                current = current.getParent();\n                                const tmp = this.graph.isSwimlane(current)\n                                    ? this.graph.getStartSize(current)\n                                    : new Rectangle();\n                                size.width += tmp.width;\n                                size.height += tmp.height;\n                            }\n                            const parentHorizontal = current\n                                ? this.isCellHorizontal(current)\n                                : this.horizontal;\n                            this.resizeSwimlane(top, size.width, size.height, parentHorizontal);\n                        }\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Called from {@link cellsResized} for all swimlanes that are not ignored to update\n     * the size of the siblings and the size of the parent swimlanes, recursively,\n     * if {@link bubbling} is true.\n     *\n     * @param swimlane {@link mxCell} whose size has changed.\n     */\n    resizeSwimlane(swimlane, w, h, parentHorizontal) {\n        const model = this.graph.getDataModel();\n        model.batchUpdate(() => {\n            const horizontal = this.isCellHorizontal(swimlane);\n            if (!this.isSwimlaneIgnored(swimlane)) {\n                let geo = swimlane.getGeometry();\n                if (geo) {\n                    if ((parentHorizontal && geo.height !== h) ||\n                        (!parentHorizontal && geo.width !== w)) {\n                        geo = geo.clone();\n                        if (parentHorizontal) {\n                            geo.height = h;\n                        }\n                        else {\n                            geo.width = w;\n                        }\n                        model.setGeometry(swimlane, geo);\n                    }\n                }\n            }\n            const tmp = this.graph.isSwimlane(swimlane)\n                ? this.graph.getStartSize(swimlane)\n                : new Rectangle();\n            w -= tmp.width;\n            h -= tmp.height;\n            const childCount = swimlane.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                const child = swimlane.getChildAt(i);\n                this.resizeSwimlane(child, w, h, horizontal);\n            }\n        });\n    }\n    /**\n     * Removes all handlers from the {@link graph} and deletes the reference to it.\n     */\n    destroy() {\n        this.setGraph(null);\n    }\n}\nexport default SwimlaneManager;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { isNullish } from '../../internal/utils';\n/**\n * Action to change the attribute of a cell's user object.\n * There is no method on the graph model that uses this action.\n *\n * To use the action, you can use the code shown in the example below.\n *\n * ### Example\n *\n * To change the attributeName in the cell's user object to attributeValue, use the following code:\n *\n * ```javascript\n * model.beginUpdate();\n * try {\n *   const edit = new CellAttributeChange(cell, attributeName, attributeValue);\n *   model.execute(edit);\n * } finally {\n *   model.endUpdate();\n * }\n * ```\n *\n * @category Change\n */\nclass CellAttributeChange {\n    /**\n     * Constructs a change of an attribute of the DOM node stored as the value of the given {@link Cell}`.\n     */\n    constructor(cell, attribute, value) {\n        this.cell = cell;\n        this.attribute = attribute;\n        this.value = value;\n        this.previous = value;\n    }\n    /**\n     * Changes the attribute of the cell's user object by\n     * using {@link Cell#setAttribute}.\n     */\n    execute() {\n        const tmp = this.cell.getAttribute(this.attribute);\n        if (isNullish(this.previous)) {\n            this.cell.value.removeAttribute(this.attribute);\n        }\n        else {\n            this.cell.setAttribute(this.attribute, this.previous);\n        }\n        this.previous = tmp;\n    }\n}\nexport default CellAttributeChange;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalEvent from '../event/InternalEvent';\nimport { isAncestorNode } from '../../util/domUtils';\nimport { getSource, isAltDown, isConsumed, isControlDown as _isControlDown, isShiftDown, } from '../../util/EventUtils';\n/**\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n *\n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descendants of {@link AbstractGraph.container}\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the {@link graph}.\n *\n * Example:\n *\n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n *\n * ```javascript\n * const keyHandler = new KeyHandler(graph);\n * keyHandler.bindKey(46, (evt) => {\n *   if (graph.isEnabled()) {\n *     graph.removeCells();\n *   }\n * });\n * ```\n *\n * Keycodes:\n *\n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n *\n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * ```javascript\n * keyHandler.getFunction = (evt) => {\n *   if (evt) {\n *     return (InternalEvent.isControlDown(evt) || (Client.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *   return null;\n * };\n * ```\n */\nclass KeyHandler {\n    /**\n     * Constructs an event handler that executes functions bound to specific keystrokes.\n     *\n     * @param graph Reference to the associated {@link AbstractGraph}.\n     * @param target  Optional reference to the event target.\n     *                If `null`, the document element is used as the event target, that is, the object where the key event listener is installed.\n     */\n    constructor(graph, target = null) {\n        this.keydownHandler = null;\n        /**\n         * Reference to the {@link AbstractGraph} associated with this handler.\n         */\n        this.graph = null;\n        /**\n         * Reference to the target DOM, that is, the DOM node where the key event\n         * listeners are installed.\n         */\n        this.target = null;\n        /**\n         * Maps from keycodes to functions for non-pressed control keys.\n         */\n        this.normalKeys = {};\n        /**\n         * Maps from keycodes to functions for pressed shift keys.\n         */\n        this.shiftKeys = {};\n        /**\n         * Maps from keycodes to functions for pressed control keys.\n         */\n        this.controlKeys = {};\n        /**\n         * Maps from keycodes to functions for pressed control and shift keys.\n         */\n        this.controlShiftKeys = {};\n        /**\n         * Specifies if events are handled. Default is true.\n         */\n        this.enabled = true;\n        if (graph != null) {\n            this.graph = graph;\n            this.target = target || document.documentElement;\n            this.keydownHandler = (evt) => {\n                this.keyDown(evt);\n            };\n            // Installs the keystroke listener in the target\n            InternalEvent.addListener(this.target, 'keydown', this.keydownHandler);\n        }\n    }\n    /**\n     * Returns true if events are handled. This implementation returns\n     * <enabled>.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Enables or disables event handling by updating <enabled>.\n     *\n     * @param enabled Boolean that specifies the new enabled state.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n    }\n    /**\n     * Binds the specified keycode to the given function. This binding is used\n     * if the control key is not pressed.\n     *\n     * @param code Integer that specifies the keycode.\n     * @param funct JavaScript function that takes the key event as an argument.\n     */\n    bindKey(code, funct) {\n        this.normalKeys[code] = funct;\n    }\n    /**\n     * Binds the specified keycode to the given function. This binding is used\n     * if the shift key is pressed.\n     *\n     * @param code Integer that specifies the keycode.\n     * @param funct JavaScript function that takes the key event as an argument.\n     */\n    bindShiftKey(code, funct) {\n        this.shiftKeys[code] = funct;\n    }\n    /**\n     * Binds the specified keycode to the given function. This binding is used\n     * if the control key is pressed.\n     *\n     * @param code Integer that specifies the keycode.\n     * @param funct JavaScript function that takes the key event as an argument.\n     */\n    bindControlKey(code, funct) {\n        this.controlKeys[code] = funct;\n    }\n    /**\n     * Binds the specified keycode to the given function. This binding is used\n     * if the control and shift key are pressed.\n     *\n     * @param code Integer that specifies the keycode.\n     * @param funct JavaScript function that takes the key event as an argument.\n     */\n    bindControlShiftKey(code, funct) {\n        this.controlShiftKeys[code] = funct;\n    }\n    /**\n     * Returns true if the control key is pressed. This uses {@link Event#isControlDown}.\n     *\n     * @param evt Key event whose control key pressed state should be returned.\n     */\n    isControlDown(evt) {\n        return _isControlDown(evt);\n    }\n    /**\n     * Returns the function associated with the given key event or null if no\n     * function is associated with the given event.\n     *\n     * @param evt Key event whose associated function should be returned.\n     */\n    getFunction(evt) {\n        if (evt != null && !isAltDown(evt)) {\n            if (this.isControlDown(evt)) {\n                if (isShiftDown(evt)) {\n                    return this.controlShiftKeys[evt.keyCode];\n                }\n                return this.controlKeys[evt.keyCode];\n            }\n            if (isShiftDown(evt)) {\n                return this.shiftKeys[evt.keyCode];\n            }\n            return this.normalKeys[evt.keyCode];\n        }\n        return null;\n    }\n    /**\n     * Returns `true` if the event should be processed by this handler.\n     * That is, if the event source is either the target, one of its direct children a descendant of the {@link AbstractGraph.container},\n     * or the {@link CellEditorHandler} plugin of the {@link graph}.\n     *\n     * @param evt Key event that represents the keystroke.\n     */\n    isGraphEvent(evt) {\n        const source = getSource(evt);\n        // Accepts events from the target object or in-place editing inside graph\n        const cellEditorHandler = this.graph?.getPlugin('CellEditorHandler');\n        if (source === this.target ||\n            source.parentNode === this.target ||\n            (cellEditorHandler && cellEditorHandler.isEventSource(evt))) {\n            return true;\n        }\n        // Accepts events from inside the container\n        return this.graph ? isAncestorNode(this.graph.container, source) : false;\n    }\n    /**\n     * Handles the event by invoking the function bound to the respective keystroke\n     * if {@link isEnabledForEvent} returns `true` for the given event and if\n     * {@link isEventIgnored} returns `false`, except for escape for which\n     * {@link isEventIgnored} is not invoked.\n     *\n     * @param evt Key event that represents the keystroke.\n     */\n    keyDown(evt) {\n        if (this.isEnabledForEvent(evt)) {\n            // Cancels the editing if escape is pressed\n            if (evt.keyCode === 27 /* Escape */) {\n                this.escape(evt);\n            }\n            // Invokes the function for the keystroke\n            else if (!this.isEventIgnored(evt)) {\n                const boundFunction = this.getFunction(evt);\n                if (boundFunction != null) {\n                    boundFunction(evt);\n                    InternalEvent.consume(evt);\n                }\n            }\n        }\n    }\n    /**\n     * Returns true if the given event should be handled. {@link isEventIgnored} is\n     * called later if the event is not an escape keystroke, in which case\n     * {@link escape} is called.\n     *\n     * This implementation returns `true` if  {@link AbstractGraph.isEnabled}\n     * returns `true` for both, this handler and {@link graph}, if the event is not\n     * consumed and if  {@link isGraphEvent} returns `true`.\n     *\n     * @param evt Key event that represents the keystroke.\n     */\n    isEnabledForEvent(evt) {\n        return (this.graph?.isEnabled() &&\n            !isConsumed(evt) &&\n            this.isGraphEvent(evt) &&\n            this.isEnabled());\n    }\n    /**\n     * Returns true if the given keystroke should be ignored. This returns {@link AbstractGraph.isEditing}.\n     *\n     * @param evt Key event that represents the keystroke.\n     */\n    isEventIgnored(evt) {\n        return this.graph?.isEditing() ?? false;\n    }\n    /**\n     * Hook to process ESCAPE keystrokes. This implementation invokes\n     * {@link AbstractGraph.stopEditing} to cancel the current editing, connecting\n     * and/or other ongoing modifications.\n     *\n     * @param evt Key event that represents the keystroke. Possible keycode in this case is 27 (ESCAPE).\n     */\n    escape(evt) {\n        if (this.graph?.isEscapeEnabled()) {\n            this.graph.escape(evt);\n        }\n    }\n    /**\n     * Destroys the handler and all its references into the DOM. This does\n     * normally not need to be called, it is called automatically when the\n     * window unloads (in IE).\n     */\n    onDestroy() {\n        if (this.target != null && this.keydownHandler != null) {\n            InternalEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n            this.keydownHandler = null;\n        }\n        this.target = null;\n    }\n}\nexport default KeyHandler;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalEvent from '../view/event/InternalEvent';\nimport EventObject from '../view/event/EventObject';\nimport KeyHandler from '../view/handler/KeyHandler';\n/**\n * Binds keycodes to action names in an editor.\n *\n * This aggregates an internal {@link handler} and extends the implementation of {@link KeyHandler.escape} to not only cancel the editing,\n * but also hide the properties dialog and fire an {@link InternalEvent.ESCAPE} event via {@link editor}.\n *\n * An instance of this class is created by {@link Editor} and stored in {@link Editor.keyHandler}.\n *\n * ### Example\n * Bind the delete key to the delete action in an existing editor.\n * ```javascript\n * const keyHandler = new EditorKeyHandler(editor);\n * keyHandler.bindAction(46, 'delete');\n * ```\n *\n * ### Codec\n * This class uses the {@link EditorKeyHandlerCodec} to read configuration data into an existing instance.  See {@link EditorKeyHandlerCodec} for a description of the configuration format.\n *\n * ### Keycodes\n * See {@link KeyHandler}.\n * An {@link InternalEvent.ESCAPE} event is fired via the editor if the escape key is pressed.\n *\n * @category Editor\n */\nexport class EditorKeyHandler {\n    constructor(editor = null) {\n        /**\n         * Reference to the enclosing {@link Editor}.\n         */\n        this.editor = null;\n        /**\n         * Holds the {@link KeyHandler} for key event handling.\n         */\n        this.handler = null;\n        if (editor != null) {\n            this.editor = editor;\n            const handler = (this.handler = new KeyHandler(editor.graph));\n            // Extends the escape function of the internal key\n            // handle to hide the properties dialog and fire\n            // the escape event via the editor instance\n            const old = this.handler.escape;\n            this.handler.escape = (evt) => {\n                old.apply(handler, [evt]);\n                editor.hideProperties();\n                editor.fireEvent(new EventObject(InternalEvent.ESCAPE, { event: evt }));\n            };\n        }\n    }\n    /**\n     * Binds the specified keycode to the given action in {@link editor}.  The optional control flag specifies if the control key must be pressed to trigger the action.\n     *\n     * @param code      Integer that specifies the keycode.\n     * @param action    Name of the action to execute in {@link editor}.\n     * @param control   Optional boolean that specifies if control must be pressed.  Default is false.\n     */\n    bindAction(code, action, control) {\n        const keyHandler = () => {\n            this.editor.execute(action);\n        };\n        if (control) {\n            // Binds the function to control-down keycode\n            this.handler.bindControlKey(code, keyHandler);\n        }\n        else {\n            // Binds the function to the normal keycode\n            this.handler.bindKey(code, keyHandler);\n        }\n    }\n    /**\n     * Destroys the {@link handler} associated with this object.  This does normally not need to be called, the {@link handler} is destroyed automatically when the window unloads (in IE) by {@link Editor}.\n     */\n    destroy() {\n        this.handler.onDestroy();\n        this.handler = null;\n    }\n}\nexport default EditorKeyHandler;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { getTextContent } from '../util/domUtils';\nimport { doEval, isNullish } from '../internal/utils';\nimport { translate } from '../internal/i18n-utils';\n/**\n * Creates popupmenus for mouse events.\n *\n * This object holds an XML node which is a description of the popup menu to be created.\n * In {@link createMenu}, the configuration is applied to the context and the resulting menu items are added to the menu dynamically.\n * See {@link createMenu} for a description of the configuration format.\n *\n * This class does not create the DOM nodes required for the popup menu, it only parses an XML description to invoke the respective methods on an {@link MaxPopupMenu} each time the menu is displayed.\n *\n * ### Codec\n * This class uses the {@link EditorPopupMenuCodec} to read configuration data into an existing instance, however, the actual parsing is done by this class during program execution, so the format is described below.\n *\n * @category Editor\n */\nexport class EditorPopupMenu {\n    constructor(config = null) {\n        /**\n         * Base path for all icon attributes in the config.  Default is null.\n         *\n         * @default null\n         */\n        this.imageBasePath = null;\n        this.config = config;\n    }\n    /**\n     * This function is called from {@link Editor} to add items to the\n     * given menu based on {@link config}. The config is a sequence of\n     * the following nodes and attributes.\n     *\n     * @ChildNodes:\n     *\n     * add - Adds a new menu item. See below for attributes.\n     * separator - Adds a separator. No attributes.\n     * condition - Adds a custom condition. Name attribute.\n     *\n     * The add-node may have a child node that defines a function to be invoked\n     * before the action is executed (or instead of an action to be executed).\n     *\n     * @Attributes:\n     *\n     * as - Resource key for the label (needs entry in property file).\n     * action - Name of the action to execute in enclosing editor.\n     * icon - Optional icon (relative/absolute URL).\n     * iconCls - Optional CSS class for the icon.\n     * if - Optional name of condition that must be true (see below).\n     * enabled-if - Optional name of condition that specifies if the menu item\n     * should be enabled.\n     * name - Name of custom condition. Only for condition nodes.\n     *\n     * @Conditions:\n     *\n     * nocell - No cell under the mouse.\n     * ncells - More than one cell selected.\n     * notRoot - Drilling position is other than home.\n     * cell - Cell under the mouse.\n     * notEmpty - Exactly one cell with children under mouse.\n     * expandable - Exactly one expandable cell under mouse.\n     * collapsable - Exactly one collapsable cell under mouse.\n     * validRoot - Exactly one cell which is a possible root under mouse.\n     * swimlane - Exactly one cell which is a swimlane under mouse.\n     *\n     * @Example:\n     *\n     * To add a new item for a given action to the popupmenu:\n     *\n     * ```\n     * <EditorPopupMenu as=\"popupHandler\">\n     *   <add as=\"delete\" action=\"delete\" icon=\"images/delete.gif\" if=\"cell\"/>\n     * </EditorPopupMenu>\n     * ```\n     *\n     * To add a new item for a custom function:\n     *\n     * ```\n     * <EditorPopupMenu as=\"popupHandler\">\n     *   <add as=\"action1\"><![CDATA[\n     *\t\tfunction (editor, cell, evt)\n     *\t\t{\n     *\t\t\teditor.execute('action1', cell, 'myArg');\n     *\t\t}\n     *   ]]></add>\n     * </EditorPopupMenu>\n     * ```\n     *\n     * The above example invokes action1 with an additional third argument via\n     * the editor instance. The third argument is passed to the function that\n     * defines action1. If the add-node has no action-attribute, then only the\n     * function defined in the text content is executed, otherwise first the\n     * function and then the action defined in the action-attribute is\n     * executed. The function in the text content has 3 arguments, namely the\n     * {@link Editor} instance, the {@link Cell} instance under the mouse, and the\n     * native mouse event.\n     *\n     * Custom Conditions:\n     *\n     * To add a new condition for popupmenu items:\n     *\n     * ```\n     * <condition name=\"condition1\"><![CDATA[\n     *   function (editor, cell, evt)\n     *   {\n     *     return cell != null;\n     *   }\n     * ]]></condition>\n     * ```\n     *\n     * The new condition can then be used in any item as follows:\n     *\n     * ```\n     * <add as=\"action1\" action=\"action1\" icon=\"action1.gif\" if=\"condition1\"/>\n     * ```\n     *\n     * The order in which the items and conditions appear is not significant as\n     * all conditions are evaluated before any items are created.\n     *\n     * @param editor - Enclosing {@link Editor} instance.\n     * @param menu - {@link MaxPopupMenu} that is used for adding items and separators.\n     * @param cell - Optional {@link Cell} which is under the mouse pointer.\n     * @param evt - Optional mouse event which triggered the menu.\n     */\n    createMenu(editor, menu, cell = null, evt = null) {\n        if (!isNullish(this.config)) {\n            const conditions = this.createConditions(editor, cell, evt);\n            const item = this.config.firstChild;\n            this.addItems(editor, menu, cell, evt, conditions, item, null);\n        }\n    }\n    /**\n     * Recursively adds the given items and all of its children into the given menu.\n     *\n     * @param editor Enclosing  {@link Editor} instance.\n     * @param menu {@link MaxPopupMenu} that is used for adding items and separators.\n     * @param cell Optional {@link Cell} which is under the mouse pointer.\n     * @param evt Optional mouse event which triggered the menu.\n     * @param conditions Array of names boolean conditions.\n     * @param item XML node that represents the current menu item.\n     * @param parent DOM node that represents the parent menu item.\n     */\n    addItems(editor, menu, cell = null, evt = null, conditions, item, parent = null) {\n        let addSeparator = false;\n        while (item) {\n            if (item.nodeName === 'add') {\n                const condition = item.getAttribute('if');\n                if (isNullish(condition) || conditions[condition]) {\n                    let as = item.getAttribute('as');\n                    as = translate(as) || as;\n                    const funct = doEval(getTextContent(item));\n                    const action = item.getAttribute('action');\n                    let icon = item.getAttribute('icon');\n                    const iconCls = item.getAttribute('iconCls');\n                    const enabledCond = item.getAttribute('enabled-if');\n                    const enabled = isNullish(enabledCond) || conditions[enabledCond];\n                    if (addSeparator) {\n                        menu.addSeparator(parent);\n                        addSeparator = false;\n                    }\n                    if (!isNullish(icon) && this.imageBasePath) {\n                        icon = this.imageBasePath + icon;\n                    }\n                    const row = this.addAction(menu, editor, as, icon, funct, action, cell, parent, iconCls, enabled);\n                    this.addItems(editor, menu, cell, evt, conditions, \n                    // @ts-ignore\n                    item.firstChild, row);\n                }\n            }\n            else if (item.nodeName === 'separator') {\n                addSeparator = true;\n            }\n            // @ts-ignore\n            item = item.nextSibling;\n        }\n    }\n    /**\n     * Helper method to bind an action to a new menu item.\n     *\n     * @param menu {@link MaxPopupMenu} that is used for adding items and separators.\n     * @param editor Enclosing {@link Editor} instance.\n     * @param lab String that represents the label of the menu item.\n     * @param icon Optional URL that represents the icon of the menu item.\n     * @param action Optional name of the action to execute in the given editor.\n     * @param funct Optional function to execute before the optional action. The\n     * function takes an <Editor>, the <Cell> under the mouse and the\n     * mouse event that triggered the call.\n     * @param cell Optional <Cell> to use as an argument for the action.\n     * @param parent DOM node that represents the parent menu item.\n     * @param iconCls Optional CSS class for the menu icon.\n     * @param enabled Optional boolean that specifies if the menu item is enabled.\n     * Default is true.\n     */\n    addAction(menu, editor, lab, icon = null, funct = null, action = null, cell = null, parent = null, iconCls = null, enabled = true) {\n        const clickHandler = (evt) => {\n            if (typeof funct === 'function') {\n                funct.call(editor, editor, cell, evt);\n            }\n            if (!isNullish(action)) {\n                editor.execute(action, cell, evt);\n            }\n        };\n        return menu.addItem(lab, icon || null, clickHandler, parent, iconCls, enabled);\n    }\n    /**\n     * Evaluates the default conditions for the given context.\n     *\n     * @param editor\n     * @param cell\n     * @param evt\n     */\n    createConditions(editor, cell = null, evt = null) {\n        // Creates array with conditions\n        const model = editor.graph.getDataModel();\n        const childCount = cell ? cell.getChildCount() : 0;\n        // Adds some frequently used conditions\n        const conditions = {};\n        conditions.nocell = cell == null;\n        conditions.ncells = editor.graph.getSelectionCount() > 1;\n        conditions.notRoot = model.getRoot() !== editor.graph.getDefaultParent().getParent();\n        conditions.cell = cell != null;\n        const isCell = cell != null && editor.graph.getSelectionCount() === 1;\n        conditions.nonEmpty = isCell && childCount > 0;\n        conditions.expandable = isCell && editor.graph.isCellFoldable(cell, false);\n        conditions.collapsable = isCell && editor.graph.isCellFoldable(cell, true);\n        conditions.validRoot = isCell && editor.graph.isValidRoot(cell);\n        conditions.emptyValidRoot = conditions.validRoot && childCount === 0;\n        conditions.swimlane = isCell && editor.graph.isSwimlane(cell);\n        // Evaluates dynamic conditions from config file\n        const condNodes = this.config.getElementsByTagName('condition');\n        for (const condNode of Array.from(condNodes)) {\n            const funct = doEval(getTextContent(condNode));\n            const name = condNode.getAttribute('name');\n            if (!isNullish(name) && typeof funct === 'function') {\n                conditions[name] = funct(editor, cell, evt);\n            }\n        }\n        return conditions;\n    }\n}\nexport default EditorPopupMenu;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalEvent from '../view/event/InternalEvent';\nimport Point from '../view/geometry/Point';\nimport MaxPopupMenu from './MaxPopupMenu';\nimport EventSource from '../view/event/EventSource';\nimport EventObject from '../view/event/EventObject';\nimport Client from '../Client';\nimport { br, write, writeln } from '../util/domUtils';\n/**\n * Creates a toolbar inside a given DOM node. The toolbar may contain icons, buttons and combo boxes.\n *\n * ### `InternalEvent.SELECT`\n *\n * Fires when an item was selected in the toolbar. The EventObject {@link InternalEvent.function}\n * property contains the function that was selected in {@link selectMode}.\n *\n * @category GUI\n */\nclass MaxToolbar extends EventSource {\n    constructor(container) {\n        super();\n        this.menu = null;\n        this.currentImg = null;\n        this.selectedMode = null;\n        this.defaultMode = null;\n        this.defaultFunction = null;\n        /**\n         * Specifies if events are handled. Default is true.\n         */\n        this.enabled = true;\n        /**\n         * Specifies if <resetMode> requires a forced flag of true for resetting\n         * the current mode in the toolbar. Default is false. This is set to true\n         * if the toolbar item is double clicked to avoid a reset after a single\n         * use of the item.\n         */\n        this.noReset = false;\n        /**\n         * Boolean indicating if the default mode should be the last selected\n         * switch mode or the first inserted switch mode. Default is true, that\n         * is the last selected switch mode is the default mode. The default mode\n         * is the mode to be selected after a reset of the toolbar. If this is\n         * false, then the default mode is the first inserted mode item regardless\n         * of what was last selected. Otherwise, the selected item after a reset is\n         * the previously selected item.\n         */\n        this.updateDefaultMode = true;\n        this.container = container;\n    }\n    /**\n     * Adds the given function as an image with the specified title and icon\n     * and returns the new image node.\n     *\n     * @param title Optional string that is used as the tooltip.\n     * @param icon Optional URL of the image to be used. If no URL is given, then a\n     * button is created.\n     * @param funct Function to execute on a mouse click.\n     * @param pressedIcon Optional URL of the pressed image. Default is a gray\n     * background.\n     * @param style Optional style classname. Default is mxToolbarItem.\n     * @param factoryMethod Optional factory method for popup menu, eg.\n     * (menu, evt, cell)=> { menu.addItem('Hello, World!'); }\n     */\n    addItem(title = null, icon = null, funct = null, pressedIcon = null, style = null, factoryMethod = null) {\n        const img = document.createElement(icon != null ? 'img' : 'button');\n        const initialClassName = style || (factoryMethod ? 'mxToolbarMode' : 'mxToolbarItem');\n        img.className = initialClassName;\n        if (icon) {\n            img.setAttribute('src', icon);\n        }\n        if (title != null) {\n            if (icon != null) {\n                img.setAttribute('title', title);\n            }\n            else {\n                write(img, title);\n            }\n        }\n        this.container.appendChild(img);\n        // Invokes the function on a click on the toolbar item\n        if (funct != null) {\n            InternalEvent.addListener(img, 'click', funct);\n            if (Client.IS_TOUCH) {\n                InternalEvent.addListener(img, 'touchend', funct);\n            }\n        }\n        const mouseHandler = (evt) => {\n            if (pressedIcon != null) {\n                img.setAttribute('src', icon);\n            }\n            else {\n                img.style.backgroundColor = '';\n            }\n        };\n        // Highlights the toolbar item with a gray background\n        // while it is being clicked with the mouse\n        InternalEvent.addGestureListeners(img, (evt) => {\n            if (pressedIcon != null) {\n                img.setAttribute('src', pressedIcon);\n            }\n            else {\n                img.style.backgroundColor = 'gray';\n            }\n            // Popup Menu\n            if (factoryMethod) {\n                if (this.menu == null) {\n                    this.menu = new MaxPopupMenu();\n                    // TODO the removal of the init method in the MaxPopupMenu class changed the behavior here\n                    //this.menu.init();\n                }\n                const last = this.currentImg;\n                if (this.menu.isMenuShowing()) {\n                    this.menu.hideMenu();\n                }\n                if (last != img) {\n                    // Redirects factory method to local factory method\n                    this.currentImg = img;\n                    this.menu.factoryMethod = factoryMethod;\n                    const point = new Point(img.offsetLeft, img.offsetTop + img.offsetHeight);\n                    this.menu.popup(point.x, point.y, null, evt);\n                    // Sets and overrides to restore classname\n                    if (this.menu.isMenuShowing()) {\n                        img.className = `${initialClassName}Selected`;\n                        const hideMenu = this.menu.hideMenu;\n                        this.menu.hideMenu = () => {\n                            hideMenu.apply(this);\n                            img.className = initialClassName;\n                            this.currentImg = null;\n                        };\n                    }\n                }\n            }\n        }, null, mouseHandler);\n        InternalEvent.addListener(img, 'mouseout', mouseHandler);\n        return img;\n    }\n    /**\n     * Adds and returns a new SELECT element using the given style. The element\n     * is placed inside a DIV with the mxToolbarComboContainer style classname.\n     *\n     * @param style - Optional style classname. Default is mxToolbarCombo.\n     */\n    addCombo(style) {\n        const div = document.createElement('div');\n        div.style.display = 'inline';\n        div.className = 'mxToolbarComboContainer';\n        const select = document.createElement('select');\n        select.className = style || 'mxToolbarCombo';\n        div.appendChild(select);\n        this.container.appendChild(div);\n        return select;\n    }\n    /**\n     * Adds and returns a new SELECT element using the given title as the\n     * default element. The selection is reset to this element after each\n     * change.\n     *\n     * @param title - String that specifies the title of the default element.\n     * @param style - Optional style classname. Default is mxToolbarCombo.\n     */\n    addActionCombo(title, style) {\n        const select = document.createElement('select');\n        select.className = style || 'mxToolbarCombo';\n        this.addOption(select, title, null);\n        InternalEvent.addListener(select, 'change', (evt) => {\n            const value = select.options[select.selectedIndex];\n            select.selectedIndex = 0;\n            if (value.funct != null) {\n                value.funct(evt);\n            }\n        });\n        this.container.appendChild(select);\n        return select;\n    }\n    /**\n     * Adds and returns a new OPTION element inside the given SELECT element.\n     * If the given value is a function then it is stored in the option's funct\n     * field.\n     *\n     * @param combo - SELECT element that will contain the new entry.\n     * @param title - String that specifies the title of the option.\n     * @param value - Specifies the value associated with this option.\n     */\n    addOption(combo, title, value = null) {\n        const option = document.createElement('option');\n        writeln(option, title);\n        if (typeof value === 'function') {\n            option.funct = value;\n        }\n        else {\n            option.setAttribute('value', value);\n        }\n        combo.appendChild(option);\n        return option;\n    }\n    /**\n     * Adds a new selectable item to the toolbar. Only one switch mode item may\n     * be selected at a time. The currently selected item is the default item\n     * after a reset of the toolbar.\n     */\n    addSwitchMode(title, icon, funct, pressedIcon = null, style = 'mxToolbarMode') {\n        const img = document.createElement('img');\n        img.initialClassName = style;\n        img.className = img.initialClassName;\n        img.setAttribute('src', icon);\n        img.altIcon = pressedIcon;\n        if (title != null) {\n            img.setAttribute('title', title);\n        }\n        InternalEvent.addListener(img, 'click', (evt) => {\n            const selectedModeImg = this.selectedMode;\n            let tmp = selectedModeImg.altIcon;\n            if (tmp != null) {\n                selectedModeImg.altIcon = selectedModeImg.getAttribute('src');\n                selectedModeImg.setAttribute('src', tmp);\n            }\n            else {\n                selectedModeImg.className = selectedModeImg.initialClassName;\n            }\n            if (this.updateDefaultMode) {\n                this.defaultMode = img;\n            }\n            this.selectedMode = img;\n            tmp = img.altIcon;\n            if (tmp != null) {\n                img.altIcon = img.getAttribute('src');\n                img.setAttribute('src', tmp);\n            }\n            else {\n                img.className = `${img.initialClassName}Selected`;\n            }\n            this.fireEvent(new EventObject(InternalEvent.SELECT));\n            funct();\n        });\n        this.container.appendChild(img);\n        if (this.defaultMode == null) {\n            this.defaultMode = img;\n            // Function should fire only once so\n            // do not pass it with the select event\n            this.selectMode(img);\n            funct();\n        }\n        return img;\n    }\n    /**\n     * Adds a new item to the toolbar. The selection is typically reset after\n     * the item has been consumed, for example by adding a new vertex to the\n     * graph. The reset is not carried out if the item is double clicked.\n     *\n     * The function argument uses the following signature: funct(evt, cell) where\n     * evt is the native mouse event and cell is the cell under the mouse.\n     */\n    addMode(title = null, icon = null, funct, pressedIcon, style = null, toggle = false) {\n        toggle = toggle != null ? toggle : true;\n        const img = (document.createElement(icon != null ? 'img' : 'button'));\n        img.initialClassName = style || 'mxToolbarMode';\n        img.className = img.initialClassName;\n        if (icon) {\n            img.setAttribute('src', icon);\n        }\n        img.altIcon = pressedIcon;\n        if (title != null) {\n            img.setAttribute('title', title);\n        }\n        if (this.enabled && toggle) {\n            InternalEvent.addListener(img, 'click', (evt) => {\n                this.selectMode(img, funct);\n                this.noReset = false;\n            });\n            InternalEvent.addListener(img, 'dblclick', (evt) => {\n                this.selectMode(img, funct);\n                this.noReset = true;\n            });\n            if (this.defaultMode == null) {\n                this.defaultMode = img;\n                this.defaultFunction = funct;\n                this.selectMode(img, funct);\n            }\n        }\n        this.container.appendChild(img);\n        return img;\n    }\n    /**\n     * Resets the state of the previously selected mode and displays the given\n     * DOM node as selected. This function fires a select event with the given\n     * function as a parameter.\n     */\n    selectMode(domNode, funct = null) {\n        if (this.selectedMode != domNode) {\n            if (this.selectedMode != null) {\n                const tmp = this.selectedMode.altIcon;\n                if (tmp != null) {\n                    this.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n                    this.selectedMode.setAttribute('src', tmp);\n                }\n                else {\n                    this.selectedMode.className = this.selectedMode.initialClassName;\n                }\n            }\n            this.selectedMode = domNode;\n            const tmp = this.selectedMode.altIcon;\n            if (tmp != null) {\n                this.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n                this.selectedMode.setAttribute('src', tmp);\n            }\n            else {\n                this.selectedMode.className = `${this.selectedMode.initialClassName}Selected`;\n            }\n            this.fireEvent(new EventObject(InternalEvent.SELECT, { function: funct }));\n        }\n    }\n    /**\n     * Selects the default mode and resets the state of the previously selected\n     * mode.\n     */\n    resetMode(forced = false) {\n        if ((forced || !this.noReset) && this.selectedMode != this.defaultMode) {\n            // The last selected switch mode will be activated\n            // so the function was already executed and is\n            // no longer required here\n            this.selectMode(this.defaultMode, this.defaultFunction);\n        }\n    }\n    /**\n     * Adds the specifies image as a separator.\n     *\n     * @param icon - URL of the separator icon.\n     */\n    addSeparator(icon) {\n        return this.addItem(null, icon, null);\n    }\n    /**\n     * Adds a break to the container.\n     */\n    addBreak() {\n        br(this.container);\n    }\n    /**\n     * Adds a horizontal line to the container.\n     */\n    addLine() {\n        const hr = document.createElement('hr');\n        hr.style.marginRight = '6px';\n        hr.setAttribute('size', '1');\n        this.container.appendChild(hr);\n    }\n    /**\n     * Removes the toolbar and all its associated resources.\n     */\n    destroy() {\n        InternalEvent.release(this.container);\n        // @ts-ignore\n        this.container = null;\n        this.defaultMode = null;\n        this.defaultFunction = null;\n        this.selectedMode = null;\n        if (this.menu != null) {\n            this.menu.destroy();\n        }\n    }\n}\nexport default MaxToolbar;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../geometry/Rectangle';\nimport CellHighlight from '../cell/CellHighlight';\nimport { getDocumentScrollOrigin, getOffset, getScrollOrigin, setOpacity, } from '../../util/styleUtils';\nimport InternalEvent from '../event/InternalEvent';\nimport Client from '../../Client';\nimport Guide from './Guide';\nimport { DROP_TARGET_COLOR } from '../../util/Constants';\nimport Point from '../geometry/Point';\nimport { getClientX, getClientY, getSource, isConsumed, isMouseEvent, isPenEvent, isTouchEvent, } from '../../util/EventUtils';\n/**\n * Wrapper to create a drag source from a DOM element so that the element can be dragged over a graph and dropped into the graph as a new cell.\n *\n * Problem is that in the dropHandler the current preview location is not available, so the preview and the dropHandler must match.\n */\nclass DragSource {\n    constructor(element, dropHandler) {\n        /**\n         * {@link Point} that specifies the offset of the {@link dragElement}. Default is null.\n         */\n        this.dragOffset = null;\n        /**\n         * Holds the DOM node that is used to represent the drag preview. If this is\n         * null then the source element will be cloned and used for the drag preview.\n         */\n        this.dragElement = null;\n        /**\n         * TODO - wrong description\n         * Optional {@link Rectangle} that specifies the unscaled size of the preview.\n         */\n        this.previewElement = null;\n        /**\n         * Optional {@link Point} that specifies the offset of the preview in pixels.\n         */\n        this.previewOffset = null;\n        /**\n         * Specifies if this drag source is enabled. Default is true.\n         */\n        this.enabled = true;\n        /**\n         * Reference to the {@link AbstractGraph} that is the current drop target.\n         */\n        this.currentGraph = null;\n        /**\n         * Holds the current drop target under the mouse.\n         */\n        this.currentDropTarget = null;\n        /**\n         * Holds the current drop location.\n         */\n        this.currentPoint = null;\n        /**\n         * Holds an {@link Guide} for the {@link currentGraph} if {@link dragPreview} is not null.\n         */\n        this.currentGuide = null;\n        /**\n         * Holds an {@link Guide} for the {@link currentGraph} if {@link dragPreview} is not null.\n         * @note wrong doc\n         */\n        this.currentHighlight = null;\n        /**\n         * Specifies if the graph should scroll automatically. Default is true.\n         */\n        this.autoscroll = true;\n        /**\n         * Specifies if {@link Guide} should be enabled. Default is true.\n         */\n        this.guidesEnabled = true;\n        /**\n         * Specifies if the grid should be allowed. Default is true.\n         */\n        this.gridEnabled = true;\n        /**\n         * Specifies if drop targets should be highlighted. Default is true.\n         */\n        this.highlightDropTargets = true;\n        /**\n         * ZIndex for the drag element. Default is 100.\n         */\n        this.dragElementZIndex = 100;\n        /**\n         * Opacity of the drag element in %. Default is 70.\n         */\n        this.dragElementOpacity = 70;\n        /**\n         * Whether the event source should be checked in {@link graphContainerEvent}. Default\n         * is true.\n         */\n        this.checkEventSource = true;\n        this.mouseMoveHandler = null;\n        this.mouseUpHandler = null;\n        this.eventSource = null;\n        this.element = element;\n        this.dropHandler = dropHandler;\n        // Handles a drag gesture on the element\n        InternalEvent.addGestureListeners(element, (evt) => {\n            this.mouseDown(evt);\n        });\n        // Prevents native drag and drop\n        InternalEvent.addListener(element, 'dragstart', (evt) => {\n            InternalEvent.consume(evt);\n        });\n        this.eventConsumer = (sender, evt) => {\n            const evtName = evt.getProperty('eventName');\n            const me = evt.getProperty('event');\n            if (evtName !== InternalEvent.MOUSE_DOWN) {\n                me.consume();\n            }\n        };\n    }\n    /**\n     * Returns {@link enabled}.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Sets {@link enabled}.\n     */\n    setEnabled(value) {\n        this.enabled = value;\n    }\n    /**\n     * Returns {@link guidesEnabled}.\n     */\n    isGuidesEnabled() {\n        return this.guidesEnabled;\n    }\n    /**\n     * Sets {@link guidesEnabled}.\n     */\n    setGuidesEnabled(value) {\n        this.guidesEnabled = value;\n    }\n    /**\n     * Returns {@link gridEnabled}.\n     */\n    isGridEnabled() {\n        return this.gridEnabled;\n    }\n    /**\n     * Sets {@link gridEnabled}.\n     */\n    setGridEnabled(value) {\n        this.gridEnabled = value;\n    }\n    /**\n     * Returns the graph for the given mouse event. This implementation returns\n     * null.\n     */\n    getGraphForEvent(evt) {\n        return null;\n    }\n    /**\n     * Returns the drop target for the given graph and coordinates.\n     * This implementation uses {@link AbstractGraph.getCellAt}.\n     */\n    getDropTarget(graph, x, y, evt) {\n        return graph.getCellAt(x, y);\n    }\n    /**\n     * Creates and returns a clone of the {@link dragElementPrototype} or the {@link element}\n     * if the former is not defined.\n     */\n    createDragElement(evt) {\n        return this.element.cloneNode(true);\n    }\n    /**\n     * Creates and returns an element which can be used as a preview in the given\n     * graph.\n     */\n    createPreviewElement(graph) {\n        return null;\n    }\n    /**\n     * Returns true if this drag source is active.\n     */\n    isActive() {\n        return !!this.mouseMoveHandler;\n    }\n    /**\n     * Stops and removes everything and restores the state of the object.\n     */\n    reset() {\n        if (this.currentGraph) {\n            this.dragExit(this.currentGraph);\n            this.currentGraph = null;\n        }\n        this.removeDragElement();\n        this.removeListeners();\n        this.stopDrag();\n    }\n    /**\n     * Returns the drop target for the given graph and coordinates.\n     * This implementation uses {@link AbstractGraph.getCellAt}.\n     *\n     * To ignore popup menu events for a drag source, this function can be overridden as follows.\n     *\n     * ```javascript\n     * const mouseDown = dragSource.mouseDown;\n     *\n     * dragSource.mouseDown(evt) {\n     *   if (!EventUtils.isPopupTrigger(evt)) {\n     *     mouseDown.apply(this, [evt]);\n     *   }\n     * };\n     * ```\n     */\n    mouseDown(evt) {\n        if (this.enabled && !isConsumed(evt) && this.mouseMoveHandler == null) {\n            this.startDrag(evt);\n            this.mouseMoveHandler = this.mouseMove.bind(this);\n            this.mouseUpHandler = this.mouseUp.bind(this);\n            InternalEvent.addGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n            if (Client.IS_TOUCH && !isMouseEvent(evt)) {\n                this.eventSource = getSource(evt);\n                if (this.eventSource) {\n                    InternalEvent.addGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n                }\n            }\n        }\n    }\n    /**\n     * Creates the {@link dragElement} using {@link createDragElement}.\n     */\n    startDrag(evt) {\n        this.dragElement = this.createDragElement(evt);\n        this.dragElement.style.position = 'absolute';\n        this.dragElement.style.zIndex = String(this.dragElementZIndex);\n        setOpacity(this.dragElement, this.dragElementOpacity);\n        if (this.checkEventSource && Client.IS_SVG) {\n            this.dragElement.style.pointerEvents = 'none';\n        }\n    }\n    /**\n     * Invokes {@link removeDragElement}.\n     */\n    stopDrag() {\n        // LATER: This used to have a mouse event. If that is still needed we need to add another\n        // final call to the DnD protocol to add a cleanup step in the case of escape press, which\n        // is not associated with a mouse event and which currently calles this method.\n        this.removeDragElement();\n    }\n    /**\n     * Removes and destroys the {@link dragElement}.\n     */\n    removeDragElement() {\n        if (this.dragElement) {\n            if (this.dragElement.parentNode) {\n                this.dragElement.parentNode.removeChild(this.dragElement);\n            }\n            this.dragElement = null;\n        }\n    }\n    /**\n     * Returns the topmost element under the given event.\n     */\n    getElementForEvent(evt) {\n        return isTouchEvent(evt) || isPenEvent(evt)\n            ? document.elementFromPoint(getClientX(evt), getClientY(evt))\n            : getSource(evt);\n    }\n    /**\n     * Returns true if the given graph contains the given event.\n     */\n    graphContainsEvent(graph, evt) {\n        const x = getClientX(evt);\n        const y = getClientY(evt);\n        const offset = getOffset(graph.container);\n        const origin = getScrollOrigin();\n        let elt = this.getElementForEvent(evt);\n        if (this.checkEventSource) {\n            while (elt && elt !== graph.container) {\n                // @ts-ignore parentNode may exist\n                elt = elt.parentNode;\n            }\n        }\n        // Checks if event is inside the bounds of the graph container\n        return (!!elt &&\n            x >= offset.x - origin.x &&\n            y >= offset.y - origin.y &&\n            x <= offset.x - origin.x + graph.container.offsetWidth &&\n            y <= offset.y - origin.y + graph.container.offsetHeight);\n    }\n    /**\n     * Gets the graph for the given event using {@link getGraphForEvent}, updates the\n     * {@link currentGraph}, calling {@link dragEnter} and {@link dragExit} on the new and old graph,\n     * respectively, and invokes {@link dragOver} if {@link currentGraph} is not null.\n     */\n    mouseMove(evt) {\n        let graph = this.getGraphForEvent(evt);\n        // Checks if event is inside the bounds of the graph container\n        if (graph && !this.graphContainsEvent(graph, evt)) {\n            graph = null;\n        }\n        if (graph !== this.currentGraph) {\n            if (this.currentGraph) {\n                this.dragExit(this.currentGraph, evt);\n            }\n            this.currentGraph = graph;\n            if (this.currentGraph) {\n                this.dragEnter(this.currentGraph, evt);\n            }\n        }\n        if (this.currentGraph) {\n            this.dragOver(this.currentGraph, evt);\n        }\n        if (this.dragElement &&\n            (!this.previewElement || this.previewElement.style.visibility !== 'visible')) {\n            let x = getClientX(evt);\n            let y = getClientY(evt);\n            if (this.dragElement.parentNode == null) {\n                document.body.appendChild(this.dragElement);\n            }\n            this.dragElement.style.visibility = 'visible';\n            if (this.dragOffset) {\n                x += this.dragOffset.x;\n                y += this.dragOffset.y;\n            }\n            const offset = getDocumentScrollOrigin(document);\n            this.dragElement.style.left = `${x + offset.x}px`;\n            this.dragElement.style.top = `${y + offset.y}px`;\n        }\n        else if (this.dragElement) {\n            this.dragElement.style.visibility = 'hidden';\n        }\n        InternalEvent.consume(evt);\n    }\n    /**\n     * Processes the mouse up event and invokes {@link drop}, {@link dragExit} and {@link stopDrag}\n     * as required.\n     */\n    mouseUp(evt) {\n        if (this.currentGraph) {\n            if (this.currentPoint &&\n                (!this.previewElement || this.previewElement.style.visibility !== 'hidden')) {\n                const { scale } = this.currentGraph.view;\n                const tr = this.currentGraph.view.translate;\n                const x = this.currentPoint.x / scale - tr.x;\n                const y = this.currentPoint.y / scale - tr.y;\n                this.drop(this.currentGraph, evt, this.currentDropTarget, x, y);\n            }\n            this.dragExit(this.currentGraph);\n            this.currentGraph = null;\n        }\n        this.stopDrag();\n        this.removeListeners();\n        InternalEvent.consume(evt);\n    }\n    /**\n     * Actives the given graph as a drop target.\n     */\n    // removeListeners(): void;\n    removeListeners() {\n        if (this.eventSource) {\n            InternalEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n            this.eventSource = null;\n        }\n        InternalEvent.removeGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n        this.mouseMoveHandler = null;\n        this.mouseUpHandler = null;\n    }\n    /**\n     * Actives the given graph as a drop target.\n     */\n    dragEnter(graph, evt) {\n        graph.isMouseDown = true;\n        graph.isMouseTrigger = isMouseEvent(evt);\n        this.previewElement = this.createPreviewElement(graph);\n        if (this.previewElement && this.checkEventSource && Client.IS_SVG) {\n            this.previewElement.style.pointerEvents = 'none';\n        }\n        // Guide is only needed if preview element is used\n        if (this.isGuidesEnabled() && this.previewElement) {\n            const selectionHandler = graph.getPlugin('SelectionHandler');\n            this.currentGuide = new Guide(graph, selectionHandler?.getGuideStates());\n        }\n        if (this.highlightDropTargets) {\n            this.currentHighlight = new CellHighlight(graph, DROP_TARGET_COLOR);\n        }\n        // Consumes all events in the current graph before they are fired\n        graph.addListener(InternalEvent.FIRE_MOUSE_EVENT, this.eventConsumer);\n    }\n    /**\n     * Deactivates the given graph as a drop target.\n     */\n    dragExit(graph, evt) {\n        this.currentDropTarget = null;\n        this.currentPoint = null;\n        graph.isMouseDown = false;\n        // Consumes all events in the current graph before they are fired\n        graph.removeListener(this.eventConsumer);\n        if (this.previewElement) {\n            if (this.previewElement.parentNode) {\n                this.previewElement.parentNode.removeChild(this.previewElement);\n            }\n            this.previewElement = null;\n        }\n        if (this.currentGuide) {\n            this.currentGuide.destroy();\n            this.currentGuide = null;\n        }\n        if (this.currentHighlight) {\n            this.currentHighlight.destroy();\n            this.currentHighlight = null;\n        }\n    }\n    /**\n     * Implements autoscroll, updates the {@link currentPoint}, highlights any drop\n     * targets and updates the preview.\n     */\n    dragOver(graph, evt) {\n        const offset = getOffset(graph.container);\n        const origin = getScrollOrigin(graph.container);\n        let x = getClientX(evt) - offset.x + origin.x - graph.getPanDx();\n        let y = getClientY(evt) - offset.y + origin.y - graph.getPanDy();\n        if (graph.isAutoScroll() && (!this.autoscroll || this.autoscroll)) {\n            graph.scrollPointToVisible(x, y, graph.isAutoExtend());\n        }\n        // Highlights the drop target under the mouse\n        if (this.currentHighlight && graph.isDropEnabled()) {\n            this.currentDropTarget = this.getDropTarget(graph, x, y, evt);\n            if (this.currentDropTarget) {\n                const state = graph.getView().getState(this.currentDropTarget);\n                this.currentHighlight.highlight(state);\n            }\n        }\n        // Updates the location of the preview\n        if (this.previewElement) {\n            if (!this.previewElement.parentNode) {\n                graph.container.appendChild(this.previewElement);\n                this.previewElement.style.zIndex = '3';\n                this.previewElement.style.position = 'absolute';\n            }\n            const gridEnabled = this.isGridEnabled() && graph.isGridEnabledEvent(evt);\n            let hideGuide = true;\n            // Grid and guides\n            if (this.currentGuide && this.currentGuide.isEnabledForEvent(evt)) {\n                // LATER: HTML preview appears smaller than SVG preview\n                const w = parseInt(this.previewElement.style.width);\n                const h = parseInt(this.previewElement.style.height);\n                const bounds = new Rectangle(0, 0, w, h);\n                let delta = new Point(x, y);\n                delta = this.currentGuide.move(bounds, delta, gridEnabled, true);\n                hideGuide = false;\n                x = delta.x;\n                y = delta.y;\n            }\n            else if (gridEnabled) {\n                const { scale } = graph.view;\n                const tr = graph.view.translate;\n                const off = graph.getGridSize() / 2;\n                x = (graph.snap(x / scale - tr.x - off) + tr.x) * scale;\n                y = (graph.snap(y / scale - tr.y - off) + tr.y) * scale;\n            }\n            if (this.currentGuide && hideGuide) {\n                this.currentGuide.hide();\n            }\n            if (this.previewOffset) {\n                x += this.previewOffset.x;\n                y += this.previewOffset.y;\n            }\n            this.previewElement.style.left = `${Math.round(x)}px`;\n            this.previewElement.style.top = `${Math.round(y)}px`;\n            this.previewElement.style.visibility = 'visible';\n        }\n        this.currentPoint = new Point(x, y);\n    }\n    /**\n     * Returns the drop target for the given graph and coordinates. This\n     * implementation uses {@link AbstractGraph.getCellAt}.\n     */\n    drop(graph, evt, dropTarget = null, x, y) {\n        this.dropHandler(graph, evt, dropTarget, x, y);\n        // Had to move this to after the insert because it will\n        // affect the scrollbars of the window in IE to try and\n        // make the complete container visible.\n        // LATER: Should be made optional.\n        if (graph.container.style.visibility !== 'hidden') {\n            graph.container.focus();\n        }\n    }\n}\nexport default DragSource;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport DragSource from '../view/other/DragSource';\nimport Point from '../view/geometry/Point';\nimport { TOOLTIP_VERTICAL_OFFSET } from './Constants';\n/**\n * Configures the given DOM element to act as a drag source for the\n * specified graph. Returns a new {@link DragSource}. If\n * {@link DragSource.guidesEnabled} is enabled then the x and y arguments must\n * be used in `funct` to match the preview location.\n *\n * Example:\n *\n * ```javascript\n * let funct = (graph, evt, cell, x, y)=>\n * {\n *   if (graph.canImportCell(cell))\n *   {\n *     let parent = graph.getDefaultParent();\n *     let vertex = null;\n *\n *     graph.getDataModel().beginUpdate();\n *     try\n *     {\n *        vertex = graph.insertVertex(parent, null, 'Hello', x, y, 80, 30);\n *     }\n *     finally\n *     {\n *       graph.getDataModel().endUpdate();\n *     }\n *\n *     graph.setSelectionCell(vertex);\n *   }\n * }\n *\n * let img = document.createElement('img');\n * img.setAttribute('src', 'editors/images/rectangle.gif');\n * img.style.position = 'absolute';\n * img.style.left = '0px';\n * img.style.top = '0px';\n * img.style.width = '16px';\n * img.style.height = '16px';\n *\n * let dragImage = img.cloneNode(true);\n * dragImage.style.width = '32px';\n * dragImage.style.height = '32px';\n * mxUtils.makeDraggable(img, graph, funct, dragImage);\n * document.body.appendChild(img);\n * ```\n *\n * @param element DOM element to make draggable.\n * @param graphF {@link AbstractGraph} that acts as the drop target or a function that takes a\n * mouse event and returns the current {@link AbstractGraph}.\n * @param funct Function to execute on a successful drop.\n * @param dragElement Optional DOM node to be used for the drag preview.\n * @param dx Optional horizontal offset between the cursor and the drag\n * preview.\n * @param dy Optional vertical offset between the cursor and the drag\n * preview.\n * @param autoscroll Optional boolean that specifies if autoscroll should be\n * used. Default is {@link AbstractGraph.autoscroll}.\n * @param scalePreview Optional boolean that specifies if the preview element\n * should be scaled according to the graph scale. If this is true, then\n * the offsets will also be scaled. Default is false.\n * @param highlightDropTargets Optional boolean that specifies if dropTargets\n * should be highlighted. Default is true.\n * @param getDropTarget Optional function to return the drop target for a given\n * location (x, y). Default is {@link AbstractGraph.getCellAt}.\n */\nexport const makeDraggable = (element, graphF, funct, dragElement = null, dx = null, dy = null, autoscroll = null, scalePreview = false, highlightDropTargets = true, getDropTarget = null) => {\n    const dragSource = new DragSource(element, funct);\n    dragSource.dragOffset = new Point(dx != null ? dx : 0, dy != null ? dy : TOOLTIP_VERTICAL_OFFSET);\n    if (autoscroll != null) {\n        dragSource.autoscroll = autoscroll;\n    }\n    // Cannot enable this by default. This needs to be enabled in the caller\n    // if the funct argument uses the new x- and y-arguments.\n    dragSource.setGuidesEnabled(false);\n    if (highlightDropTargets != null) {\n        dragSource.highlightDropTargets = highlightDropTargets;\n    }\n    // Overrides function to find drop target cell\n    if (getDropTarget != null) {\n        dragSource.getDropTarget = getDropTarget;\n    }\n    // Overrides function to get current graph\n    dragSource.getGraphForEvent = (evt) => {\n        return typeof graphF === 'function' ? graphF(evt) : graphF;\n    };\n    // Translates switches into dragSource customizations\n    if (dragElement != null) {\n        // @ts-ignore\n        dragSource.createDragElement = () => {\n            return dragElement.cloneNode(true);\n        };\n        if (scalePreview) {\n            dragSource.createPreviewElement = (graph) => {\n                const elt = dragElement.cloneNode(true);\n                const w = parseInt(elt.style.width);\n                const h = parseInt(elt.style.height);\n                elt.style.width = `${Math.round(w * graph.view.scale)}px`;\n                elt.style.height = `${Math.round(h * graph.view.scale)}px`;\n                return elt;\n            };\n        }\n    }\n    return dragSource;\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Client from '../Client';\nimport MaxToolbar from '../gui/MaxToolbar';\nimport Geometry from '../view/geometry/Geometry';\nimport { convertPoint } from '../util/styleUtils';\nimport InternalEvent from '../view/event/InternalEvent';\nimport { getClientX, getClientY } from '../util/EventUtils';\nimport { makeDraggable } from '../util/gestureUtils';\n/**\n * Toolbar for the editor.\n *\n * This modifies the state of the graph or inserts new cells upon mouse clicks.\n *\n * ### Example\n *\n * Create a toolbar with a button to copy the selection into the clipboard,\n * and a combo box with one action to paste the selection from the clipboard\n * into the graph.\n *\n * ```\n * const toolbar = new EditorToolbar(container, editor);\n * toolbar.addItem('Copy', null, 'copy');\n *\n * const combo = toolbar.addActionCombo('More actions...');\n * toolbar.addActionOption(combo, 'Paste', 'paste');\n * ```\n *\n * ### Codec\n *\n * This class uses the {@link DefaultToolbarCodec} to read configuration\n * data into an existing instance. See {@link DefaultToolbarCodec} for a\n * description of the configuration format.\n *\n * @category Editor\n */\nexport class EditorToolbar {\n    constructor(container = null, editor = null) {\n        /**\n         * Holds the internal {@link MaxToolbar}.\n         */\n        this.toolbar = null;\n        /**\n         * Reference to the function used to reset the {@link toolbar}.\n         */\n        this.resetHandler = null;\n        /**\n         * Defines the spacing between existing and new vertices in gridSize units when a new vertex is dropped on an existing cell.\n         *\n         * @default 4 (40 pixels)\n         */\n        this.spacing = 4;\n        /**\n         * Specifies if elements should be connected if new cells are dropped onto connectable elements.\n         *\n         * @default false\n         */\n        this.connectOnDrop = false;\n        this.editor = editor;\n        if (container != null && editor != null) {\n            this.init(container);\n        }\n    }\n    /**\n     * Constructs the {@link toolbar} for the given container and installs a listener that updates the {@link Editor.insertFunction} on {@link editor} if an item is selected in the toolbar.  This assumes that {@link editor} is not null.\n     */\n    init(container) {\n        if (container != null) {\n            this.toolbar = new MaxToolbar(container);\n            // Installs the insert function in the editor if an item is\n            // selected in the toolbar\n            this.toolbar.addListener(InternalEvent.SELECT, (sender, evt) => {\n                const funct = evt.getProperty('function');\n                if (funct != null) {\n                    this.editor.insertFunction = () => {\n                        funct.apply(this, [container]);\n                        this.toolbar.resetMode();\n                    };\n                }\n                else {\n                    this.editor.insertFunction = null;\n                }\n            });\n            // Resets the selected tool after a double click or escape keystroke\n            this.resetHandler = () => {\n                if (this.toolbar != null) {\n                    this.toolbar.resetMode(true);\n                }\n            };\n            this.editor.graph.addListener(InternalEvent.DOUBLE_CLICK, this.resetHandler);\n            this.editor.addListener(InternalEvent.ESCAPE, this.resetHandler);\n        }\n    }\n    /**\n     * Adds a new item that executes the given action in {@link editor}. The title,\n     * icon and pressedIcon are used to display the toolbar item.\n     *\n     * @param title - String that represents the title (tooltip) for the item.\n     * @param icon - URL of the icon to be used for displaying the item.\n     * @param action - Name of the action to execute when the item is clicked.\n     * @param pressed - Optional URL of the icon for the pressed state.\n     */\n    addItem(title, icon, action, pressed) {\n        const clickHandler = () => {\n            if (action != null && action.length > 0) {\n                this.editor.execute(action);\n            }\n        };\n        return this.toolbar.addItem(title, icon, clickHandler, pressed);\n    }\n    /**\n     * Adds a vertical separator using the optional icon.\n     *\n     * @param icon - Optional URL of the icon that represents the vertical separator. Default is {@link Client.imageBasePath} + ‘/separator.gif’.\n     */\n    addSeparator(icon) {\n        icon = icon || `${Client.imageBasePath}/separator.gif`;\n        this.toolbar.addSeparator(icon);\n    }\n    /**\n     * Helper method to invoke {@link MaxToolbar.addCombo} on toolbar and return the resulting DOM node.\n     */\n    addCombo() {\n        return this.toolbar.addCombo();\n    }\n    /**\n     * Helper method to invoke <MaxToolbar.addActionCombo> on <toolbar> using\n     * the given title and return the resulting DOM node.\n     *\n     * @param title String that represents the title of the combo.\n     */\n    addActionCombo(title) {\n        return this.toolbar.addActionCombo(title);\n    }\n    /**\n     * Binds the given action to a option with the specified label in the given combo.  Combo is an object returned from an earlier call to {@link addCombo} or {@link addActionCombo}.\n     *\n     * @param combo - DOM node that represents the combo box.\n     * @param title - String that represents the title of the combo.\n     * @param action - Name of the action to execute in {@link editor}.\n     */\n    addActionOption(combo, title, action) {\n        const clickHandler = () => {\n            this.editor.execute(action);\n        };\n        this.addOption(combo, title, clickHandler);\n    }\n    /**\n     * Helper method to invoke {@link MaxToolbar.addOption} on {@link toolbar} and return the resulting DOM node that represents the option.\n     *\n     * @param combo - DOM node that represents the combo box.\n     * @param title - String that represents the title of the combo.\n     * @param value - Object that represents the value of the option.\n     */\n    addOption(combo, title, value) {\n        return this.toolbar.addOption(combo, title, value);\n    }\n    /**\n     * Creates an item for selecting the given mode in the {@link editor}'s graph.\n     * Supported modenames are select, connect and pan.\n     *\n     * @param title - String that represents the title of the item.\n     * @param icon - URL of the icon that represents the item.\n     * @param mode - String that represents the mode name to be used in {@link Editor.setMode}.\n     * @param pressed - Optional URL of the icon that represents the pressed state.\n     * @param funct - Optional JavaScript function that takes the {@link Editor} as the first and only argument that is executed after the mode has been selected.\n     */\n    addMode(title, icon, mode, pressed = null, funct = null) {\n        const clickHandler = () => {\n            this.editor.setMode(mode);\n            if (funct != null) {\n                funct(this.editor);\n            }\n        };\n        return this.toolbar.addSwitchMode(title, icon, clickHandler, pressed);\n    }\n    /**\n     * Creates an item for inserting a clone of the specified prototype cell into\n     * the <editor>'s graph. The ptype may either be a cell or a function that\n     * returns a cell.\n     *\n     * @param title String that represents the title of the item.\n     * @param icon URL of the icon that represents the item.\n     * @param ptype Function or object that represents the prototype cell. If ptype\n     * is a function then it is invoked with no arguments to create new\n     * instances.\n     * @param pressed Optional URL of the icon that represents the pressed state.\n     * @param insert Optional JavaScript function that handles an insert of the new\n     * cell. This function takes the <Editor>, new cell to be inserted, mouse\n     * event and optional <Cell> under the mouse pointer as arguments.\n     * @param toggle Optional boolean that specifies if the item can be toggled.\n     * Default is true.\n     */\n    addPrototype(title, icon, ptype, pressed, insert, toggle = true) {\n        // Creates a wrapper function that is in charge of constructing\n        // the new cell instance to be inserted into the graph\n        const factory = () => {\n            if (typeof ptype === 'function') {\n                return ptype();\n            }\n            if (ptype != null) {\n                return this.editor.graph.cloneCell(ptype);\n            }\n            return null;\n        };\n        // Defines the function for a click event on the graph\n        // after this item has been selected in the toolbar\n        const clickHandler = (evt, cell) => {\n            if (typeof insert === 'function') {\n                insert(this.editor, factory(), evt, cell);\n            }\n            else {\n                this.drop(factory(), evt, cell);\n            }\n            this.toolbar.resetMode();\n            InternalEvent.consume(evt);\n        };\n        const img = this.toolbar.addMode(title, icon, clickHandler, pressed, null, toggle);\n        // Creates a wrapper function that calls the click handler without the graph argument\n        const dropHandler = (_graph, evt, cell) => {\n            clickHandler(evt, cell);\n        };\n        this.installDropHandler(img, dropHandler);\n        return img;\n    }\n    /**\n     * Handles a drop from a toolbar item to the graph. The given vertex\n     * represents the new cell to be inserted. This invokes {@link insert} or\n     * {@link connect} depending on the given target cell.\n     *\n     * @param vertex - {@link Cell} to be inserted.\n     * @param evt - Mouse event that represents the drop.\n     * @param target - Optional {@link Cell} that represents the drop target.\n     */\n    drop(vertex, evt, target = null) {\n        const { graph } = this.editor;\n        const model = graph.getDataModel();\n        if (target == null ||\n            target.isEdge() ||\n            !this.connectOnDrop ||\n            !target.isConnectable()) {\n            while (target != null && !graph.isValidDropTarget(target, [vertex], evt)) {\n                target = target.getParent();\n            }\n            this.insert(vertex, evt, target);\n        }\n        else {\n            this.connect(vertex, evt, target);\n        }\n    }\n    /**\n     * Handles a drop by inserting the given vertex into the given parent cell\n     * or the default parent if no parent is specified.\n     *\n     * @param vertex - {@link Cell} to be inserted.\n     * @param evt - Mouse event that represents the drop.\n     * @param target - Optional {@link Cell} that represents the parent.\n     */\n    insert(vertex, evt, target = null) {\n        const { graph } = this.editor;\n        if (graph.canImportCell(vertex)) {\n            const x = getClientX(evt);\n            const y = getClientY(evt);\n            const pt = convertPoint(graph.container, x, y);\n            // Splits the target edge or inserts into target group\n            if (target &&\n                graph.isSplitEnabled() &&\n                graph.isSplitTarget(target, [vertex], evt)) {\n                return graph.splitEdge(target, [vertex], null, pt.x, pt.y);\n            }\n            return this.editor.addVertex(target, vertex, pt.x, pt.y);\n        }\n        return null;\n    }\n    /**\n     * Handles a drop by connecting the given vertex to the given source cell.\n     *\n     * @param vertex - {@link Cell} to be inserted.\n     * @param evt - Mouse event that represents the drop.\n     * @param source - Optional {@link Cell} that represents the source terminal.\n     */\n    connect(vertex, evt, source = null) {\n        const { graph } = this.editor;\n        const model = graph.getDataModel();\n        if (source != null &&\n            vertex.isConnectable() &&\n            graph.isEdgeValid(null, source, vertex)) {\n            let edge = null;\n            model.beginUpdate();\n            try {\n                const geo = source.getGeometry();\n                const g = vertex.getGeometry().clone();\n                // Moves the vertex away from the drop target that will\n                // be used as the source for the new connection\n                g.x = geo.x + (geo.width - g.width) / 2;\n                g.y = geo.y + (geo.height - g.height) / 2;\n                const step = this.spacing * graph.gridSize;\n                const dist = source.getDirectedEdgeCount(true) * 20;\n                if (this.editor.horizontalFlow) {\n                    g.x += (g.width + geo.width) / 2 + step + dist;\n                }\n                else {\n                    g.y += (g.height + geo.height) / 2 + step + dist;\n                }\n                vertex.setGeometry(g);\n                // Fires two add-events with the code below - should be fixed\n                // to only fire one add event for both inserts\n                const parent = source.getParent();\n                graph.addCell(vertex, parent);\n                graph.constrainChild(vertex);\n                // Creates the edge using the editor instance and calls\n                // the second function that fires an add event\n                edge = this.editor.createEdge(source, vertex);\n                if (edge.getGeometry() == null) {\n                    const edgeGeometry = new Geometry();\n                    edgeGeometry.relative = true;\n                    model.setGeometry(edge, edgeGeometry);\n                }\n                graph.addEdge(edge, parent, source, vertex);\n            }\n            finally {\n                model.endUpdate();\n            }\n            graph.setSelectionCells([vertex, edge]);\n            graph.scrollCellToVisible(vertex);\n        }\n    }\n    /**\n     * Makes the given img draggable using the given function for handling a drop event.\n     *\n     * @param img - DOM node that represents the image.\n     * @param dropHandler - Function that handles a drop of the image.\n     */\n    installDropHandler(img, dropHandler) {\n        const sprite = document.createElement('img');\n        sprite.setAttribute('src', img.getAttribute('src'));\n        // Handles delayed loading of the images\n        const loader = (evt) => {\n            // Preview uses the image node with double size. Later this can be\n            // changed to use a separate preview and guides, but for this the\n            // dropHandler must use the additional x- and y-arguments and the\n            // dragsource which makeDraggable returns much be configured to\n            // use guides via mxDragSource.isGuidesEnabled.\n            sprite.style.width = `${2 * img.offsetWidth}px`;\n            sprite.style.height = `${2 * img.offsetHeight}px`;\n            makeDraggable(img, this.editor.graph, dropHandler, sprite);\n            InternalEvent.removeListener(sprite, 'load', loader);\n        };\n    }\n    /**\n     * Destroys the {@link toolbar} associated with this object and removes all installed listeners.\n     * This does normally not need to be called, the {@link toolbar} is destroyed automatically when the window unloads (in IE) by {@link Editor}.\n     */\n    destroy() {\n        if (this.resetHandler != null) {\n            this.editor.graph.removeListener(this.resetHandler);\n            this.editor.removeListener(this.resetHandler);\n            this.resetHandler = null;\n        }\n        if (this.toolbar != null) {\n            this.toolbar.destroy();\n            this.toolbar = null;\n        }\n    }\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalEvent from '../event/InternalEvent';\nimport EventObject from '../event/EventObject';\nimport EventSource from '../event/EventSource';\n/**\n * @class UndoManager\n *\n * Implements a command history. When changing the graph model, an\n * {@link mxUndoableChange} object is created at the start of the transaction (when\n * model.beginUpdate is called). All atomic changes are then added to this\n * object until the last model.endUpdate call, at which point the\n * {@link mxUndoableEdit} is dispatched in an event, and added to the history inside\n * {@link UndoManager}. This is done by an event listener in\n * {@link Editor.installUndoHandler}.\n *\n * Each atomic change of the model is represented by an object (eg.\n * {@link mxRootChange}, {@link mxChildChange}, {@link mxTerminalChange} etc) which contains the\n * complete undo information. The {@link UndoManager} also listens to the\n * {@link mxGraphView} and stores it's changes to the current root as insignificant\n * undoable changes, so that drilling (step into, step up) is undone.\n *\n * This means when you execute an atomic change on the model, then change the\n * current root on the view and click undo, the change of the root will be\n * undone together with the change of the model so that the display represents\n * the state at which the model was changed. However, these changes are not\n * transmitted for sharing as they do not represent a state change.\n *\n * ### Example\n *\n * When adding an undo manager to a graph, make sure to add it\n * to the model and the view as well to maintain a consistent\n * display across multiple undo/redo steps.\n *\n * ```javascript\n * var undoManager = new UndoManager();\n * var listener(sender, evt)\n * {\n *   undoManager.undoableEditHappened(evt.getProperty('edit'));\n * };\n * graph.getDataModel().addListener(mxEvent.UNDO, listener);\n * graph.getView().addListener(mxEvent.UNDO, listener);\n * ```\n *\n * The code creates a function that informs the undoManager\n * of an undoable edit and binds it to the undo event of\n * {@link mxGraphModel} and {@link mxGraphView} using\n * {@link EventSource.addListener}.\n *\n * ### Event: mxEvent.CLEAR\n *\n * Fires after {@link clear} was invoked. This event has no properties.\n *\n * ### Event: mxEvent.UNDO\n *\n * Fires afer a significant edit was undone in {@link undo}. The `edit`\n * property contains the {@link mxUndoableEdit} that was undone.\n *\n * ### Event: mxEvent.REDO\n *\n * Fires afer a significant edit was redone in {@link redo}. The `edit`\n * property contains the {@link mxUndoableEdit} that was redone.\n *\n * ### Event: mxEvent.ADD\n *\n * Fires after an undoable edit was added to the history. The `edit`\n * property contains the {@link mxUndoableEdit} that was added.\n */\nclass UndoManager extends EventSource {\n    constructor(size = 100) {\n        super();\n        /**\n         * Maximum command history size. 0 means unlimited history. Default is\n         * 100.\n         * @default 100\n         */\n        this.size = 100;\n        /**\n         * Array that contains the steps of the command history.\n         */\n        this.history = [];\n        /**\n         * Index of the element to be added next.\n         */\n        this.indexOfNextAdd = 0;\n        this.size = size;\n        this.clear();\n    }\n    /**\n     * Returns true if the history is empty.\n     */\n    isEmpty() {\n        return this.history.length == 0;\n    }\n    /**\n     * Clears the command history.\n     */\n    clear() {\n        this.history = [];\n        this.indexOfNextAdd = 0;\n        this.fireEvent(new EventObject(InternalEvent.CLEAR));\n    }\n    /**\n     * Returns true if an undo is possible.\n     */\n    canUndo() {\n        return this.indexOfNextAdd > 0;\n    }\n    /**\n     * Undoes the last change.\n     */\n    undo() {\n        while (this.indexOfNextAdd > 0) {\n            const edit = this.history[--this.indexOfNextAdd];\n            edit.undo();\n            if (edit.isSignificant()) {\n                this.fireEvent(new EventObject(InternalEvent.UNDO, { edit }));\n                break;\n            }\n        }\n    }\n    /**\n     * Returns true if a redo is possible.\n     */\n    canRedo() {\n        return this.indexOfNextAdd < this.history.length;\n    }\n    /**\n     * Redoes the last change.\n     */\n    redo() {\n        const n = this.history.length;\n        while (this.indexOfNextAdd < n) {\n            const edit = this.history[this.indexOfNextAdd++];\n            edit.redo();\n            if (edit.isSignificant()) {\n                this.fireEvent(new EventObject(InternalEvent.REDO, { edit }));\n                break;\n            }\n        }\n    }\n    /**\n     * Method to be called to add new undoable edits to the <history>.\n     */\n    undoableEditHappened(undoableEdit) {\n        this.trim();\n        if (this.size > 0 && this.size == this.history.length) {\n            this.history.shift();\n        }\n        this.history.push(undoableEdit);\n        this.indexOfNextAdd = this.history.length;\n        this.fireEvent(new EventObject(InternalEvent.ADD, { edit: undoableEdit }));\n    }\n    /**\n     * Removes all pending steps after <indexOfNextAdd> from the history,\n     * invoking die on each edit. This is called from <undoableEditHappened>.\n     */\n    trim() {\n        if (this.history.length > this.indexOfNextAdd) {\n            const edits = this.history.splice(this.indexOfNextAdd, this.history.length - this.indexOfNextAdd);\n            for (let i = 0; i < edits.length; i += 1) {\n                edits[i].die();\n            }\n        }\n    }\n}\nexport default UndoManager;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2018, JGraph Ltd\nCopyright (c) 2006-2018, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Dictionary from '../../util/Dictionary';\nimport Rectangle from '../geometry/Rectangle';\nimport Geometry from '../geometry/Geometry';\nimport Point from '../geometry/Point';\n/**\n * Base class for all layout algorithms in maxGraph.\n *\n * Main public methods are {@link moveCell} for handling a moved cell within a layouted parent,\n * and {@link execute} for running the layout on a given parent cell.\n *\n * @category Layout\n */\nclass GraphLayout {\n    constructor(graph) {\n        /**\n         * Boolean indicating if the bounding box of the label should be used if it iss available.\n         * @default true.\n         */\n        this.useBoundingBox = true;\n        /**\n         * The parent cell of the layout, if any\n         * @default null\n         */\n        this.parent = null;\n        this.graph = graph;\n    }\n    /**\n     * Notified when a cell is being moved in a parent that has automatic\n     * layout to update the cell state (eg. index) so that the outcome of the\n     * layout will position the vertex as close to the point (x, y) as\n     * possible.\n     *\n     * Empty implementation.\n     *\n     * @param cell {@link Cell} which has been moved.\n     * @param x X-coordinate of the new cell location.\n     * @param y Y-coordinate of the new cell location.\n     */\n    moveCell(cell, x, y) {\n        return;\n    }\n    /**\n     * Notified when a cell is being resized in a parent that has automatic\n     * layout to update the other cells in the layout.\n     *\n     * Empty implementation.\n     *\n     * @param cell {@link Cell} which has been moved.\n     * @param bounds {@link Rectangle} that represents the new cell bounds.\n     * @param prev\n     */\n    resizeCell(cell, bounds, prev) {\n        return;\n    }\n    /**\n     * Executes the layout algorithm for the children of the given parent.\n     *\n     * @param parent {@link Cell} whose children should be layed out.\n     */\n    execute(parent) {\n        return;\n    }\n    /**\n     * Returns the graph that this layout operates on.\n     */\n    getGraph() {\n        return this.graph;\n    }\n    /**\n     * Returns the constraint for the given key and cell. The optional edge and\n     * source arguments are used to return inbound and outgoing routing-\n     * constraints for the given edge and vertex. This implementation always\n     * returns the value for the given key in the style of the given cell.\n     *\n     * @param key Key of the constraint to be returned.\n     * @param cell {@link Cell} whose constraint should be returned.\n     * @param edge Optional {@link Cell} that represents the connection whose constraint\n     * should be returned. Default is null.\n     * @param source Optional boolean that specifies if the connection is incoming\n     * or outgoing. Default is null.\n     */\n    getConstraint(key, cell, edge, source) {\n        // @ts-expect-error\n        return this.graph.getCurrentCellStyle(cell)[key];\n    }\n    /**\n     * Traverses the (directed) graph invoking the given function for each\n     * visited vertex and edge. The function is invoked with the current vertex\n     * and the incoming edge as a parameter. This implementation makes sure\n     * each vertex is only visited once. The function may return false if the\n     * traversal should stop at the given vertex.\n     *\n     * Example:\n     *\n     * ```javascript\n     * GlobalConfig.logger.show();\n     * const cell = graph.getSelectionCell();\n     * graph.traverse(cell, false, function(vertex, edge)\n     * {\n     *   GlobalConfig.logger.debug(graph.getLabel(vertex));\n     * });\n     * ```\n     *\n     * @param vertex {@link Cell} that represents the vertex where the traversal starts.\n     * @param directed Optional boolean indicating if edges should only be traversed\n     * from source to target. Default is true.\n     * @param func Visitor function that takes the current vertex and the incoming\n     * edge as arguments. The traversal stops if the function returns false.\n     * @param edge Optional {@link Cell} that represents the incoming edge. This is\n     * null for the first step of the traversal.\n     * @param visited Optional {@link Dictionary} of cell paths for the visited cells.\n     */\n    traverse({ vertex, directed, func, edge, visited }) {\n        if (func != null && vertex != null) {\n            directed = directed != null ? directed : true;\n            visited = visited || new Dictionary();\n            if (!visited.get(vertex)) {\n                visited.put(vertex, true);\n                const result = func(vertex, edge);\n                if (result == null || result) {\n                    const edgeCount = vertex.getEdgeCount();\n                    if (edgeCount > 0) {\n                        for (let i = 0; i < edgeCount; i += 1) {\n                            const e = vertex.getEdgeAt(i);\n                            const isSource = e.getTerminal(true) === vertex;\n                            if (!directed || isSource) {\n                                const next = this.graph.view.getVisibleTerminal(e, !isSource);\n                                this.traverse({\n                                    vertex: next,\n                                    directed,\n                                    func,\n                                    edge: e,\n                                    visited,\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Returns true if the given parent is an ancestor of the given child.\n     *\n     * @param parent {@link Cell} that specifies the parent.\n     * @param child {@link Cell} that specifies the child.\n     * @param traverseAncestors boolean whether to\n     */\n    isAncestor(parent, child, traverseAncestors) {\n        if (!traverseAncestors) {\n            return child.getParent() === parent;\n        }\n        if (child === parent) {\n            return false;\n        }\n        while (child != null && child !== parent) {\n            child = child.getParent();\n        }\n        return child === parent;\n    }\n    /**\n     * Returns a boolean indicating if the given {@link Cell} is movable or\n     * bendable by the algorithm. This implementation returns true if the given\n     * cell is movable in the graph.\n     *\n     * @param cell {@link Cell} whose movable state should be returned.\n     */\n    isVertexMovable(cell) {\n        return this.graph.isCellMovable(cell);\n    }\n    /**\n     * Returns a boolean indicating if the given {@link Cell} should be ignored by\n     * the algorithm. This implementation returns false for all vertices.\n     *\n     * @param vertex {@link Cell} whose ignored state should be returned.\n     */\n    isVertexIgnored(vertex) {\n        return !vertex.isVertex() || !vertex.isVisible();\n    }\n    /**\n     * Returns a boolean indicating if the given {@link Cell} should be ignored by\n     * the algorithm. This implementation returns false for all vertices.\n     *\n     * @param edge {@link Cell} whose ignored state should be returned.\n     */\n    isEdgeIgnored(edge) {\n        return (!edge.isEdge() ||\n            !edge.isVisible() ||\n            edge.getTerminal(true) == null ||\n            edge.getTerminal(false) == null);\n    }\n    /**\n     * Disables or enables the edge style of the given edge.\n     */\n    setEdgeStyleEnabled(edge, value) {\n        this.graph.setCellStyles('noEdgeStyle', value ? '0' : '1', [edge]);\n    }\n    /**\n     * Disables or enables orthogonal end segments of the given edge.\n     */\n    setOrthogonalEdge(edge, value) {\n        this.graph.setCellStyles('orthogonal', value ? '1' : '0', [edge]);\n    }\n    /**\n     * Determines the offset of the given parent to the parent\n     * of the layout\n     */\n    getParentOffset(parent) {\n        const result = new Point();\n        if (parent != null && parent !== this.parent) {\n            const model = this.graph.getDataModel();\n            if (this.parent && this.parent.isAncestor(parent)) {\n                let parentGeo = parent.getGeometry();\n                while (parent !== this.parent) {\n                    result.x += parentGeo.x;\n                    result.y += parentGeo.y;\n                    parent = parent.getParent();\n                    parentGeo = parent.getGeometry();\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Replaces the array of Point in the geometry of the given edge\n     * with the given array of Point.\n     */\n    setEdgePoints(edge, points) {\n        if (edge != null) {\n            const { model } = this.graph;\n            let geometry = edge.getGeometry();\n            if (geometry == null) {\n                geometry = new Geometry();\n                geometry.setRelative(true);\n            }\n            else {\n                geometry = geometry.clone();\n            }\n            if (this.parent != null && points != null) {\n                const parent = edge.getParent();\n                const parentOffset = this.getParentOffset(parent);\n                for (let i = 0; i < points.length; i += 1) {\n                    points[i].x = points[i].x - parentOffset.x;\n                    points[i].y = points[i].y - parentOffset.y;\n                }\n            }\n            geometry.points = points;\n            model.setGeometry(edge, geometry);\n        }\n    }\n    /**\n     * Sets the new position of the given cell taking into account the size of\n     * the bounding box if {@link useBoundingBox} is true. The change is only carried\n     * out if the new location is not equal to the existing location, otherwise\n     * the geometry is not replaced with an updated instance. The new or old\n     * bounds are returned (including overlapping labels).\n     *\n     * @param cell {@link Cell} whose geometry is to be set.\n     * @param x Integer that defines the x-coordinate of the new location.\n     * @param y Integer that defines the y-coordinate of the new location.\n     */\n    setVertexLocation(cell, x, y) {\n        const model = this.graph.getDataModel();\n        let geometry = cell.getGeometry();\n        let result = null;\n        if (geometry != null) {\n            result = new Rectangle(x, y, geometry.width, geometry.height);\n            // Checks for oversize labels and shifts the result\n            // TODO: Use mxUtils.getStringSize for label bounds\n            if (this.useBoundingBox) {\n                const state = this.graph.getView().getState(cell);\n                if (state != null && state.text != null && state.text.boundingBox != null) {\n                    const { scale } = this.graph.getView();\n                    const box = state.text.boundingBox;\n                    if (state.text.boundingBox.x < state.x) {\n                        x += (state.x - box.x) / scale;\n                        result.width = box.width;\n                    }\n                    if (state.text.boundingBox.y < state.y) {\n                        y += (state.y - box.y) / scale;\n                        result.height = box.height;\n                    }\n                }\n            }\n            if (this.parent != null) {\n                const parent = cell.getParent();\n                if (parent != null && parent !== this.parent) {\n                    const parentOffset = this.getParentOffset(parent);\n                    x -= parentOffset.x;\n                    y -= parentOffset.y;\n                }\n            }\n            if (geometry.x !== x || geometry.y !== y) {\n                geometry = geometry.clone();\n                geometry.x = x;\n                geometry.y = y;\n                model.setGeometry(cell, geometry);\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns an {@link Rectangle} that defines the bounds of the given cell or\n     * the bounding box if {@link useBoundingBox} is true.\n     */\n    getVertexBounds(cell) {\n        let geo = cell.getGeometry();\n        // Checks for oversize label bounding box and corrects\n        // the return value accordingly\n        // TODO: Use mxUtils.getStringSize for label bounds\n        if (this.useBoundingBox) {\n            const state = this.graph.getView().getState(cell);\n            if (state != null && state.text != null && state.text.boundingBox != null) {\n                const { scale } = this.graph.getView();\n                const tmp = state.text.boundingBox;\n                const dx0 = Math.max(state.x - tmp.x, 0) / scale;\n                const dy0 = Math.max(state.y - tmp.y, 0) / scale;\n                const dx1 = Math.max(tmp.x + tmp.width - (state.x + state.width), 0) / scale;\n                const dy1 = Math.max(tmp.y + tmp.height - (state.y + state.height), 0) / scale;\n                geo = new Rectangle(geo.x - dx0, geo.y - dy0, geo.width + dx0 + dx1, geo.height + dy0 + dy1);\n            }\n        }\n        if (this.parent != null) {\n            const parent = cell.getParent();\n            geo = geo.clone();\n            if (parent != null && parent !== this.parent) {\n                const parentOffset = this.getParentOffset(parent);\n                geo.x += parentOffset.x;\n                geo.y += parentOffset.y;\n            }\n        }\n        return new Rectangle(geo.x, geo.y, geo.width, geo.height);\n    }\n    /**\n     * Shortcut to {@link AbstractGraph.updateGroupBounds} with moveGroup set to true.\n     */\n    arrangeGroups(cells, border, topBorder, rightBorder, bottomBorder, leftBorder) {\n        return this.graph.updateGroupBounds(cells, border, true, topBorder, rightBorder, bottomBorder, leftBorder);\n    }\n}\nexport default GraphLayout;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * A utility class used to track cells whilst sorting occurs on the weighted\n * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==\n * (x.equals(y))\n *\n * @category Layout\n */\nclass WeightedCellSorter {\n    constructor(cell, weightedValue = 0) {\n        /**\n         * The weighted value of the cell stored.\n         */\n        this.weightedValue = 0;\n        /**\n         * Whether or not to flip equal weight values.\n         */\n        this.nudge = false;\n        /**\n         * Whether or not this cell has been visited in the current assignment.\n         */\n        this.visited = false;\n        /**\n         * The index this cell is in the model rank.\n         */\n        this.rankIndex = null;\n        this.cell = cell;\n        this.weightedValue = weightedValue;\n    }\n    /**\n     * Compares two WeightedCellSorters.\n     */\n    static compare(a, b) {\n        if (a != null && b != null) {\n            if (b.weightedValue > a.weightedValue) {\n                return -1;\n            }\n            if (b.weightedValue < a.weightedValue) {\n                return 1;\n            }\n            if (b.nudge) {\n                return -1;\n            }\n            return 1;\n        }\n        return 0;\n    }\n}\nexport default WeightedCellSorter;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Dictionary from './Dictionary';\n/*****************************************************************************\n * Group: Tree and traversal-related\n *****************************************************************************/\n/**\n * Returns all children in the given parent which do not have incoming\n * edges. If the result is empty then the with the greatest difference\n * between incoming and outgoing edges is returned.\n *\n * @param graph the Graph to use for the traversal.\n * @param parent {@link Cell} whose children should be checked.\n * @param isolate Optional boolean that specifies if edges should be ignored if\n * the opposite end is not a child of the given parent cell. Default is\n * false.\n * @param invert Optional boolean that specifies if outgoing or incoming edges\n * should be counted for a tree root. If false then outgoing edges will be\n * counted. Default is `false`.\n */\nexport function findTreeRoots(graph, parent, isolate = false, invert = false) {\n    const roots = [];\n    if (parent != null) {\n        let best = null;\n        let maxDiff = 0;\n        for (const cell of parent.getChildren()) {\n            if (cell.isVertex() && cell.isVisible()) {\n                const conns = graph.getConnections(cell, isolate ? parent : null);\n                let fanOut = 0;\n                let fanIn = 0;\n                for (let j = 0; j < conns.length; j++) {\n                    const src = graph.view.getVisibleTerminal(conns[j], true);\n                    if (src == cell) {\n                        fanOut++;\n                    }\n                    else {\n                        fanIn++;\n                    }\n                }\n                if ((invert && fanOut == 0 && fanIn > 0) ||\n                    (!invert && fanIn == 0 && fanOut > 0)) {\n                    roots.push(cell);\n                }\n                const diff = invert ? fanIn - fanOut : fanOut - fanIn;\n                if (diff > maxDiff) {\n                    maxDiff = diff;\n                    best = cell;\n                }\n            }\n        }\n        if (roots.length == 0 && best != null) {\n            roots.push(best);\n        }\n    }\n    return roots;\n}\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n *\n * Example:\n *\n * ```javascript\n * GlobalConfig.logger.show();\n * let cell = graph.getSelectionCell();\n * graph.traverse(cell, false, (vertex, edge)=>\n * {\n *   GlobalConfig.logger.debug(graph.getLabel(vertex));\n * });\n * ```\n *\n * @param vertex <Cell> that represents the vertex where the traversal starts.\n * @param directed Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * @param func Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * @param edge Optional <Cell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * @param visited Optional {@link Dictionary} from cells to true for the visited cells.\n * @param inverse Optional boolean to traverse in inverse direction. Default is false.\n * This is ignored if directed is false.\n */\nexport function traverse(vertex = null, directed = true, func = null, edge = null, visited = null, inverse = false) {\n    if (func != null && vertex != null) {\n        directed = directed != null ? directed : true;\n        inverse = inverse != null ? inverse : false;\n        visited = visited || new Dictionary();\n        if (!visited.get(vertex)) {\n            visited.put(vertex, true);\n            const result = func(vertex, edge);\n            if (result == null || result) {\n                const edgeCount = vertex.getEdgeCount();\n                if (edgeCount > 0) {\n                    for (let i = 0; i < edgeCount; i += 1) {\n                        const e = vertex.getEdgeAt(i);\n                        const isSource = e.getTerminal(true) == vertex;\n                        if (!directed || !inverse == isSource) {\n                            const next = e.getTerminal(!isSource);\n                            traverse(next, directed, func, e, visited, inverse);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2018, JGraph Ltd\nCopyright (c) 2006-2018, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Dictionary from '../../util/Dictionary';\nimport Point from '../geometry/Point';\nimport GraphLayout from './GraphLayout';\nimport CellPath from '../cell/CellPath';\nimport Rectangle from '../geometry/Rectangle';\nimport { sortCells } from '../../util/styleUtils';\nimport WeightedCellSorter from './util/WeightedCellSorter';\nimport { findTreeRoots } from '../../util/treeTraversal';\n/**\n * Extends {@link GraphLayout} to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n *\n * ### Example\n *\n * ```javascript\n * const layout = new CompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * ```\n *\n * @category Layout\n */\nexport class CompactTreeLayout extends GraphLayout {\n    constructor(graph, horizontal = true, invert = false) {\n        super(graph);\n        this.parentX = null;\n        this.parentY = null;\n        this.visited = {};\n        /**\n         * Specifies the orientation of the layout.\n         * @default true\n         */\n        this.horizontal = true;\n        /**\n         * Specifies if edge directions should be inverted.\n         * @default false.\n         */\n        this.invert = false;\n        /**\n         * If the parents should be resized to match the width/height of the\n         * children. Default is true.\n         * @default true\n         */\n        this.resizeParent = true;\n        /**\n         * Specifies if the parent location should be maintained, so that the\n         * top, left corner stays the same before and after execution of\n         * the layout. Default is false for backwards compatibility.\n         * @default false\n         */\n        this.maintainParentLocation = false;\n        /**\n         * Padding added to resized parents.\n         * @default 10\n         */\n        this.groupPadding = 10;\n        /**\n         * Top padding added to resized parents.\n         * @default 0\n         */\n        this.groupPaddingTop = 0;\n        /**\n         * Right padding added to resized parents.\n         * @default 0\n         */\n        this.groupPaddingRight = 0;\n        /**\n         * Bottom padding added to resized parents.\n         * @default 0\n         */\n        this.groupPaddingBottom = 0;\n        /**\n         * Left padding added to resized parents.\n         * @default 0\n         */\n        this.groupPaddingLeft = 0;\n        /**\n         * A set of the parents that need updating based on children\n         * process as part of the layout.\n         */\n        this.parentsChanged = null;\n        /**\n         * Specifies if the tree should be moved to the top, left corner\n         * if it is inside a top-level layer.\n         * @default false\n         */\n        this.moveTree = false;\n        /**\n         * Holds the levelDistance.\n         * @default 10\n         */\n        this.levelDistance = 10;\n        /**\n         * Holds the nodeDistance.\n         * @default 20\n         */\n        this.nodeDistance = 20;\n        /**\n         * Specifies if all edge points of traversed edges should be removed.\n         *\n         * @default true\n         */\n        this.resetEdges = true;\n        /**\n         * The preferred horizontal distance between edges exiting a vertex.\n         */\n        this.prefHozEdgeSep = 5;\n        /**\n         * The preferred vertical offset between edges exiting a vertex.\n         */\n        this.prefVertEdgeOff = 4;\n        /**\n         * The minimum distance for an edge jetty from a vertex.\n         */\n        this.minEdgeJetty = 8;\n        /**\n         * The size of the vertical buffer in the center of inter-rank channels\n         * where edge control points should not be placed.\n         */\n        this.channelBuffer = 4;\n        /**\n         * Whether or not to apply the internal tree edge routing.\n         */\n        this.edgeRouting = true;\n        /**\n         * Specifies if edges should be sorted according to the order of their\n         * opposite terminal cell in the model.\n         */\n        this.sortEdges = false;\n        /**\n         * Whether or not the tops of cells in each rank should be aligned\n         * across the rank\n         */\n        this.alignRanks = false;\n        /**\n         * An array of the maximum height of cells (relative to the layout direction)\n         * per rank\n         */\n        this.maxRankHeight = [];\n        /**\n         * The cell to use as the root of the tree\n         */\n        this.root = null;\n        /**\n         * The internal node representation of the root cell. Do not set directly\n         * , this value is only exposed to assist with post-processing functionality\n         */\n        this.node = null;\n        this.horizontal = horizontal;\n        this.invert = invert;\n    }\n    /**\n     * Returns a boolean indicating if the given {@link mxCell} should be ignored as a\n     * vertex. This returns true if the cell has no connections.\n     *\n     * @param vertex {@link mxCell} whose ignored state should be returned.\n     */\n    isVertexIgnored(vertex) {\n        return super.isVertexIgnored(vertex) || vertex.getConnections().length === 0;\n    }\n    /**\n     * Returns {@link horizontal}.\n     */\n    isHorizontal() {\n        return this.horizontal;\n    }\n    /**\n     * Implements {@link GraphLayout.execute}.\n     *\n     * If the parent has any connected edges, then it is used as the root of\n     * the tree. Else, {@link mxGraph.findTreeRoots} will be used to find a suitable\n     * root node within the set of children of the given parent.\n     *\n     * @param parent  {@link mxCell} whose children should be laid out.\n     * @param root    Optional {@link mxCell} that will be used as the root of the tree. Overrides {@link root} if specified.\n     */\n    execute(parent, root) {\n        this.parent = parent;\n        const model = this.graph.getDataModel();\n        if (root == null) {\n            // Takes the parent as the root if it has outgoing edges\n            if (this.graph.getEdges(parent, parent.getParent(), this.invert, !this.invert, false)\n                .length > 0) {\n                this.root = parent;\n            }\n            // Tries to find a suitable root in the parent's\n            // children\n            else {\n                const roots = findTreeRoots(this.graph, parent, true, this.invert);\n                if (roots.length > 0) {\n                    for (let i = 0; i < roots.length; i += 1) {\n                        if (!this.isVertexIgnored(roots[i]) &&\n                            this.graph.getEdges(roots[i], null, this.invert, !this.invert, false)\n                                .length > 0) {\n                            this.root = roots[i];\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            this.root = root;\n        }\n        if (this.root != null) {\n            if (this.resizeParent) {\n                this.parentsChanged = {};\n            }\n            else {\n                this.parentsChanged = null;\n            }\n            //  Maintaining parent location\n            this.parentX = null;\n            this.parentY = null;\n            if (parent !== this.root &&\n                parent.isVertex() != null &&\n                this.maintainParentLocation) {\n                const geo = parent.getGeometry();\n                if (geo != null) {\n                    this.parentX = geo.x;\n                    this.parentY = geo.y;\n                }\n            }\n            model.beginUpdate();\n            try {\n                this.visited = {};\n                this.node = this.dfs(this.root, parent);\n                if (this.alignRanks) {\n                    this.maxRankHeight = [];\n                    this.findRankHeights(this.node, 0);\n                    this.setCellHeights(this.node, 0);\n                }\n                if (this.node != null) {\n                    this.layout(this.node);\n                    let x0 = this.graph.gridSize;\n                    let y0 = x0;\n                    if (!this.moveTree) {\n                        const g = this.getVertexBounds(this.root);\n                        if (g != null) {\n                            x0 = g.x;\n                            y0 = g.y;\n                        }\n                    }\n                    let bounds = null;\n                    if (this.isHorizontal()) {\n                        bounds = this.horizontalLayout(this.node, x0, y0);\n                    }\n                    else {\n                        bounds = this.verticalLayout(this.node, null, x0, y0);\n                    }\n                    if (bounds != null) {\n                        let dx = 0;\n                        let dy = 0;\n                        if (bounds.x < 0) {\n                            dx = Math.abs(x0 - bounds.x);\n                        }\n                        if (bounds.y < 0) {\n                            dy = Math.abs(y0 - bounds.y);\n                        }\n                        if (dx !== 0 || dy !== 0) {\n                            this.moveNode(this.node, dx, dy);\n                        }\n                        if (this.resizeParent) {\n                            this.adjustParents();\n                        }\n                        if (this.edgeRouting) {\n                            // Iterate through all edges setting their positions\n                            this.localEdgeProcessing(this.node);\n                        }\n                    }\n                    // Maintaining parent location\n                    if (this.parentX != null && this.parentY != null) {\n                        let geo = parent.getGeometry();\n                        if (geo != null) {\n                            geo = geo.clone();\n                            geo.x = this.parentX;\n                            geo.y = this.parentY;\n                            model.setGeometry(parent, geo);\n                        }\n                    }\n                }\n            }\n            finally {\n                model.endUpdate();\n            }\n        }\n    }\n    /**\n     * Moves the specified node and all of its children by the given amount.\n     */\n    moveNode(node, dx, dy) {\n        node.x += dx;\n        node.y += dy;\n        this.apply(node);\n        let { child } = node;\n        while (child != null) {\n            this.moveNode(child, dx, dy);\n            child = child.next;\n        }\n    }\n    /**\n     * Called if {@link sortEdges} is true to sort the array of outgoing edges in place.\n     */\n    sortOutgoingEdges(source, edges) {\n        const lookup = new Dictionary();\n        edges.sort((e1, e2) => {\n            const end1 = e1.getTerminal(e1.getTerminal(false) == source);\n            let p1 = lookup.get(end1);\n            if (p1 == null) {\n                p1 = CellPath.create(end1).split(CellPath.PATH_SEPARATOR);\n                lookup.put(end1, p1);\n            }\n            const end2 = e2.getTerminal(e2.getTerminal(false) === source);\n            let p2 = lookup.get(end2);\n            if (p2 == null) {\n                p2 = CellPath.create(end2).split(CellPath.PATH_SEPARATOR);\n                lookup.put(end2, p2);\n            }\n            return CellPath.compare(p1, p2);\n        });\n    }\n    /**\n     * Stores the maximum height (relative to the layout\n     * direction) of cells in each rank\n     */\n    findRankHeights(node, rank) {\n        const maxRankHeight = this.maxRankHeight;\n        if (maxRankHeight[rank] == null || maxRankHeight[rank] < node.height) {\n            maxRankHeight[rank] = node.height;\n        }\n        let { child } = node;\n        while (child != null) {\n            this.findRankHeights(child, rank + 1);\n            child = child.next;\n        }\n    }\n    /**\n     * Set the cells heights (relative to the layout\n     * direction) when the tops of each rank are to be aligned\n     */\n    setCellHeights(node, rank) {\n        const maxRankHeight = this.maxRankHeight;\n        if (maxRankHeight[rank] != null && maxRankHeight[rank] > node.height) {\n            node.height = maxRankHeight[rank];\n        }\n        let { child } = node;\n        while (child != null) {\n            this.setCellHeights(child, rank + 1);\n            child = child.next;\n        }\n    }\n    /**\n     * Does a depth first search starting at the specified cell.\n     * Makes sure the specified parent is never left by the\n     * algorithm.\n     */\n    dfs(cell, parent) {\n        const id = CellPath.create(cell);\n        let node = null;\n        if (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell)) {\n            this.visited[id] = cell;\n            node = this.createNode(cell);\n            const model = this.graph.getDataModel();\n            let prev = null;\n            const out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n            const view = this.graph.getView();\n            if (this.sortEdges) {\n                this.sortOutgoingEdges(cell, out);\n            }\n            for (let i = 0; i < out.length; i += 1) {\n                const edge = out[i];\n                if (!this.isEdgeIgnored(edge)) {\n                    // Resets the points on the traversed edge\n                    if (this.resetEdges) {\n                        this.setEdgePoints(edge, null);\n                    }\n                    if (this.edgeRouting) {\n                        this.setEdgeStyleEnabled(edge, false);\n                        this.setEdgePoints(edge, null);\n                    }\n                    // Checks if terminal in same swimlane\n                    const state = view.getState(edge);\n                    const target = state != null\n                        ? state.getVisibleTerminal(this.invert)\n                        : view.getVisibleTerminal(edge, this.invert);\n                    const tmp = this.dfs(target, parent);\n                    if (tmp != null && target.getGeometry() != null) {\n                        if (prev == null) {\n                            node.child = tmp;\n                        }\n                        else {\n                            prev.next = tmp;\n                        }\n                        prev = tmp;\n                    }\n                }\n            }\n        }\n        return node;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    layout(node) {\n        let { child } = node;\n        while (child != null) {\n            this.layout(child);\n            child = child.next;\n        }\n        if (node.child != null) {\n            this.attachParent(node, this.join(node));\n        }\n        else {\n            this.layoutLeaf(node);\n        }\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    horizontalLayout(node, x0, y0, bounds = null) {\n        node.x += x0 + node.offsetX;\n        node.y += y0 + node.offsetY;\n        bounds = this.apply(node, bounds);\n        const { child } = node;\n        if (child != null) {\n            bounds = this.horizontalLayout(child, node.x, node.y, bounds);\n            let siblingOffset = node.y + child.offsetY;\n            let s = child.next;\n            while (s != null) {\n                bounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n                siblingOffset += s.offsetY;\n                s = s.next;\n            }\n        }\n        return bounds;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    verticalLayout(node, parent, x0, y0, bounds = null) {\n        node.x = node.x + x0 + node.offsetY;\n        node.y = node.y + y0 + node.offsetX;\n        bounds = this.apply(node, bounds);\n        const { child } = node;\n        if (child != null) {\n            bounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n            let siblingOffset = node.x + child.offsetY;\n            let s = child.next;\n            while (s != null) {\n                bounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n                siblingOffset += s.offsetY;\n                s = s.next;\n            }\n        }\n        return bounds;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    attachParent(node, height) {\n        const x = this.nodeDistance + this.levelDistance;\n        const y2 = (height - node.width) / 2 - this.nodeDistance;\n        const y1 = y2 + node.width + 2 * this.nodeDistance - height;\n        node.child.offsetX = x + node.height;\n        node.child.offsetY = y1;\n        node.contour.upperHead = this.createLine(node.height, 0, this.createLine(x, y1, node.contour.upperHead));\n        node.contour.lowerHead = this.createLine(node.height, 0, this.createLine(x, y2, node.contour.lowerHead));\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    // layoutLeaf(node: any): void;\n    layoutLeaf(node) {\n        const dist = 2 * this.nodeDistance;\n        node.contour.upperTail = this.createLine(node.height + dist, 0);\n        node.contour.upperHead = node.contour.upperTail;\n        node.contour.lowerTail = this.createLine(0, -node.width - dist);\n        node.contour.lowerHead = this.createLine(node.height + dist, 0, node.contour.lowerTail);\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    join(node) {\n        const dist = 2 * this.nodeDistance;\n        let { child } = node;\n        node.contour = child.contour;\n        let h = child.width + dist;\n        let sum = h;\n        child = child.next;\n        while (child != null) {\n            const d = this.merge(node.contour, child.contour);\n            child.offsetY = d + h;\n            child.offsetX = 0;\n            h = child.width + dist;\n            sum += d + h;\n            child = child.next;\n        }\n        return sum;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    merge(p1, p2) {\n        let x = 0;\n        let y = 0;\n        let total = 0;\n        let upper = p1.lowerHead;\n        let lower = p2.upperHead;\n        while (lower != null && upper != null) {\n            const d = this.offset(x, y, lower.dx, lower.dy, upper.dx, upper.dy);\n            y += d;\n            total += d;\n            if (x + lower.dx <= upper.dx) {\n                x += lower.dx;\n                y += lower.dy;\n                lower = lower.next;\n            }\n            else {\n                x -= upper.dx;\n                y -= upper.dy;\n                upper = upper.next;\n            }\n        }\n        if (lower != null) {\n            const b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n            p1.upperTail = b.next != null ? p2.upperTail : b;\n            p1.lowerTail = p2.lowerTail;\n        }\n        else {\n            const b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n            if (b.next == null) {\n                p1.lowerTail = b;\n            }\n        }\n        p1.lowerHead = p2.lowerHead;\n        return total;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    // offset(p1: number, p2: number, a1: number, a2: number, b1: number, b2: number): number;\n    offset(p1, p2, a1, a2, b1, b2) {\n        let d = 0;\n        if (b1 <= p1 || p1 + a1 <= 0) {\n            return 0;\n        }\n        const t = b1 * a2 - a1 * b2;\n        if (t > 0) {\n            if (p1 < 0) {\n                const s = p1 * a2;\n                d = s / a1 - p2;\n            }\n            else if (p1 > 0) {\n                const s = p1 * b2;\n                d = s / b1 - p2;\n            }\n            else {\n                d = -p2;\n            }\n        }\n        else if (b1 < p1 + a1) {\n            const s = (b1 - p1) * a2;\n            d = b2 - (p2 + s / a1);\n        }\n        else if (b1 > p1 + a1) {\n            const s = (a1 + p1) * b2;\n            d = s / b1 - (p2 + a2);\n        }\n        else {\n            d = b2 - (p2 + a2);\n        }\n        if (d > 0) {\n            return d;\n        }\n        return 0;\n    }\n    bridge(line1, x1, y1, line2, x2, y2) {\n        const dx = x2 + line2.dx - x1;\n        let dy = 0;\n        let s = 0;\n        if (line2.dx === 0) {\n            dy = line2.dy;\n        }\n        else {\n            s = dx * line2.dy;\n            dy = s / line2.dx;\n        }\n        const r = this.createLine(dx, dy, line2.next);\n        line1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n        return r;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    createNode(cell) {\n        const node = {};\n        node.cell = cell;\n        node.x = 0;\n        node.y = 0;\n        node.width = 0;\n        node.height = 0;\n        const geo = this.getVertexBounds(cell);\n        if (geo != null) {\n            if (this.isHorizontal()) {\n                node.width = geo.height;\n                node.height = geo.width;\n            }\n            else {\n                node.width = geo.width;\n                node.height = geo.height;\n            }\n        }\n        node.offsetX = 0;\n        node.offsetY = 0;\n        node.contour = {};\n        return node;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    apply(node, bounds = null) {\n        const model = this.graph.getDataModel();\n        const cell = node.cell;\n        let g = cell.getGeometry();\n        if (cell != null && g != null) {\n            if (this.isVertexMovable(cell)) {\n                g = this.setVertexLocation(cell, node.x, node.y);\n                if (this.resizeParent) {\n                    const parent = cell.getParent();\n                    const id = CellPath.create(parent);\n                    // Implements set semantic\n                    const parentsChanged = this.parentsChanged;\n                    if (parentsChanged[id] == null) {\n                        parentsChanged[id] = parent;\n                    }\n                }\n            }\n            if (bounds == null) {\n                bounds = new Rectangle(g.x, g.y, g.width, g.height);\n            }\n            else {\n                bounds = new Rectangle(Math.min(bounds.x, g.x), Math.min(bounds.y, g.y), Math.max(bounds.x + bounds.width, g.x + g.width), Math.max(bounds.y + bounds.height, g.y + g.height));\n            }\n        }\n        return bounds;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    createLine(dx, dy, next = null) {\n        const line = {\n            dx,\n            dy,\n            next,\n        };\n        return line;\n    }\n    /**\n     * Adjust parent cells whose child geometries have changed. The default\n     * implementation adjusts the group to just fit around the children with\n     * a padding.\n     */\n    adjustParents() {\n        const tmp = [];\n        for (const id in this.parentsChanged) {\n            tmp.push(this.parentsChanged[id]);\n        }\n        this.arrangeGroups(sortCells(tmp, true), this.groupPadding, this.groupPaddingTop, this.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n    }\n    /**\n     * Moves the specified node and all of its children by the given amount.\n     */\n    localEdgeProcessing(node) {\n        this.processNodeOutgoing(node);\n        let { child } = node;\n        while (child != null) {\n            this.localEdgeProcessing(child);\n            child = child.next;\n        }\n    }\n    /**\n     * Separates the x position of edges as they connect to vertices\n     */\n    processNodeOutgoing(node) {\n        let { child } = node;\n        const parentCell = node.cell;\n        let childCount = 0;\n        const sortedCells = [];\n        while (child != null) {\n            childCount++;\n            let sortingCriterion;\n            if (this.horizontal) {\n                sortingCriterion = child.y;\n            }\n            else {\n                sortingCriterion = child.x;\n            }\n            sortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n            child = child.next;\n        }\n        sortedCells.sort(WeightedCellSorter.compare);\n        let availableWidth = node.width;\n        const requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n        // Add a buffer on the edges of the vertex if the edge count allows\n        if (availableWidth > requiredWidth + 2 * this.prefHozEdgeSep) {\n            availableWidth -= 2 * this.prefHozEdgeSep;\n        }\n        const edgeSpacing = availableWidth / childCount;\n        let currentXOffset = edgeSpacing / 2.0;\n        if (availableWidth > requiredWidth + 2 * this.prefHozEdgeSep) {\n            currentXOffset += this.prefHozEdgeSep;\n        }\n        let currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n        let maxYOffset = 0;\n        const parentBounds = this.getVertexBounds(parentCell);\n        child = node.child;\n        for (let j = 0; j < sortedCells.length; j++) {\n            const childCell = sortedCells[j].cell.cell;\n            const childBounds = this.getVertexBounds(childCell);\n            const edges = this.graph.getEdgesBetween(parentCell, childCell, false);\n            const newPoints = [];\n            let x = 0;\n            let y = 0;\n            for (let i = 0; i < edges.length; i += 1) {\n                if (this.horizontal) {\n                    // Use opposite co-ords, calculation was done for\n                    //\n                    x = parentBounds.x + parentBounds.width;\n                    y = parentBounds.y + currentXOffset;\n                    newPoints.push(new Point(x, y));\n                    x = parentBounds.x + parentBounds.width + currentYOffset;\n                    newPoints.push(new Point(x, y));\n                    y = childBounds.y + childBounds.height / 2.0;\n                    newPoints.push(new Point(x, y));\n                    this.setEdgePoints(edges[i], newPoints);\n                }\n                else {\n                    x = parentBounds.x + currentXOffset;\n                    y = parentBounds.y + parentBounds.height;\n                    newPoints.push(new Point(x, y));\n                    y = parentBounds.y + parentBounds.height + currentYOffset;\n                    newPoints.push(new Point(x, y));\n                    x = childBounds.x + childBounds.width / 2.0;\n                    newPoints.push(new Point(x, y));\n                    this.setEdgePoints(edges[i], newPoints);\n                }\n            }\n            if (j < childCount / 2) {\n                currentYOffset += this.prefVertEdgeOff;\n            }\n            else if (j > childCount / 2) {\n                currentYOffset -= this.prefVertEdgeOff;\n            }\n            // Ignore the case if equals, this means the second of 2\n            // jettys with the same y (even number of edges)\n            //                pos[k * 2] = currentX;\n            currentXOffset += edgeSpacing;\n            //                pos[k * 2 + 1] = currentYOffset;\n            maxYOffset = Math.max(maxYOffset, currentYOffset);\n        }\n    }\n}\nexport default CompactTreeLayout;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport GraphLayout from './GraphLayout';\nimport { DEFAULT_STARTSIZE } from '../../util/Constants';\nimport Geometry from '../geometry/Geometry';\n/**\n * Extends {@link GraphLayout} to create a horizontal or vertical stack of the child vertices.\n * The children do not need to be connected for this layout to work.\n *\n * Example:\n *\n * ```javascript\n * const layout = new StackLayout(graph, true);\n * layout.execute(graph.getDefaultParent());\n * ```\n *\n * @category Layout\n */\nclass StackLayout extends GraphLayout {\n    constructor(graph, horizontal = null, spacing = null, x0 = null, y0 = null, border = null) {\n        super(graph);\n        /**\n         * Border to be added if fill is true.\n         */\n        this.border = 0;\n        /**\n         * Top margin for the child area.\n         */\n        this.marginTop = 0;\n        /**\n         * Top margin for the child area.\n         */\n        this.marginLeft = 0;\n        /**\n         * Top margin for the child area.\n         */\n        this.marginRight = 0;\n        /**\n         * Top margin for the child area.\n         */\n        this.marginBottom = 0;\n        /**\n         * Boolean indicating if the location of the first cell should be kept, that is, it will not be moved to x0 or y0.\n         */\n        this.keepFirstLocation = false;\n        /**\n         * Boolean indicating if dimension should be changed to fill out the parent cell.\n         */\n        this.fill = false;\n        /**\n         * If the parent should be resized to match the width/height of the stack.\n         */\n        this.resizeParent = false;\n        /**\n         * Use maximum of existing value and new value for resize of parent.\n         */\n        this.resizeParentMax = false;\n        /**\n         * If the last element should be resized to fill out the parent.\n         */\n        this.resizeLast = false;\n        /**\n         * Value at which a new column or row should be created.\n         */\n        this.wrap = null;\n        /**\n         * If the strokeWidth should be ignored.\n         */\n        this.borderCollapse = true;\n        /**\n         * If gaps should be allowed in the stack.\n         */\n        this.allowGaps = false;\n        /**\n         * Grid size for alignment of position and size.\n         */\n        this.gridSize = 0;\n        this.horizontal = horizontal != null ? horizontal : true;\n        this.spacing = spacing != null ? spacing : 0;\n        this.x0 = x0 != null ? x0 : 0;\n        this.y0 = y0 != null ? y0 : 0;\n        this.border = border != null ? border : 0;\n    }\n    /**\n     * Returns horizontal.\n     */\n    isHorizontal() {\n        return this.horizontal;\n    }\n    /**\n     * Implements mxGraphLayout.moveCell.\n     */\n    moveCell(cell, x, y) {\n        const model = this.graph.getDataModel();\n        const parent = cell.getParent();\n        const horizontal = this.isHorizontal();\n        if (cell != null && parent != null) {\n            let i = 0;\n            let last = 0;\n            const childCount = parent.getChildCount();\n            let value = horizontal ? x : y;\n            const pstate = this.graph.getView().getState(parent);\n            if (pstate != null) {\n                value -= horizontal ? pstate.x : pstate.y;\n            }\n            value /= this.graph.view.scale;\n            for (i = 0; i < childCount; i += 1) {\n                const child = parent.getChildAt(i);\n                if (child !== cell) {\n                    const bounds = child.getGeometry();\n                    if (bounds != null) {\n                        const tmp = horizontal\n                            ? bounds.x + bounds.width / 2\n                            : bounds.y + bounds.height / 2;\n                        if (last <= value && tmp > value) {\n                            break;\n                        }\n                        last = tmp;\n                    }\n                }\n            }\n            // Changes child order in parent\n            let idx = parent.getIndex(cell);\n            idx = Math.max(0, i - (i > idx ? 1 : 0));\n            model.add(parent, cell, idx);\n        }\n    }\n    /**\n     * Returns the size for the parent container or the size of the graph container if the parent is a layer or the root of the model.\n     */\n    getParentSize(parent) {\n        const model = this.graph.getDataModel();\n        let pgeo = parent.getGeometry();\n        // Handles special case where the parent is either a layer with no\n        // geometry or the current root of the view in which case the size\n        // of the graph's container will be used.\n        if (this.graph.container != null &&\n            ((pgeo == null && model.isLayer(parent)) ||\n                parent === this.graph.getView().currentRoot)) {\n            const width = this.graph.container.offsetWidth - 1;\n            const height = this.graph.container.offsetHeight - 1;\n            pgeo = new Geometry(0, 0, width, height);\n        }\n        return pgeo;\n    }\n    /**\n     * Returns the cells to be layouted.\n     */\n    getLayoutCells(parent) {\n        const model = this.graph.getDataModel();\n        const childCount = parent.getChildCount();\n        const cells = [];\n        for (let i = 0; i < childCount; i += 1) {\n            const child = parent.getChildAt(i);\n            if (!this.isVertexIgnored(child) && this.isVertexMovable(child)) {\n                cells.push(child);\n            }\n        }\n        if (this.allowGaps) {\n            cells.sort((c1, c2) => {\n                const geo1 = c1.getGeometry();\n                const geo2 = c2.getGeometry();\n                return this.horizontal\n                    ? geo1.x === geo2.x\n                        ? 0\n                        : geo1.x > geo2.x && geo2.x > 0\n                            ? 1\n                            : -1\n                    : geo1.y === geo2.y\n                        ? 0\n                        : geo1.y > geo2.y && geo2.y > 0\n                            ? 1\n                            : -1;\n            });\n        }\n        return cells;\n    }\n    /**\n     * Snaps the given value to the grid size.\n     */\n    snap(value) {\n        if (this.gridSize != null && this.gridSize > 0) {\n            value = Math.max(value, this.gridSize);\n            if (value / this.gridSize > 1) {\n                const mod = value % this.gridSize;\n                value += mod > this.gridSize / 2 ? this.gridSize - mod : -mod;\n            }\n        }\n        return value;\n    }\n    /**\n     * Implements mxGraphLayout.execute.\n     */\n    execute(parent) {\n        if (parent != null) {\n            const pgeo = this.getParentSize(parent);\n            const horizontal = this.isHorizontal();\n            const model = this.graph.getDataModel();\n            let fillValue = null;\n            if (pgeo != null) {\n                fillValue = horizontal\n                    ? pgeo.height - this.marginTop - this.marginBottom\n                    : pgeo.width - this.marginLeft - this.marginRight;\n                fillValue -= 2 * this.border;\n            }\n            let x0 = this.x0 + this.border + this.marginLeft;\n            let y0 = this.y0 + this.border + this.marginTop;\n            // Handles swimlane start size\n            if (this.graph.isSwimlane(parent)) {\n                // Uses computed style to get latest\n                const style = this.graph.getCellStyle(parent);\n                let start = style.startSize ?? DEFAULT_STARTSIZE;\n                const horz = style.horizontal ?? true;\n                if (pgeo != null) {\n                    if (horz) {\n                        start = Math.min(start, pgeo.height);\n                    }\n                    else {\n                        start = Math.min(start, pgeo.width);\n                    }\n                }\n                if (horizontal === horz && fillValue != null) {\n                    fillValue -= start;\n                }\n                if (horz) {\n                    y0 += start;\n                }\n                else {\n                    x0 += start;\n                }\n            }\n            model.beginUpdate();\n            try {\n                let tmp = 0;\n                let last = null;\n                let lastValue = 0;\n                let lastChild = null;\n                const cells = this.getLayoutCells(parent);\n                for (let i = 0; i < cells.length; i += 1) {\n                    const child = cells[i];\n                    let geo = child.getGeometry();\n                    if (geo != null) {\n                        geo = geo.clone();\n                        if (this.wrap != null && last != null) {\n                            if ((horizontal &&\n                                last.x + last.width + geo.width + 2 * this.spacing > this.wrap) ||\n                                (!horizontal &&\n                                    last.y + last.height + geo.height + 2 * this.spacing > this.wrap)) {\n                                last = null;\n                                if (horizontal) {\n                                    y0 += tmp + this.spacing;\n                                }\n                                else {\n                                    x0 += tmp + this.spacing;\n                                }\n                                tmp = 0;\n                            }\n                        }\n                        tmp = Math.max(tmp, horizontal ? geo.height : geo.width);\n                        let sw = 0;\n                        if (!this.borderCollapse) {\n                            const childStyle = this.graph.getCellStyle(child);\n                            sw = childStyle.strokeWidth ?? 1;\n                        }\n                        if (last != null) {\n                            const temp = lastValue + this.spacing + Math.floor(sw / 2);\n                            if (horizontal) {\n                                geo.x =\n                                    this.snap((this.allowGaps ? Math.max(temp, geo.x) : temp) - this.marginLeft) + this.marginLeft;\n                            }\n                            else {\n                                geo.y =\n                                    this.snap((this.allowGaps ? Math.max(temp, geo.y) : temp) - this.marginTop) + this.marginTop;\n                            }\n                        }\n                        else if (!this.keepFirstLocation) {\n                            if (horizontal) {\n                                geo.x =\n                                    this.allowGaps && geo.x > x0\n                                        ? Math.max(this.snap(geo.x - this.marginLeft) + this.marginLeft, x0)\n                                        : x0;\n                            }\n                            else {\n                                geo.y =\n                                    this.allowGaps && geo.y > y0\n                                        ? Math.max(this.snap(geo.y - this.marginTop) + this.marginTop, y0)\n                                        : y0;\n                            }\n                        }\n                        if (horizontal) {\n                            geo.y = y0;\n                        }\n                        else {\n                            geo.x = x0;\n                        }\n                        if (this.fill && fillValue != null) {\n                            if (horizontal) {\n                                geo.height = fillValue;\n                            }\n                            else {\n                                geo.width = fillValue;\n                            }\n                        }\n                        if (horizontal) {\n                            geo.width = this.snap(geo.width);\n                        }\n                        else {\n                            geo.height = this.snap(geo.height);\n                        }\n                        this.setChildGeometry(child, geo);\n                        lastChild = child;\n                        last = geo;\n                        if (horizontal) {\n                            lastValue = last.x + last.width + Math.floor(sw / 2);\n                        }\n                        else {\n                            lastValue = last.y + last.height + Math.floor(sw / 2);\n                        }\n                    }\n                }\n                if (this.resizeParent && pgeo != null && last != null && !parent.isCollapsed()) {\n                    this.updateParentGeometry(parent, pgeo, last);\n                }\n                else if (this.resizeLast && pgeo != null && last != null && lastChild != null) {\n                    if (horizontal) {\n                        last.width =\n                            pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;\n                    }\n                    else {\n                        last.height = pgeo.height - last.y - this.spacing - this.marginBottom;\n                    }\n                    this.setChildGeometry(lastChild, last);\n                }\n            }\n            finally {\n                model.endUpdate();\n            }\n        }\n    }\n    /**\n     * Sets the specific geometry to the given child cell.\n     *\n     * @param child The given child of <Cell>.\n     * @param geo The specific geometry of {@link Geometry}.\n     */\n    setChildGeometry(child, geo) {\n        const geo2 = child.getGeometry();\n        if (geo2 == null ||\n            geo.x !== geo2.x ||\n            geo.y !== geo2.y ||\n            geo.width !== geo2.width ||\n            geo.height !== geo2.height) {\n            this.graph.getDataModel().setGeometry(child, geo);\n        }\n    }\n    /**\n     * Updates the geometry of the given parent cell.\n     *\n     * @param parent The given parent of <Cell>.\n     * @param pgeo The new {@link Geometry} for parent.\n     * @param last The last {@link Geometry}.\n     */\n    updateParentGeometry(parent, pgeo, last) {\n        const horizontal = this.isHorizontal();\n        const model = this.graph.getDataModel();\n        const pgeo2 = pgeo.clone();\n        if (horizontal) {\n            const tmp = last.x + last.width + this.marginRight + this.border;\n            if (this.resizeParentMax) {\n                pgeo2.width = Math.max(pgeo2.width, tmp);\n            }\n            else {\n                pgeo2.width = tmp;\n            }\n        }\n        else {\n            const tmp = last.y + last.height + this.marginBottom + this.border;\n            if (this.resizeParentMax) {\n                pgeo2.height = Math.max(pgeo2.height, tmp);\n            }\n            else {\n                pgeo2.height = tmp;\n            }\n        }\n        if (pgeo.x !== pgeo2.x ||\n            pgeo.y !== pgeo2.y ||\n            pgeo.width !== pgeo2.width ||\n            pgeo.height !== pgeo2.height) {\n            model.setGeometry(parent, pgeo2);\n        }\n    }\n}\nexport default StackLayout;\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CodecRegistry from '../CodecRegistry';\nimport ObjectCodec from '../ObjectCodec';\nimport Cell from '../../view/cell/Cell';\nimport { importNode } from '../../util/domUtils';\nimport { removeWhitespace } from '../../util/StringUtils';\nimport { isElement } from '../../internal/utils';\n/**\n * Codec for {@link Cell}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * Transient Fields:\n *\n * - children\n * - edges\n * - overlays\n * - mxTransient\n *\n * Reference Fields:\n *\n * - parent\n * - source\n * - target\n *\n * Transient fields can be added using the following code: `CodecRegistry.getCodec(Cell).exclude.push('name_of_field');`\n *\n * To subclass {@link Cell}, replace the template and add an alias as follows:\n *\n * ```javascript\n * // Given 'CustomCell' extends 'Cell'\n * CodecRegistry.getCodec(Cell).template = new CustomCell();\n * CodecRegistry.addAlias('CustomCell', 'Cell');\n * ```\n *\n * @category Serialization with Codecs\n */\nexport class CellCodec extends ObjectCodec {\n    constructor() {\n        super(new Cell(), ['children', 'edges', 'overlays', 'mxTransient'], ['parent', 'source', 'target']);\n        this.setName('Cell');\n    }\n    /**\n     * Returns `true` since this is a cell codec.\n     */\n    isCellCodec() {\n        return true;\n    }\n    /**\n     * Overridden to disable conversion of value to number.\n     */\n    isNumericAttribute(dec, attr, obj) {\n        return attr.nodeName !== 'value' && super.isNumericAttribute(dec, attr, obj);\n    }\n    /**\n     * Excludes user objects that are XML nodes.\n     */\n    isExcluded(obj, attr, value, isWrite) {\n        return (super.isExcluded(obj, attr, value, isWrite) ||\n            (isWrite && attr === 'value' && isElement(value)));\n    }\n    /**\n     * Encodes a {@link Cell} and wraps the XML up inside the XML of the user object (inversion).\n     */\n    afterEncode(enc, obj, node) {\n        if (isElement(obj.value)) {\n            // Wraps the graphical annotation up in the user object (inversion)\n            // by putting the result of the default encoding into a clone of the\n            // user object (node type 1) and returning this cloned user object.\n            const tmp = node;\n            node = importNode(enc.document, obj.value, true);\n            node.appendChild(tmp);\n            // Moves the id attribute to the outermost XML node, namely the\n            // node which denotes the object boundaries in the file.\n            const id = tmp.getAttribute('id');\n            node.setAttribute('id', String(id));\n            tmp.removeAttribute('id');\n        }\n        return node;\n    }\n    /**\n     * Decodes an {@link Cell} and uses the enclosing XML node as the user object for the cell (inversion).\n     */\n    beforeDecode(dec, node, obj) {\n        let inner = node.cloneNode(true);\n        const classname = this.getName();\n        if (node.nodeName !== classname) {\n            // Passes the inner graphical annotation node to the\n            // object codec for further processing of the cell.\n            const tmp = node.getElementsByTagName(classname)[0];\n            if (tmp != null && tmp.parentNode === node) {\n                removeWhitespace(tmp, true);\n                removeWhitespace(tmp, false);\n                tmp.parentNode.removeChild(tmp);\n                inner = tmp;\n            }\n            else {\n                inner = null;\n            }\n            // Creates the user object out of the XML node\n            obj.value = node.cloneNode(true);\n            const id = obj.value.getAttribute('id');\n            if (id != null) {\n                obj.setId(id);\n                obj.value.removeAttribute('id');\n            }\n        }\n        else {\n            // Uses ID from XML file as ID for cell in model\n            obj.setId(node.getAttribute('id'));\n        }\n        // Preprocesses and removes all Id-references in order to use the\n        // correct encoder (this) for the known references to cells (all).\n        if (inner != null) {\n            for (let i = 0; i < this.idrefs.length; i += 1) {\n                const attr = this.idrefs[i];\n                const ref = inner.getAttribute(attr);\n                if (ref != null) {\n                    inner.removeAttribute(attr);\n                    let object = dec.objects[ref] || dec.lookup(ref);\n                    if (object == null) {\n                        // Needs to decode forward reference\n                        const element = dec.getElementById(ref);\n                        if (element != null) {\n                            const decoder = CodecRegistry.codecs[element.nodeName] || this;\n                            object = decoder.decode(dec, element);\n                        }\n                    }\n                    // @ts-ignore dynamic assignment was in original implementation\n                    obj[attr] = object;\n                }\n            }\n        }\n        return inner;\n    }\n}\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport GraphDataModel from '../../view/GraphDataModel';\n/**\n * Codec for {@link GraphDataModel}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * @category Serialization with Codecs\n */\nexport class ModelCodec extends ObjectCodec {\n    constructor() {\n        super(new GraphDataModel());\n        this.setName('GraphDataModel');\n    }\n    /**\n     * Encodes the given {@link GraphDataModel} by writing a (flat) XML sequence of cell nodes as produced by the {@link CellCodec}.\n     * The sequence is wrapped-up in a node with the name `root`.\n     */\n    encodeObject(enc, obj, node) {\n        const rootNode = enc.document.createElement('root');\n        enc.encodeCell(obj.getRoot(), rootNode);\n        node.appendChild(rootNode);\n    }\n    /**\n     * Overrides decode child to handle special child nodes.\n     */\n    decodeChild(dec, child, obj) {\n        if (child.nodeName === 'root') {\n            this.decodeRoot(dec, child, obj);\n        }\n        else {\n            this.decodeChild.apply(this, [dec, child, obj]);\n        }\n    }\n    /**\n     * Reads the cells into the graph model. All cells are children of the root element in the node.\n     */\n    decodeRoot(dec, root, model) {\n        let rootCell = null;\n        let tmp = root.firstChild;\n        while (tmp != null) {\n            const cell = dec.decodeCell(tmp);\n            if (cell != null && cell.getParent() == null) {\n                rootCell = cell;\n            }\n            tmp = tmp.nextSibling;\n        }\n        // Sets the root on the model if one has been decoded\n        if (rootCell != null) {\n            model.setRoot(rootCell);\n        }\n    }\n}\n","/*\nCopyright 2024-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { isNumeric } from '../../../util/mathUtils';\n// from mxGraph to maxGraph\nconst fieldMapping = new Map([['autosize', 'autoSize']]);\nexport function convertStyleFromString(input) {\n    const style = {};\n    input.startsWith(';') && (style.ignoreDefaultStyle = true);\n    const elements = input\n        .split(';')\n        // filter empty key\n        .filter(([k]) => k);\n    for (const element of elements) {\n        if (!element.includes('=')) {\n            !style.baseStyleNames && (style.baseStyleNames = []);\n            style.baseStyleNames.push(element);\n        }\n        else {\n            const [key, value] = element.split('=');\n            // @ts-ignore\n            style[fieldMapping.get(key) ?? key] = convertToNumericIfNeeded(value);\n        }\n    }\n    return style;\n}\nfunction convertToNumericIfNeeded(value) {\n    // Adapted from ObjectCodec.convertAttributeFromXml\n    if (!isNumeric(value)) {\n        return value;\n    }\n    let numericValue = parseFloat(value);\n    if (Number.isNaN(numericValue) || !Number.isFinite(numericValue)) {\n        numericValue = 0;\n    }\n    return numericValue;\n}\n","/*\nCopyright 2024-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { convertStyleFromString } from './utils';\nimport { CellCodec } from '../CellCodec';\n/**\n * Add support for the legacy `mxGraph` format of {@link Cell}.\n *\n * @category Serialization with Codecs\n */\nexport class mxCellCodec extends CellCodec {\n    getName() {\n        return 'mxCell';\n    }\n    decodeAttribute(dec, attr, obj) {\n        const attributeNodeName = attr.nodeName;\n        if (obj && attributeNodeName == 'style') {\n            obj['style'] = convertStyleFromString(attr.value);\n        }\n        else {\n            super.decodeAttribute(dec, attr, obj);\n        }\n    }\n}\n","/*\nCopyright 2024-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../../ObjectCodec';\nimport Geometry from '../../../view/geometry/Geometry';\nimport Point from '../../../view/geometry/Point';\n/**\n * Add support for the legacy `mxGraph` format of {@link Geometry}.\n *\n * @category Serialization with Codecs\n */\nexport class mxGeometryCodec extends ObjectCodec {\n    getName() {\n        return 'mxGeometry';\n    }\n    constructor() {\n        super(new Geometry());\n    }\n    afterDecode(dec, node, obj) {\n        // Convert points to the right form\n        // input: [ { x: 420, y: 60 }, ... ]\n        // output: [ Point { _x: 420, _y: 60 }, ... ]\n        //\n        // In mxGraph XML, the points are modeled as Object, so there is no way to create an alias to do the decoding with a custom Codec.\n        // Then, it is easier to convert the values to Point objects after the whole decoding of the geometry\n        // <Array as=\"points\">\n        //   <Object x=\"420\" y=\"60\"/>\n        // </Array>\n        const originalPoints = obj.points;\n        if (originalPoints) {\n            const points = [];\n            for (const pointInput of originalPoints) {\n                const rawPoint = pointInput;\n                points.push(new Point(rawPoint.x, rawPoint.y));\n            }\n            obj.points = points;\n        }\n        return obj;\n    }\n}\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n// The elements in this file are private and are not intended to be exported by the npm package\nimport CodecRegistry from './CodecRegistry';\nimport ObjectCodec from './ObjectCodec';\n/**\n * @private\n */\nexport const CodecRegistrationStates = {\n    base: false,\n    core: false,\n    editor: false,\n    model: false,\n};\n/**\n * @private\n */\nexport const registerBaseCodecs = (force = false) => {\n    if (!CodecRegistrationStates.base || force) {\n        CodecRegistry.register(new ObjectCodec({})); // Object\n        CodecRegistry.register(new ObjectCodec([])); // Array\n        CodecRegistrationStates.base = true;\n    }\n};\nexport const createObjectCodec = (template, name) => {\n    const objectCodec = new ObjectCodec(template);\n    objectCodec.setName(name);\n    return objectCodec;\n};\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CodecRegistry from './CodecRegistry';\nimport { CellCodec, ModelCodec, mxCellCodec, mxGeometryCodec, } from './codecs/_model-codecs';\nimport Geometry from '../view/geometry/Geometry';\nimport Point from '../view/geometry/Point';\nimport { CodecRegistrationStates, createObjectCodec, registerBaseCodecs, } from './register-shared';\n/**\n * Register model codecs i.e. codecs used to import/export the Graph Model, see {@link GraphDataModel}.\n *\n * @param force if `true` register the codecs even if they were already registered. If false, only register them\n *              if they have never been registered before.\n * @since 0.10.0\n * @category Configuration\n * @category Serialization with Codecs\n */\nexport const registerModelCodecs = (force = false) => {\n    if (!CodecRegistrationStates.model || force) {\n        CodecRegistry.register(new CellCodec());\n        CodecRegistry.register(new ModelCodec());\n        // To support decode/import executed before encode/export (see https://github.com/maxGraph/maxGraph/issues/178)\n        // Codecs are currently only registered automatically during encode/export\n        CodecRegistry.register(createObjectCodec(new Geometry(), 'Geometry'));\n        CodecRegistry.register(createObjectCodec(new Point(), 'Point'));\n        registerBaseCodecs(force);\n        // mxGraph support\n        CodecRegistry.addAlias('mxGraphModel', 'GraphDataModel');\n        CodecRegistry.addAlias('mxPoint', 'Point');\n        CodecRegistry.register(new mxCellCodec(), false);\n        CodecRegistry.register(new mxGeometryCodec(), false);\n        CodecRegistrationStates.model = true;\n    }\n};\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { registerModelCodecs } from './register-model-codecs';\nimport { getPrettyXml, getXml, parseXml } from '../util/xmlUtils';\nimport Codec from './Codec';\n/**\n * Convenient utility class using {@link Codec} to manage maxGraph model import and export.\n *\n * **WARN**: this is an experimental feature that is subject to change (class and method names).\n *\n * @alpha\n * @experimental\n * @since 0.6.0\n * @category Serialization with Codecs\n */\n// Include 'XML' in the class name as there were past discussions about supporting other format like JSON for example\n// See https://github.com/maxGraph/maxGraph/discussions/60 for more details.\nexport class ModelXmlSerializer {\n    constructor(dataModel) {\n        this.dataModel = dataModel;\n        this.registerCodecs();\n    }\n    import(input) {\n        const doc = typeof input === 'string' ? parseXml(input) : input.ownerDocument;\n        new Codec(doc).decode(doc.documentElement, this.dataModel);\n    }\n    export(options) {\n        const encodedNode = new Codec().encode(this.dataModel);\n        return (options?.pretty ?? true) ? getPrettyXml(encodedNode) : getXml(encodedNode);\n    }\n    /**\n     * Hook for replacing codecs registered by default (model codecs).\n     */\n    registerCodecs() {\n        registerModelCodecs();\n    }\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../view/geometry/Rectangle';\nimport EventObject from '../view/event/EventObject';\nimport EventSource from '../view/event/EventSource';\nimport { fit, getCurrentStyle } from '../util/styleUtils';\nimport InternalEvent from '../view/event/InternalEvent';\nimport Client from '../Client';\nimport { NODE_TYPE } from '../util/Constants';\nimport { write } from '../util/domUtils';\nimport { getClientX, getClientY } from '../util/EventUtils';\nlet activeWindow = null;\n/**\n * Basic window inside a document.\n *\n * Creating a simple window.\n * @example\n *\n * ```javascript\n * var tb = document.createElement('div');\n * var wnd = new MaxWindow('Title', tb, 100, 100, 200, 200, true, true);\n * wnd.setVisible(true);\n * ```\n *\n * Creating a window that contains an iframe.\n * @example\n *\n * ```javascript\n * var frame = document.createElement('iframe');\n * frame.setAttribute('width', '192px');\n * frame.setAttribute('height', '172px');\n * frame.setAttribute('src', 'http://www.example.com/');\n * frame.style.backgroundColor = 'white';\n *\n * var w = document.body.clientWidth;\n * var h = (document.body.clientHeight || document.documentElement.clientHeight);\n * var wnd = new MaxWindow('Title', frame, (w-200)/2, (h-200)/3, 200, 200);\n * wnd.setVisible(true);\n * ```\n *\n * To limit the movement of a window, eg. to keep it from being moved beyond\n * the top, left corner the following method can be overridden (recommended):\n *\n * ```javascript\n * wnd.setLocation(x, y)\n * {\n *   x = Math.max(0, x);\n *   y = Math.max(0, y);\n *   setLocation.apply(this, arguments);\n * };\n * ```\n *\n * Or the following event handler can be used:\n *\n * ```javascript\n * wnd.addListener(mxEvent.MOVE, function(e)\n * {\n *   wnd.setLocation(Math.max(0, wnd.getX()), Math.max(0, wnd.getY()));\n * });\n * ```\n *\n * To keep a window inside the current window:\n *\n * ```javascript\n * mxEvent.addListener(window, 'resize', mxUtils.bind(this, function()\n * {\n *   var iw = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n *   var ih = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n *\n *   var x = this.window.getX();\n *   var y = this.window.getY();\n *\n *   if (x + this.window.table.clientWidth > iw)\n *   {\n *     x = Math.max(0, iw - this.window.table.clientWidth);\n *   }\n *\n *   if (y + this.window.table.clientHeight > ih)\n *   {\n *     y = Math.max(0, ih - this.window.table.clientHeight);\n *   }\n *\n *   if (this.window.getX() != x || this.window.getY() != y)\n *   {\n *     this.window.setLocation(x, y);\n *   }\n * }));\n * ```\n *\n * ### Event: mxEvent.MOVE_START\n *\n * Fires before the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * ### Event: mxEvent.MOVE\n *\n * Fires while the window is being moved. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * ### Event: mxEvent.MOVE_END\n *\n * Fires after the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * ### Event: mxEvent.RESIZE_START\n *\n * Fires before the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * ### Event: mxEvent.RESIZE\n *\n * Fires while the window is being resized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * ### Event: mxEvent.RESIZE_END\n *\n * Fires after the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * ### Event: mxEvent.MAXIMIZE\n *\n * Fires after the window is maximized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * ### Event: mxEvent.MINIMIZE\n *\n * Fires after the window is minimized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * ### Event: mxEvent.NORMALIZE\n *\n * Fires after the window is normalized, that is, it returned from\n * maximized or minimized state. The <code>event</code> property contains the\n * corresponding mouse event.\n *\n * ### Event: mxEvent.ACTIVATE\n *\n * Fires after a window is activated. The <code>previousWindow</code> property\n * contains the previous window. The event sender is the active window.\n *\n * ### Event: mxEvent.SHOW\n *\n * Fires after the window is shown. This event has no properties.\n *\n * ### Event: mxEvent.HIDE\n *\n * Fires after the window is hidden. This event has no properties.\n *\n * ### Event: mxEvent.CLOSE\n *\n * Fires before the window is closed. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * ### Event: mxEvent.DESTROY\n *\n * Fires before the window is destroyed. This event has no properties.\n *\n * @category GUI\n */\nexport default class MaxWindow extends EventSource {\n    constructor(title, content, x, y, width = null, height = null, minimizable = true, movable = true, replaceNode = null, style) {\n        super();\n        /**\n         * URL of the image to be used for the close icon in the titlebar.\n         */\n        this.closeImage = `${Client.imageBasePath}/close.gif`;\n        /**\n         * URL of the image to be used for the minimize icon in the titlebar.\n         */\n        this.minimizeImage = `${Client.imageBasePath}/minimize.gif`;\n        /**\n         * URL of the image to be used for the normalize icon in the titlebar.\n         */\n        this.normalizeImage = `${Client.imageBasePath}/normalize.gif`;\n        /**\n         * URL of the image to be used for the maximize icon in the titlebar.\n         */\n        this.maximizeImage = `${Client.imageBasePath}/maximize.gif`;\n        /**\n         * URL of the image to be used for the resize icon.\n         */\n        this.resizeImage = `${Client.imageBasePath}/resize.gif`;\n        /**\n         * Boolean flag that represents the visible state of the window.\n         */\n        this.visible = false;\n        /**\n         * {@link Rectangle} that specifies the minimum width and height of the window.\n         * Default is (50, 40).\n         */\n        this.minimumSize = new Rectangle(0, 0, 50, 40);\n        /**\n         * Specifies if the window should be destroyed when it is closed. If this\n         * is false then the window is hidden using <setVisible>. Default is true.\n         */\n        this.destroyOnClose = true;\n        if (content != null) {\n            this.content = content;\n            this.init(x, y, width, height, style);\n            this.installMaximizeHandler();\n            this.installMinimizeHandler();\n            this.installCloseHandler();\n            this.setMinimizable(minimizable);\n            this.setTitle(title);\n            if (movable) {\n                this.installMoveHandler();\n            }\n            if (replaceNode != null && replaceNode.parentNode != null) {\n                replaceNode.parentNode.replaceChild(this.div, replaceNode);\n            }\n            else {\n                document.body.appendChild(this.div);\n            }\n        }\n    }\n    /**\n     * Initializes the DOM tree that represents the window.\n     */\n    init(x, y, width = null, height = null, style = 'mxWindow') {\n        this.div = document.createElement('div');\n        this.div.className = style;\n        this.div.style.left = `${x}px`;\n        this.div.style.top = `${y}px`;\n        this.table = document.createElement('table');\n        this.table.className = style;\n        // Disables built-in pan and zoom in IE10 and later\n        if (Client.IS_POINTER) {\n            this.div.style.touchAction = 'none';\n        }\n        // Workaround for table size problems in FF\n        if (width != null) {\n            this.div.style.width = `${width}px`;\n            this.table.style.width = `${width}px`;\n        }\n        if (height != null) {\n            this.div.style.height = `${height}px`;\n            this.table.style.height = `${height}px`;\n        }\n        // Creates title row\n        const tbody = document.createElement('tbody');\n        let tr = document.createElement('tr');\n        this.title = document.createElement('td');\n        this.title.className = `${style}Title`;\n        this.buttons = document.createElement('div');\n        this.buttons.style.position = 'absolute';\n        this.buttons.style.display = 'inline-block';\n        this.buttons.style.right = '4px';\n        this.buttons.style.top = '5px';\n        this.title.appendChild(this.buttons);\n        tr.appendChild(this.title);\n        tbody.appendChild(tr);\n        // Creates content row and table cell\n        tr = document.createElement('tr');\n        this.td = document.createElement('td');\n        this.td.className = `${style}Pane`;\n        this.contentWrapper = document.createElement('div');\n        this.contentWrapper.className = `${style}Pane`;\n        this.contentWrapper.style.width = '100%';\n        this.contentWrapper.appendChild(this.content);\n        // Workaround for div around div restricts height\n        // of inner div if outerdiv has hidden overflow\n        if (this.content.nodeName.toUpperCase() !== 'DIV') {\n            this.contentWrapper.style.height = '100%';\n        }\n        // Puts all content into the DOM\n        this.td.appendChild(this.contentWrapper);\n        tr.appendChild(this.td);\n        tbody.appendChild(tr);\n        this.table.appendChild(tbody);\n        this.div.appendChild(this.table);\n        // Puts the window on top of other windows when clicked\n        const activator = (evt) => {\n            this.activate();\n        };\n        InternalEvent.addGestureListeners(this.title, activator);\n        InternalEvent.addGestureListeners(this.table, activator);\n        this.hide();\n    }\n    /**\n     * Sets the window title to the given string. HTML markup inside the title\n     * will be escaped.\n     */\n    setTitle(title) {\n        // Removes all text content nodes (normally just one)\n        let child = this.title.firstChild;\n        while (child != null) {\n            const next = child.nextSibling;\n            if (child.nodeType === NODE_TYPE.TEXT) {\n                child.parentNode.removeChild(child);\n            }\n            child = next;\n        }\n        write(this.title, title || '');\n        this.title.appendChild(this.buttons);\n    }\n    /**\n     * Sets if the window contents should be scrollable.\n     */\n    setScrollable(scrollable) {\n        // Workaround for hang in Presto 2.5.22 (Opera 10.5)\n        if (navigator.userAgent == null || navigator.userAgent.indexOf('Presto/2.5') < 0) {\n            if (scrollable) {\n                this.contentWrapper.style.overflow = 'auto';\n            }\n            else {\n                this.contentWrapper.style.overflow = 'hidden';\n            }\n        }\n    }\n    /**\n     * Puts the window on top of all other windows.\n     */\n    activate() {\n        if (activeWindow !== this) {\n            const style = getCurrentStyle(this.getElement());\n            const index = style != null ? parseInt(style.zIndex) : 3;\n            if (activeWindow) {\n                const elt = activeWindow.getElement();\n                if (elt?.style) {\n                    elt.style.zIndex = String(index);\n                }\n            }\n            const previousWindow = activeWindow;\n            this.getElement().style.zIndex = String(index + 1);\n            // eslint-disable-next-line @typescript-eslint/no-this-alias -- we need to maintain the reference to the current window\n            activeWindow = this;\n            this.fireEvent(new EventObject(InternalEvent.ACTIVATE, { previousWindow }));\n        }\n    }\n    /**\n     * Returuns the outermost DOM node that makes up the window.\n     */\n    getElement() {\n        return this.div;\n    }\n    /**\n     * Makes sure the window is inside the client area of the window.\n     */\n    fit() {\n        fit(this.div);\n    }\n    /**\n     * Returns true if the window is resizable.\n     */\n    isResizable() {\n        if (this.resize != null) {\n            return this.resize.style.display !== 'none';\n        }\n        return false;\n    }\n    /**\n     * Sets if the window should be resizable. To avoid interference with some\n     * built-in features of IE10 and later, the use of the following code is\n     * recommended if there are resizable <MaxWindow>s in the page:\n     *\n     * ```javascript\n     * if (Client.IS_POINTER)\n     * {\n     *   document.body.style.msTouchAction = 'none';\n     * }\n     * ```\n     */\n    setResizable(resizable) {\n        if (resizable) {\n            if (this.resize == null) {\n                this.resize = document.createElement('img');\n                this.resize.style.position = 'absolute';\n                this.resize.style.bottom = '2px';\n                this.resize.style.right = '2px';\n                this.resize.setAttribute('src', this.resizeImage);\n                this.resize.style.cursor = 'nw-resize';\n                let startX = null;\n                let startY = null;\n                let width = null;\n                let height = null;\n                const start = (evt) => {\n                    // LATER: pointerdown starting on border of resize does start\n                    // the drag operation but does not fire consecutive events via\n                    // one of the listeners below (does pan instead).\n                    // Workaround: document.body.style.msTouchAction = 'none'\n                    this.activate();\n                    startX = getClientX(evt);\n                    startY = getClientY(evt);\n                    width = this.div.offsetWidth;\n                    height = this.div.offsetHeight;\n                    InternalEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n                    this.fireEvent(new EventObject(InternalEvent.RESIZE_START, { event: evt }));\n                    InternalEvent.consume(evt);\n                };\n                // Adds a temporary pair of listeners to intercept\n                // the gesture event in the document\n                const dragHandler = (evt) => {\n                    if (startX != null && startY != null) {\n                        const dx = getClientX(evt) - startX;\n                        const dy = getClientY(evt) - startY;\n                        if (width != null && height != null) {\n                            this.setSize(width + dx, height + dy);\n                        }\n                        this.fireEvent(new EventObject(InternalEvent.RESIZE, { event: evt }));\n                        InternalEvent.consume(evt);\n                    }\n                };\n                const dropHandler = (evt) => {\n                    if (startX != null && startY != null) {\n                        startX = null;\n                        startY = null;\n                        InternalEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n                        this.fireEvent(new EventObject(InternalEvent.RESIZE_END, { event: evt }));\n                        InternalEvent.consume(evt);\n                    }\n                };\n                InternalEvent.addGestureListeners(this.resize, start, dragHandler, dropHandler);\n                this.div.appendChild(this.resize);\n            }\n            else {\n                this.resize.style.display = 'inline';\n            }\n        }\n        else if (this.resize != null) {\n            this.resize.style.display = 'none';\n        }\n    }\n    /**\n     * Sets the size of the window.\n     */\n    setSize(width, height) {\n        width = Math.max(this.minimumSize.width, width);\n        height = Math.max(this.minimumSize.height, height);\n        // Workaround for table size problems in FF\n        this.div.style.width = `${width}px`;\n        this.div.style.height = `${height}px`;\n        this.table.style.width = `${width}px`;\n        this.table.style.height = `${height}px`;\n        this.contentWrapper.style.height = `${this.div.offsetHeight - this.title.offsetHeight}px`;\n    }\n    /**\n     * Sets if the window is minimizable.\n     */\n    setMinimizable(minimizable) {\n        this.minimize.style.display = minimizable ? '' : 'none';\n    }\n    /**\n     * Returns an {@link Rectangle} that specifies the size for the minimized window.\n     * A width or height of 0 means keep the existing width or height. This\n     * implementation returns the height of the window title and keeps the width.\n     */\n    getMinimumSize() {\n        return new Rectangle(0, 0, 0, this.title.offsetHeight);\n    }\n    /**\n     * Installs the event listeners required for minimizing the window.\n     */\n    installMinimizeHandler() {\n        this.minimize = document.createElement('img');\n        this.minimize.setAttribute('src', this.minimizeImage);\n        this.minimize.setAttribute('title', 'Minimize');\n        this.minimize.style.cursor = 'pointer';\n        this.minimize.style.marginLeft = '2px';\n        this.minimize.style.display = 'none';\n        this.buttons.appendChild(this.minimize);\n        let minimized = false;\n        let maxDisplay = null;\n        let height = null;\n        const funct = (evt) => {\n            this.activate();\n            if (!minimized) {\n                minimized = true;\n                this.minimize.setAttribute('src', this.normalizeImage);\n                this.minimize.setAttribute('title', 'Normalize');\n                this.contentWrapper.style.display = 'none';\n                maxDisplay = this.maximize.style.display;\n                this.maximize.style.display = 'none';\n                height = this.table.style.height;\n                const minSize = this.getMinimumSize();\n                if (minSize.height > 0) {\n                    this.div.style.height = `${minSize.height}px`;\n                    this.table.style.height = `${minSize.height}px`;\n                }\n                if (minSize.width > 0) {\n                    this.div.style.width = `${minSize.width}px`;\n                    this.table.style.width = `${minSize.width}px`;\n                }\n                if (this.resize != null) {\n                    this.resize.style.visibility = 'hidden';\n                }\n                this.fireEvent(new EventObject(InternalEvent.MINIMIZE, { event: evt }));\n            }\n            else {\n                minimized = false;\n                this.minimize.setAttribute('src', this.minimizeImage);\n                this.minimize.setAttribute('title', 'Minimize');\n                this.contentWrapper.style.display = ''; // default\n                if (maxDisplay != null && height != null) {\n                    this.maximize.style.display = maxDisplay;\n                    this.div.style.height = height;\n                    this.table.style.height = height;\n                }\n                if (this.resize != null) {\n                    this.resize.style.visibility = '';\n                }\n                this.fireEvent(new EventObject(InternalEvent.NORMALIZE, { event: evt }));\n            }\n            InternalEvent.consume(evt);\n        };\n        InternalEvent.addGestureListeners(this.minimize, funct);\n    }\n    /**\n     * Sets if the window is maximizable.\n     */\n    setMaximizable(maximizable) {\n        this.maximize.style.display = maximizable ? '' : 'none';\n    }\n    /**\n     * Installs the event listeners required for maximizing the window.\n     */\n    installMaximizeHandler() {\n        this.maximize = document.createElement('img');\n        this.maximize.setAttribute('src', this.maximizeImage);\n        this.maximize.setAttribute('title', 'Maximize');\n        this.maximize.style.cursor = 'default';\n        this.maximize.style.marginLeft = '2px';\n        this.maximize.style.cursor = 'pointer';\n        this.maximize.style.display = 'none';\n        this.buttons.appendChild(this.maximize);\n        let maximized = false;\n        let x = null;\n        let y = null;\n        let height = null;\n        let width = null;\n        let minDisplay = null;\n        const funct = (evt) => {\n            this.activate();\n            if (this.maximize.style.display !== 'none') {\n                if (!maximized) {\n                    maximized = true;\n                    this.maximize.setAttribute('src', this.normalizeImage);\n                    this.maximize.setAttribute('title', 'Normalize');\n                    this.contentWrapper.style.display = '';\n                    minDisplay = this.minimize.style.display;\n                    this.minimize.style.display = 'none';\n                    // Saves window state\n                    x = parseInt(this.div.style.left);\n                    y = parseInt(this.div.style.top);\n                    height = this.table.style.height;\n                    width = this.table.style.width;\n                    this.div.style.left = '0px';\n                    this.div.style.top = '0px';\n                    const docHeight = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight || 0);\n                    this.div.style.width = `${document.body.clientWidth - 2}px`;\n                    this.div.style.height = `${docHeight - 2}px`;\n                    this.table.style.width = `${document.body.clientWidth - 2}px`;\n                    this.table.style.height = `${docHeight - 2}px`;\n                    if (this.resize != null) {\n                        this.resize.style.visibility = 'hidden';\n                    }\n                    const style = getCurrentStyle(this.contentWrapper);\n                    if (style.overflow === 'auto' || this.resize != null) {\n                        this.contentWrapper.style.height = `${this.div.offsetHeight - this.title.offsetHeight}px`;\n                    }\n                    this.fireEvent(new EventObject(InternalEvent.MAXIMIZE, { event: evt }));\n                }\n                else {\n                    maximized = false;\n                    this.maximize.setAttribute('src', this.maximizeImage);\n                    this.maximize.setAttribute('title', 'Maximize');\n                    this.contentWrapper.style.display = '';\n                    if (minDisplay != null) {\n                        this.minimize.style.display = minDisplay;\n                    }\n                    // Restores window state\n                    this.div.style.left = `${x}px`;\n                    this.div.style.top = `${y}px`;\n                    if (width != null && height != null) {\n                        this.div.style.height = height;\n                        this.div.style.width = width;\n                    }\n                    const style = getCurrentStyle(this.contentWrapper);\n                    if (style.overflow === 'auto' || this.resize != null) {\n                        this.contentWrapper.style.height = `${this.div.offsetHeight - this.title.offsetHeight}px`;\n                    }\n                    if (width != null && height != null) {\n                        this.table.style.height = height;\n                        this.table.style.width = width;\n                    }\n                    if (this.resize != null) {\n                        this.resize.style.visibility = '';\n                    }\n                    this.fireEvent(new EventObject(InternalEvent.NORMALIZE, { event: evt }));\n                }\n                InternalEvent.consume(evt);\n            }\n        };\n        InternalEvent.addGestureListeners(this.maximize, funct);\n        InternalEvent.addListener(this.title, 'dblclick', funct);\n    }\n    /**\n     * Installs the event listeners required for moving the window.\n     */\n    installMoveHandler() {\n        this.title.style.cursor = 'move';\n        InternalEvent.addGestureListeners(this.title, (evt) => {\n            const startX = getClientX(evt);\n            const startY = getClientY(evt);\n            const x = this.getX();\n            const y = this.getY();\n            // Adds a temporary pair of listeners to intercept\n            // the gesture event in the document\n            const dragHandler = (evt) => {\n                const dx = getClientX(evt) - startX;\n                const dy = getClientY(evt) - startY;\n                this.setLocation(x + dx, y + dy);\n                this.fireEvent(new EventObject(InternalEvent.MOVE, { event: evt }));\n                InternalEvent.consume(evt);\n            };\n            const dropHandler = (evt) => {\n                InternalEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n                this.fireEvent(new EventObject(InternalEvent.MOVE_END, { event: evt }));\n                InternalEvent.consume(evt);\n            };\n            InternalEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n            this.fireEvent(new EventObject(InternalEvent.MOVE_START, { event: evt }));\n            InternalEvent.consume(evt);\n        });\n        // Disables built-in pan and zoom in IE10 and later\n        if (Client.IS_POINTER) {\n            this.title.style.touchAction = 'none';\n        }\n    }\n    /**\n     * Sets the upper, left corner of the window.\n     */\n    setLocation(x, y) {\n        this.div.style.left = `${x}px`;\n        this.div.style.top = `${y}px`;\n    }\n    /**\n     * Returns the current position on the x-axis.\n     */\n    getX() {\n        return parseInt(this.div.style.left);\n    }\n    /**\n     * Returns the current position on the y-axis.\n     */\n    getY() {\n        return parseInt(this.div.style.top);\n    }\n    /**\n     * Adds the <closeImage> as a new image node in <closeImg> and installs the\n     * <close> event.\n     */\n    installCloseHandler() {\n        this.closeImg = document.createElement('img');\n        this.closeImg.setAttribute('src', this.closeImage);\n        this.closeImg.setAttribute('title', 'Close');\n        this.closeImg.style.marginLeft = '2px';\n        this.closeImg.style.cursor = 'pointer';\n        this.closeImg.style.display = 'none';\n        this.buttons.appendChild(this.closeImg);\n        InternalEvent.addGestureListeners(this.closeImg, (evt) => {\n            this.fireEvent(new EventObject(InternalEvent.CLOSE, { event: evt }));\n            if (this.destroyOnClose) {\n                this.destroy();\n            }\n            else {\n                this.setVisible(false);\n            }\n            InternalEvent.consume(evt);\n        });\n    }\n    /**\n     * Sets the image associated with the window.\n     *\n     *\n     * @param image - URL of the image to be used.\n     */\n    setImage(image) {\n        this.image = document.createElement('img');\n        this.image.setAttribute('src', image);\n        this.image.setAttribute('align', 'left');\n        this.image.style.marginRight = '4px';\n        this.image.style.marginLeft = '0px';\n        this.image.style.marginTop = '-2px';\n        this.title.insertBefore(this.image, this.title.firstChild);\n    }\n    /**\n     * Sets the image associated with the window.\n     *\n     *\n     * @param closable - Boolean specifying if the window should be closable.\n     */\n    setClosable(closable) {\n        this.closeImg.style.display = closable ? '' : 'none';\n    }\n    /**\n     * Returns true if the window is visible.\n     */\n    isVisible() {\n        if (this.div != null) {\n            return this.div.style.display !== 'none';\n        }\n        return false;\n    }\n    /**\n     * Shows or hides the window depending on the given flag.\n     *\n     *\n     * @param visible - Boolean indicating if the window should be made visible.\n     */\n    setVisible(visible) {\n        if (this.div != null && this.isVisible() !== visible) {\n            if (visible) {\n                this.show();\n            }\n            else {\n                this.hide();\n            }\n        }\n    }\n    /**\n     * Shows the window.\n     */\n    show() {\n        this.div.style.display = '';\n        this.activate();\n        const style = getCurrentStyle(this.contentWrapper);\n        if ((style.overflow == 'auto' || this.resize != null) &&\n            this.contentWrapper.style.display != 'none') {\n            this.contentWrapper.style.height = `${this.div.offsetHeight - this.title.offsetHeight}px`;\n        }\n        this.fireEvent(new EventObject(InternalEvent.SHOW));\n    }\n    /**\n     * Hides the window.\n     */\n    hide() {\n        this.div.style.display = 'none';\n        this.fireEvent(new EventObject(InternalEvent.HIDE));\n    }\n    /**\n     * Destroys the window and removes all associated resources. Fires a\n     * <destroy> event prior to destroying the window.\n     */\n    destroy() {\n        this.fireEvent(new EventObject(InternalEvent.DESTROY));\n        if (this.div != null) {\n            InternalEvent.release(this.div);\n            // @ts-ignore\n            this.div.parentNode.removeChild(this.div);\n            // @ts-ignore\n            this.div = null;\n        }\n        // @ts-ignore\n        this.title = null;\n        // @ts-ignore\n        this.content = null;\n        // @ts-ignore\n        this.contentWrapper = null;\n    }\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Client from '../Client';\nimport InternalEvent from '../view/event/InternalEvent';\nimport { write, writeln } from '../util/domUtils';\nimport { translate } from '../internal/i18n-utils';\n/**\n * A simple class for creating HTML forms.\n *\n * @category GUI\n */\nclass MaxForm {\n    constructor(className) {\n        this.table = document.createElement('table');\n        this.table.className = className;\n        this.body = document.createElement('tbody');\n        this.table.appendChild(this.body);\n    }\n    /**\n     * Returns the table that contains this form.\n     */\n    getTable() {\n        return this.table;\n    }\n    /**\n     * Helper method to add an OK and Cancel button using the respective\n     * functions.\n     */\n    addButtons(okFunct, cancelFunct) {\n        const tr = document.createElement('tr');\n        let td = document.createElement('td');\n        tr.appendChild(td);\n        td = document.createElement('td');\n        // Adds the ok button\n        let button = document.createElement('button');\n        write(button, translate('ok') || 'OK');\n        td.appendChild(button);\n        InternalEvent.addListener(button, 'click', () => {\n            okFunct();\n        });\n        // Adds the cancel button\n        button = document.createElement('button');\n        write(button, translate('cancel') || 'Cancel');\n        td.appendChild(button);\n        InternalEvent.addListener(button, 'click', () => {\n            cancelFunct();\n        });\n        tr.appendChild(td);\n        this.body.appendChild(tr);\n    }\n    /**\n     * Adds an input for the given name, type and value and returns it.\n     */\n    addText(name, value, type = 'text') {\n        const input = document.createElement('input');\n        input.setAttribute('type', type);\n        input.value = value;\n        return this.addField(name, input);\n    }\n    /**\n     * Adds a checkbox for the given name and value and returns the textfield.\n     */\n    addCheckbox(name, value) {\n        const input = document.createElement('input');\n        input.setAttribute('type', 'checkbox');\n        this.addField(name, input);\n        // IE can only change the checked value if the input is inside the DOM\n        if (value) {\n            input.checked = true;\n        }\n        return input;\n    }\n    /**\n     * Adds a textarea for the given name and value and returns the textarea.\n     */\n    addTextarea(name, value, rows) {\n        const input = document.createElement('textarea');\n        if (Client.IS_NS) {\n            rows--;\n        }\n        input.setAttribute('rows', String(rows || 2));\n        input.value = value;\n        return this.addField(name, input);\n    }\n    /**\n     * Adds a combo for the given name and returns the combo.\n     */\n    addCombo(name, isMultiSelect, size) {\n        const select = document.createElement('select');\n        if (size != null) {\n            select.setAttribute('size', String(size));\n        }\n        if (isMultiSelect) {\n            select.setAttribute('multiple', 'true');\n        }\n        return this.addField(name, select);\n    }\n    /**\n     * Adds an option for the given label to the specified combo.\n     */\n    addOption(combo, label, value, isSelected) {\n        const option = document.createElement('option');\n        writeln(option, label);\n        option.setAttribute('value', value);\n        if (isSelected) {\n            option.setAttribute('selected', String(isSelected));\n        }\n        combo.appendChild(option);\n    }\n    /**\n     * Adds a new row with the name and the input field in two columns and\n     * returns the given input.\n     */\n    addField(name, input) {\n        const tr = document.createElement('tr');\n        let td = document.createElement('td');\n        write(td, name);\n        tr.appendChild(td);\n        td = document.createElement('td');\n        td.appendChild(input);\n        tr.appendChild(td);\n        this.body.appendChild(tr);\n        return input;\n    }\n}\nexport default MaxForm;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { getTopmostCells } from './cellArrayUtils';\n/**\n * @class\n *\n * Singleton that implements a clipboard for graph cells.\n *\n * To copy the selection cells from the graph to the clipboard and paste them into graph2, do the following:\n * ```javascript\n * Clipboard.copy(graph);\n * Clipboard.paste(graph2);\n * ```\n *\n * For fine-grained control of the clipboard data the {@link AbstractGraph.canExportCell} and {@link AbstractGraph.canImportCell} functions can be overridden.\n *\n * To restore previous parents for pasted cells, the implementation for {@link copy} and {@link paste} can be changed as follows.\n *\n * ```typescript\n * Clipboard.copy = function(graph: Graph, cells: Cell[]): void {\n *   cells = cells ?? graph.getSelectionCells();\n *   const result = graph.getExportableCells(cells);\n *\n *   Clipboard.parents = new Object();\n *   for (let i = 0; i < result.length; i++) {\n *     Clipboard.parents[i] = graph.model.getParent(cells[i]);\n *   }\n *\n *   Clipboard.insertCount = 1;\n *   Clipboard.setCells(graph.cloneCells(result));\n *\n *   return result;\n * };\n *\n * Clipboard.paste = function(graph: Graph): void {\n *   if (Clipboard.isEmpty()) {\n *     return;\n *   }\n *   const cells = graph.getImportableCells(Clipboard.getCells());\n *   const delta = Clipboard.insertCount * Clipboard.STEPSIZE;\n *   const parent = graph.getDefaultParent();\n *\n *   graph.model.beginUpdate();\n *   try {\n *     for (let i = 0; i < cells.length; i++) {\n *       const tmp = (Clipboard.parents && graph.model.contains(Clipboard.parents[i])) ?\n *            Clipboard.parents[i] : parent;\n *       cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n *     }\n *   }\n *   finally {\n *     graph.model.endUpdate();\n *   }\n *\n *   // Increments the counter and selects the inserted cells\n *   Clipboard.insertCount++;\n *   graph.setSelectionCells(cells);\n * };\n * ```\n */\nclass Clipboard {\n    /**\n     * Sets the cells in the clipboard. Fires a {@link InternalEvent.CHANGE} event.\n     */\n    static setCells(cells) {\n        Clipboard.cells = cells;\n    }\n    /**\n     * Returns the cells in the clipboard.\n     */\n    static getCells() {\n        return Clipboard.cells;\n    }\n    /**\n     * Returns `true` if the clipboard currently has no data stored.\n     */\n    static isEmpty() {\n        return !Clipboard.getCells();\n    }\n    /**\n     * Cuts the given array of {@link Cell} from the specified graph.\n     * If {@link cells} is `null` then the selection cells of the graph will be used.\n     *\n     * @param graph - {@link AbstractGraph} that contains the cells to be cut.\n     * @param cells - Optional array of {@link Cell} to be cut.\n     * @returns Returns the cells that have been cut from the graph.\n     */\n    static cut(graph, cells = []) {\n        cells = Clipboard.copy(graph, cells);\n        Clipboard.insertCount = 0;\n        Clipboard.removeCells(graph, cells);\n        return cells;\n    }\n    /**\n     * Hook to remove the given cells from the given graph after a cut operation.\n     *\n     * @param graph - {@link AbstractGraph} that contains the cells to be cut.\n     * @param cells - Array of {@link Cell} to be cut.\n     */\n    static removeCells(graph, cells) {\n        graph.removeCells(cells);\n    }\n    /**\n     * Copies the given array of {@link Cell} from the specified graph to {@link cells}.\n     * Returns the original array of cells that has been cloned.\n     * Descendants of cells in the array are ignored.\n     *\n     * @param graph - {@link AbstractGraph} that contains the cells to be copied.\n     * @param cells - Optional array of {@link Cell} to be copied.\n     */\n    static copy(graph, cells) {\n        cells = cells || graph.getSelectionCells();\n        const result = getTopmostCells(graph.getExportableCells(cells));\n        Clipboard.insertCount = 1;\n        Clipboard.setCells(graph.cloneCells(result));\n        return result;\n    }\n    /**\n     * Pastes the {@link Cell}s into the specified graph associating them to the default parent.\n     * The cells are added to the graph using {@link AbstractGraph.importCells} and returned.\n     *\n     * @param graph - {@link AbstractGraph} to paste the {@link Cell}s into.\n     */\n    static paste(graph) {\n        let cells = null;\n        if (!Clipboard.isEmpty() && Clipboard.getCells()) {\n            cells = graph.getImportableCells(Clipboard.getCells());\n            const delta = Clipboard.insertCount * Clipboard.STEPSIZE;\n            const parent = graph.getDefaultParent();\n            cells = graph.importCells(cells, delta, delta, parent);\n            // Increments the counter and selects the inserted cells\n            Clipboard.insertCount++;\n            graph.setSelectionCells(cells);\n        }\n        return cells;\n    }\n}\n/**\n * Defines the step size to offset the cells after each paste operation.\n * @default 10\n */\nClipboard.STEPSIZE = 10;\n/**\n * Counts the number of times the clipboard data has been inserted.\n */\nClipboard.insertCount = 1;\nexport default Clipboard;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { htmlEntities } from '../util/StringUtils';\nimport Client from '../Client';\nimport { br, write } from '../util/domUtils';\nimport { translate } from '../internal/i18n-utils';\nimport InternalEvent from '../view/event/InternalEvent';\nimport MaxWindow from './MaxWindow';\n/**\n * Shows the specified text content in a new {@link MaxWindow} or a new browser window if `isInternalWindow` is `false`.\n *\n * @param content String that specifies the text to be displayed.\n * @param isInternalWindow Optional boolean indicating if an {@link MaxWindow} should be used instead of a new browser window. Default is `false`.\n */\nexport const popup = (content, isInternalWindow = false) => {\n    if (isInternalWindow) {\n        const div = document.createElement('div');\n        div.style.overflow = 'scroll';\n        div.style.width = '636px';\n        div.style.height = '460px';\n        const pre = document.createElement('pre');\n        pre.innerHTML = htmlEntities(content, false)\n            .replace(/\\n/g, '<br>')\n            .replace(/ /g, '&nbsp;');\n        div.appendChild(pre);\n        const w = document.body.clientWidth;\n        const h = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight);\n        const wnd = new MaxWindow('Popup Window', div, w / 2 - 320, h / 2 - 240, 640, 480, false, true);\n        wnd.setClosable(true);\n        wnd.setVisible(true);\n    }\n    else {\n        // Wraps up the XML content in a textarea\n        if (Client.IS_NS) {\n            const wnd = window.open();\n            if (!wnd) {\n                throw new Error('Permission not granted to open popup window');\n            }\n            wnd.document.writeln(`<pre>${htmlEntities(content)}</pre>`);\n            wnd.document.close();\n        }\n        else {\n            const wnd = window.open();\n            if (!wnd) {\n                throw new Error('Permission not granted to open popup window');\n            }\n            const pre = wnd.document.createElement('pre');\n            pre.innerHTML = htmlEntities(content, false)\n                .replace(/\\n/g, '<br>')\n                .replace(/ /g, '&nbsp;');\n            wnd.document.body.appendChild(pre);\n        }\n    }\n};\n/**\n * Displays the given error message in a new <MaxWindow> of the given width.\n * If close is true then an additional close button is added to the window.\n * The optional icon specifies the icon to be used for the window. Default is {@link GuiConfig.errorImage}.\n *\n * @param message String specifying the message to be displayed.\n * @param width Integer specifying the width of the window.\n * @param close Optional boolean indicating whether to add a close button.\n * @param icon Optional icon for the window decoration.\n */\nexport const error = (message, width, close, icon = null) => {\n    const div = document.createElement('div');\n    div.style.padding = '20px';\n    const img = document.createElement('img');\n    img.setAttribute('src', icon || GuiConfig.errorImage);\n    img.setAttribute('valign', 'bottom');\n    img.style.verticalAlign = 'middle';\n    div.appendChild(img);\n    div.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n    div.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n    div.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n    write(div, message);\n    const w = document.body.clientWidth;\n    const h = document.body.clientHeight || document.documentElement.clientHeight;\n    const warn = new MaxWindow(translate(GuiConfig.errorResource) || GuiConfig.errorResource, div, (w - width) / 2, h / 4, width, null, false, true);\n    if (close) {\n        br(div);\n        const tmp = document.createElement('p');\n        const button = document.createElement('button');\n        button.setAttribute('style', 'float:right');\n        InternalEvent.addListener(button, 'click', (evt) => {\n            warn.destroy();\n        });\n        write(button, translate(GuiConfig.closeResource) || GuiConfig.closeResource);\n        tmp.appendChild(button);\n        div.appendChild(tmp);\n        br(div);\n        warn.setClosable(true);\n    }\n    warn.setVisible(true);\n    return warn;\n};\n/**\n * A global configuration for maxGraph GUI.\n */\nexport const GuiConfig = {\n    /*\n     * Specifies the resource key for the title of the error window. If the\n     * resource for this key does not exist then the value is used as\n     * the title. Default is 'error'.\n     */\n    errorResource: 'error',\n    /**\n     * Specifies the resource key for the label of the close button. If the\n     * resource for this key does not exist then the value is used as\n     * the label. Default is 'close'.\n     */\n    closeResource: 'close',\n    /**\n     * Defines the image used for error dialogs.\n     */\n    errorImage: `${Client.imageBasePath}/error.gif`,\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Client from '../Client';\nimport InternalEvent from '../view/event/InternalEvent';\nimport { getInnerHtml, write } from '../util/domUtils';\nimport { toString } from '../util/StringUtils';\nimport MaxWindow from './MaxWindow';\nimport { getElapseMillisecondsMessage } from '../internal/time-utils';\nimport { VERSION } from '../util/Constants';\nimport { GlobalConfig } from '../util/config';\nimport { popup } from './guiUtils';\nconst copyTextToClipboard = (text) => {\n    navigator.clipboard.writeText(text).then(function () {\n        GlobalConfig.logger.info('Async: Copying to clipboard was successful!');\n    }, function (err) {\n        GlobalConfig.logger.error('Async: Could not copy text: ', err);\n    });\n};\n/**\n * A singleton class that implements a simple console.\n *\n * @category GUI\n * @category Logging\n */\nclass MaxLog {\n    /**\n     * Initializes the DOM node for the console.\n     * This requires `document.body` to point to a non-null value.\n     * This is called from within setVisible if the log has not yet been initialized.\n     */\n    static init() {\n        if (MaxLog.window == null && document.body != null) {\n            const title = `${MaxLog.consoleName} - mxGraph ${VERSION}`;\n            // Creates a table that maintains the layout\n            const table = document.createElement('table');\n            table.setAttribute('width', '100%');\n            table.setAttribute('height', '100%');\n            const tbody = document.createElement('tbody');\n            let tr = document.createElement('tr');\n            const td = document.createElement('td');\n            td.style.verticalAlign = 'top';\n            // Adds the actual console as a textarea\n            MaxLog.textarea = document.createElement('textarea');\n            MaxLog.textarea.setAttribute('wrap', 'off');\n            MaxLog.textarea.setAttribute('readOnly', 'true');\n            MaxLog.textarea.style.height = '100%';\n            MaxLog.textarea.style.resize = 'none';\n            MaxLog.textarea.value = MaxLog.buffer;\n            // Workaround for wrong width in standards mode\n            if (Client.IS_NS && document.compatMode !== 'BackCompat') {\n                MaxLog.textarea.style.width = '99%';\n            }\n            else {\n                MaxLog.textarea.style.width = '100%';\n            }\n            td.appendChild(MaxLog.textarea);\n            tr.appendChild(td);\n            tbody.appendChild(tr);\n            // Creates the container div\n            tr = document.createElement('tr');\n            MaxLog.td = document.createElement('td');\n            MaxLog.td.style.verticalAlign = 'top';\n            MaxLog.td.setAttribute('height', '30px');\n            tr.appendChild(MaxLog.td);\n            tbody.appendChild(tr);\n            table.appendChild(tbody);\n            // Adds various debugging buttons\n            MaxLog.addButton('Info', function (evt) {\n                MaxLog.info();\n            });\n            MaxLog.addButton('DOM', function (evt) {\n                const content = getInnerHtml(document.body);\n                MaxLog.debug(content);\n            });\n            MaxLog.addButton('Trace', function (evt) {\n                MaxLog.TRACE = !MaxLog.TRACE;\n                if (MaxLog.TRACE) {\n                    MaxLog.debug('Tracing enabled');\n                }\n                else {\n                    MaxLog.debug('Tracing disabled');\n                }\n            });\n            MaxLog.addButton('Copy', function (evt) {\n                try {\n                    copyTextToClipboard(MaxLog.textarea.value);\n                }\n                catch (err) {\n                    alert(err);\n                }\n            });\n            MaxLog.addButton('Show', function (evt) {\n                try {\n                    popup(MaxLog.textarea.value);\n                }\n                catch (err) {\n                    alert(err);\n                }\n            });\n            MaxLog.addButton('Clear', function (evt) {\n                MaxLog.textarea.value = '';\n            });\n            // Cross-browser code to get window size\n            let h = 0;\n            let w = 0;\n            if (typeof window.innerWidth === 'number') {\n                h = window.innerHeight;\n                w = window.innerWidth;\n            }\n            else {\n                h = document.documentElement.clientHeight || document.body.clientHeight;\n                w = document.body.clientWidth;\n            }\n            MaxLog.window = new MaxWindow(title, table, Math.max(0, w - 320), Math.max(0, h - 210), 300, 160);\n            MaxLog.window.setMaximizable(true);\n            MaxLog.window.setScrollable(false);\n            MaxLog.window.setResizable(true);\n            MaxLog.window.setClosable(true);\n            MaxLog.window.destroyOnClose = false;\n            // Workaround for ignored textarea height in various setups\n            if (Client.IS_NS &&\n                !Client.IS_GC &&\n                !Client.IS_SF &&\n                document.compatMode !== 'BackCompat') {\n                const elt = MaxLog.window.getElement();\n                const resizeHandler = (sender, evt) => {\n                    MaxLog.textarea.style.height = `${Math.max(0, elt.offsetHeight - 70)}px`;\n                };\n                MaxLog.window.addListener(InternalEvent.RESIZE_END, resizeHandler);\n                MaxLog.window.addListener(InternalEvent.MAXIMIZE, resizeHandler);\n                MaxLog.window.addListener(InternalEvent.NORMALIZE, resizeHandler);\n                MaxLog.textarea.style.height = '92px';\n            }\n        }\n    }\n    /**\n     * Writes the current navigator information to the console.\n     */\n    static info() {\n        MaxLog.writeln(toString(navigator));\n    }\n    /**\n     * Adds a button to the console using the given label and function.\n     */\n    static addButton(lab, funct) {\n        const button = document.createElement('button');\n        write(button, lab);\n        InternalEvent.addListener(button, 'click', funct);\n        MaxLog.td.appendChild(button);\n    }\n    /**\n     * Returns `true` if the console is visible.\n     */\n    static isVisible() {\n        if (MaxLog.window != null) {\n            return MaxLog.window.isVisible();\n        }\n        return false;\n    }\n    /**\n     * Shows the console.\n     */\n    static show() {\n        MaxLog.setVisible(true);\n    }\n    /**\n     * Shows or hides the console.\n     */\n    static setVisible(visible) {\n        if (MaxLog.window == null) {\n            MaxLog.init();\n        }\n        if (MaxLog.window != null) {\n            MaxLog.window.setVisible(visible);\n        }\n    }\n    /**\n     * Writes the specified string to the console if {@link TRACE} is `true` and returns the current time in milliseconds.\n     */\n    static enter(string) {\n        if (MaxLog.TRACE) {\n            MaxLog.writeln(`Entering ${string}`);\n            return new Date().getTime();\n        }\n    }\n    /**\n     * Writes the specified string to the console if {@link TRACE} is `true` and computes the difference between the current\n     * time and t0 in milliseconds.\n     *\n     * @see {@link enter} for an example.\n     */\n    static leave(string, t0) {\n        if (MaxLog.TRACE) {\n            const dt = getElapseMillisecondsMessage(t0);\n            MaxLog.writeln(`Leaving ${string}${dt}`);\n        }\n    }\n    /**\n     * Adds all arguments to the console if {@link DEBUG} is enabled.\n     */\n    static debug(...args) {\n        if (MaxLog.DEBUG) {\n            MaxLog.writeln(...args);\n        }\n    }\n    /**\n     * Adds all arguments to the console if {@link TRACE} is enabled.\n     */\n    static trace(...args) {\n        if (MaxLog.TRACE) {\n            MaxLog.writeln(...args);\n        }\n    }\n    /**\n     * Adds all arguments to the console if {@link WARN} is enabled.\n     */\n    static warn(...args) {\n        if (MaxLog.WARN) {\n            MaxLog.writeln(...args);\n        }\n    }\n    /**\n     * Adds the specified strings to the console.\n     */\n    static write(...args) {\n        let string = '';\n        for (let i = 0; i < args.length; i += 1) {\n            string += args[i];\n            if (i < args.length - 1) {\n                string += ' ';\n            }\n        }\n        if (MaxLog.textarea != null) {\n            MaxLog.textarea.value = MaxLog.textarea.value + string;\n            // Workaround for no update in Presto 2.5.22 (Opera 10.5)\n            if (navigator.userAgent != null && navigator.userAgent.indexOf('Presto/2.5') >= 0) {\n                MaxLog.textarea.style.visibility = 'hidden';\n                MaxLog.textarea.style.visibility = 'visible';\n            }\n            MaxLog.textarea.scrollTop = MaxLog.textarea.scrollHeight;\n        }\n        else {\n            MaxLog.buffer += string;\n        }\n    }\n    /**\n     * Adds the specified strings to the console, appending a linefeed at the end of each string.\n     */\n    static writeln(...args) {\n        let string = '';\n        for (let i = 0; i < args.length; i += 1) {\n            string += args[i];\n            if (i < args.length - 1) {\n                string += ' ';\n            }\n        }\n        MaxLog.write(`${string}\\n`);\n    }\n}\nMaxLog.textarea = null;\n/**\n * Specifies the name of the console window.\n * @default 'Console'\n */\nMaxLog.consoleName = 'Console';\n/**\n * Specified if the output for {@link enter} and {@link leave} should be visible in the console.\n * @default false\n */\nMaxLog.TRACE = false;\n/**\n * Specifies if the output for {@link debug} should be visible in the console.\n * @default true\n */\nMaxLog.DEBUG = true;\n/**\n * Specifies if the output for {@link warn} should be visible in the console.\n * @default true\n */\nMaxLog.WARN = true;\n/**\n * Buffer for pre-initialized content.\n */\nMaxLog.buffer = '';\nexport default MaxLog;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Client from '../Client';\nimport { PAGE_FORMAT_A4_PORTRAIT } from './Constants';\nimport Rectangle from '../view/geometry/Rectangle';\nimport { getOuterHtml } from './domUtils';\nimport { removeCursors } from './styleUtils';\n/**\n * Returns the scale to be used for printing the graph with the given\n * bounds across the specifies number of pages with the given format. The\n * scale is always computed such that it given the given amount or fewer\n * pages in the print output. See {@link PrintPreview} for an example.\n *\n * @param pageCount Specifies the number of pages in the print output.\n * @param graph {@link AbstractGraph} that should be printed.\n * @param pageFormat Optional {@link Rectangle} that specifies the page format.\n * Default is <mxConstants.PAGE_FORMAT_A4_PORTRAIT>.\n * @param border The border along each side of every page.\n */\nexport const getScaleForPageCount = (pageCount, graph, pageFormat, border = 0) => {\n    if (pageCount < 1) {\n        // We can't work with less than 1 page, return no scale\n        // change\n        return 1;\n    }\n    pageFormat =\n        pageFormat != null ? pageFormat : new Rectangle(...PAGE_FORMAT_A4_PORTRAIT);\n    const availablePageWidth = pageFormat.width - border * 2;\n    const availablePageHeight = pageFormat.height - border * 2;\n    // Work out the number of pages required if the\n    // graph is not scaled.\n    const graphBounds = graph.getGraphBounds().clone();\n    const sc = graph.getView().getScale();\n    graphBounds.width /= sc;\n    graphBounds.height /= sc;\n    const graphWidth = graphBounds.width;\n    const graphHeight = graphBounds.height;\n    let scale = 1;\n    // The ratio of the width/height for each printer page\n    const pageFormatAspectRatio = availablePageWidth / availablePageHeight;\n    // The ratio of the width/height for the graph to be printer\n    const graphAspectRatio = graphWidth / graphHeight;\n    // The ratio of horizontal pages / vertical pages for this\n    // graph to maintain its aspect ratio on this page format\n    const pagesAspectRatio = graphAspectRatio / pageFormatAspectRatio;\n    // Factor the square root of the page count up and down\n    // by the pages aspect ratio to obtain a horizontal and\n    // vertical page count that adds up to the page count\n    // and has the correct aspect ratio\n    const pageRoot = Math.sqrt(pageCount);\n    const pagesAspectRatioSqrt = Math.sqrt(pagesAspectRatio);\n    let numRowPages = pageRoot * pagesAspectRatioSqrt;\n    let numColumnPages = pageRoot / pagesAspectRatioSqrt;\n    // These value are rarely more than 2 rounding downs away from\n    // a total that meets the page count. In cases of one being less\n    // than 1 page, the other value can be too high and take more iterations\n    // In this case, just change that value to be the page count, since\n    // we know the other value is 1\n    if (numRowPages < 1 && numColumnPages > pageCount) {\n        const scaleChange = numColumnPages / pageCount;\n        numColumnPages = pageCount;\n        numRowPages /= scaleChange;\n    }\n    if (numColumnPages < 1 && numRowPages > pageCount) {\n        const scaleChange = numRowPages / pageCount;\n        numRowPages = pageCount;\n        numColumnPages /= scaleChange;\n    }\n    let currentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n    let numLoops = 0;\n    // Iterate through while the rounded up number of pages comes to\n    // a total greater than the required number\n    while (currentTotalPages > pageCount) {\n        // Round down the page count (rows or columns) that is\n        // closest to its next integer down in percentage terms.\n        // i.e. Reduce the page total by reducing the total\n        // page area by the least possible amount\n        let roundRowDownProportion = Math.floor(numRowPages) / numRowPages;\n        let roundColumnDownProportion = Math.floor(numColumnPages) / numColumnPages;\n        // If the round down proportion is, work out the proportion to\n        // round down to 1 page less\n        if (roundRowDownProportion == 1) {\n            roundRowDownProportion = Math.floor(numRowPages - 1) / numRowPages;\n        }\n        if (roundColumnDownProportion == 1) {\n            roundColumnDownProportion = Math.floor(numColumnPages - 1) / numColumnPages;\n        }\n        // Check which rounding down is smaller, but in the case of very small roundings\n        // try the other dimension instead\n        let scaleChange = 1;\n        // Use the higher of the two values\n        if (roundRowDownProportion > roundColumnDownProportion) {\n            scaleChange = roundRowDownProportion;\n        }\n        else {\n            scaleChange = roundColumnDownProportion;\n        }\n        numRowPages *= scaleChange;\n        numColumnPages *= scaleChange;\n        currentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n        numLoops++;\n        if (numLoops > 10) {\n            break;\n        }\n    }\n    // Work out the scale from the number of row pages required\n    // The column pages will give the same value\n    const posterWidth = availablePageWidth * numRowPages;\n    scale = posterWidth / graphWidth;\n    // Allow for rounding errors\n    return scale * 0.99999;\n};\n/**\n * Copies the styles and the markup from the graph's container into the\n * given document and removes all cursor styles. The document is returned.\n *\n * This function should be called from within the document with the graph.\n * If you experience problems with missing stylesheets in IE then try adding\n * the domain to the trusted sites.\n *\n * @param graph {@link AbstractGraph} to be copied.\n * @param doc Document where the new graph is created.\n * @param x0 X-coordinate of the graph view origin. Default is 0.\n * @param y0 Y-coordinate of the graph view origin. Default is 0.\n * @param w Optional width of the graph view.\n * @param h Optional height of the graph view.\n */\nexport const show = (graph, doc = null, x0 = 0, y0 = 0, w = null, h = null) => {\n    x0 = x0 != null ? x0 : 0;\n    y0 = y0 != null ? y0 : 0;\n    if (doc == null) {\n        const wnd = window.open();\n        doc = wnd.document;\n    }\n    else {\n        doc.open();\n    }\n    const bounds = graph.getGraphBounds();\n    const dx = Math.ceil(x0 - bounds.x);\n    const dy = Math.ceil(y0 - bounds.y);\n    if (w == null) {\n        w = Math.ceil(bounds.width + x0) + Math.ceil(Math.ceil(bounds.x) - bounds.x);\n    }\n    if (h == null) {\n        h = Math.ceil(bounds.height + y0) + Math.ceil(Math.ceil(bounds.y) - bounds.y);\n    }\n    doc.writeln('<html><head>');\n    const base = document.getElementsByTagName('base');\n    for (let i = 0; i < base.length; i += 1) {\n        doc.writeln(getOuterHtml(base[i]));\n    }\n    const links = document.getElementsByTagName('link');\n    for (let i = 0; i < links.length; i += 1) {\n        doc.writeln(getOuterHtml(links[i]));\n    }\n    const styles = document.getElementsByTagName('style');\n    for (let i = 0; i < styles.length; i += 1) {\n        doc.writeln(getOuterHtml(styles[i]));\n    }\n    doc.writeln('</head><body style=\"margin:0px;\"></body></html>');\n    doc.close();\n    const outer = doc.createElement('div');\n    outer.style.position = 'absolute';\n    outer.style.overflow = 'hidden';\n    outer.style.width = `${w}px`;\n    outer.style.height = `${h}px`;\n    // Required for HTML labels if foreignObjects are disabled\n    const div = doc.createElement('div');\n    div.style.position = 'absolute';\n    div.style.left = `${dx}px`;\n    div.style.top = `${dy}px`;\n    if (graph.container && graph.view.drawPane) {\n        let node = graph.container.firstChild;\n        let svg = null;\n        while (node != null) {\n            const clone = node.cloneNode(true);\n            if (node == graph.view.drawPane.ownerSVGElement) {\n                outer.appendChild(clone);\n                svg = clone;\n            }\n            else {\n                div.appendChild(clone);\n            }\n            node = node.nextSibling;\n        }\n        doc.body.appendChild(outer);\n        if (div.firstChild != null) {\n            doc.body.appendChild(div);\n        }\n        if (svg != null) {\n            svg.style.minWidth = '';\n            svg.style.minHeight = '';\n            if (svg.firstChild)\n                svg.firstChild.setAttribute('transform', `translate(${dx},${dy})`);\n        }\n        removeCursors(doc.body);\n    }\n    return doc;\n};\n/**\n * Prints the specified graph using a new window and the built-in print\n * dialog.\n *\n * This function should be called from within the document with the graph.\n *\n * @param graph {@link AbstractGraph} to be printed.\n */\nexport const printScreen = (graph) => {\n    const wnd = window.open();\n    if (!wnd)\n        return;\n    const bounds = graph.getGraphBounds();\n    show(graph, wnd.document);\n    const print = () => {\n        wnd.focus();\n        wnd.print();\n        wnd.close();\n    };\n    // Workaround for Google Chrome which needs a bit of a\n    // delay in order to render the SVG contents\n    if (Client.IS_GC) {\n        wnd.setTimeout(print, 500);\n    }\n    else {\n        print();\n    }\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2019, JGraph Ltd\nCopyright (c) 2006-2019, draw.io AG\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EditorPopupMenu from './EditorPopupMenu';\nimport UndoManager from '../view/undoable_changes/UndoManager';\nimport EditorKeyHandler from './EditorKeyHandler';\nimport EventSource from '../view/event/EventSource';\nimport Client from '../Client';\nimport CompactTreeLayout from '../view/layout/CompactTreeLayout';\nimport { EditorToolbar } from './EditorToolbar';\nimport StackLayout from '../view/layout/StackLayout';\nimport EventObject from '../view/event/EventObject';\nimport { getOffset } from '../util/styleUtils';\nimport Codec from '../serialization/Codec';\nimport { ModelXmlSerializer } from '../serialization/ModelXmlSerializer';\nimport MaxWindow from '../gui/MaxWindow';\nimport MaxForm from '../gui/MaxForm';\nimport Outline from '../view/other/Outline';\nimport Cell from '../view/cell/Cell';\nimport Geometry from '../view/geometry/Geometry';\nimport { FONT_STYLE_MASK } from '../util/Constants';\nimport { Graph } from '../view/Graph';\nimport SwimlaneManager from '../view/layout/SwimlaneManager';\nimport LayoutManager from '../view/layout/LayoutManager';\nimport RootChange from '../view/undoable_changes/RootChange';\nimport ValueChange from '../view/undoable_changes/ValueChange';\nimport CellAttributeChange from '../view/undoable_changes/CellAttributeChange';\nimport PrintPreview from '../view/other/PrintPreview';\nimport Clipboard from '../util/Clipboard';\nimport MaxLog from '../gui/MaxLog';\nimport { isNode } from '../util/domUtils';\nimport { getViewXml, getXml } from '../util/xmlUtils';\nimport { load, post, submit } from '../util/requestUtils';\nimport RubberBandHandler from '../view/plugins/RubberBandHandler';\nimport InternalEvent from '../view/event/InternalEvent';\nimport { show } from '../util/printUtils';\nimport { cloneCell } from '../util/cellArrayUtils';\nimport { isNullish } from '../internal/utils';\nimport { isI18nEnabled, translate } from '../internal/i18n-utils';\nimport { error } from '../gui/guiUtils';\n/**\n * Extends {@link EventSource} to implement an application wrapper for a graph that\n * adds {@link actions}, I/O using {@link Codec}, auto-layout using {@link LayoutManager},\n * command history using {@link undoManager}, and standard dialogs and widgets, e.g.\n * properties, help, outline, toolbar, and popupmenu. It also adds {@link templates}\n * to be used as cells in toolbars, auto-validation using the {@link installChangeHandler}\n * flag, attribute cycling using {@link cycleAttributeValues}, higher-level events\n * such as {@link root}, and backend integration using <urlPost> and {@link urlImage}.\n *\n * ### Actions\n *\n * Actions are functions stored in the <actions> array under their names. The\n * functions take the {@link Editor} as the first, and an optional {@link Cell} as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n *\n * A list of built-in actions is available in the <addActions> description.\n *\n * ### Read/write Diagrams\n *\n * To read a diagram from an XML string, for example from a text field within the\n * page, the following code is used:\n *\n * ```javascript\n * const doc = xmlUtils.parseXML(xmlString);\n * const node = doc.documentElement;\n * editor.readGraphModel(node);\n * ```\n *\n * For reading a diagram from a remote location, use the {@link open} method.\n *\n * To save diagrams in XML on a server, you can set the {@link urlPost} variable.\n * This variable will be used in {@link getUrlPost} to construct a URL for the post\n * request that is issued in the {@link save} method. The post request contains the\n * XML representation of the diagram as returned by {@link writeGraphModel} in the\n * xml parameter.\n *\n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n *\n * Here are some examples of processing a post request in various languages.\n *\n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\n\", \"&#xa;\")\n *\n * Note that the linefeed should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n *\n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n *\n * ### Creating images\n *\n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n *\n * ### Special characters\n *\n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n *\n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n *\n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to an HTML user agent.\n *\n * If you are having problems with special characters on the server-side then\n * you may want to try the {@link escapePostData} flag.\n *\n * For converting decimal escape sequences inside strings, a user has provided us with the following function:\n *\n * ```javascript\n * function html2js(text) {\n *   const entitySearch = /&#[0-9]+;/;\n *   let entity;\n *\n *   while (entity = entitySearch.exec(text)) {\n *     const charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *\n *   return text;\n * }\n * ```\n *\n * Otherwise, try using hex escape sequences and the built-in unescape function for converting such strings.\n *\n * ### Local Files\n *\n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n *\n * For example, in PHP the code that does this looks as follows.\n *\n * ```javascript\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * ```\n *\n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n *\n * ### Cell Properties\n *\n * The properties displayed in the properties dialog are the attributes and\n * values of the cell's user object, which is an XML node. The XML node is\n * defined in the templates section of the config file.\n *\n * The templates are stored in {@link Editor.templates} and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n *\n * In the following example, the task node is a business object and only the\n * mxCell node and its mxGeometry child contain graph information:\n *\n * ```javascript\n * <Task label=\"Task\" description=\"\">\n *   <Cell vertex=\"true\">\n *     <Geometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </Cell>\n * </Task>\n * ```\n *\n * The idea is that the XML representation is inverse from the in-memory\n * representation: The outer XML node is the user object and the inner node is\n * the cell. This means the user object of the cell is the Task node with no\n * children for the above example:\n *\n * ```javascript\n * <Task label=\"Task\" description=\"\"/>\n * ```\n *\n * The Task node can have any tag name, attributes and child nodes. The\n * {@link Codec} will use the XML hierarchy as the user object, while removing the\n * \"known annotations\", such as the mxCell node. At save-time the cell data\n * will be \"merged\" back into the user object. The user object is only modified\n * via the properties dialog during the lifecycle of the cell.\n *\n * In the default implementation of {@link createProperties}, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the {@link CellAttributeChange} action in the model. The dialog can be replaced\n * by overriding the {@link createProperties} hook or by replacing the showProperties\n * action in {@link action}. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n *\n * If you want to displey the properties dialog on a doubleclick, you can set\n * {@link Editor.dblClickAction} to showProperties as follows:\n *\n * ```javascript\n * editor.dblClickAction = 'showProperties';\n * ```\n *\n * ### Popupmenu and Toolbar\n *\n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n *\n * ```javascript\n * <Editor>\n *   <EditorPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * ```\n *\n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the {@link EditorPopupMenuCodec}, the format of the\n * configuration is explained in {@link EditorPopupMenu.decode}.\n *\n * The toolbar is defined in the EditorToolbar section. Items can be added\n * and removed in this section.\n *\n * ```javascript\n * <Editor>\n *   <EditorToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * ```\n *\n * The format of the configuration is described in {@link EditorToolbarCodec.decode}.\n *\n * Ids:\n *\n * For the IDs, there is an implicit behaviour in {@link Codec}: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the {@link Cell.id} of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the {@link GraphDataModel.getCell} function. If there is a collision, a new\n * Id will be created for the cell using {@link GraphDataModel.createId}. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n *\n * See {@link EditorCodec}, {@link EditorToolbarCodec} and {@link EditorPopupMenuCodec}\n * for information about configuring the editor and user interface.\n *\n * ### Programmatically inserting cells\n *\n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n *\n * ```javascript\n * const userObject = new Object();\n * const parent = editor.graph.getDefaultParent();\n * const model = editor.graph.model;\n * model.beginUpdate();\n * try {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * } finally\n *   model.endUpdate();\n * }\n * ```\n *\n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n *\n * ```javascript\n * const template = editor.templates['task'];\n * cont clone = cloneCell(template);\n * ```\n *\n * ### Translations\n *\n * resources/editor - Language resources for Editor\n *\n * To load the resources for the Editor, the following code should be used:\n * ```javascript\n * // Load maxGraph builtin resources\n * Translations.loadResources();\n * // Load resources for the Editor\n * Translations.add(`${Client.basePath}/resources/editor`);\n * ```\n *\n * ### Callback: onInit\n *\n * Called from within the constructor. In the callback, \"this\" refers to the editor instance.\n *\n * ### Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * {@link resetFirstTime} to reset this cookie. This cookie\n * only exists if {@link onInit} is implemented.\n *\n * ### Events\n *\n * #### Event: mxEvent.OPEN\n *\n * Fires after a file was opened in {@link open}. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * {@link filename}.\n *\n * #### Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in {@link save}. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * #### Event: mxEvent.POST\n *\n * Fires if a successful response was received in {@link postDiagram}. The\n * <code>request</code> property contains the <MaxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request.\n *\n * #### Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * #### Event: mxEvent.BEFORE_ADD_VERTEX\n *\n * Fires before a vertex is added in {@link addVertex}. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n *\n * #### Event: mxEvent.ADD_VERTEX\n *\n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n *\n * #### Event: mxEvent.AFTER_ADD_VERTEX\n *\n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n *\n * **Example**\n *\n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n *\n * ```javascript\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt) {\n *   const vertex = evt.getProperty('vertex');\n *   if (editor.graph.isCellEditable(vertex)) {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * ```\n *\n * #### Event: mxEvent.ESCAPE\n *\n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n *\n * @category Editor\n */\nexport class Editor extends EventSource {\n    /**\n     * Constructs a new editor. This function invokes the {@link onInit} callback upon completion.\n     *\n     * ```javascript\n     * const config = load('config/diagram-editor.xml').getDocumentElement();\n     * const editor = new Editor(config);\n     * ```\n     *\n     * @param config The configuration element that contains the editor configuration.\n     */\n    constructor(config) {\n        super();\n        this.onInit = null;\n        this.lastSnapshot = null;\n        this.ignoredChanges = null;\n        this.rubberband = null;\n        this.isActive = null;\n        this.destroyed = false;\n        /**\n         * Specifies the resource key for the zoom dialog. If the resource for this\n         * key does not exist then the value is used as the error message. Default is 'askZoom'.\n         * @default 'askZoom'\n         */\n        this.askZoomResource = isI18nEnabled() ? 'askZoom' : '';\n        // =====================================================================================\n        // Group: Controls and Handlers\n        // =====================================================================================\n        /**\n         * Specifies the resource key for the last saved info. If the resource for\n         * this key does not exist then the value is used as the error message. Default is 'lastSaved'.\n         * @default 'lastSaved'.\n         */\n        this.lastSavedResource = isI18nEnabled() ? 'lastSaved' : '';\n        /**\n         * Specifies the resource key for the current file info. If the resource for\n         * this key does not exist then the value is used as the error message. Default is 'currentFile'.\n         * @default 'currentFile'\n         */\n        this.currentFileResource = isI18nEnabled() ? 'currentFile' : '';\n        /**\n         * Specifies the resource key for the properties window title. If the\n         * resource for this key does not exist then the value is used as the\n         * error message. Default is 'properties'.\n         * @default 'properties'\n         */\n        this.propertiesResource = isI18nEnabled() ? 'properties' : '';\n        /**\n         * Specifies the resource key for the tasks window title. If the\n         * resource for this key does not exist then the value is used as the\n         * error message. Default is 'tasks'.\n         * @default 'tasks'\n         */\n        this.tasksResource = isI18nEnabled() ? 'tasks' : '';\n        /**\n         * Specifies the resource key for the help window title. If the\n         * resource for this key does not exist then the value is used as the\n         * error message. Default is 'help'.\n         * @default 'help'\n         */\n        this.helpResource = isI18nEnabled() ? 'help' : '';\n        /**\n         * Specifies the resource key for the outline window title. If the\n         * resource for this key does not exist then the value is used as the\n         * error message. Default is 'outline'.\n         * @default 'outline'\n         */\n        this.outlineResource = isI18nEnabled() ? 'outline' : '';\n        /**\n         * Reference to the {@link MaxWindow} that contains the outline.\n         * The {@link outline} is stored in outline.outline.\n         */\n        // TODO should be CustomMaxWindow | null, CustomMaxWindow having a outline property\n        this.outline = null;\n        /**\n         * Holds the render hint used for creating the {@link graph} in {@link setGraphContainer}.\n         * @default null\n         */\n        this.graphRenderHint = null;\n        /**\n         * Holds a {@link EditorToolbar} for displaying the toolbar.\n         * The toolbar is created in {@link setToolbarContainer}.\n         */\n        this.toolbar = null;\n        /**\n         * DOM container that holds the statusbar.\n         * Use {@link setStatusContainer} to set this value.\n         */\n        this.status = null;\n        /**\n         * Holds a {@link EditorPopupMenu} for displaying popupmenus.\n         */\n        this.popupHandler = null;\n        /**\n         * Holds an {@link UndoManager} for the command history.\n         */\n        this.undoManager = null;\n        /**\n         * Holds a {@link EditorKeyHandler} for handling keyboard events.\n         * The handler is created in {@link setGraphContainer}.\n         */\n        this.keyHandler = null;\n        /**\n         * Maps from actionnames to actions, which are functions taking\n         * the editor and the cell as arguments. Use {@link addAction}\n         * to add or replace an action and {@link execute} to execute an action\n         * by name, passing the cell to be operated upon as the second\n         * argument.\n         */\n        this.actions = {};\n        // =====================================================================================\n        // Group: Actions and Options\n        // =====================================================================================\n        /**\n         * Specifies the name of the action to be executed\n         * when a cell is double-clicked. Default is 'edit'.\n         *\n         * To handle a single-click, use the following code.\n         *\n         * @example\n         * ```javascript\n         * editor.graph.addListener(mxEvent.CLICK, function(sender, evt) {\n         *   const e = evt.getProperty('event');\n         *   const cell = evt.getProperty('cell');\n         *\n         *   if (cell && !e.isConsumed()) {\n         *     // Do something useful with cell...\n         *     e.consume();\n         *   }\n         * });\n         * ```\n         * @default 'edit'\n         */\n        this.dblClickAction = 'edit';\n        /**\n         * Specifies if new cells must be inserted\n         * into an existing swimlane. Otherwise, cells\n         * that are not swimlanes can be inserted as\n         * top-level cells.\n         * @default false\n         */\n        this.swimlaneRequired = false;\n        /**\n         * Specifies if the context menu should be disabled in the graph container.\n         * @default true\n         */\n        this.disableContextMenu = true;\n        /**\n         * Specifies the function to be used for inserting new\n         * cells into the graph. This is assigned from the\n         * {@link EditorToolbar} if a vertex-tool is clicked.\n         */\n        this.insertFunction = null;\n        // =====================================================================================\n        // Group: Templates\n        // =====================================================================================\n        /**\n         * Specifies if a new cell should be inserted on a single\n         * click even using {@link insertFunction} if there is a cell\n         * under the mouse pointer, otherwise the cell under the\n         * mouse pointer is selected. Default is false.\n         * @default false\n         */\n        this.forcedInserting = false;\n        /**\n         * Maps from names to prototype cells to be used\n         * in the toolbar for inserting new cells into\n         * the diagram.\n         */\n        this.templates = null;\n        /**\n         * Prototype edge cell that is used for creating new edges.\n         */\n        this.defaultEdge = null;\n        /**\n         * Specifies the edge style to be returned in {@link getEdgeStyle}.\n         * @default null\n         */\n        this.defaultEdgeStyle = null;\n        /**\n         * Prototype group cell that is used for creating new groups.\n         */\n        this.defaultGroup = null;\n        /**\n         * Default size for the border of new groups. If `null`, then {@link AbstractGraph.gridSize} is used.\n         * @default null\n         */\n        this.groupBorderSize = null;\n        /**\n         * Contains the URL of the last opened file as a string.\n         * @default null\n         */\n        this.filename = null;\n        // =====================================================================================\n        // Group: Backend Integration\n        // =====================================================================================\n        /**\n         * Character to be used for encoding linefeed in {@link save}.\n         * @default '&#xa;'\n         */\n        this.linefeed = '&#xa;';\n        /**\n         * Specifies if the name of the post parameter that contains the diagram data in a post request to the server.\n         * @default 'xml'\n         */\n        this.postParameterName = 'xml';\n        /**\n         * Specifies if the data in the post request for saving a diagram should be converted using encodeURIComponent.\n         * @default true\n         */\n        this.escapePostData = true;\n        /**\n         * Specifies the URL to be used for posting the diagram to a backend in {@link save}.\n         * @default null\n         */\n        this.urlPost = null;\n        /**\n         * Specifies the URL to be used for creating a bitmap of the graph in the image action.\n         * @default null\n         */\n        this.urlImage = null;\n        /**\n         * Specifies the direction of the flow in the diagram.\n         * This is used in the layout algorithms. Default is vertical flow.\n         * @default false\n         */\n        this.horizontalFlow = false;\n        // =====================================================================================\n        // Group: Autolayout\n        // =====================================================================================\n        /**\n         * Specifies if the top-level elements in the\n         * diagram should be layed out using a vertical\n         * or horizontal stack depending on the setting\n         * of {@link horizontalFlow}. The spacing between the\n         * swimlanes is specified by {@link swimlaneSpacing}.\n         * Default is false.\n         *\n         * If the top-level elements are swimlanes, then\n         * the intra-swimlane layout is activated by\n         * the {@link layoutSwimlanes} switch.\n         * @default false\n         */\n        this.layoutDiagram = false;\n        /**\n         * Specifies the spacing between swimlanes if\n         * automatic layout is turned on in\n         * {@link layoutDiagram}. Default is 0.\n         * @default 0\n         */\n        this.swimlaneSpacing = 0;\n        /**\n         * Specifies if the swimlanes should be kept at the same\n         * width or height depending on the setting of\n         * {@link horizontalFlow}. Default is false.\n         *\n         * For horizontal flows, all swimlanes\n         * have the same height and for vertical flows, all swimlanes\n         * have the same width. Furthermore, the swimlanes are\n         * automatically \"stacked\" if {@link layoutDiagram} is true.\n         * @default false\n         */\n        this.maintainSwimlanes = false;\n        /**\n         * Specifies if the children of swimlanes should\n         * be layed out, either vertically or horizontally\n         * depending on {@link horizontalFlow}. Default is false.\n         * @default false\n         */\n        this.layoutSwimlanes = false;\n        /**\n         * Specifies the attribute values to be cycled when inserting new swimlanes.\n         * Default is an empty array.\n         * @default any[]\n         */\n        this.cycleAttributeValues = [];\n        // =====================================================================================\n        // Group: Attribute Cycling\n        // =====================================================================================\n        /**\n         * Index of the last consumed attribute index. If a new\n         * swimlane is inserted, then the {@link cycleAttributeValues}\n         * at this index will be used as the value for\n         * {@link cycleAttributeName}. Default is 0.\n         * @default 0\n         */\n        this.cycleAttributeIndex = 0;\n        /**\n         * Name of the attribute to be assigned a {@link cycleAttributeValues}\n         * when inserting new swimlanes. Default is 'fillColor'.\n         * @default 'fillColor'\n         */\n        // cycleAttributeName: 'fillColor';\n        this.cycleAttributeName = 'fillColor';\n        /**\n         * Holds the [@link MaxWindow} created in {@link showTasks}.\n         */\n        this.tasks = null;\n        // =====================================================================================\n        // Group: Windows\n        // =====================================================================================\n        /**\n         * Icon for the tasks window.\n         */\n        this.tasksWindowImage = null;\n        /**\n         * Specifies the top coordinate of the tasks window in pixels. Default is 20.\n         * @default 20\n         */\n        this.tasksTop = 20;\n        /**\n         * Holds the {@link MaxWindow} created in {@link showHelp}\n         */\n        this.help = null;\n        /**\n         * Icon for the help window.\n         */\n        this.helpWindowImage = null;\n        /**\n         * Specifies the URL to be used for the contents of the\n         * Online Help window. This is usually specified in the\n         * resources file under urlHelp for language-specific\n         * online help support.\n         */\n        this.urlHelp = null;\n        /**\n         * Specifies the width of the help window in pixels. Default is 300.\n         * @default 300\n         */\n        this.helpWidth = 300;\n        /**\n         * Specifies the height of the help window in pixels. Default is 260.\n         * @default 260\n         */\n        // helpHeight: number;\n        this.helpHeight = 260;\n        /**\n         * Specifies the width of the properties window in pixels. Default is 240.\n         * @default 240\n         */\n        this.propertiesWidth = 240;\n        /**\n         * Specifies the height of the properties window in pixels.\n         * If no height is specified then the window will be automatically\n         * sized to fit its contents. Default is null.\n         * @default null\n         */\n        this.propertiesHeight = null;\n        /**\n         * Specifies if the properties dialog should be automatically\n         * moved near the cell it is displayed for, otherwise the\n         * dialog is not moved. This value is only taken into\n         * account if the dialog is already visible. Default is false.\n         * @default false\n         */\n        this.movePropertiesDialog = false;\n        /**\n         * Specifies if {@link AbstractGraph.validateGraph} should automatically be invoked after\n         * each change. Default is false.\n         * @default false\n         */\n        this.validating = false;\n        /**\n         * True if the graph has been modified since it was last saved.\n         */\n        this.modified = false;\n        this.actions = {};\n        this.addActions();\n        // Executes the following only if a document has been instantiated.\n        // That is, don't execute when the {@link EditorCodec} is set up.\n        if (document.body) {\n            // Defines instance fields\n            this.cycleAttributeValues = [];\n            this.popupHandler = new EditorPopupMenu();\n            this.undoManager = new UndoManager();\n            // Creates the graph and toolbar without the containers\n            this.graph = this.createGraph();\n            this.toolbar = this.createToolbar();\n            // Creates the global key handler (requires graph instance)\n            this.keyHandler = new EditorKeyHandler(this);\n            // Configures the editor using the URI\n            // which was passed to the ctor\n            this.configure(config);\n            // Assigns the swimlaneIndicatorColorAttribute on the graph\n            this.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n            // Invokes the 'onInit' hook\n            this.onInit?.();\n        }\n    }\n    /**\n     * Returns {@link modified}.\n     */\n    isModified() {\n        return this.modified;\n    }\n    /**\n     * Sets {@link modified} to the specified boolean value.\n     * @param value\n     */\n    setModified(value) {\n        this.modified = value;\n    }\n    /**\n     * Adds the built-in actions to the editor instance.\n     * save - Saves the graph using <urlPost>.\n     * print - Shows the graph in a new print preview window.\n     * show - Shows the graph in a new window.\n     * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n     * refresh - Refreshes the graph's display.\n     * cut - Copies the current selection into the clipboard\n     * and removes it from the graph.\n     * copy - Copies the current selection into the clipboard.\n     * paste - Pastes the clipboard into the graph.\n     * delete - Removes the current selection from the graph.\n     * group - Puts the current selection into a new group.\n     * ungroup - Removes the selected groups and selects the children.\n     * undo - Undoes the last change on the graph model.\n     * redo - Redoes the last change on the graph model.\n     * zoom - Sets the zoom via a dialog.\n     * zoomIn - Zooms into the graph.\n     * zoomOut - Zooms out of the graph\n     * actualSize - Resets the scale and translation on the graph.\n     * fit - Changes the scale so that the graph fits into the window.\n     * showProperties - Shows the properties dialog.\n     * selectAll - Selects all cells.\n     * selectNone - Clears the selection.\n     * selectVertices - Selects all vertices.\n     * selectEdges = Selects all edges.\n     * edit - Starts editing the current selection cell.\n     * enterGroup - Drills down into the current selection cell.\n     * exitGroup - Moves up in the drilling hierachy\n     * home - Moves to the topmost parent in the drilling hierarchy\n     * selectPrevious - Selects the previous cell.\n     * selectNext - Selects the next cell.\n     * selectParent - Selects the parent of the selection cell.\n     * selectChild - Selects the first child of the selection cell.\n     * collapse - Collapses the currently selected cells.\n     * expand - Expands the currently selected cells.\n     * bold - Toggle bold text style.\n     * italic - Toggle italic text style.\n     * underline - Toggle underline text style.\n     * alignCellsLeft - Aligns the selection cells at the left.\n     * alignCellsCenter - Aligns the selection cells in the center.\n     * alignCellsRight - Aligns the selection cells at the right.\n     * alignCellsTop - Aligns the selection cells at the top.\n     * alignCellsMiddle - Aligns the selection cells in the middle.\n     * alignCellsBottom - Aligns the selection cells at the bottom.\n     * alignFontLeft - Sets the horizontal text alignment to left.\n     * alignFontCenter - Sets the horizontal text alignment to center.\n     * alignFontRight - Sets the horizontal text alignment to right.\n     * alignFontTop - Sets the vertical text alignment to top.\n     * alignFontMiddle - Sets the vertical text alignment to middle.\n     * alignFontBottom - Sets the vertical text alignment to bottom.\n     * toggleTasks - Shows or hides the tasks window.\n     * toggleHelp - Shows or hides the help window.\n     * toggleOutline - Shows or hides the outline window.\n     * toggleConsole - Shows or hides the console window.\n     */\n    addActions() {\n        this.addAction('save', (editor) => {\n            editor.save();\n        });\n        this.addAction('print', (editor) => {\n            const preview = new PrintPreview(editor.graph, 1);\n            preview.open();\n        });\n        this.addAction('show', (editor) => {\n            show(editor.graph, null, 10, 10);\n        });\n        this.addAction('exportImage', (editor) => {\n            const url = editor.getUrlImage();\n            if (url == null || Client.IS_LOCAL) {\n                editor.execute('show');\n            }\n            else {\n                const node = getViewXml(editor.graph, 1);\n                const xml = getXml(node, '\\n');\n                submit(url, `${editor.postParameterName}=${encodeURIComponent(xml)}`, document, '_blank');\n            }\n        });\n        this.addAction('refresh', (editor) => {\n            editor.graph.refresh();\n        });\n        this.addAction('cut', (editor) => {\n            if (editor.graph.isEnabled()) {\n                Clipboard.cut(editor.graph);\n            }\n        });\n        this.addAction('copy', (editor) => {\n            if (editor.graph.isEnabled()) {\n                Clipboard.copy(editor.graph);\n            }\n        });\n        this.addAction('paste', (editor) => {\n            if (editor.graph.isEnabled()) {\n                Clipboard.paste(editor.graph);\n            }\n        });\n        this.addAction('delete', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.removeCells();\n            }\n        });\n        this.addAction('group', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setSelectionCell(editor.groupCells());\n            }\n        });\n        this.addAction('ungroup', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setSelectionCells(editor.graph.ungroupCells());\n            }\n        });\n        this.addAction('removeFromParent', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.removeCellsFromParent();\n            }\n        });\n        this.addAction('undo', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.undo();\n            }\n        });\n        this.addAction('redo', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.redo();\n            }\n        });\n        this.addAction('zoomIn', (editor) => {\n            editor.graph.zoomIn();\n        });\n        this.addAction('zoomOut', (editor) => {\n            editor.graph.zoomOut();\n        });\n        this.addAction('actualSize', (editor) => {\n            editor.graph.zoomActual();\n        });\n        this.addAction('fit', (editor) => {\n            editor.graph.fit();\n        });\n        this.addAction('showProperties', (editor, cell) => {\n            editor.showProperties(cell);\n        });\n        this.addAction('selectAll', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectAll();\n            }\n        });\n        this.addAction('selectNone', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.clearSelection();\n            }\n        });\n        this.addAction('selectVertices', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectVertices();\n            }\n        });\n        this.addAction('selectEdges', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectEdges();\n            }\n        });\n        this.addAction('edit', (editor, cell) => {\n            if (editor.graph.isEnabled() && editor.graph.isCellEditable(cell)) {\n                editor.graph.startEditingAtCell(cell);\n            }\n        });\n        this.addAction('toBack', (editor, cell) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.orderCells(true);\n            }\n        });\n        this.addAction('toFront', (editor, cell) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.orderCells(false);\n            }\n        });\n        this.addAction('enterGroup', (editor, cell) => {\n            editor.graph.enterGroup(cell);\n        });\n        this.addAction('exitGroup', (editor) => {\n            editor.graph.exitGroup();\n        });\n        this.addAction('home', (editor) => {\n            editor.graph.home();\n        });\n        this.addAction('selectPrevious', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectPreviousCell();\n            }\n        });\n        this.addAction('selectNext', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectNextCell();\n            }\n        });\n        this.addAction('selectParent', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectParentCell();\n            }\n        });\n        this.addAction('selectChild', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectChildCell();\n            }\n        });\n        this.addAction('collapse', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.foldCells(true);\n            }\n        });\n        this.addAction('collapseAll', (editor) => {\n            if (editor.graph.isEnabled()) {\n                const cells = editor.graph.getChildVertices();\n                editor.graph.foldCells(true, false, cells);\n            }\n        });\n        this.addAction('expand', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.foldCells(false);\n            }\n        });\n        this.addAction('expandAll', (editor) => {\n            if (editor.graph.isEnabled()) {\n                const cells = editor.graph.getChildVertices();\n                editor.graph.foldCells(false, false, cells);\n            }\n        });\n        this.addAction('bold', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.toggleCellStyleFlags('fontStyle', FONT_STYLE_MASK.BOLD);\n            }\n        });\n        this.addAction('italic', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.toggleCellStyleFlags('fontStyle', FONT_STYLE_MASK.ITALIC);\n            }\n        });\n        this.addAction('underline', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.toggleCellStyleFlags('fontStyle', FONT_STYLE_MASK.UNDERLINE);\n            }\n        });\n        this.addAction('alignCellsLeft', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.alignCells('left');\n            }\n        });\n        this.addAction('alignCellsCenter', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.alignCells('center');\n            }\n        });\n        this.addAction('alignCellsRight', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.alignCells('right');\n            }\n        });\n        this.addAction('alignCellsTop', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.alignCells('top');\n            }\n        });\n        this.addAction('alignCellsMiddle', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.alignCells('middle');\n            }\n        });\n        this.addAction('alignCellsBottom', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.alignCells('bottom');\n            }\n        });\n        this.addAction('alignFontLeft', (editor) => {\n            editor.graph.setCellStyles('align', 'left');\n        });\n        this.addAction('alignFontCenter', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setCellStyles('align', 'center');\n            }\n        });\n        this.addAction('alignFontRight', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setCellStyles('align', 'right');\n            }\n        });\n        this.addAction('alignFontTop', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setCellStyles('verticalAlign', 'top');\n            }\n        });\n        this.addAction('alignFontMiddle', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setCellStyles('verticalAlign', 'middle');\n            }\n        });\n        this.addAction('alignFontBottom', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setCellStyles('verticalAlign', 'bottom');\n            }\n        });\n        this.addAction('zoom', (editor) => {\n            const current = editor.graph.getView().scale * 100;\n            const preInput = prompt(translate(editor.askZoomResource) || editor.askZoomResource, String(current));\n            if (preInput) {\n                const scale = parseFloat(preInput) / 100;\n                if (!isNaN(scale)) {\n                    editor.graph.getView().setScale(scale);\n                }\n            }\n        });\n        this.addAction('toggleTasks', (editor) => {\n            if (!isNullish(editor.tasks)) {\n                editor.tasks.setVisible(!editor.tasks.isVisible());\n            }\n            else {\n                editor.showTasks();\n            }\n        });\n        this.addAction('toggleHelp', (editor) => {\n            if (!isNullish(editor.help)) {\n                editor.help.setVisible(!editor.help.isVisible());\n            }\n            else {\n                editor.showHelp();\n            }\n        });\n        this.addAction('toggleOutline', (editor) => {\n            if (isNullish(editor.outline)) {\n                editor.showOutline();\n            }\n            else {\n                editor.outline.setVisible(!editor.outline.isVisible());\n            }\n        });\n        this.addAction('toggleConsole', (editor) => {\n            MaxLog.setVisible(!MaxLog.isVisible());\n        });\n    }\n    /**\n     * Configures the editor using the specified node. To load the\n     * configuration from a given URL the following code can be used to obtain\n     * the XML node.\n     *\n     * @example\n     * ```javascript\n     * var node = mxUtils.load(url).getDocumentElement();\n     * ```\n     * @param node XML node that contains the configuration.\n     */\n    configure(node) {\n        if (node) {\n            // Creates a decoder for the XML data\n            // and uses it to configure the editor\n            const dec = new Codec(node.ownerDocument);\n            dec.decode(node, this);\n            // Resets the counters, modified state and\n            // command history\n            this.resetHistory();\n        }\n    }\n    /**\n     * Resets the cookie that is used to remember if the editor has already been used.\n     */\n    resetFirstTime() {\n        document.cookie = 'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n    }\n    /**\n     * Resets the command history, modified state and counters.\n     */\n    resetHistory() {\n        this.lastSnapshot = new Date().getTime();\n        this.undoManager.clear();\n        this.ignoredChanges = 0;\n        this.setModified(false);\n    }\n    /**\n     * Binds the specified actionname to the specified function.\n     *\n     * @example\n     * ```javascript\n     * editor.addAction('test', function(editor: Editor, cell: Cell)\n     * {\n     * \t\tmxUtils.alert(\"test \"+cell);\n     * });\n     * ```\n     * @param actionname String that specifies the name of the action to be added.\n     * @param funct Function that implements the new action. The first argument\n     * of the function is the editor it is used with,\n     * the second argument is the cell it operates upon.\n     */\n    addAction(actionname, funct) {\n        this.actions[actionname] = funct;\n    }\n    /**\n     * Executes the function with the given name in {@link actions} passing the\n     * editor instance and given cell as the first and second argument. All\n     * additional arguments are passed to the action as well. This method\n     * contains a try-catch block and displays an error message if an action\n     * causes an exception. The exception is re-thrown after the error\n     * message was displayed.\n     *\n     * @example\n     * ```javascript\n     * editor.execute(\"showProperties\", cell);\n     * ```\n     * @param actionname\n     * @param cell\n     * @param evt\n     */\n    execute(actionname, cell = null, evt = null) {\n        const action = this.actions[actionname];\n        if (action) {\n            try {\n                // Creates the array of arguments by replacing the actionname\n                // with the editor instance in the args of this function\n                const args = [this, cell, evt];\n                // Invokes the function on the editor using the args\n                action.apply(this, args);\n            }\n            catch (e) {\n                error(`Cannot execute ${actionname}: ${e.message}`, 280, true);\n                throw e;\n            }\n        }\n        else {\n            error(`Cannot find action ${actionname}`, 280, true);\n        }\n    }\n    /**\n     * Adds the specified template under the given name in {@link templates}.\n     * @param name\n     * @param template\n     */\n    addTemplate(name, template) {\n        this.templates[name] = template;\n    }\n    /**\n     * Returns the template for the given name.\n     * @param name\n     */\n    getTemplate(name) {\n        return this.templates[name];\n    }\n    /**\n     * Creates the {@link AbstractGraph} for the editor.\n     *\n     * The AbstractGraph is created with no container and is initialized from {@link setGraphContainer}.\n     *\n     * @returns the AbstractGraph instance used by the Editor\n     */\n    createGraph() {\n        const graph = new Graph();\n        // Enables rubberband, tooltips, panning\n        graph.setTooltips(true);\n        graph.setPanning(true);\n        // Overrides the dblclick method on the graph to\n        // invoke the dblClickAction for a cell and reset\n        // the selection tool in the toolbar\n        this.installDblClickHandler(graph);\n        // Installs the command history\n        this.installUndoHandler(graph);\n        // Installs the handlers for the root event\n        this.installDrillHandler(graph);\n        // Installs the handler for validation\n        this.installChangeHandler(graph);\n        // Installs the handler for calling the\n        // insert function and consume the\n        // event if an insert function is defined\n        this.installInsertHandler(graph);\n        // Redirects the function for creating the popupmenu items\n        const popupMenuHandler = graph.getPlugin('PopupMenuHandler');\n        if (popupMenuHandler) {\n            popupMenuHandler.factoryMethod = (menu, cell, evt) => {\n                return this.createPopupMenu(menu, cell, evt);\n            };\n        }\n        // Redirects the function for creating new connections in the diagram\n        const connectionHandler = graph.getPlugin('ConnectionHandler');\n        if (connectionHandler) {\n            connectionHandler.factoryMethod = (source, target) => {\n                return this.createEdge(source, target);\n            };\n        }\n        // Maintains swimlanes and installs auto-layout\n        this.createSwimlaneManager(graph);\n        this.createLayoutManager(graph);\n        return graph;\n    }\n    /**\n     * Sets the graph's container using {@link AbstractGraph.init}.\n     * @param graph\n     * @returns SwimlaneManager instance\n     */\n    createSwimlaneManager(graph) {\n        const swimlaneMgr = new SwimlaneManager(graph, false);\n        swimlaneMgr.isHorizontal = () => {\n            return this.horizontalFlow;\n        };\n        swimlaneMgr.isEnabled = () => {\n            return this.maintainSwimlanes;\n        };\n        return swimlaneMgr;\n    }\n    /**\n     * Creates a layout manager for the swimlane and diagram layouts, that\n     * is, the locally defined inter and intra swimlane layouts.\n     * @param graph\n     * @returns LayoutManager instance\n     */\n    createLayoutManager(graph) {\n        const layoutMgr = new LayoutManager(graph);\n        layoutMgr.getLayout = (cell) => {\n            let layout = null;\n            const model = this.graph.getDataModel();\n            if (cell.getParent()) {\n                // Executes the swimlane layout if a child of\n                // a swimlane has been changed. The layout is\n                // lazy created in createSwimlaneLayout.\n                if (this.layoutSwimlanes && graph.isSwimlane(cell)) {\n                    if (this.swimlaneLayout == null) {\n                        this.swimlaneLayout = this.createSwimlaneLayout();\n                    }\n                    layout = this.swimlaneLayout;\n                }\n                // Executes the diagram layout if the modified\n                // cell is a top-level cell. The layout is\n                // lazy created in createDiagramLayout.\n                else if (this.layoutDiagram &&\n                    (graph.isValidRoot(cell) || !cell?.getParent()?.getParent())) {\n                    if (this.diagramLayout == null) {\n                        this.diagramLayout = this.createDiagramLayout();\n                    }\n                    layout = this.diagramLayout;\n                }\n            }\n            return layout;\n        };\n        return layoutMgr;\n    }\n    /**\n     * Sets the graph's container using {@link AbstractGraph.init}.\n     * @param container\n     */\n    setGraphContainer(container) {\n        if (!this.graph.container && container) {\n            // Creates the graph instance inside the given container and render hint\n            // this.graph = new Graph(container, null, this.graphRenderHint);\n            // @ts-ignore  TODO: FIXME!! ==============================================================================================\n            this.graph.init(container);\n            // Install rubberband selection as the last\n            // action handler in the chain\n            this.rubberband = new RubberBandHandler(this.graph);\n            // Disables the context menu\n            if (this.disableContextMenu) {\n                InternalEvent.disableContextMenu(container);\n            }\n        }\n    }\n    /**\n     * Overrides {@link AbstractGraph.dblClick} to invoke {@link dblClickAction}\n     * on a cell and reset the selection tool in the toolbar.\n     * @param graph\n     */\n    installDblClickHandler(graph) {\n        // Installs a listener for double click events\n        graph.addListener(InternalEvent.DOUBLE_CLICK, (sender, evt) => {\n            const cell = evt.getProperty('cell');\n            if (cell != null && graph.isEnabled() && this.dblClickAction != null) {\n                this.execute(this.dblClickAction, cell);\n                evt.consume();\n            }\n        });\n    }\n    /**\n     * Adds the {@link undoManager} to the graph model and the view.\n     * @param graph\n     */\n    installUndoHandler(graph) {\n        const listener = (sender, evt) => {\n            const edit = evt.getProperty('edit');\n            this.undoManager.undoableEditHappened(edit);\n        };\n        graph.getDataModel().addListener(InternalEvent.UNDO, listener);\n        graph.getView().addListener(InternalEvent.UNDO, listener);\n        // Keeps the selection state in sync\n        const undoHandler = (sender, evt) => {\n            const { changes } = evt.getProperty('edit');\n            graph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n        };\n        this.undoManager.addListener(InternalEvent.UNDO, undoHandler);\n        this.undoManager.addListener(InternalEvent.REDO, undoHandler);\n    }\n    /**\n     * Installs listeners for dispatching the {@link root} event.\n     * @param graph\n     */\n    installDrillHandler(graph) {\n        const listener = (sender) => {\n            this.fireEvent(new EventObject(InternalEvent.ROOT));\n        };\n        graph.getView().addListener(InternalEvent.DOWN, listener);\n        graph.getView().addListener(InternalEvent.UP, listener);\n    }\n    /**\n     * Installs the listeners required to automatically validate\n     * the graph. On each change of the root, this implementation\n     * fires a {@link root} event.\n     * @param graph\n     */\n    installChangeHandler(graph) {\n        const listener = (sender, evt) => {\n            // Updates the modified state\n            this.setModified(true);\n            // Automatically validates the graph\n            // after each change\n            if (this.validating) {\n                graph.validateGraph();\n            }\n            // Checks if the root has been changed\n            const { changes } = evt.getProperty('edit');\n            for (const change of changes) {\n                if (change instanceof RootChange ||\n                    (change instanceof ValueChange && change.cell === this.graph.model.root) ||\n                    (change instanceof CellAttributeChange && change.cell === this.graph.model.root)) {\n                    this.fireEvent(new EventObject(InternalEvent.ROOT));\n                    break;\n                }\n            }\n        };\n        graph.getDataModel().addListener(InternalEvent.CHANGE, listener);\n    }\n    /**\n     * Installs the handler for invoking {@link insertFunction} if one is defined.\n     * @param graph\n     */\n    installInsertHandler(graph) {\n        const insertHandler = {\n            mouseDown: (_sender, me) => {\n                if (this.insertFunction &&\n                    !me.isPopupTrigger() &&\n                    (this.forcedInserting || me.getState() == null)) {\n                    this.graph.clearSelection();\n                    this.insertFunction(me.getEvent(), me.getCell());\n                    // Consumes the rest of the events for this gesture (down, move, up)\n                    this.isActive = true;\n                    me.consume();\n                }\n            },\n            mouseMove: (_sender, me) => {\n                if (this.isActive) {\n                    me.consume();\n                }\n            },\n            mouseUp: (_sender, me) => {\n                if (this.isActive) {\n                    this.isActive = false;\n                    me.consume();\n                }\n            },\n        };\n        graph.addMouseListener(insertHandler);\n    }\n    /**\n     * Creates the layout instance used to layout the swimlanes in the diagram.\n     * @returns StackLayout instance\n     */\n    createDiagramLayout() {\n        const gs = this.graph.gridSize;\n        const layout = new StackLayout(this.graph, !this.horizontalFlow, this.swimlaneSpacing, 2 * gs, 2 * gs);\n        // Overrides isIgnored to only take into account swimlanes\n        layout.isVertexIgnored = (cell) => {\n            return !layout.graph.isSwimlane(cell);\n        };\n        return layout;\n    }\n    /**\n     * Creates the layout instance used to layout the children of each swimlane.\n     * @returns CompactTreeLayout instance\n     */\n    createSwimlaneLayout() {\n        return new CompactTreeLayout(this.graph, this.horizontalFlow);\n    }\n    /**\n     * Creates the {@link toolbar} with no container.\n     * @returns EditorToolbar instance\n     */\n    createToolbar() {\n        return new EditorToolbar(null, this);\n    }\n    /**\n     * Initializes the toolbar for the given container.\n     * @param container\n     */\n    setToolbarContainer(container) {\n        this.toolbar?.init(container);\n    }\n    /**\n     * Creates the {@link status} using the specified container.\n     * This implementation adds listeners in the editor to display the last saved time and the current filename in the status bar.\n     * @param container DOM node that will contain the statusbar.\n     */\n    setStatusContainer(container) {\n        if (!this.status && container) {\n            this.status = container;\n            // Prints the last saved time in the status bar when files are saved\n            this.addListener(InternalEvent.SAVE, () => {\n                const timestamp = new Date().toLocaleString();\n                this.setStatus(`${translate(this.lastSavedResource) || this.lastSavedResource}: ${timestamp}`);\n            });\n            // Updates the statusbar to display the filename when new files are opened\n            this.addListener(InternalEvent.OPEN, () => {\n                this.setStatus(`${translate(this.currentFileResource) || this.currentFileResource}: ${this.filename}`);\n            });\n        }\n    }\n    /**\n     * Display the specified message in the status bar.\n     * @param message String the specified the message to be displayed.\n     */\n    setStatus(message) {\n        if (this.status && !isNullish(message)) {\n            this.status.innerHTML = message;\n        }\n    }\n    /**\n     * Creates a listener to update the inner HTML of the\n     * specified DOM node with the value of {@link getTitle}.\n     * @param container DOM node that will contain the title.\n     */\n    setTitleContainer(container) {\n        this.addListener(InternalEvent.ROOT, (sender) => {\n            container.innerHTML = this.getTitle();\n        });\n    }\n    /**\n     * Executes a vertical or horizontal compact tree layout using the specified cell as an argument.\n     * The cell may either be a group or the root of a tree.\n     *\n     * @param cell {@link Cell} to use in the compact tree layout.\n     * @param horizontal Optional boolean to specify the tree's\n     * orientation. Default is true.\n     */\n    treeLayout(cell, horizontal) {\n        if (cell) {\n            const layout = new CompactTreeLayout(this.graph, horizontal);\n            layout.execute(cell);\n        }\n    }\n    /**\n     * Returns the string value for the current root of the diagram.\n     */\n    getTitle() {\n        let title = '';\n        const { graph } = this;\n        let cell = graph.getCurrentRoot();\n        while (cell?.getParent()?.getParent()) {\n            // Append each label of a valid root\n            if (graph.isValidRoot(cell)) {\n                title = ` > ${graph.convertValueToString(cell)}${title}`;\n            }\n            cell = cell.getParent();\n        }\n        const prefix = this.getRootTitle();\n        return prefix + title;\n    }\n    /**\n     * Returns the string value of the root cell in {@link AbstractGraph.model}.\n     */\n    getRootTitle() {\n        const root = this.graph.getDataModel().getRoot();\n        return this.graph.convertValueToString(root);\n    }\n    /**\n     * Undo the last change in {@link graph}.\n     */\n    undo() {\n        this.undoManager.undo();\n    }\n    /**\n     * Redo the last change in {@link graph}.\n     */\n    redo() {\n        this.undoManager.redo();\n    }\n    /**\n     * Invokes {@link createGroup} to create a new group cell and the invokes\n     * {@link AbstractGraph.groupCells}, using the grid size of the graph as the spacing\n     * in the group's content area.\n     */\n    groupCells() {\n        const border = this.groupBorderSize ?? this.graph.gridSize;\n        return this.graph.groupCells(this.createGroup(), border);\n    }\n    /**\n     * Creates and returns a clone of {@link defaultGroup} to be used as a new group cell in {@link group}.\n     * @returns Cell\n     */\n    createGroup() {\n        return cloneCell(this.defaultGroup);\n    }\n    /**\n     * Opens the specified file synchronously and parses it using {@link readGraphModel}.\n     * It updates {@link filename} and fires an <open>-event after the file has been opened.\n     *\n     * Exceptions should be handled as follows:\n     *\n     * ```javascript\n     * try {\n     *   editor.open(filename);\n     * } catch (e) {\n     *   GlobalConfig.logger.error(`Cannot open ${filename}: ${e.message}`);\n     * }\n     * ```\n     *\n     * @param filename URL of the file to be opened.\n     */\n    open(filename) {\n        if (!isNullish(filename)) {\n            const xml = load(filename).getXml();\n            this.readGraphModel(xml.documentElement);\n            this.filename = filename;\n            this.fireEvent(new EventObject(InternalEvent.OPEN, { filename }));\n        }\n    }\n    /**\n     * Reads the specified XML node into the existing graph model and resets the command history and modified state.\n     * @param node the XML node to be read into the graph model.\n     */\n    readGraphModel(node) {\n        new ModelXmlSerializer(this.graph.getDataModel()).import(node);\n        this.resetHistory();\n    }\n    /**\n     * Posts the string returned by {@link writeGraphModel} to the given URL or the URL returned by {@link getUrlPost}.\n     *\n     * The actual posting is carried out by {@link postDiagram}.\n     * If the URL is null then the resulting XML will be displayed using {@link popup}.\n     *\n     * Exceptions should be handled as follows:\n     *\n     * ```javascript\n     * try {\n     *   editor.open(filename);\n     * } catch (e) {\n     *   GlobalConfig.logger.error(`Cannot save: ${e.message}`);\n     * }\n     * ```\n     *\n     * @param url\n     * @param linefeed\n     */\n    save(url = null, linefeed = this.linefeed) {\n        // Gets the URL to post the data to\n        url = url || this.getUrlPost();\n        // Posts the data if the URL is not empty\n        if (url) {\n            const data = this.writeGraphModel(linefeed);\n            this.postDiagram(url, data);\n            // Resets the modified flag\n            this.setModified(false);\n        }\n        // Dispatches a save event\n        this.fireEvent(new EventObject(InternalEvent.SAVE, { url }));\n    }\n    /**\n     * Hook for subclassers to override the posting of a diagram\n     * represented by the given node to the given URL. This fires\n     * an asynchronous {@link post} event if the diagram has been posted.\n     *\n     * ### Example:\n     *\n     * To replace the diagram with the diagram in the response, use the\n     * following code.\n     *\n     * @example\n     * ```javascript\n     * editor.addListener(mxEvent.POST, function(sender, evt)\n     * {\n     *   // Process response (replace diagram)\n     *   var req = evt.getProperty('request');\n     *   var root = req.getDocumentElement();\n     *   editor.graph.readGraphModel(root)\n     * });\n     * ```\n     * @param url\n     * @param data\n     */\n    postDiagram(url, data) {\n        if (this.escapePostData) {\n            data = encodeURIComponent(data);\n        }\n        post(url, `${this.postParameterName}=${data}`, (req) => {\n            this.fireEvent(new EventObject(InternalEvent.POST, { request: req, url, data }));\n        });\n    }\n    /**\n     * Hook to create the string representation of the diagram.\n     *\n     * The default implementation uses {@link ModelXmlSerializer} to encode the graph model.\n     *\n     * @param linefeed Optional character to be used as the linefeed. Default is {@link linefeed}.\n     */\n    writeGraphModel(linefeed) {\n        return new ModelXmlSerializer(this.graph.getDataModel()).export({ pretty: false });\n    }\n    /**\n     * Returns the URL to post the diagram to. This is used\n     * in {@link save}. The default implementation returns {@link urlPost},\n     * adding <code>?draft=true</code>.\n     */\n    getUrlPost() {\n        return this.urlPost;\n    }\n    /**\n     * Returns the URL to create the image width. This is typically\n     * the URL of a backend which accepts an XML representation\n     * of a graph view to create an image. The function is used\n     * in the image action to create an image. This implementation\n     * returns {@link urlImage}.\n     */\n    getUrlImage() {\n        return this.urlImage;\n    }\n    /**\n     * Swaps the styles for the given names in the graph's\n     * stylesheet and refreshes the graph.\n     * @param first\n     * @param second\n     */\n    swapStyles(first, second) {\n        // @ts-ignore\n        const style = this.graph.getStylesheet().styles[second];\n        this.graph\n            .getView()\n            // @ts-ignore\n            .getStylesheet()\n            // @ts-ignore\n            .putCellStyle(second, this.graph.getStylesheet().styles[first]);\n        this.graph.getStylesheet().putCellStyle(first, style);\n        this.graph.refresh();\n    }\n    /**\n     * Creates and shows the properties dialog for the given\n     * cell. The content area of the dialog is created using\n     * {@link createProperties}.\n     * @param cell\n     */\n    showProperties(cell = null) {\n        cell = cell || this.graph.getSelectionCell();\n        // Uses the root node for the properties dialog\n        // if not cell was passed in and no cell is\n        // selected\n        if (!cell) {\n            cell = this.graph.getCurrentRoot();\n            if (!cell) {\n                cell = this.graph.getDataModel().getRoot();\n            }\n        }\n        if (cell) {\n            // Makes sure there is no in-place editor in the\n            // graph and computes the location of the dialog\n            this.graph.stopEditing(true);\n            const offset = getOffset(this.graph.container);\n            let x = offset.x + 10;\n            let { y } = offset;\n            // Avoids moving the dialog if it is already open\n            if (this.properties && !this.movePropertiesDialog) {\n                x = this.properties.getX();\n                y = this.properties.getY();\n            }\n            // Places the dialog near the cell for which it\n            // displays the properties\n            else {\n                const bounds = this.graph.getCellBounds(cell);\n                if (bounds) {\n                    x += bounds.x + Math.min(200, bounds.width);\n                    y += bounds.y;\n                }\n            }\n            // Hides the existing properties dialog and creates a new one with the\n            // contents created in the hook method\n            this.hideProperties();\n            const node = this.createProperties(cell);\n            if (node) {\n                // Displays the contents in a window and stores a reference to the\n                // window for later hiding of the window\n                this.properties = new MaxWindow(translate(this.propertiesResource) || this.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n                this.properties.setVisible(true);\n            }\n        }\n    }\n    /**\n     * Returns true if the properties dialog is currently visible.\n     */\n    isPropertiesVisible() {\n        return this.properties != null;\n    }\n    /**\n     * Creates and returns the DOM node that represents the contents\n     * of the properties dialog for the given cell. This implementation\n     * works for user objects that are XML nodes and display all the\n     * node attributes in a form.\n     */\n    createProperties(cell) {\n        const model = this.graph.getDataModel();\n        const value = cell.getValue();\n        if (isNode(value)) {\n            // Creates a form for the user object inside\n            // the cell\n            const form = new MaxForm('properties');\n            // Adds a readonly field for the cell id\n            const id = form.addText('ID', cell.getId());\n            id.setAttribute('readonly', 'true');\n            let geo = null;\n            let yField = null;\n            let xField = null;\n            let widthField = null;\n            let heightField = null;\n            // Adds fields for the location and size\n            if (cell.isVertex()) {\n                geo = cell.getGeometry();\n                if (geo != null) {\n                    yField = form.addText('top', geo.y);\n                    xField = form.addText('left', geo.x);\n                    widthField = form.addText('width', geo.width);\n                    heightField = form.addText('height', geo.height);\n                }\n            }\n            // Adds a field for the cell style\n            const tmp = cell.getStyle();\n            const style = form.addText('Style', tmp || '');\n            // Creates text areas for each attribute of the user object within the cell\n            const attrs = value.attributes;\n            const texts = [];\n            for (let i = 0; i < attrs.length; i += 1) {\n                // Creates a textarea with more lines for\n                // the cell label\n                const val = attrs[i].value;\n                texts.push(form.addTextarea(attrs[i].nodeName, val, attrs[i].nodeName === 'label' ? 4 : 2));\n            }\n            // Adds an OK and Cancel button to the dialog\n            // contents and implements the respective\n            // actions below\n            // Defines the function to be executed when the\n            // OK button is pressed in the dialog\n            const okFunction = () => {\n                // Hides the dialog\n                this.hideProperties();\n                // Supports undo for the changes on the underlying\n                // XML structure / XML node attribute changes.\n                model.beginUpdate();\n                try {\n                    if (geo && xField && yField && widthField && heightField) {\n                        geo = geo.clone();\n                        geo.x = parseFloat(xField.value);\n                        geo.y = parseFloat(yField.value);\n                        geo.width = parseFloat(widthField.value);\n                        geo.height = parseFloat(heightField.value);\n                        model.setGeometry(cell, geo);\n                    }\n                    // Applies the style\n                    if (style.value.length > 0) {\n                        // @ts-expect-error FIXME - style is no longer a string\n                        model.setStyle(cell, style.value);\n                    }\n                    else {\n                        model.setStyle(cell, {});\n                    }\n                    // Creates an undoable change for each\n                    // attribute and executes it using the\n                    // model, which will also make the change\n                    // part of the current transaction\n                    for (let i = 0; i < attrs.length; i += 1) {\n                        const edit = new CellAttributeChange(cell, attrs[i].nodeName, texts[i].value);\n                        model.execute(edit);\n                    }\n                    // Checks if the graph wants cells to\n                    // be automatically sized and updates\n                    // the size as an undoable step if\n                    // the feature is enabled\n                    if (this.graph.isAutoSizeCell(cell)) {\n                        this.graph.updateCellSize(cell);\n                    }\n                }\n                finally {\n                    model.endUpdate();\n                }\n            };\n            // Defines the function to be executed when the\n            // Cancel button is pressed in the dialog\n            const cancelFunction = () => {\n                // Hides the dialog\n                this.hideProperties();\n            };\n            form.addButtons(okFunction, cancelFunction);\n            return form.table;\n        }\n        return null;\n    }\n    /**\n     * Hides the properties dialog.\n     */\n    hideProperties() {\n        if (this.properties != null) {\n            this.properties.destroy();\n            this.properties = null;\n        }\n    }\n    /**\n     * Shows the tasks window. The tasks window is created using {@link createTasks}. The\n     * default width of the window is 200 pixels, the y-coordinate of the location\n     * can be specified in {@link tasksTop} and the x-coordinate is right aligned with a\n     * 20 pixel offset from the right border. To change the location of the tasks\n     * window, the following code can be used:\n     *\n     * @example\n     * ```javascript\n     * var oldShowTasks = Editor.prototype.showTasks;\n     * Editor.prototype.showTasks = function()\n     * {\n     *   oldShowTasks.apply(this, arguments); // \"supercall\"\n     *\n     *   if (this.tasks != null)\n     *   {\n     *     this.tasks.setLocation(10, 10);\n     *   }\n     * };\n     * ```\n     */\n    showTasks() {\n        if (this.tasks == null) {\n            const div = document.createElement('div');\n            div.style.padding = '4px';\n            div.style.paddingLeft = '20px';\n            const w = document.body.clientWidth;\n            const wnd = new MaxWindow(translate(this.tasksResource) || this.tasksResource, div, w - 220, this.tasksTop, 200);\n            wnd.setClosable(true);\n            wnd.destroyOnClose = false;\n            // Installs a function to update the contents\n            // of the tasks window on every change of the\n            // model, selection or root.\n            const funct = (sender) => {\n                InternalEvent.release(div);\n                div.innerHTML = '';\n                this.createTasks(div);\n            };\n            this.graph.getDataModel().addListener(InternalEvent.CHANGE, funct);\n            this.graph.getSelectionModel().addListener(InternalEvent.CHANGE, funct);\n            this.graph.addListener(InternalEvent.ROOT, funct);\n            // Assigns the icon to the tasks window\n            if (this.tasksWindowImage != null) {\n                wnd.setImage(this.tasksWindowImage);\n            }\n            this.tasks = wnd;\n            this.createTasks(div);\n        }\n        this.tasks.setVisible(true);\n    }\n    /**\n     * Updates the contents of the tasks window using {@link createTasks}.\n     * @param div\n     */\n    refreshTasks(div) {\n        if (this.tasks != null) {\n            const div = this.tasks.content;\n            InternalEvent.release(div);\n            div.innerHTML = '';\n            this.createTasks(div);\n        }\n    }\n    /**\n     * Updates the contents of the given DOM node to\n     * display the tasks associated with the current\n     * editor state. This is invoked whenever there\n     * is a possible change of state in the editor.\n     * Default implementation is empty.\n     * @param div\n     */\n    createTasks(div) {\n        // override\n    }\n    /**\n     * Shows the help window. If the help window does not exist\n     * then it is created using an iframe pointing to the resource\n     * for the `urlHelp` key or {@link urlHelp} if the resource\n     * is undefined.\n     * @param tasks\n     */\n    showHelp(tasks = null) {\n        if (this.help == null) {\n            const frame = document.createElement('iframe');\n            frame.setAttribute('src', (translate('urlHelp') || this.urlHelp));\n            frame.setAttribute('height', '100%');\n            frame.setAttribute('width', '100%');\n            frame.setAttribute('frameBorder', '0');\n            frame.style.backgroundColor = 'white';\n            const w = document.body.clientWidth;\n            const h = document.body.clientHeight || document.documentElement.clientHeight;\n            const wnd = new MaxWindow(translate(this.helpResource) || this.helpResource, frame, (w - this.helpWidth) / 2, (h - this.helpHeight) / 3, this.helpWidth, this.helpHeight);\n            wnd.setMaximizable(true);\n            wnd.setClosable(true);\n            wnd.destroyOnClose = false;\n            wnd.setResizable(true);\n            // Assigns the icon to the help window\n            if (this.helpWindowImage != null) {\n                wnd.setImage(this.helpWindowImage);\n            }\n            // Workaround for ignored iframe height 100% in FF\n            if (Client.IS_NS) {\n                const handler = (sender) => {\n                    const h = wnd.div.offsetHeight;\n                    frame.setAttribute('height', `${h - 26}px`);\n                };\n                wnd.addListener(InternalEvent.RESIZE_END, handler);\n                wnd.addListener(InternalEvent.MAXIMIZE, handler);\n                wnd.addListener(InternalEvent.NORMALIZE, handler);\n                wnd.addListener(InternalEvent.SHOW, handler);\n            }\n            this.help = wnd;\n        }\n        this.help.setVisible(true);\n    }\n    /**\n     * Shows the outline window. If the window does not exist, then it is\n     * created using an {@link outline}.\n     */\n    showOutline() {\n        const create = this.outline == null;\n        if (create) {\n            const div = document.createElement('div');\n            div.style.overflow = 'hidden';\n            div.style.position = 'relative';\n            div.style.width = '100%';\n            div.style.height = '100%';\n            div.style.background = 'white';\n            div.style.cursor = 'move';\n            const wnd = new MaxWindow(translate(this.outlineResource) || this.outlineResource, div, 600, 480, 200, 200, false);\n            // Creates the outline in the specified div\n            // and links it to the existing graph\n            const outline = new Outline(this.graph, div);\n            wnd.setClosable(true);\n            wnd.setResizable(true);\n            wnd.destroyOnClose = false;\n            wnd.addListener(InternalEvent.RESIZE_END, () => {\n                outline.update();\n            });\n            this.outline = wnd;\n            this.outline.Outline = outline;\n        }\n        // Finally shows the outline\n        this.outline.setVisible(true);\n        this.outline.outline.update(true);\n    }\n    /**\n     * Puts the graph into the specified mode. The following mode names are supported:\n     * - select - Selects using the left mouse button, new connections are disabled.\n     * - connect - Selects using the left mouse button or creates new connections if mouse over cell hotspot. See {@link ConnectionHandler}.\n     * - pan - Pans using the left mouse button, new connections are disabled.\n     */\n    setMode(modename) {\n        const panningHandler = this.graph.getPlugin('PanningHandler');\n        if (modename === 'select') {\n            panningHandler && (panningHandler.useLeftButtonForPanning = false);\n            this.graph.setConnectable(false);\n        }\n        else if (modename === 'connect') {\n            panningHandler && (panningHandler.useLeftButtonForPanning = false);\n            this.graph.setConnectable(true);\n        }\n        else if (modename === 'pan') {\n            panningHandler && (panningHandler.useLeftButtonForPanning = true);\n            this.graph.setConnectable(false);\n        }\n    }\n    /**\n     * Uses {@link popupHandler} to create the menu in the graph's\n     * panning handler. The redirection is setup in {@link setToolbarContainer}.\n     * @param menu\n     * @param cell\n     * @param evt\n     */\n    createPopupMenu(menu, cell, evt) {\n        this.popupHandler.createMenu(this, menu, cell, evt);\n    }\n    /**\n     * Uses {@link defaultEdge} as the prototype for creating new edges\n     * in the connection handler of the graph. The style of the\n     * edge will be overridden with the value returned by {@link getEdgeStyle}.\n     * @param source\n     * @param target\n     */\n    createEdge(source, target) {\n        // Clones the default edge prototype\n        let e;\n        if (this.defaultEdge != null) {\n            e = cloneCell(this.defaultEdge);\n        }\n        else {\n            e = new Cell('');\n            e.setEdge(true);\n            const geo = new Geometry();\n            geo.relative = true;\n            e.setGeometry(geo);\n        }\n        // Overrides the edge style\n        const style = this.getEdgeStyle();\n        if (style != null) {\n            e.setStyle(style);\n        }\n        return e;\n    }\n    /**\n     * Returns a string identifying the style of new edges.\n     * The function is used in {@link createEdge} when new edges\n     * are created in the graph.\n     */\n    getEdgeStyle() {\n        return this.defaultEdgeStyle;\n    }\n    /**\n     * Returns the next attribute in {@link cycleAttributeValues}\n     * or null, if not attribute should be used in the specified cell.\n     * @param cell\n     */\n    consumeCycleAttribute(cell) {\n        return this.cycleAttributeValues &&\n            this.cycleAttributeValues.length > 0 &&\n            this.graph.isSwimlane(cell)\n            ? this.cycleAttributeValues[this.cycleAttributeIndex++ % this.cycleAttributeValues.length]\n            : null;\n    }\n    /**\n     * Uses the returned value from {@link consumeCycleAttribute}\n     * as the value for the {@link cycleAttributeName} key in the given cell's style.\n     * @param cell\n     */\n    cycleAttribute(cell) {\n        if (!isNullish(this.cycleAttributeName)) {\n            const value = this.consumeCycleAttribute(cell);\n            if (!isNullish(value)) {\n                // @ts-expect-error TODO - style is no longer a string\n                cell.setStyle(`${cell.getStyle()};${this.cycleAttributeName}=${value}`);\n            }\n        }\n    }\n    /**\n     * Adds the given vertex as a child of parent at the specified\n     * x and y coordinate and fires an {@link addVertex} event.\n     * @param parent\n     * @param vertex\n     * @param x\n     * @param y\n     */\n    addVertex(parent, vertex, x, y) {\n        const model = this.graph.getDataModel();\n        while (parent && !this.graph.isValidDropTarget(parent)) {\n            parent = parent.getParent();\n        }\n        parent ?? (parent = this.graph.getSwimlaneAt(x, y));\n        const { scale } = this.graph.getView();\n        let geo = vertex.getGeometry();\n        const pgeo = parent?.getGeometry();\n        if (this.graph.isSwimlane(vertex) && !this.graph.swimlaneNesting) {\n            parent = null;\n        }\n        else if (!parent && this.swimlaneRequired) {\n            return null;\n        }\n        else if (parent && pgeo) {\n            // Keeps vertex inside parent\n            const state = this.graph.getView().getState(parent);\n            if (state) {\n                x -= state.origin.x * scale;\n                y -= state.origin.y * scale;\n                if (this.graph.isConstrainedMoving) {\n                    const { width } = geo;\n                    const { height } = geo;\n                    let tmp = state.x + state.width;\n                    if (x + width > tmp) {\n                        x -= x + width - tmp;\n                    }\n                    tmp = state.y + state.height;\n                    if (y + height > tmp) {\n                        y -= y + height - tmp;\n                    }\n                }\n            }\n            else {\n                x -= pgeo.x * scale;\n                y -= pgeo.y * scale;\n            }\n        }\n        geo = geo.clone();\n        geo.x = this.graph.snap(x / scale - this.graph.getView().translate.x - this.graph.gridSize / 2);\n        geo.y = this.graph.snap(y / scale - this.graph.getView().translate.y - this.graph.gridSize / 2);\n        vertex.setGeometry(geo);\n        if (parent) {\n            parent = this.graph.getDefaultParent();\n        }\n        this.cycleAttribute(vertex);\n        this.fireEvent(new EventObject(InternalEvent.BEFORE_ADD_VERTEX, { vertex: vertex, parent: parent }));\n        model.beginUpdate();\n        try {\n            vertex = this.graph.addCell(vertex, parent);\n            if (vertex) {\n                this.graph.constrainChild(vertex);\n                this.fireEvent(new EventObject(InternalEvent.ADD_VERTEX, { vertex: vertex }));\n            }\n        }\n        finally {\n            model.endUpdate();\n        }\n        if (vertex != null) {\n            this.graph.setSelectionCell(vertex);\n            this.graph.scrollCellToVisible(vertex);\n            this.fireEvent(new EventObject(InternalEvent.AFTER_ADD_VERTEX, { vertex: vertex }));\n        }\n        return vertex;\n    }\n    /**\n     * Removes the editor and all its associated resources. This does not\n     * normally need to be called, it is called automatically when the window\n     * unloads.\n     */\n    destroy() {\n        if (!this.destroyed) {\n            this.destroyed = true;\n            this.tasks?.destroy();\n            this.outline?.destroy();\n            this.properties?.destroy();\n            this.keyHandler?.destroy();\n            this.rubberband?.onDestroy();\n            this.toolbar?.destroy();\n            this.graph?.destroy();\n            this.status = null;\n            this.templates = null;\n        }\n    }\n}\nexport default Editor;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CellMarker from './CellMarker';\n/**\n * Event handler that highlights cells\n *\n * ```javascript\n * new CellTracker(graph, '#00FF00');\n * ```\n *\n * For detecting `dragEnter`, `dragOver` and `dragLeave` on cells, the following code can be used:\n * ```javascript\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *\n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *\n *       this.cell = tmp;\n *\n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *\n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     GlobalConfig.logger.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     GlobalConfig.logger.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     GlobalConfig.logger.debug('dragLeave', cell.value);\n *   }\n * });\n * ```\n */\nclass CellTracker extends CellMarker {\n    constructor(graph, color, funct = null) {\n        super(graph, color);\n        this.destroyed = false;\n        this.graph.addMouseListener(this);\n        if (funct) {\n            this.getCell = funct;\n        }\n    }\n    /**\n     * Ignores the event. The event is not consumed.\n     */\n    mouseDown() {\n        return;\n    }\n    /**\n     * Handles the event by highlighting the cell under the mouse pointer if it is over the hotspot region of the cell.\n     */\n    mouseMove(_sender, me) {\n        if (this.isEnabled()) {\n            this.process(me);\n        }\n    }\n    /**\n     * Handles the event by resetting the highlight.\n     */\n    mouseUp() {\n        return;\n    }\n    /**\n     * Destroys the object and all its resources and DOM nodes. This doesn't normally need to be called.\n     * It is called automatically when the window unloads.\n     */\n    destroy() {\n        if (!this.destroyed) {\n            this.destroyed = true;\n            this.graph.removeMouseListener(this);\n            super.destroy();\n        }\n    }\n}\nexport default CellTracker;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { getRotatedPoint, toRadians } from '../../util/mathUtils';\nimport Point from '../geometry/Point';\nimport ImageShape from '../shape/node/ImageShape';\nimport Rectangle from '../geometry/Rectangle';\nimport RectangleShape from '../shape/node/RectangleShape';\nimport InternalEvent from '../event/InternalEvent';\nimport { HandleConfig } from '../handler/config';\n/**\n * Implements a single custom handle for vertices.\n *\n * @class VertexHandle\n */\nclass VertexHandle {\n    constructor(state, cursor = 'default', image = null, shape = null) {\n        this.dependencies = ['snap', 'cells'];\n        /**\n         * Specifies the cursor to be used for this handle. Default is 'default'.\n         */\n        this.cursor = 'default';\n        /**\n         * Specifies the {@link Image} to be used to render the handle. Default is null.\n         */\n        this.image = null;\n        /**\n         * Default is false.\n         */\n        this.ignoreGrid = false;\n        this.active = true;\n        this.graph = state.view.graph;\n        this.state = state;\n        this.cursor = cursor;\n        this.image = image;\n        this.shape = shape;\n        this.init();\n    }\n    /**\n     * Hook for subclassers to return the current position of the handle.\n     */\n    getPosition(bounds) {\n        return new Point();\n    }\n    /**\n     * Hooks for subclassers to update the style in the <state>.\n     */\n    setPosition(bounds, pt, me) {\n        return;\n    }\n    /**\n     * Hook for subclassers to execute the handle.\n     */\n    execute(me) {\n        return;\n    }\n    /**\n     * Sets the cell style with the given name to the corresponding value in <state>.\n     */\n    copyStyle(key) {\n        this.graph.setCellStyles(key, this.state.style[key], [this.state.cell]);\n    }\n    /**\n     * Processes the given {@link MouseEvent} and invokes <setPosition>.\n     */\n    processEvent(me) {\n        const { scale } = this.graph.view;\n        const tr = this.graph.view.translate;\n        let pt = new Point(me.getGraphX() / scale - tr.x, me.getGraphY() / scale - tr.y);\n        // Center shape on mouse cursor\n        if (this.shape != null && this.shape.bounds != null) {\n            pt.x -= this.shape.bounds.width / scale / 4;\n            pt.y -= this.shape.bounds.height / scale / 4;\n        }\n        // Snaps to grid for the rotated position then applies the rotation for the direction after that\n        const alpha1 = -toRadians(this.getRotation());\n        const alpha2 = -toRadians(this.getTotalRotation()) - alpha1;\n        pt = this.flipPoint(this.rotatePoint(this.snapPoint(this.rotatePoint(pt, alpha1), this.ignoreGrid || !this.graph.isGridEnabledEvent(me.getEvent())), alpha2));\n        this.setPosition(this.state.getPaintBounds(), pt, me);\n        this.redraw();\n    }\n    /**\n     * Should be called after <setPosition> in <processEvent>.\n     * This repaints the state using {@link CellRenderer}.\n     */\n    positionChanged() {\n        if (this.state.text != null) {\n            this.state.text.apply(this.state);\n        }\n        if (this.state.shape != null) {\n            this.state.shape.apply(this.state);\n        }\n        this.graph.cellRenderer.redraw(this.state, true);\n    }\n    /**\n     * Returns the rotation defined in the style of the cell.\n     */\n    getRotation() {\n        if (this.state.shape != null) {\n            return this.state.shape.getRotation();\n        }\n        return 0;\n    }\n    /**\n     * Returns the rotation from the style and the rotation from the direction of\n     * the cell.\n     */\n    getTotalRotation() {\n        if (this.state.shape != null) {\n            return this.state.shape.getShapeRotation();\n        }\n        return 0;\n    }\n    /**\n     * Creates and initializes the shapes required for this handle.\n     */\n    init() {\n        const html = this.isHtmlRequired();\n        if (this.image) {\n            this.shape = new ImageShape(new Rectangle(0, 0, this.image.width, this.image.height), this.image.src);\n            this.shape.preserveImageAspect = false;\n        }\n        else if (!this.shape) {\n            this.shape = this.createShape(html);\n        }\n        this.initShape(html);\n    }\n    /**\n     * Creates and returns the shape for this handle.\n     */\n    createShape(_html) {\n        const handleSize = HandleConfig.size;\n        const bounds = new Rectangle(0, 0, handleSize, handleSize);\n        return new RectangleShape(bounds, HandleConfig.fillColor, HandleConfig.strokeColor);\n    }\n    /**\n     * Initializes <shape> and sets its cursor.\n     */\n    initShape(html) {\n        const shape = this.shape; // `this.shape` cannot be null.\n        if (html && shape.isHtmlAllowed()) {\n            shape.dialect = 'strictHtml';\n            shape.init(this.graph.container);\n        }\n        else {\n            shape.dialect = this.graph.dialect !== 'svg' ? 'mixedHtml' : 'svg';\n            if (this.cursor) {\n                shape.init(this.graph.getView().getOverlayPane());\n            }\n        }\n        InternalEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n        shape.node.style.cursor = this.cursor;\n    }\n    /**\n     * Renders the shape for this handle.\n     */\n    redraw() {\n        if (this.shape && this.state.shape) {\n            let pt = this.getPosition(this.state.getPaintBounds());\n            if (pt) {\n                const alpha = toRadians(this.getTotalRotation());\n                pt = this.rotatePoint(this.flipPoint(pt), alpha);\n                const { scale } = this.graph.view;\n                const tr = this.graph.view.translate;\n                const shapeBounds = this.shape.bounds;\n                shapeBounds.x = Math.floor((pt.x + tr.x) * scale - shapeBounds.width / 2);\n                shapeBounds.y = Math.floor((pt.y + tr.y) * scale - shapeBounds.height / 2);\n                // Needed to force update of text bounds\n                this.shape.redraw();\n            }\n        }\n    }\n    /**\n     * Returns true if this handle should be rendered in HTML. This returns true if\n     * the text node is in the graph container.\n     */\n    isHtmlRequired() {\n        return !!this.state.text && this.state.text.node.parentNode === this.graph.container;\n    }\n    /**\n     * Rotates the point by the given angle.\n     */\n    rotatePoint(pt, alpha) {\n        const bounds = this.state.getCellBounds();\n        const cx = new Point(bounds.getCenterX(), bounds.getCenterY());\n        const cos = Math.cos(alpha);\n        const sin = Math.sin(alpha);\n        return getRotatedPoint(pt, cos, sin, cx);\n    }\n    /**\n     * Flips the given point vertically and/or horizontally.\n     */\n    flipPoint(pt) {\n        if (this.state.shape) {\n            const bounds = this.state.getCellBounds();\n            if (this.state.shape.flipH) {\n                pt.x = 2 * bounds.x + bounds.width - pt.x;\n            }\n            if (this.state.shape.flipV) {\n                pt.y = 2 * bounds.y + bounds.height - pt.y;\n            }\n        }\n        return pt;\n    }\n    /**\n     * Snaps the given point to the grid if ignore is false. This modifies\n     * the given point in-place and also returns it.\n     */\n    snapPoint(pt, ignore) {\n        if (!ignore) {\n            pt.x = this.graph.snap(pt.x);\n            pt.y = this.graph.snap(pt.y);\n        }\n        return pt;\n    }\n    /**\n     * Shows or hides this handle.\n     */\n    setVisible(visible) {\n        if (this.shape && this.shape.node) {\n            this.shape.node.style.display = visible ? '' : 'none';\n        }\n    }\n    /**\n     * Resets the state of this handle by setting its visibility to true.\n     */\n    reset() {\n        this.setVisible(true);\n        this.state.style = this.graph.getCellStyle(this.state.cell);\n        this.positionChanged();\n    }\n    /**\n     * Destroys this handle.\n     */\n    destroy() {\n        if (this.shape) {\n            this.shape.destroy();\n            this.shape = null;\n        }\n    }\n}\nexport default VertexHandle;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport GraphLayout from './GraphLayout';\n/**\n * Extends {@link GraphLayout} to implement a circular layout for a given radius.\n * The vertices do not need to be connected for this layout to work and all\n * connections between vertices are not taken into account.\n *\n * Example:\n *\n * ```javascript\n * const layout = new CircleLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * ```\n *\n * @category Layout\n */\nclass CircleLayout extends GraphLayout {\n    /**\n     * Constructs a new circular layout for the specified radius.\n     *\n     * @param graph {@link AbstractGraph} that contains the cells.\n     * @param radius Optional radius as an int. Default is 100.\n     */\n    constructor(graph, radius = 100) {\n        super(graph);\n        /**\n         * Boolean specifying if the circle should be moved to the top,\n         * left corner specified by <x0> and <y0>. Default is false.\n         */\n        this.moveCircle = false;\n        /**\n         * Integer specifying the left coordinate of the circle.\n         * Default is 0.\n         */\n        this.x0 = 0;\n        /**\n         * Integer specifying the top coordinate of the circle.\n         * Default is 0.\n         */\n        this.y0 = 0;\n        /**\n         * Specifies if all edge points of traversed edges should be removed.\n         * Default is true.\n         */\n        this.resetEdges = true;\n        /**\n         * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n         * modified by the result. Default is true.\n         */\n        this.disableEdgeStyle = true;\n        this.radius = radius;\n    }\n    /**\n     * Implements {@link GraphLayout#execute}.\n     */\n    execute(parent) {\n        // Moves the vertices to build a circle. Makes sure the\n        // radius is large enough for the vertices to not\n        // overlap\n        this.graph.batchUpdate(() => {\n            // Gets all vertices inside the parent and finds\n            // the maximum dimension of the largest vertex\n            let max = 0;\n            let top = null;\n            let left = null;\n            const vertices = [];\n            const childCount = parent.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                const cell = parent.getChildAt(i);\n                if (!this.isVertexIgnored(cell)) {\n                    vertices.push(cell);\n                    const bounds = this.getVertexBounds(cell);\n                    if (top == null) {\n                        top = bounds.y;\n                    }\n                    else {\n                        top = Math.min(top, bounds.y);\n                    }\n                    if (left == null) {\n                        left = bounds.x;\n                    }\n                    else {\n                        left = Math.min(left, bounds.x);\n                    }\n                    max = Math.max(max, Math.max(bounds.width, bounds.height));\n                }\n                else if (!this.isEdgeIgnored(cell)) {\n                    // Resets the points on the traversed edge\n                    if (this.resetEdges) {\n                        this.graph.resetEdge(cell);\n                    }\n                    if (this.disableEdgeStyle) {\n                        this.setEdgeStyleEnabled(cell, false);\n                    }\n                }\n            }\n            const r = this.getRadius(vertices.length, max);\n            if (this.moveCircle) {\n                // Moves the circle to the specified origin\n                left = this.x0;\n                top = this.y0;\n            }\n            this.circle(vertices, r, left, top);\n        });\n    }\n    /**\n     * Returns the radius to be used for the given vertex count. Max is the maximum\n     * width or height of all vertices in the layout.\n     */\n    getRadius(count, max) {\n        return Math.max((count * max) / Math.PI, this.radius);\n    }\n    /**\n     * Executes the circular layout for the specified array\n     * of vertices and the given radius. This is called from\n     * <execute>.\n     */\n    circle(vertices, r, left, top) {\n        const vertexCount = vertices.length;\n        const phi = (2 * Math.PI) / vertexCount;\n        vertices.forEach((vertex, i) => {\n            if (this.isVertexMovable(vertex)) {\n                this.setVertexLocation(vertex, Math.round(left + r + r * Math.sin(i * phi)), Math.round(top + r + r * Math.cos(i * phi)));\n            }\n        });\n    }\n}\nexport default CircleLayout;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport GraphLayout from './GraphLayout';\n/**\n * Allows to compose multiple layouts into a single layout.\n *\n * The {@link master} layout is the layout that handles move operations if another layout than the first\n * element in {@link GraphLayout}s should be used. The {@link master} layout is not executed as\n * the code assumes that it is part of {@link layouts}.\n *\n * Example:\n * ```javascript\n * const first = new FastOrganicLayout(graph);\n * const second = new ParallelEdgeLayout(graph);\n * const layout = new CompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * ```\n *\n * @category Layout\n */\nclass CompositeLayout extends GraphLayout {\n    /**\n     * Constructs a new layout using the given layouts. The graph instance is\n     * required for creating the transaction that contains all layouts.\n     *\n     * @param graph Reference to the enclosing {@link AbstractGraph}.\n     * @param layouts Array of {@link GraphLayout}s.\n     * @param master Optional layout that handles moves. If no layout is given, then the first layout of the above array is used to handle moves.\n     */\n    constructor(graph, layouts, master) {\n        super(graph);\n        this.layouts = layouts;\n        this.master = master;\n    }\n    /**\n     * Calls `move` on {@link master} or the first layout in {@link layouts}.\n     */\n    moveCell(cell, x, y) {\n        if (this.master != null) {\n            this.master.moveCell.apply(this.master, [cell, x, y]);\n        }\n        else {\n            this.layouts[0].moveCell.apply(this.layouts[0], [cell, x, y]);\n        }\n    }\n    /**\n     * Implements {@link GraphLayout#execute} by executing all {@link layouts} in a single transaction.\n     */\n    execute(parent) {\n        this.graph.batchUpdate(() => {\n            for (let i = 0; i < this.layouts.length; i += 1) {\n                this.layouts[i].execute.apply(this.layouts[i], [parent]);\n            }\n        });\n    }\n}\nexport default CompositeLayout;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport GraphLayout from './GraphLayout';\nimport { intersects } from '../../util/mathUtils';\n/**\n * Extends {@link GraphLayout} to implement an edge label layout. This layout\n * makes use of cell states, which means the graph must be validated in\n * a graph view (so that the label bounds are available) before this layout\n * can be executed.\n *\n * ```javascript\n * const layout = new EdgeLabelLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * ```\n *\n * @category Layout\n */\nclass EdgeLabelLayout extends GraphLayout {\n    constructor(graph, radius) {\n        super(graph);\n    }\n    /**\n     * Implements {@link GraphLayout.execute}\n     */\n    execute(parent) {\n        const { view } = this.graph;\n        const model = this.graph.getDataModel();\n        // Gets all vertices and edges inside the parent\n        const edges = [];\n        const vertices = [];\n        const childCount = parent.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            const cell = parent.getChildAt(i);\n            const state = view.getState(cell);\n            if (state != null) {\n                if (!this.isVertexIgnored(cell)) {\n                    vertices.push(state);\n                }\n                else if (!this.isEdgeIgnored(cell)) {\n                    edges.push(state);\n                }\n            }\n        }\n        this.placeLabels(vertices, edges);\n    }\n    /**\n     * Places the labels of the given edges.\n     *\n     * @param v   vertexes\n     * @param e   edges\n     */\n    placeLabels(v, e) {\n        // Moves the vertices to build a circle. Makes sure the\n        // radius is large enough for the vertices to not\n        // overlap\n        this.graph.batchUpdate(() => {\n            for (let i = 0; i < e.length; i += 1) {\n                const edge = e[i];\n                if (edge != null && edge.text != null && edge.text.boundingBox != null) {\n                    for (let j = 0; j < v.length; j += 1) {\n                        const vertex = v[j];\n                        if (vertex != null) {\n                            this.avoid(edge, vertex);\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Places the labels of the given edges.\n     */\n    avoid(edge, vertex) {\n        const model = this.graph.getDataModel();\n        const labRect = edge.text.boundingBox;\n        if (intersects(labRect, vertex)) {\n            const dy1 = -labRect.y - labRect.height + vertex.y;\n            const dy2 = -labRect.y + vertex.y + vertex.height;\n            let dy = Math.abs(dy1) < Math.abs(dy2) ? dy1 : dy2;\n            const dx1 = -labRect.x - labRect.width + vertex.x;\n            const dx2 = -labRect.x + vertex.x + vertex.width;\n            let dx = Math.abs(dx1) < Math.abs(dx2) ? dx1 : dx2;\n            if (Math.abs(dx) < Math.abs(dy)) {\n                dy = 0;\n            }\n            else {\n                dx = 0;\n            }\n            let g = edge.cell.getGeometry();\n            if (g != null) {\n                g = g.clone();\n                if (g.offset != null) {\n                    g.offset.x += dx;\n                    g.offset.y += dy;\n                }\n                else {\n                    g.offset = new Point(dx, dy);\n                }\n                model.setGeometry(edge.cell, g);\n            }\n        }\n    }\n}\nexport default EdgeLabelLayout;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectIdentity from '../../util/ObjectIdentity';\nimport GraphLayout from './GraphLayout';\n/**\n * Extends {@link GraphLayout} to implement a fast organic layout algorithm.\n * The vertices need to be connected for this layout to work, vertices\n * with no connections are ignored.\n *\n * Example:\n *\n * ```javascript\n * const layout = new FastOrganicLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * ```\n *\n * @category Layout\n */\nclass MxFastOrganicLayout extends GraphLayout {\n    constructor(graph) {\n        super(graph);\n        /**\n         * Specifies if the top left corner of the input cells should be the origin of the layout result.  Default is true.\n         */\n        this.useInputOrigin = true;\n        /**\n         * Specifies if all edge points of traversed edges should be removed.  Default is true.\n         */\n        this.resetEdges = true;\n        /**\n         * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are modified by the result.  Default is true.\n         */\n        this.disableEdgeStyle = true;\n        /**\n         * The force constant by which the attractive forces are divided and the replusive forces are multiple by the square of.  The value equates to the average radius there is of free space around each node.  Default is 50.\n         */\n        this.forceConstant = 50;\n        /**\n         * Cache of <forceConstant>^2 for performance.\n         */\n        this.forceConstantSquared = 0;\n        /**\n         * Minimal distance limit.  Default is 2.  Prevents of dividing by zero.\n         */\n        this.minDistanceLimit = 2;\n        /**\n         * Maximal distance limit. Default is 500. Prevents of\n         * dividing by zero.\n         */\n        this.maxDistanceLimit = 500;\n        /**\n         * Cached version of minDistanceLimit squared.\n         */\n        this.minDistanceLimitSquared = 4;\n        /**\n         * Start value of temperature. Default is 200.\n         */\n        this.initialTemp = 200;\n        /**\n         * Temperature to limit displacement at later stages of layout.\n         */\n        this.temperature = 0;\n        /**\n         * Total number of iterations to run the layout though.\n         */\n        this.maxIterations = 0;\n        /**\n         * Current iteration count.\n         */\n        this.iteration = 0;\n        /**\n         * An array of all vertices to be laid out.\n         */\n        this.vertexArray = [];\n        /**\n         * An array of locally stored X co-ordinate displacements for the vertices.\n         */\n        this.dispX = [];\n        /**\n         * An array of locally stored Y co-ordinate displacements for the vertices.\n         */\n        this.dispY = [];\n        /**\n         * An array of locally stored co-ordinate positions for the vertices.\n         */\n        this.cellLocation = [];\n        /**\n         * The approximate radius of each cell, nodes only.\n         */\n        this.radius = [];\n        /**\n         * The approximate radius squared of each cell, nodes only.\n         */\n        this.radiusSquared = [];\n        /**\n         * Array of booleans representing the movable states of the vertices.\n         */\n        this.isMoveable = [];\n        /**\n         * Local copy of cell neighbours.\n         */\n        this.neighbours = {};\n        /**\n         * Hashtable from cells to local indices.\n         */\n        this.indices = {};\n        /**\n         * Boolean flag that specifies if the layout is allowed to run. If this is\n         * set to false, then the layout exits in the following iteration.\n         */\n        this.allowedToRun = true;\n    }\n    /**\n     * Returns a boolean indicating if the given <Cell> should be ignored as a\n     * vertex. This returns true if the cell has no connections.\n     *\n     * @param vertex <Cell> whose ignored state should be returned.\n     */\n    isVertexIgnored(vertex) {\n        return (super.isVertexIgnored(vertex) || this.graph.getConnections(vertex).length === 0);\n    }\n    /**\n     * Implements {@link GraphLayout#execute}. This operates on all children of the\n     * given parent where <isVertexIgnored> returns false.\n     */\n    execute(parent) {\n        this.vertexArray = [];\n        let cells = this.graph.getChildVertices(parent);\n        for (let i = 0; i < cells.length; i += 1) {\n            if (!this.isVertexIgnored(cells[i])) {\n                this.vertexArray.push(cells[i]);\n            }\n        }\n        const initialBounds = this.useInputOrigin\n            ? this.graph.getBoundingBoxFromGeometry(this.vertexArray)\n            : null;\n        const n = this.vertexArray.length;\n        this.indices = {};\n        this.dispX = [];\n        this.dispY = [];\n        this.cellLocation = [];\n        this.isMoveable = [];\n        this.neighbours = {};\n        this.radius = [];\n        this.radiusSquared = [];\n        if (this.forceConstant < 0.001) {\n            this.forceConstant = 0.001;\n        }\n        this.forceConstantSquared = this.forceConstant * this.forceConstant;\n        // Create a map of vertices first. This is required for the array of\n        // arrays called neighbours which holds, for each vertex, a list of\n        // ints which represents the neighbours cells to that vertex as\n        // the indices into vertexArray\n        for (let i = 0; i < this.vertexArray.length; i += 1) {\n            const vertex = this.vertexArray[i];\n            this.cellLocation[i] = [];\n            // Set up the mapping from array indices to cells\n            const id = ObjectIdentity.get(vertex);\n            this.indices[id] = i;\n            const bounds = this.getVertexBounds(vertex);\n            // Set the X,Y value of the internal version of the cell to\n            // the center point of the vertex for better positioning\n            const { width } = bounds;\n            const { height } = bounds;\n            // Randomize (0, 0) locations\n            const { x } = bounds;\n            const { y } = bounds;\n            this.cellLocation[i][0] = x + width / 2.0;\n            this.cellLocation[i][1] = y + height / 2.0;\n            this.radius[i] = Math.min(width, height);\n            this.radiusSquared[i] = this.radius[i] * this.radius[i];\n        }\n        // Moves cell location back to top-left from center locations used in\n        // algorithm, resetting the edge points is part of the transaction\n        this.graph.batchUpdate(() => {\n            for (let i = 0; i < n; i += 1) {\n                this.dispX[i] = 0;\n                this.dispY[i] = 0;\n                this.isMoveable[i] = this.isVertexMovable(this.vertexArray[i]);\n                // Get lists of neighbours to all vertices, translate the cells\n                // obtained in indices into vertexArray and store as an array\n                // against the orginial cell index\n                const edges = this.graph.getConnections(this.vertexArray[i], parent);\n                cells = this.graph.getOpposites(edges, this.vertexArray[i]);\n                this.neighbours[i] = [];\n                for (let j = 0; j < cells.length; j += 1) {\n                    // Resets the points on the traversed edge\n                    if (this.resetEdges) {\n                        this.graph.resetEdge(edges[j]);\n                    }\n                    if (this.disableEdgeStyle) {\n                        this.setEdgeStyleEnabled(edges[j], false);\n                    }\n                    // Looks the cell up in the indices dictionary\n                    const id = ObjectIdentity.get(cells[j]);\n                    const index = this.indices[id];\n                    // Check the connected cell in part of the vertex list to be\n                    // acted on by this layout\n                    if (index != null) {\n                        this.neighbours[i][j] = index;\n                    }\n                    // Else if index of the other cell doesn't correspond to\n                    // any cell listed to be acted upon in this layout. Set\n                    // the index to the value of this vertex (a dummy self-loop)\n                    // so the attraction force of the edge is not calculated\n                    else {\n                        this.neighbours[i][j] = i;\n                    }\n                }\n            }\n            this.temperature = this.initialTemp;\n            // If max number of iterations has not been set, guess it\n            if (this.maxIterations === 0) {\n                this.maxIterations = 20 * Math.sqrt(n);\n            }\n            // Main iteration loop\n            for (this.iteration = 0; this.iteration < this.maxIterations; this.iteration += 1) {\n                if (!this.allowedToRun) {\n                    return;\n                }\n                // Calculate repulsive forces on all vertices\n                this.calcRepulsion();\n                // Calculate attractive forces through edges\n                this.calcAttraction();\n                this.calcPositions();\n                this.reduceTemperature();\n            }\n            let minx = null;\n            let miny = null;\n            for (let i = 0; i < this.vertexArray.length; i += 1) {\n                const vertex = this.vertexArray[i];\n                if (this.isVertexMovable(vertex)) {\n                    const bounds = this.getVertexBounds(vertex);\n                    if (bounds != null) {\n                        this.cellLocation[i][0] -= bounds.width / 2.0;\n                        this.cellLocation[i][1] -= bounds.height / 2.0;\n                        const x = this.graph.snap(Math.round(this.cellLocation[i][0]));\n                        const y = this.graph.snap(Math.round(this.cellLocation[i][1]));\n                        this.setVertexLocation(vertex, x, y);\n                        if (minx == null) {\n                            minx = x;\n                        }\n                        else {\n                            minx = Math.min(minx, x);\n                        }\n                        if (miny == null) {\n                            miny = y;\n                        }\n                        else {\n                            miny = Math.min(miny, y);\n                        }\n                    }\n                }\n            }\n            // Modifies the cloned geometries in-place. Not needed\n            // to clone the geometries again as we're in the same\n            // undoable change.\n            let dx = -(minx || 0) + 1;\n            let dy = -(miny || 0) + 1;\n            if (initialBounds != null) {\n                dx += initialBounds.x;\n                dy += initialBounds.y;\n            }\n            this.graph.moveCells(this.vertexArray, dx, dy);\n        });\n    }\n    /**\n     * Takes the displacements calculated for each cell and applies them to the\n     * local cache of cell positions. Limits the displacement to the current\n     * temperature.\n     */\n    calcPositions() {\n        for (let index = 0; index < this.vertexArray.length; index += 1) {\n            if (this.isMoveable[index]) {\n                // Get the distance of displacement for this node for this\n                // iteration\n                let deltaLength = Math.sqrt(this.dispX[index] * this.dispX[index] + this.dispY[index] * this.dispY[index]);\n                if (deltaLength < 0.001) {\n                    deltaLength = 0.001;\n                }\n                // Scale down by the current temperature if less than the\n                // displacement distance\n                const newXDisp = (this.dispX[index] / deltaLength) * Math.min(deltaLength, this.temperature);\n                const newYDisp = (this.dispY[index] / deltaLength) * Math.min(deltaLength, this.temperature);\n                // reset displacements\n                this.dispX[index] = 0;\n                this.dispY[index] = 0;\n                // Update the cached cell locations\n                this.cellLocation[index][0] += newXDisp;\n                this.cellLocation[index][1] += newYDisp;\n            }\n        }\n    }\n    /**\n     * Calculates the attractive forces between all laid out nodes linked by\n     * edges\n     */\n    calcAttraction() {\n        // Check the neighbours of each vertex and calculate the attractive\n        // force of the edge connecting them\n        for (let i = 0; i < this.vertexArray.length; i += 1) {\n            for (let k = 0; k < this.neighbours[i].length; k += 1) {\n                // Get the index of the othe cell in the vertex array\n                const j = this.neighbours[i][k];\n                // Do not proceed self-loops\n                if (i !== j && this.isMoveable[i] && this.isMoveable[j]) {\n                    const xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n                    const yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n                    // The distance between the nodes\n                    let deltaLengthSquared = xDelta * xDelta +\n                        yDelta * yDelta -\n                        this.radiusSquared[i] -\n                        this.radiusSquared[j];\n                    if (deltaLengthSquared < this.minDistanceLimitSquared) {\n                        deltaLengthSquared = this.minDistanceLimitSquared;\n                    }\n                    const deltaLength = Math.sqrt(deltaLengthSquared);\n                    const force = deltaLengthSquared / this.forceConstant;\n                    const displacementX = (xDelta / deltaLength) * force;\n                    const displacementY = (yDelta / deltaLength) * force;\n                    this.dispX[i] -= displacementX;\n                    this.dispY[i] -= displacementY;\n                    this.dispX[j] += displacementX;\n                    this.dispY[j] += displacementY;\n                }\n            }\n        }\n    }\n    /**\n     * Calculates the repulsive forces between all laid out nodes\n     */\n    calcRepulsion() {\n        const vertexCount = this.vertexArray.length;\n        for (let i = 0; i < vertexCount; i += 1) {\n            for (let j = i; j < vertexCount; j += 1) {\n                // Exits if the layout is no longer allowed to run\n                if (!this.allowedToRun) {\n                    return;\n                }\n                if (j !== i && this.isMoveable[i] && this.isMoveable[j]) {\n                    let xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n                    let yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n                    if (xDelta === 0) {\n                        xDelta = 0.01 + Math.random();\n                    }\n                    if (yDelta === 0) {\n                        yDelta = 0.01 + Math.random();\n                    }\n                    // Distance between nodes\n                    const deltaLength = Math.sqrt(xDelta * xDelta + yDelta * yDelta);\n                    let deltaLengthWithRadius = deltaLength - this.radius[i] - this.radius[j];\n                    if (deltaLengthWithRadius > this.maxDistanceLimit) {\n                        // Ignore vertices too far apart\n                        continue;\n                    }\n                    if (deltaLengthWithRadius < this.minDistanceLimit) {\n                        deltaLengthWithRadius = this.minDistanceLimit;\n                    }\n                    const force = this.forceConstantSquared / deltaLengthWithRadius;\n                    const displacementX = (xDelta / deltaLength) * force;\n                    const displacementY = (yDelta / deltaLength) * force;\n                    this.dispX[i] += displacementX;\n                    this.dispY[i] += displacementY;\n                    this.dispX[j] -= displacementX;\n                    this.dispY[j] -= displacementY;\n                }\n            }\n        }\n    }\n    /**\n     * Reduces the temperature of the layout from an initial setting in a linear\n     * fashion to zero.\n     */\n    reduceTemperature() {\n        this.temperature = this.initialTemp * (1.0 - this.iteration / this.maxIterations);\n    }\n}\nexport default MxFastOrganicLayout;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport GraphLayout from './GraphLayout';\nimport ObjectIdentity from '../../util/ObjectIdentity';\n/**\n * Extends {@link GraphLayout} for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n *\n * Example:\n *\n * ```javascript\n * const layout = new ParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * ```\n *\n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n *\n * ```javascript\n * const layout = new ParallelEdgeLayout(graph);\n *\n * graph.addListener(mxEvent.CELL_CONNECTED, (sender, evt) =>\n * {\n *   const model = graph.getDataModel();\n *   const edge = evt.getProperty('edge');\n *   const src = model.getTerminal(edge, true);\n *   const trg = model.getTerminal(edge, false);\n *\n *   layout.isEdgeIgnored = (edge2) =>\n *   {\n *     const src2 = model.getTerminal(edge2, true);\n *     const trg2 = model.getTerminal(edge2, false);\n *\n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *\n *   layout.execute(graph.getDefaultParent());\n * });\n * ```\n *\n * @category Layout\n */\nclass ParallelEdgeLayout extends GraphLayout {\n    constructor(graph) {\n        super(graph);\n        /**\n         * Defines the spacing between the parallels. Default is 20.\n         */\n        this.spacing = 20;\n        /**\n         * Specifies if only overlapping edges should be considered\n         * parallel. Default is false.\n         */\n        this.checkOverlap = false;\n    }\n    /**\n     * Implements {@link GraphLayout#execute}.\n     */\n    execute(parent, cells = null) {\n        const lookup = this.findParallels(parent, cells);\n        this.graph.batchUpdate(() => {\n            for (const i in lookup) {\n                const parallels = lookup[i];\n                if (parallels.length > 1) {\n                    this.layout(parallels);\n                }\n            }\n        });\n    }\n    /**\n     * Finds the parallel edges in the given parent.\n     */\n    findParallels(parent, cells = null) {\n        const lookup = [];\n        const addCell = (cell) => {\n            if (!this.isEdgeIgnored(cell)) {\n                const id = this.getEdgeId(cell);\n                if (id != null) {\n                    if (lookup[id] == null) {\n                        lookup[id] = [];\n                    }\n                    lookup[id].push(cell);\n                }\n            }\n        };\n        if (cells != null) {\n            for (let i = 0; i < cells.length; i += 1) {\n                addCell(cells[i]);\n            }\n        }\n        else {\n            const model = this.graph.getDataModel();\n            const childCount = parent.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                addCell(parent.getChildAt(i));\n            }\n        }\n        return lookup;\n    }\n    /**\n     * Returns a unique ID for the given edge. The id is independent of the\n     * edge direction and is built using the visible terminal of the given\n     * edge.\n     */\n    getEdgeId(edge) {\n        const view = this.graph.getView();\n        // Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n        let src = view.getVisibleTerminal(edge, true);\n        let trg = view.getVisibleTerminal(edge, false);\n        let pts = '';\n        if (src != null && trg != null) {\n            src = ObjectIdentity.get(src);\n            trg = ObjectIdentity.get(trg);\n            if (this.checkOverlap) {\n                const state = this.graph.view.getState(edge);\n                if (state != null && state.absolutePoints != null) {\n                    const tmp = [];\n                    for (let i = 0; i < state.absolutePoints.length; i += 1) {\n                        const pt = state.absolutePoints[i];\n                        if (pt != null) {\n                            tmp.push(pt.x, pt.y);\n                        }\n                    }\n                    pts = tmp.join(',');\n                }\n            }\n            return (src > trg ? `${trg}-${src}` : `${src}-${trg}`) + pts;\n        }\n        return null;\n    }\n    /**\n     * Lays out the parallel edges in the given array.\n     */\n    layout(parallels) {\n        const edge = parallels[0];\n        const view = this.graph.getView();\n        const model = this.graph.getDataModel();\n        const src = view.getVisibleTerminal(edge, true).getGeometry();\n        const trg = view.getVisibleTerminal(edge, false).getGeometry();\n        let x0;\n        let y0;\n        // Routes multiple loops\n        if (src === trg) {\n            x0 = src.x + src.width + this.spacing;\n            y0 = src.y + src.height / 2;\n            for (let i = 0; i < parallels.length; i += 1) {\n                this.route(parallels[i], x0, y0);\n                x0 += this.spacing;\n            }\n        }\n        else if (src != null && trg != null) {\n            // Routes parallel edges\n            const scx = src.x + src.width / 2;\n            const scy = src.y + src.height / 2;\n            const tcx = trg.x + trg.width / 2;\n            const tcy = trg.y + trg.height / 2;\n            const dx = tcx - scx;\n            const dy = tcy - scy;\n            const len = Math.sqrt(dx * dx + dy * dy);\n            if (len > 0) {\n                x0 = scx + dx / 2;\n                y0 = scy + dy / 2;\n                const nx = (dy * this.spacing) / len;\n                const ny = (dx * this.spacing) / len;\n                x0 += (nx * (parallels.length - 1)) / 2;\n                y0 -= (ny * (parallels.length - 1)) / 2;\n                for (let i = 0; i < parallels.length; i += 1) {\n                    this.route(parallels[i], x0, y0);\n                    x0 -= nx;\n                    y0 += ny;\n                }\n            }\n        }\n    }\n    /**\n     * Routes the given edge via the given point.\n     */\n    route(edge, x, y) {\n        if (this.graph.isCellMovable(edge)) {\n            this.setEdgePoints(edge, [new Point(x, y)]);\n        }\n    }\n}\nexport default ParallelEdgeLayout;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../geometry/Rectangle';\nimport GraphLayout from './GraphLayout';\n/**\n * Extends {@link GraphLayout} for partitioning the parent cell vertically or\n * horizontally by filling the complete area with the child cells. A horizontal\n * layout partitions the height of the given parent whereas a non-horizontal\n * layout partitions the width. If the parent is a layer (that is, a child of\n * the root node), then the current graph size is partitioned. The children do\n * not need to be connected for this layout to work.\n *\n * Example:\n *\n * ```javascript\n * const layout = new PartitionLayout(graph, true, 10, 20);\n * layout.execute(graph.getDefaultParent());\n * ```\n *\n * @category Layout\n */\nclass PartitionLayout extends GraphLayout {\n    constructor(graph, horizontal = true, spacing = 0, border = 0) {\n        super(graph);\n        /**\n         * Boolean that specifies if vertices should be resized.\n         * @default true\n         */\n        this.resizeVertices = true;\n        this.horizontal = horizontal != null ? horizontal : true;\n        this.spacing = spacing || 0;\n        this.border = border || 0;\n    }\n    /**\n     * Returns {@link horizontal}.\n     */\n    isHorizontal() {\n        return this.horizontal;\n    }\n    moveCell(cell, x, y) {\n        const model = this.graph.getDataModel();\n        const parent = cell.getParent();\n        if (cell != null && parent != null) {\n            let i = 0;\n            let last = 0;\n            const childCount = parent.getChildCount();\n            // Finds index of the closest swimlane\n            // TODO: Take into account the orientation\n            for (i = 0; i < childCount; i += 1) {\n                const child = parent.getChildAt(i);\n                const bounds = this.getVertexBounds(child);\n                if (bounds != null) {\n                    const tmp = bounds.x + bounds.width / 2;\n                    if (last < x && tmp > x) {\n                        break;\n                    }\n                    last = tmp;\n                }\n            }\n            // Changes child order in parent\n            let idx = parent.getIndex(cell);\n            idx = Math.max(0, i - (i > idx ? 1 : 0));\n            model.add(parent, cell, idx);\n        }\n    }\n    /**\n     * Implements {@link GraphLayout#execute}. All children where <isVertexIgnored>\n     * returns false and <isVertexMovable> returns true are modified.\n     */\n    execute(parent) {\n        const horizontal = this.isHorizontal();\n        const model = this.graph.getDataModel();\n        let pgeo = parent.getGeometry();\n        // Handles special case where the parent is either a layer with no\n        // geometry or the current root of the view in which case the size\n        // of the graph's container will be used.\n        if (this.graph.container != null &&\n            ((pgeo == null && model.isLayer(parent)) ||\n                parent === this.graph.getView().currentRoot)) {\n            const width = this.graph.container.offsetWidth - 1;\n            const height = this.graph.container.offsetHeight - 1;\n            pgeo = new Rectangle(0, 0, width, height);\n        }\n        if (pgeo != null) {\n            const children = [];\n            const childCount = parent.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                const child = parent.getChildAt(i);\n                if (!this.isVertexIgnored(child) && this.isVertexMovable(child)) {\n                    children.push(child);\n                }\n            }\n            const n = children.length;\n            if (n > 0) {\n                let x0 = this.border;\n                let y0 = this.border;\n                let other = horizontal ? pgeo.height : pgeo.width;\n                other -= 2 * this.border;\n                const size = this.graph.isSwimlane(parent)\n                    ? this.graph.getStartSize(parent)\n                    : new Rectangle();\n                other -= horizontal ? size.height : size.width;\n                x0 += size.width;\n                y0 += size.height;\n                const tmp = this.border + (n - 1) * this.spacing;\n                const value = horizontal\n                    ? (pgeo.width - x0 - tmp) / n\n                    : (pgeo.height - y0 - tmp) / n;\n                // Avoids negative values, that is values where the sum of the\n                // spacing plus the border is larger then the available space\n                if (value > 0) {\n                    model.beginUpdate();\n                    try {\n                        for (let i = 0; i < n; i += 1) {\n                            const child = children[i];\n                            let geo = child.getGeometry();\n                            if (geo != null) {\n                                geo = geo.clone();\n                                geo.x = x0;\n                                geo.y = y0;\n                                if (horizontal) {\n                                    if (this.resizeVertices) {\n                                        geo.width = value;\n                                        geo.height = other;\n                                    }\n                                    x0 += value + this.spacing;\n                                }\n                                else {\n                                    if (this.resizeVertices) {\n                                        geo.height = value;\n                                        geo.width = other;\n                                    }\n                                    y0 += value + this.spacing;\n                                }\n                                model.setGeometry(child, geo);\n                            }\n                        }\n                    }\n                    finally {\n                        model.endUpdate();\n                    }\n                }\n            }\n        }\n    }\n}\nexport default PartitionLayout;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { CompactTreeLayout, } from './CompactTreeLayout';\n/**\n * Extends {@link CompactTreeLayout} to implement a radial tree algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n *\n * ```javascript\n * const layout = new RadialTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * ```\n *\n * @category Layout\n */\nclass RadialTreeLayout extends CompactTreeLayout {\n    constructor(graph) {\n        super(graph, false);\n        this.centerX = null;\n        this.centerY = null;\n        /**\n         * The initial offset to compute the angle position.\n         * @default 0.5\n         */\n        this.angleOffset = 0.5;\n        /**\n         * The X co-ordinate of the root cell\n         * @default 0\n         */\n        this.rootx = 0;\n        /**\n         * The Y co-ordinate of the root cell\n         * @default 0\n         */\n        this.rooty = 0;\n        /**\n         * Holds the levelDistance.\n         * @default 120\n         */\n        this.levelDistance = 120;\n        /**\n         * Holds the nodeDistance.\n         * @default 10\n         */\n        this.nodeDistance = 10;\n        /**\n         * Specifies if the radios should be computed automatically\n         * @default false\n         */\n        this.autoRadius = false;\n        /**\n         * Specifies if edges should be sorted according to the order of their\n         * opposite terminal cell in the model.\n         * @default false\n         */\n        this.sortEdges = false;\n        /**\n         * Array of leftmost x coordinate of each row\n         */\n        this.rowMinX = {};\n        /**\n         * Array of rightmost x coordinate of each row\n         */\n        this.rowMaxX = {};\n        /**\n         * Array of x coordinate of leftmost vertex of each row\n         */\n        this.rowMinCenX = {};\n        /**\n         * Array of x coordinate of rightmost vertex of each row\n         */\n        this.rowMaxCenX = {};\n        /**\n         * Array of y deltas of each row behind root vertex, also the radius in the tree\n         */\n        this.rowRadi = {};\n        /**\n         * Array of vertices on each row\n         */\n        this.row = [];\n    }\n    /**\n     * Returns a boolean indicating if the given {@link mxCell} should be ignored as a vertex.\n     *\n     * @param vertex {@link mxCell} whose ignored state should be returned.\n     * @return true if the cell has no connections.\n     */\n    isVertexIgnored(vertex) {\n        return (super.isVertexIgnored(vertex) || this.graph.getConnections(vertex).length === 0);\n    }\n    /**\n     * Implements {@link GraphLayout#execute}.\n     *\n     * If the parent has any connected edges, then it is used as the root of\n     * the tree. Else, {@link AbstractGraph.findTreeRoots} will be used to find a suitable\n     * root node within the set of children of the given parent.\n     *\n     * @param parent    {@link mxCell} whose children should be laid out.\n     * @param root      Optional {@link mxCell} that will be used as the root of the tree.\n     */\n    execute(parent, root = null) {\n        this.parent = parent;\n        this.useBoundingBox = false;\n        this.edgeRouting = false;\n        // this.horizontal = false;\n        super.execute(parent, root || undefined);\n        let bounds = null;\n        const rootBounds = this.getVertexBounds(this.root);\n        this.centerX = rootBounds.x + rootBounds.width / 2;\n        this.centerY = rootBounds.y + rootBounds.height / 2;\n        // Calculate the bounds of the involved vertices directly from the values set in the compact tree\n        for (const vertex in this.visited) {\n            const vertexBounds = this.getVertexBounds(this.visited[vertex]);\n            bounds = bounds != null ? bounds : vertexBounds.clone();\n            bounds.add(vertexBounds);\n        }\n        this.calcRowDims([this.node], 0);\n        let maxLeftGrad = 0;\n        let maxRightGrad = 0;\n        // Find the steepest left and right gradients\n        for (let i = 0; i < this.row.length; i += 1) {\n            const leftGrad = (this.centerX - this.rowMinX[i] - this.nodeDistance) / this.rowRadi[i];\n            const rightGrad = (this.rowMaxX[i] - this.centerX - this.nodeDistance) / this.rowRadi[i];\n            maxLeftGrad = Math.max(maxLeftGrad, leftGrad);\n            maxRightGrad = Math.max(maxRightGrad, rightGrad);\n        }\n        // Extend out row so they meet the maximum gradient and convert to polar co-ords\n        for (let i = 0; i < this.row.length; i += 1) {\n            const xLeftLimit = this.centerX - this.nodeDistance - maxLeftGrad * this.rowRadi[i];\n            const xRightLimit = this.centerX + this.nodeDistance + maxRightGrad * this.rowRadi[i];\n            const fullWidth = xRightLimit - xLeftLimit;\n            for (let j = 0; j < this.row[i].length; j++) {\n                const row = this.row[i];\n                const node = row[j];\n                const vertexBounds = this.getVertexBounds(node.cell);\n                const xProportion = (vertexBounds.x + vertexBounds.width / 2 - xLeftLimit) / fullWidth;\n                const theta = 2 * Math.PI * xProportion;\n                node.theta = theta;\n            }\n        }\n        // Post-process from outside inwards to try to align parents with children\n        for (let i = this.row.length - 2; i >= 0; i--) {\n            const row = this.row[i];\n            for (let j = 0; j < row.length; j++) {\n                const node = row[j];\n                let { child } = node;\n                let counter = 0;\n                let totalTheta = 0;\n                while (child != null) {\n                    totalTheta += child.theta;\n                    counter++;\n                    child = child.next;\n                }\n                if (counter > 0) {\n                    const averTheta = totalTheta / counter;\n                    if (averTheta > node.theta && j < row.length - 1) {\n                        const nextTheta = row[j + 1].theta;\n                        node.theta = Math.min(averTheta, nextTheta - Math.PI / 10);\n                    }\n                    else if (averTheta < node.theta && j > 0) {\n                        const lastTheta = row[j - 1].theta;\n                        node.theta = Math.max(averTheta, lastTheta + Math.PI / 10);\n                    }\n                }\n            }\n        }\n        // Set locations\n        for (let i = 0; i < this.row.length; i += 1) {\n            for (let j = 0; j < this.row[i].length; j++) {\n                const row = this.row[i];\n                const node = row[j];\n                const vertexBounds = this.getVertexBounds(node.cell);\n                this.setVertexLocation(node.cell, this.centerX -\n                    vertexBounds.width / 2 +\n                    this.rowRadi[i] * Math.cos(node.theta), this.centerY -\n                    vertexBounds.height / 2 +\n                    this.rowRadi[i] * Math.sin(node.theta));\n            }\n        }\n    }\n    /**\n     * Recursive function to calculate the dimensions of each row\n     *\n     * @param row      Array of internal nodes, the children of which are to be processed.\n     * @param rowNum   Integer indicating which row is being processed.\n     */\n    calcRowDims(row, rowNum) {\n        if (row == null || row.length === 0) {\n            return;\n        }\n        // Place root's children proportionally around the first level\n        this.rowMinX[rowNum] = this.centerX;\n        this.rowMaxX[rowNum] = this.centerX;\n        this.rowMinCenX[rowNum] = this.centerX;\n        this.rowMaxCenX[rowNum] = this.centerX;\n        this.row[rowNum] = [];\n        let rowHasChildren = false;\n        for (let i = 0; i < row.length; i += 1) {\n            let child = row[i] != null ? row[i].child : null;\n            while (child != null) {\n                const { cell } = child;\n                const vertexBounds = this.getVertexBounds(cell);\n                this.rowMinX[rowNum] = Math.min(vertexBounds.x, this.rowMinX[rowNum]);\n                this.rowMaxX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width, this.rowMaxX[rowNum]);\n                this.rowMinCenX[rowNum] = Math.min(vertexBounds.x + vertexBounds.width / 2, this.rowMinCenX[rowNum]);\n                this.rowMaxCenX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width / 2, this.rowMaxCenX[rowNum]);\n                this.rowRadi[rowNum] = vertexBounds.y - this.getVertexBounds(this.root).y;\n                if (child.child != null) {\n                    rowHasChildren = true;\n                }\n                this.row[rowNum].push(child);\n                child = child.next;\n            }\n        }\n        if (rowHasChildren) {\n            this.calcRowDims(this.row[rowNum], rowNum + 1);\n        }\n    }\n}\nexport default RadialTreeLayout;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * @category Layout\n */\nconst HierarchicalEdgeStyle = {\n    ORTHOGONAL: 1,\n    POLYLINE: 2,\n    STRAIGHT: 3,\n    CURVE: 4,\n};\nexport default HierarchicalEdgeStyle;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Cell from '../../cell/Cell';\n/**\n * An abstraction of an internal hierarchy node or edge.\n *\n * @category Layout\n */\nclass GraphAbstractHierarchyCell extends Cell {\n    constructor() {\n        super();\n        this.swimlaneIndex = null;\n        /**\n         * The maximum rank this cell occupies. Default is -1.\n         */\n        this.maxRank = -1;\n        /**\n         * The minimum rank this cell occupies. Default is -1.\n         */\n        this.minRank = -1;\n        /**\n         * The width of this cell. Default is 0.\n         */\n        this.width = 0;\n        /**\n         * The height of this cell. Default is 0.\n         */\n        this.height = 0;\n        /**\n         * A cached version of the cells this cell connects to on the next layer up\n         */\n        this.nextLayerConnectedCells = null;\n        /**\n         * A cached version of the cells this cell connects to on the next layer down\n         */\n        this.previousLayerConnectedCells = null;\n        this.x = [];\n        this.y = [];\n        this.temp = [];\n    }\n    /**\n     * Returns whether or not this cell is an edge\n     */\n    isEdge() {\n        return false;\n    }\n    /**\n     * Returns whether or not this cell is a node\n     */\n    isVertex() {\n        return false;\n    }\n    /**\n     * Set the value of x for the specified layer\n     */\n    setX(layer, value) {\n        if (this.isVertex()) {\n            this.x[0] = value;\n        }\n        else if (this.isEdge()) {\n            this.x[layer - this.minRank - 1] = value;\n        }\n    }\n    /**\n     * Gets the value of x on the specified layer\n     */\n    getX(layer) {\n        if (this.isVertex()) {\n            return this.x[0];\n        }\n        if (this.isEdge()) {\n            return this.x[layer - this.minRank - 1];\n        }\n        return 0.0;\n    }\n    /**\n     * Set the value of y for the specified layer\n     */\n    setY(layer, value) {\n        if (this.isVertex()) {\n            this.y[0] = value;\n        }\n        else if (this.isEdge()) {\n            this.y[layer - this.minRank - 1] = value;\n        }\n    }\n}\nexport default GraphAbstractHierarchyCell;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport GraphAbstractHierarchyCell from './GraphAbstractHierarchyCell';\nimport ObjectIdentity from '../../../util/ObjectIdentity';\n/**\n * An abstraction of a hierarchical edge for the hierarchy layout\n *\n * @category Layout\n */\nclass GraphHierarchyNode extends GraphAbstractHierarchyCell {\n    /**\n     * Constructs an internal node to represent the specified real graph cell\n     *\n     * @param cell the real graph cell this node represents\n     */\n    constructor(cell) {\n        super();\n        /**\n         * The object identities of the wrapped cells\n         */\n        this.ids = [];\n        /**\n         * Assigns a unique hashcode for each node. Used by the model dfs instead\n         * of copying HashSets\n         */\n        this.hashCode = false;\n        this.cell = cell;\n        this.id = ObjectIdentity.get(cell);\n        this.connectsAsTarget = [];\n        this.connectsAsSource = [];\n    }\n    /**\n     * Returns the integer value of the layer that this node resides in\n     */\n    getRankValue(layer) {\n        return this.maxRank;\n    }\n    /**\n     * Returns the cells this cell connects to on the next layer up\n     */\n    getNextLayerConnectedCells(layer) {\n        if (this.nextLayerConnectedCells == null) {\n            this.nextLayerConnectedCells = {};\n            this.nextLayerConnectedCells[0] = [];\n            for (let i = 0; i < this.connectsAsTarget.length; i += 1) {\n                const edge = this.connectsAsTarget[i];\n                if (edge.maxRank === -1 || edge.maxRank === layer + 1) {\n                    // Either edge is not in any rank or\n                    // no dummy nodes in edge, add node of other side of edge\n                    this.nextLayerConnectedCells[0].push(edge.source);\n                }\n                else {\n                    // Edge spans at least two layers, add edge\n                    this.nextLayerConnectedCells[0].push(edge);\n                }\n            }\n        }\n        return this.nextLayerConnectedCells[0];\n    }\n    /**\n     * Returns the cells this cell connects to on the next layer down\n     */\n    getPreviousLayerConnectedCells(layer) {\n        if (this.previousLayerConnectedCells == null) {\n            this.previousLayerConnectedCells = [];\n            this.previousLayerConnectedCells[0] = [];\n            for (let i = 0; i < this.connectsAsSource.length; i += 1) {\n                const edge = this.connectsAsSource[i];\n                if (edge.minRank === -1 || edge.minRank === layer - 1) {\n                    // No dummy nodes in edge, add node of other side of edge\n                    this.previousLayerConnectedCells[0].push(edge.target);\n                }\n                else {\n                    // Edge spans at least two layers, add edge\n                    this.previousLayerConnectedCells[0].push(edge);\n                }\n            }\n        }\n        return this.previousLayerConnectedCells[0];\n    }\n    /**\n     * Returns true.\n     */\n    isVertex() {\n        return true;\n    }\n    /**\n     * Gets the value of temp for the specified layer\n     */\n    getGeneralPurposeVariable(layer) {\n        return this.temp[0];\n    }\n    /**\n     * Set the value of temp for the specified layer\n     */\n    setGeneralPurposeVariable(layer, value) {\n        this.temp[0] = value;\n    }\n    isAncestor(otherNode) {\n        // Firstly, the hash code of this node needs to be shorter than the\n        // other node\n        if (otherNode != null &&\n            this.hashCode != null &&\n            otherNode.hashCode != null &&\n            this.hashCode.length < otherNode.hashCode.length) {\n            if (this.hashCode === otherNode.hashCode) {\n                return true;\n            }\n            if (this.hashCode == null || this.hashCode == null) {\n                return false;\n            }\n            // Secondly, this hash code must match the start of the other\n            // node's hash code. Arrays.equals cannot be used here since\n            // the arrays are different length, and we do not want to\n            // perform another array copy.\n            for (let i = 0; i < this.hashCode.length; i += 1) {\n                if (this.hashCode[i] !== otherNode.hashCode[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Gets the core vertex associated with this wrapper\n     */\n    getCoreCell() {\n        return this.cell;\n    }\n}\nexport default GraphHierarchyNode;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport GraphAbstractHierarchyCell from './GraphAbstractHierarchyCell';\nimport ObjectIdentity from '../../../util/ObjectIdentity';\n/**\n * An abstraction of a hierarchical edge for the hierarchy layout\n *\n * @category Layout\n */\nclass GraphHierarchyEdge extends GraphAbstractHierarchyCell {\n    /**\n     * Constructs a hierarchy edge\n     *\n     * @param edges a list of real graph edges this abstraction represents\n     */\n    constructor(edges) {\n        super();\n        /**\n         * The node this edge is sourced at\n         */\n        this.source = null;\n        /**\n         * The node this edge targets\n         */\n        this.target = null;\n        /**\n         * Whether or not the direction of this edge has been reversed\n         * internally to create a DAG for the hierarchical layout\n         */\n        this.isReversed = false;\n        this.edges = edges;\n        this.ids = [];\n        for (let i = 0; i < edges.length; i += 1) {\n            this.ids.push(ObjectIdentity.get(edges[i]));\n        }\n    }\n    /**\n     * Inverts the direction of this internal edge(s)\n     */\n    invert() {\n        const temp = this.source;\n        this.source = this.target;\n        this.target = temp;\n        this.isReversed = !this.isReversed;\n    }\n    /**\n     * Returns the cells this cell connects to on the next layer up\n     */\n    getNextLayerConnectedCells(layer) {\n        if (this.nextLayerConnectedCells == null) {\n            this.nextLayerConnectedCells = [];\n            for (let i = 0; i < this.temp.length; i += 1) {\n                this.nextLayerConnectedCells[i] = [];\n                if (i === this.temp.length - 1) {\n                    this.nextLayerConnectedCells[i].push(this.source);\n                }\n                else {\n                    this.nextLayerConnectedCells[i].push(this);\n                }\n            }\n        }\n        return this.nextLayerConnectedCells[layer - this.minRank - 1];\n    }\n    /**\n     * Returns the cells this cell connects to on the next layer down\n     */\n    getPreviousLayerConnectedCells(layer) {\n        if (this.previousLayerConnectedCells == null) {\n            this.previousLayerConnectedCells = [];\n            for (let i = 0; i < this.temp.length; i += 1) {\n                this.previousLayerConnectedCells[i] = [];\n                if (i === 0) {\n                    this.previousLayerConnectedCells[i].push(this.target);\n                }\n                else {\n                    this.previousLayerConnectedCells[i].push(this);\n                }\n            }\n        }\n        return this.previousLayerConnectedCells[layer - this.minRank - 1];\n    }\n    /**\n     * Returns true.\n     */\n    isEdge() {\n        return true;\n    }\n    /**\n     * Gets the value of temp for the specified layer\n     */\n    getGeneralPurposeVariable(layer) {\n        return this.temp[layer - this.minRank - 1];\n    }\n    /**\n     * Set the value of temp for the specified layer\n     */\n    setGeneralPurposeVariable(layer, value) {\n        this.temp[layer - this.minRank - 1] = value;\n    }\n    /**\n     * Gets the first core edge associated with this wrapper\n     */\n    getCoreCell() {\n        if (this.edges.length > 0) {\n            return this.edges[0];\n        }\n        return null;\n    }\n}\nexport default GraphHierarchyEdge;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Dictionary from '../../../util/Dictionary';\nimport GraphHierarchyNode from '../datatypes/GraphHierarchyNode';\nimport GraphHierarchyEdge from '../datatypes/GraphHierarchyEdge';\n/**\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * @category Layout\n */\nclass GraphHierarchyModel {\n    /**\n     *\n     * Creates an internal ordered graph model using the vertices passed in. If\n     * there are any, leftward edge need to be inverted in the internal model\n     *\n     * @param layout\n     * @param vertices the vertices for this hierarchy\n     * @param roots\n     * @param parent\n     * @param tightenToSource whether or not to tighten vertices towards the sources\n     */\n    constructor(layout, vertices, roots, parent, tightenToSource) {\n        /**\n         * Mapping from rank number to actual rank\n         */\n        this.ranks = null;\n        /**\n         * Store of roots of this hierarchy model, these are real graph cells, not\n         * internal cells\n         */\n        this.roots = null;\n        /**\n         * The parent cell whose children are being laid out\n         */\n        this.parent = null;\n        /**\n         * Count of the number of times the ancestor dfs has been used.\n         */\n        this.dfsCount = 0;\n        /**\n         * High value to start source layering scan rank value from.\n         */\n        this.SOURCESCANSTARTRANK = 100000000;\n        /**\n         * Whether or not to tighten the assigned ranks of vertices up towards\n         * the source cells.\n         */\n        this.tightenToSource = false;\n        const graph = layout.getGraph();\n        this.tightenToSource = tightenToSource;\n        this.roots = roots;\n        this.parent = parent;\n        // map of cells to internal cell needed for second run through\n        // to setup the sink of edges correctly\n        this.vertexMapper = new Dictionary();\n        this.edgeMapper = new Dictionary();\n        this.maxRank = 0;\n        const internalVertices = {};\n        if (vertices == null) {\n            vertices = graph.getChildVertices(parent);\n        }\n        this.maxRank = this.SOURCESCANSTARTRANK;\n        // map of cells to internal cell needed for second run through\n        // to setup the sink of edges correctly. Guess size by number\n        // of edges is roughly same as number of vertices.\n        this.createInternalCells(layout, vertices, internalVertices);\n        // Go through edges set their sink values. Also check the\n        // ordering if and invert edges if necessary\n        for (let i = 0; i < vertices.length; i += 1) {\n            const edges = internalVertices[i].connectsAsSource;\n            for (let j = 0; j < edges.length; j++) {\n                const internalEdge = edges[j];\n                const realEdges = internalEdge.edges;\n                // Only need to process the first real edge, since\n                // all the edges connect to the same other vertex\n                if (realEdges != null && realEdges.length > 0) {\n                    const realEdge = realEdges[0];\n                    let targetCell = layout.getVisibleTerminal(realEdge, false);\n                    let internalTargetCell = this.vertexMapper.get(targetCell);\n                    if (internalVertices[i] === internalTargetCell) {\n                        // If there are parallel edges going between two vertices and not all are in the same direction\n                        // you can have navigated across one direction when doing the cycle reversal that isn't the same\n                        // direction as the first real edge in the array above. When that happens the if above catches\n                        // that and we correct the target cell before continuing.\n                        // This branch only detects this single case\n                        targetCell = layout.getVisibleTerminal(realEdge, true);\n                        internalTargetCell = this.vertexMapper.get(targetCell);\n                    }\n                    if (internalTargetCell != null && internalVertices[i] !== internalTargetCell) {\n                        internalEdge.target = internalTargetCell;\n                        if (internalTargetCell.connectsAsTarget.length === 0) {\n                            internalTargetCell.connectsAsTarget = [];\n                        }\n                        if (internalTargetCell.connectsAsTarget.indexOf(internalEdge) < 0) {\n                            internalTargetCell.connectsAsTarget.push(internalEdge);\n                        }\n                    }\n                }\n            }\n            // Use the temp variable in the internal nodes to mark this\n            // internal vertex as having been visited.\n            internalVertices[i].temp[0] = 1;\n        }\n    }\n    /**\n     * Creates all edges in the internal model\n     *\n     * @param layout Reference to the <HierarchicalLayout> algorithm.\n     * @param vertices Array of {@link Cells} that represent the vertices whom are to\n     * have an internal representation created.\n     * @param internalVertices The array of {@link GraphHierarchyNodes} to have their\n     * information filled in using the real vertices.\n     */\n    createInternalCells(layout, vertices, internalVertices) {\n        const graph = layout.getGraph();\n        // Create internal edges\n        for (let i = 0; i < vertices.length; i += 1) {\n            internalVertices[i] = new GraphHierarchyNode(vertices[i]);\n            this.vertexMapper.put(vertices[i], internalVertices[i]);\n            // If the layout is deterministic, order the cells\n            // List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n            const conns = layout.getEdges(vertices[i]);\n            internalVertices[i].connectsAsSource = [];\n            // Create internal edges, but don't do any rank assignment yet\n            // First use the information from the greedy cycle remover to\n            // invert the leftward edges internally\n            for (let j = 0; j < conns.length; j++) {\n                const cell = layout.getVisibleTerminal(conns[j], false);\n                // Looking for outgoing edges only\n                if (cell !== vertices[i] && cell.isVertex() && !layout.isVertexIgnored(cell)) {\n                    // We process all edge between this source and its targets\n                    // If there are edges going both ways, we need to collect\n                    // them all into one internal edges to avoid looping problems\n                    // later. We assume this direction (source -> target) is the\n                    // natural direction if at least half the edges are going in\n                    // that direction.\n                    // The check below for edges[0] being in the vertex mapper is\n                    // in case we've processed this the other way around\n                    // (target -> source) and the number of edges in each direction\n                    // are the same. All the graph edges will have been assigned to\n                    // an internal edge going the other way, so we don't want to\n                    // process them again\n                    const undirectedEdges = layout.getEdgesBetween(vertices[i], cell, false);\n                    const directedEdges = layout.getEdgesBetween(vertices[i], cell, true);\n                    if (undirectedEdges != null &&\n                        undirectedEdges.length > 0 &&\n                        this.edgeMapper.get(undirectedEdges[0]) == null &&\n                        directedEdges.length * 2 >= undirectedEdges.length) {\n                        const internalEdge = new GraphHierarchyEdge(undirectedEdges);\n                        for (let k = 0; k < undirectedEdges.length; k++) {\n                            const edge = undirectedEdges[k];\n                            this.edgeMapper.put(edge, internalEdge);\n                            // Resets all point on the edge and disables the edge style\n                            // without deleting it from the cell style\n                            graph.resetEdge(edge);\n                            if (layout.disableEdgeStyle) {\n                                layout.setEdgeStyleEnabled(edge, false);\n                                layout.setOrthogonalEdge(edge, true);\n                            }\n                        }\n                        internalEdge.source = internalVertices[i];\n                        if (internalVertices[i].connectsAsSource.indexOf(internalEdge) < 0) {\n                            internalVertices[i].connectsAsSource.push(internalEdge);\n                        }\n                    }\n                }\n            }\n            // Ensure temp variable is cleared from any previous use\n            internalVertices[i].temp[0] = 0;\n        }\n    }\n    /**\n     * Basic determination of minimum layer ranking by working from from sources\n     * or sinks and working through each node in the relevant edge direction.\n     * Starting at the sinks is basically a longest path layering algorithm.\n     */\n    initialRank() {\n        const startNodes = [];\n        if (this.roots != null) {\n            for (let i = 0; i < this.roots.length; i += 1) {\n                const internalNode = this.vertexMapper.get(this.roots[i]);\n                if (internalNode != null) {\n                    startNodes.push(internalNode);\n                }\n            }\n        }\n        const internalNodes = this.vertexMapper.getValues();\n        for (let i = 0; i < internalNodes.length; i += 1) {\n            // Mark the node as not having had a layer assigned\n            internalNodes[i].temp[0] = -1;\n        }\n        const startNodesCopy = startNodes.slice();\n        while (startNodes.length > 0) {\n            const internalNode = startNodes[0];\n            const layerDeterminingEdges = internalNode.connectsAsTarget;\n            const edgesToBeMarked = internalNode.connectsAsSource;\n            // flag to keep track of whether or not all layer determining\n            // edges have been scanned\n            let allEdgesScanned = true;\n            // Work out the layer of this node from the layer determining\n            // edges. The minimum layer number of any node connected by one of\n            // the layer determining edges variable\n            let minimumLayer = this.SOURCESCANSTARTRANK;\n            for (let i = 0; i < layerDeterminingEdges.length; i += 1) {\n                const internalEdge = layerDeterminingEdges[i];\n                if (internalEdge.temp[0] === 5270620) {\n                    // This edge has been scanned, get the layer of the\n                    // node on the other end\n                    const otherNode = internalEdge.source;\n                    minimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n                }\n                else {\n                    allEdgesScanned = false;\n                    break;\n                }\n            }\n            // If all edge have been scanned, assign the layer, mark all\n            // edges in the other direction and remove from the nodes list\n            if (allEdgesScanned) {\n                internalNode.temp[0] = minimumLayer;\n                this.maxRank = Math.min(this.maxRank, minimumLayer);\n                if (edgesToBeMarked != null) {\n                    for (let i = 0; i < edgesToBeMarked.length; i += 1) {\n                        const internalEdge = edgesToBeMarked[i];\n                        // Assign unique stamp ( y/m/d/h )\n                        internalEdge.temp[0] = 5270620;\n                        // Add node on other end of edge to LinkedList of\n                        // nodes to be analysed\n                        const otherNode = internalEdge.target;\n                        // Only add node if it hasn't been assigned a layer\n                        if (otherNode.temp[0] === -1) {\n                            startNodes.push(otherNode);\n                            // Mark this other node as neither being\n                            // unassigned nor assigned so it isn't\n                            // added to this list again, but it's\n                            // layer isn't used in any calculation.\n                            otherNode.temp[0] = -2;\n                        }\n                    }\n                }\n                startNodes.shift();\n            }\n            else {\n                // Not all the edges have been scanned, get to the back of\n                // the class and put the dunces cap on\n                const removedCell = startNodes.shift();\n                startNodes.push(internalNode);\n                if (removedCell === internalNode && startNodes.length === 1) {\n                    // This is an error condition, we can't get out of\n                    // this loop. It could happen for more than one node\n                    // but that's a lot harder to detect. Log the error\n                    // TODO make log comment\n                    break;\n                }\n            }\n        }\n        // Normalize the ranks down from their large starting value to place\n        // at least 1 sink on layer 0\n        for (let i = 0; i < internalNodes.length; i += 1) {\n            // Mark the node as not having had a layer assigned\n            internalNodes[i].temp[0] -= this.maxRank;\n        }\n        // Tighten the rank 0 nodes as far as possible\n        for (let i = 0; i < startNodesCopy.length; i += 1) {\n            const internalNode = startNodesCopy[i];\n            let currentMaxLayer = 0;\n            const layerDeterminingEdges = internalNode.connectsAsSource;\n            for (let j = 0; j < layerDeterminingEdges.length; j++) {\n                const internalEdge = layerDeterminingEdges[j];\n                const otherNode = internalEdge.target;\n                internalNode.temp[0] = Math.max(currentMaxLayer, otherNode.temp[0] + 1);\n                currentMaxLayer = internalNode.temp[0];\n            }\n        }\n        // Reset the maxRank to that which would be expected for a from-sink\n        // scan\n        this.maxRank = this.SOURCESCANSTARTRANK - this.maxRank;\n    }\n    /**\n     * Fixes the layer assignments to the values stored in the nodes. Also needs\n     * to create dummy nodes for edges that cross layers.\n     */\n    fixRanks() {\n        // TODO: Should this be a Cell[]?\n        const rankList = {};\n        this.ranks = [];\n        for (let i = 0; i < this.maxRank + 1; i += 1) {\n            rankList[i] = [];\n            this.ranks.push(rankList[i]);\n        }\n        // Perform a DFS to obtain an initial ordering for each rank.\n        // Without doing this you would end up having to process\n        // crossings for a standard tree.\n        let rootsArray = null;\n        if (this.roots != null) {\n            const oldRootsArray = this.roots;\n            rootsArray = [];\n            for (let i = 0; i < oldRootsArray.length; i += 1) {\n                const cell = oldRootsArray[i];\n                const internalNode = this.vertexMapper.get(cell);\n                rootsArray[i] = internalNode;\n            }\n        }\n        this.visit((parent, node, edge, layer, seen) => {\n            if (seen == 0 && node.maxRank < 0 && node.minRank < 0) {\n                rankList[node.temp[0]].push(node);\n                node.maxRank = node.temp[0];\n                node.minRank = node.temp[0];\n                // Set temp[0] to the nodes position in the rank\n                node.temp[0] = rankList[node.maxRank].length - 1;\n            }\n            if (parent != null && edge != null) {\n                const parentToCellRankDifference = parent.maxRank - node.maxRank;\n                if (parentToCellRankDifference > 1) {\n                    // There are ranks in between the parent and current cell\n                    edge.maxRank = parent.maxRank;\n                    edge.minRank = node.maxRank;\n                    edge.temp = [];\n                    edge.x = [];\n                    edge.y = [];\n                    for (let i = edge.minRank + 1; i < edge.maxRank; i += 1) {\n                        // The connecting edge must be added to the\n                        // appropriate ranks\n                        rankList[i].push(edge);\n                        edge.setGeneralPurposeVariable(i, rankList[i].length - 1);\n                    }\n                }\n            }\n        }, rootsArray, false, null);\n    }\n    /**\n     * A depth first search through the internal heirarchy model.\n     *\n     * @param visitor The visitor function pattern to be called for each node.\n     * @param trackAncestors Whether or not the search is to keep track all nodes\n     * directly above this one in the search path.\n     */\n    visit(visitor, dfsRoots, trackAncestors, seenNodes = null) {\n        // Run dfs through on all roots\n        if (dfsRoots != null) {\n            for (let i = 0; i < dfsRoots.length; i += 1) {\n                const internalNode = dfsRoots[i];\n                if (internalNode != null) {\n                    if (seenNodes == null) {\n                        seenNodes = {};\n                    }\n                    if (trackAncestors) {\n                        // Set up hash code for root\n                        internalNode.hashCode = [];\n                        internalNode.hashCode[0] = this.dfsCount;\n                        internalNode.hashCode[1] = i;\n                        this.extendedDfs(null, internalNode, null, visitor, seenNodes, internalNode.hashCode, i, 0);\n                    }\n                    else {\n                        this.dfs(null, internalNode, null, visitor, seenNodes, 0);\n                    }\n                }\n            }\n            this.dfsCount++;\n        }\n    }\n    /**\n     * Performs a depth first search on the internal hierarchy model\n     *\n     * @param parent the parent internal node of the current internal node\n     * @param root the current internal node\n     * @param connectingEdge the internal edge connecting the internal node and the parent\n     * internal node, if any\n     * @param visitor the visitor pattern to be called for each node\n     * @param seen a set of all nodes seen by this dfs a set of all of the\n     * ancestor node of the current node\n     * @param layer the layer on the dfs tree ( not the same as the model ranks )\n     */\n    dfs(parent, root, connectingEdge, visitor, seen, layer) {\n        if (root != null) {\n            const rootId = root.id;\n            if (seen[rootId] == null) {\n                seen[rootId] = root;\n                visitor(parent, root, connectingEdge, layer, 0);\n                // Copy the connects as source list so that visitors\n                // can change the original for edge direction inversions\n                const outgoingEdges = root.connectsAsSource.slice();\n                for (let i = 0; i < outgoingEdges.length; i += 1) {\n                    const internalEdge = outgoingEdges[i];\n                    const targetNode = internalEdge.target;\n                    // Root check is O(|roots|)\n                    this.dfs(root, targetNode, internalEdge, visitor, seen, layer + 1);\n                }\n            }\n            else {\n                // Use the int field to indicate this node has been seen\n                visitor(parent, root, connectingEdge, layer, 1);\n            }\n        }\n    }\n    /**\n     * Performs a depth first search on the internal hierarchy model. This dfs\n     * extends the default version by keeping track of cells ancestors, but it\n     * should be only used when necessary because of it can be computationally\n     * intensive for deep searches.\n     *\n     * @param parent the parent internal node of the current internal node\n     * @param root the current internal node\n     * @param connectingEdge the internal edge connecting the internal node and the parent\n     * internal node, if any\n     * @param visitor the visitor pattern to be called for each node\n     * @param seen a set of all nodes seen by this dfs\n     * @param ancestors the parent hash code\n     * @param childHash the new hash code for this node\n     * @param layer the layer on the dfs tree ( not the same as the model ranks )\n     */\n    extendedDfs(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer) {\n        // Explanation of custom hash set. Previously, the ancestors variable\n        // was passed through the dfs as a HashSet. The ancestors were copied\n        // into a new HashSet and when the new child was processed it was also\n        // added to the set. If the current node was in its ancestor list it\n        // meant there is a cycle in the graph and this information is passed\n        // to the visitor.visit() in the seen parameter. The HashSet clone was\n        // very expensive on CPU so a custom hash was developed using primitive\n        // types. temp[] couldn't be used so hashCode[] was added to each node.\n        // Each new child adds another int to the array, copying the prefix\n        // from its parent. Child of the same parent add different ints (the\n        // limit is therefore 2^32 children per parent...). If a node has a\n        // child with the hashCode already set then the child code is compared\n        // to the same portion of the current nodes array. If they match there\n        // is a loop.\n        // Note that the basic mechanism would only allow for 1 use of this\n        // functionality, so the root nodes have two ints. The second int is\n        // incremented through each node root and the first is incremented\n        // through each run of the dfs algorithm (therefore the dfs is not\n        // thread safe). The hash code of each node is set if not already set,\n        // or if the first int does not match that of the current run.\n        if (root != null) {\n            if (parent != null) {\n                // Form this nodes hash code if necessary, that is, if the\n                // hashCode variable has not been initialized or if the\n                // start of the parent hash code does not equal the start of\n                // this nodes hash code, indicating the code was set on a\n                // previous run of this dfs.\n                if (root.hashCode == null || root.hashCode[0] != parent.hashCode[0]) {\n                    const hashCodeLength = parent.hashCode.length + 1;\n                    root.hashCode = parent.hashCode.slice();\n                    root.hashCode[hashCodeLength - 1] = childHash;\n                }\n            }\n            const rootId = root.id;\n            if (seen[rootId] == null) {\n                seen[rootId] = root;\n                visitor(parent, root, connectingEdge, layer, 0);\n                // Copy the connects as source list so that visitors\n                // can change the original for edge direction inversions\n                const outgoingEdges = root.connectsAsSource.slice();\n                for (let i = 0; i < outgoingEdges.length; i += 1) {\n                    const internalEdge = outgoingEdges[i];\n                    const targetNode = internalEdge.target;\n                    // Root check is O(|roots|)\n                    this.extendedDfs(root, targetNode, internalEdge, visitor, seen, root.hashCode, i, layer + 1);\n                }\n            }\n            else {\n                // Use the int field to indicate this node has been seen\n                visitor(parent, root, connectingEdge, layer, 1);\n            }\n        }\n    }\n}\nexport default GraphHierarchyModel;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * The specific layout interface for hierarchical layouts. It adds a {@link execute}\n * method for the hierarchical layout model that is shared between the layout stages.\n *\n * @category Layout\n */\nclass HierarchicalLayoutStage {\n}\nexport default HierarchicalLayoutStage;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport HierarchicalLayoutStage from './HierarchicalLayoutStage';\nimport { remove } from '../../../util/arrayUtils';\nimport { clone } from '../../../util/cloneUtils';\n/**\n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n *\n * @category Layout\n */\nclass MinimumCycleRemover extends HierarchicalLayoutStage {\n    /**\n     * Creates a cycle remover for the given internal model.\n     */\n    constructor(layout) {\n        super();\n        this.layout = layout;\n    }\n    /**\n     * Takes the graph detail and configuration information within the facade\n     * and creates the resulting laid out graph within that facade for further\n     * use.\n     */\n    execute(parent) {\n        const model = this.layout.getDataModel();\n        const seenNodes = {};\n        const unseenNodesArray = model.vertexMapper.getValues();\n        const unseenNodes = {};\n        for (let i = 0; i < unseenNodesArray.length; i += 1) {\n            unseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n        }\n        // Perform a dfs through the internal model. If a cycle is found,\n        // reverse it.\n        let rootsArray = null;\n        if (model.roots != null) {\n            const modelRoots = model.roots;\n            rootsArray = [];\n            for (let i = 0; i < modelRoots.length; i += 1) {\n                rootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n            }\n        }\n        model.visit((parent, node, connectingEdge, layer, seen) => {\n            // Check if the cell is in it's own ancestor list, if so\n            // invert the connecting edge and reverse the target/source\n            // relationship to that edge in the parent and the cell\n            if (node.isAncestor(parent)) {\n                connectingEdge.invert();\n                remove(connectingEdge, parent.connectsAsSource);\n                parent.connectsAsTarget.push(connectingEdge);\n                remove(connectingEdge, node.connectsAsTarget);\n                node.connectsAsSource.push(connectingEdge);\n            }\n            seenNodes[node.id] = node;\n            delete unseenNodes[node.id];\n        }, rootsArray, true, null);\n        // If there are any nodes that should be nodes that the dfs can miss\n        // these need to be processed with the dfs and the roots assigned\n        // correctly to form a correct internal model\n        const seenNodesCopy = clone(seenNodes, null, true);\n        // Pick a random cell and dfs from it\n        model.visit((parent, node, connectingEdge, layer, seen) => {\n            // Check if the cell is in it's own ancestor list, if so\n            // invert the connecting edge and reverse the target/source\n            // relationship to that edge in the parent and the cell\n            if (node.isAncestor(parent)) {\n                connectingEdge.invert();\n                remove(connectingEdge, parent.connectsAsSource);\n                node.connectsAsSource.push(connectingEdge);\n                parent.connectsAsTarget.push(connectingEdge);\n                remove(connectingEdge, node.connectsAsTarget);\n            }\n            seenNodes[node.id] = node;\n            delete unseenNodes[node.id];\n        }, Object.values(unseenNodes), true, seenNodesCopy);\n    }\n}\nexport default MinimumCycleRemover;\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * A utility class used to track cells whilst sorting occurs on the median\n * values. Does not violate (x.compareTo(y)==0) == (x.equals(y))\n *\n * @category Layout\n */\nclass MedianCellSorter {\n    constructor() {\n        /**\n         * The weighted value of the cell stored.\n         */\n        this.medianValue = 0;\n        /**\n         * The cell whose median value is being calculated\n         */\n        this.cell = false;\n        // empty\n    }\n    /**\n     * Compares two MedianCellSorters.\n     */\n    compare(a, b) {\n        if (a != null && b != null) {\n            if (b.medianValue > a.medianValue) {\n                return -1;\n            }\n            if (b.medianValue < a.medianValue) {\n                return 1;\n            }\n            return 0;\n        }\n        return 0;\n    }\n}\nexport default MedianCellSorter;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport HierarchicalLayoutStage from './HierarchicalLayoutStage';\nimport MedianCellSorter from '../util/MedianCellSorter';\n/**\n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weightings as well heuristic to straighten edges as\n * far as possible.\n *\n * @category Layout\n */\nclass MedianHybridCrossingReduction extends HierarchicalLayoutStage {\n    constructor(layout) {\n        super();\n        /**\n         * The maximum number of iterations to perform whilst reducing edge\n         * crossings. Default is 24.\n         */\n        this.maxIterations = 24;\n        /**\n         * Stores each rank as a collection of cells in the best order found for\n         * each layer so far\n         */\n        this.nestedBestRanks = null;\n        /**\n         * The total number of crossings found in the best configuration so far\n         */\n        this.currentBestCrossings = 0;\n        /**\n         * The total number of crossings found in the best configuration so far\n         */\n        this.iterationsWithoutImprovement = 0;\n        /**\n         * The total number of crossings found in the best configuration so far\n         */\n        this.maxNoImprovementIterations = 2;\n        this.layout = layout;\n    }\n    /**\n     * Performs a vertex ordering within ranks as described by Gansner et al\n     * 1993\n     */\n    execute(parent) {\n        const model = this.layout.getDataModel();\n        let ranks = model.ranks;\n        // Stores initial ordering as being the best one found so far\n        this.nestedBestRanks = [];\n        for (let i = 0; i < ranks.length; i += 1) {\n            this.nestedBestRanks[i] = ranks[i].slice();\n        }\n        let iterationsWithoutImprovement = 0;\n        let currentBestCrossings = this.calculateCrossings(model);\n        for (let i = 0; i < this.maxIterations &&\n            iterationsWithoutImprovement < this.maxNoImprovementIterations; i++) {\n            this.weightedMedian(i, model);\n            this.transpose(i, model);\n            const candidateCrossings = this.calculateCrossings(model);\n            if (candidateCrossings < currentBestCrossings) {\n                currentBestCrossings = candidateCrossings;\n                iterationsWithoutImprovement = 0;\n                // Store the current rankings as the best ones\n                for (let j = 0; j < this.nestedBestRanks.length; j += 1) {\n                    const rank = ranks[j];\n                    for (let k = 0; k < rank.length; k += 1) {\n                        const cell = rank[k];\n                        this.nestedBestRanks[j][cell.getGeneralPurposeVariable(j)] = cell;\n                    }\n                }\n            }\n            else {\n                // Increase count of iterations where we haven't improved the\n                // layout\n                iterationsWithoutImprovement += 1;\n                // Restore the best values to the cells\n                for (let j = 0; j < this.nestedBestRanks.length; j += 1) {\n                    const rank = ranks[j];\n                    for (let k = 0; k < rank.length; k += 1) {\n                        const cell = rank[k];\n                        cell.setGeneralPurposeVariable(j, k);\n                    }\n                }\n            }\n            if (currentBestCrossings === 0) {\n                // Do nothing further\n                break;\n            }\n        }\n        // Store the best rankings but in the model\n        ranks = [];\n        const rankList = [];\n        for (let i = 0; i < model.maxRank + 1; i += 1) {\n            rankList[i] = [];\n            ranks[i] = rankList[i];\n        }\n        for (let i = 0; i < this.nestedBestRanks.length; i += 1) {\n            for (let j = 0; j < this.nestedBestRanks[i].length; j += 1) {\n                rankList[i].push(this.nestedBestRanks[i][j]);\n            }\n        }\n        model.ranks = ranks;\n    }\n    /**\n     * Calculates the total number of edge crossing in the current graph.\n     * Returns the current number of edge crossings in the hierarchy graph\n     * model in the current candidate layout\n     *\n     * @param model the internal model describing the hierarchy\n     */\n    calculateCrossings(model) {\n        const ranks = model.ranks;\n        const numRanks = ranks.length;\n        let totalCrossings = 0;\n        for (let i = 1; i < numRanks; i += 1) {\n            totalCrossings += this.calculateRankCrossing(i, model);\n        }\n        return totalCrossings;\n    }\n    /**\n     * Calculates the number of edges crossings between the specified rank and\n     * the rank below it. Returns the number of edges crossings with the rank\n     * beneath\n     *\n     * @param i  the topmost rank of the pair ( higher rank value )\n     * @param model the internal model describing the hierarchy\n     */\n    calculateRankCrossing(i, model) {\n        let totalCrossings = 0;\n        const ranks = model.ranks;\n        const rank = ranks[i];\n        const previousRank = ranks[i - 1];\n        const tmpIndices = [];\n        // Iterate over the top rank and fill in the connection information\n        for (let j = 0; j < rank.length; j += 1) {\n            const node = rank[j];\n            const rankPosition = node.getGeneralPurposeVariable(i);\n            const connectedCells = (node.getPreviousLayerConnectedCells(i));\n            const nodeIndices = [];\n            for (let k = 0; k < connectedCells.length; k += 1) {\n                const connectedNode = connectedCells[k];\n                const otherCellRankPosition = (connectedNode.getGeneralPurposeVariable(i - 1));\n                nodeIndices.push(otherCellRankPosition);\n            }\n            nodeIndices.sort((x, y) => {\n                return x - y;\n            });\n            tmpIndices[rankPosition] = nodeIndices;\n        }\n        let indices = [];\n        for (let j = 0; j < tmpIndices.length; j++) {\n            indices = indices.concat(tmpIndices[j]);\n        }\n        let firstIndex = 1;\n        while (firstIndex < previousRank.length) {\n            firstIndex <<= 1;\n        }\n        const treeSize = 2 * firstIndex - 1;\n        firstIndex -= 1;\n        const tree = [];\n        for (let j = 0; j < treeSize; ++j) {\n            tree[j] = 0;\n        }\n        for (let j = 0; j < indices.length; j += 1) {\n            const index = indices[j];\n            let treeIndex = index + firstIndex;\n            ++tree[treeIndex];\n            while (treeIndex > 0) {\n                if (treeIndex % 2) {\n                    totalCrossings += tree[treeIndex + 1];\n                }\n                treeIndex = (treeIndex - 1) >> 1;\n                ++tree[treeIndex];\n            }\n        }\n        return totalCrossings;\n    }\n    /**\n     * Takes each possible adjacent cell pair on each rank and checks if\n     * swapping them around reduces the number of crossing\n     *\n     * @param mainLoopIteration the iteration number of the main loop\n     * @param model the internal model describing the hierarchy\n     */\n    transpose(mainLoopIteration, model) {\n        let improved = true;\n        // Track the number of iterations in case of looping\n        let count = 0;\n        const maxCount = 10;\n        while (improved && count++ < maxCount) {\n            // On certain iterations allow allow swapping of cell pairs with\n            // equal edge crossings switched or not switched. This help to\n            // nudge a stuck layout into a lower crossing total.\n            const nudge = mainLoopIteration % 2 === 1 && count % 2 === 1;\n            improved = false;\n            const ranks = model.ranks;\n            for (let i = 0; i < ranks.length; i += 1) {\n                const rank = ranks[i];\n                const orderedCells = [];\n                for (let j = 0; j < rank.length; j++) {\n                    const cell = rank[j];\n                    let tempRank = cell.getGeneralPurposeVariable(i);\n                    // FIXME: Workaround to avoid negative tempRanks\n                    if (tempRank < 0) {\n                        tempRank = j;\n                    }\n                    orderedCells[tempRank] = cell;\n                }\n                let leftCellAboveConnections = null;\n                let leftCellBelowConnections = null;\n                let rightCellAboveConnections = null;\n                let rightCellBelowConnections = null;\n                let leftAbovePositions = null;\n                let leftBelowPositions = null;\n                let rightAbovePositions = null;\n                let rightBelowPositions = null;\n                let leftCell = null;\n                let rightCell = null;\n                for (let j = 0; j < rank.length - 1; j++) {\n                    // For each intra-rank adjacent pair of cells\n                    // see if swapping them around would reduce the\n                    // number of edges crossing they cause in total\n                    // On every cell pair except the first on each rank, we\n                    // can save processing using the previous values for the\n                    // right cell on the new left cell\n                    if (j === 0) {\n                        leftCell = orderedCells[j];\n                        leftCellAboveConnections = (leftCell.getNextLayerConnectedCells(i));\n                        leftCellBelowConnections = (leftCell.getPreviousLayerConnectedCells(i));\n                        leftAbovePositions = [];\n                        leftBelowPositions = [];\n                        for (let k = 0; k < leftCellAboveConnections.length; k++) {\n                            leftAbovePositions[k] = (leftCellAboveConnections[k].getGeneralPurposeVariable(i + 1));\n                        }\n                        for (let k = 0; k < leftCellBelowConnections.length; k++) {\n                            leftBelowPositions[k] = (leftCellBelowConnections[k].getGeneralPurposeVariable(i - 1));\n                        }\n                    }\n                    else {\n                        leftCellAboveConnections = rightCellAboveConnections;\n                        leftCellBelowConnections = rightCellBelowConnections;\n                        leftAbovePositions = rightAbovePositions;\n                        leftBelowPositions = rightBelowPositions;\n                        leftCell = rightCell;\n                    }\n                    rightCell = orderedCells[j + 1];\n                    rightCellAboveConnections = (rightCell.getNextLayerConnectedCells(i));\n                    rightCellBelowConnections = (rightCell.getPreviousLayerConnectedCells(i));\n                    rightAbovePositions = [];\n                    rightBelowPositions = [];\n                    for (let k = 0; k < rightCellAboveConnections.length; k++) {\n                        rightAbovePositions[k] = (rightCellAboveConnections[k].getGeneralPurposeVariable(i + 1));\n                    }\n                    for (let k = 0; k < rightCellBelowConnections.length; k++) {\n                        rightBelowPositions[k] = (rightCellBelowConnections[k].getGeneralPurposeVariable(i - 1));\n                    }\n                    let totalCurrentCrossings = 0;\n                    let totalSwitchedCrossings = 0;\n                    for (let k = 0; k < leftAbovePositions.length; k += 1) {\n                        for (let ik = 0; ik < rightAbovePositions.length; ik += 1) {\n                            if (leftAbovePositions[k] > rightAbovePositions[ik]) {\n                                totalCurrentCrossings += 1;\n                            }\n                            if (leftAbovePositions[k] < rightAbovePositions[ik]) {\n                                totalSwitchedCrossings += 1;\n                            }\n                        }\n                    }\n                    for (let k = 0; k < leftBelowPositions.length; k += 1) {\n                        for (let ik = 0; ik < rightBelowPositions.length; ik += 1) {\n                            if (leftBelowPositions[k] > rightBelowPositions[ik]) {\n                                totalCurrentCrossings += 1;\n                            }\n                            if (leftBelowPositions[k] < rightBelowPositions[ik]) {\n                                totalSwitchedCrossings += 1;\n                            }\n                        }\n                    }\n                    if (totalSwitchedCrossings < totalCurrentCrossings ||\n                        (totalSwitchedCrossings === totalCurrentCrossings && nudge)) {\n                        const temp = (leftCell.getGeneralPurposeVariable(i));\n                        leftCell.setGeneralPurposeVariable(i, rightCell.getGeneralPurposeVariable(i));\n                        rightCell.setGeneralPurposeVariable(i, temp);\n                        // With this pair exchanged we have to switch all of\n                        // values for the left cell to the right cell so the\n                        // next iteration for this rank uses it as the left\n                        // cell again\n                        rightCellAboveConnections = leftCellAboveConnections;\n                        rightCellBelowConnections = leftCellBelowConnections;\n                        rightAbovePositions = leftAbovePositions;\n                        rightBelowPositions = leftBelowPositions;\n                        rightCell = leftCell;\n                        if (!nudge) {\n                            // Don't count nudges as improvement or we'll end\n                            // up stuck in two combinations and not finishing\n                            // as early as we should\n                            improved = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Sweeps up or down the layout attempting to minimise the median placement\n     * of connected cells on adjacent ranks\n     *\n     * @param iteration the iteration number of the main loop\n     * @param model the internal model describing the hierarchy\n     */\n    weightedMedian(iteration, model) {\n        // Reverse sweep direction each time through this method\n        const downwardSweep = iteration % 2 === 0;\n        if (downwardSweep) {\n            for (let j = model.maxRank - 1; j >= 0; j -= 1) {\n                this.medianRank(j, downwardSweep);\n            }\n        }\n        else {\n            for (let j = 1; j < model.maxRank; j += 1) {\n                this.medianRank(j, downwardSweep);\n            }\n        }\n    }\n    /**\n     * Attempts to minimise the median placement of connected cells on this rank\n     * and one of the adjacent ranks\n     *\n     * @param rankValue the layer number of this rank\n     * @param downwardSweep whether or not this is a downward sweep through the graph\n     */\n    medianRank(rankValue, downwardSweep) {\n        const nestedBestRanks = (this.nestedBestRanks);\n        const numCellsForRank = nestedBestRanks[rankValue].length;\n        const medianValues = [];\n        const reservedPositions = {};\n        for (let i = 0; i < numCellsForRank; i += 1) {\n            const cell = nestedBestRanks[rankValue][i];\n            const sorterEntry = new MedianCellSorter();\n            sorterEntry.cell = cell;\n            // Flip whether or not equal medians are flipped on up and down\n            // sweeps\n            // TODO re-implement some kind of nudge\n            // medianValues[i].nudge = !downwardSweep;\n            const nextLevelConnectedCells = downwardSweep\n                ? cell.getNextLayerConnectedCells(rankValue)\n                : cell.getPreviousLayerConnectedCells(rankValue);\n            const nextRankValue = downwardSweep ? rankValue + 1 : rankValue - 1;\n            if (nextLevelConnectedCells != null && nextLevelConnectedCells.length !== 0) {\n                sorterEntry.medianValue = this.medianValue(nextLevelConnectedCells, nextRankValue);\n                medianValues.push(sorterEntry);\n            }\n            else {\n                // Nodes with no adjacent vertices are flagged in the reserved array\n                // to indicate they should be left in their current position.\n                reservedPositions[cell.getGeneralPurposeVariable(rankValue)] = true;\n            }\n        }\n        medianValues.sort(new MedianCellSorter().compare);\n        // Set the new position of each node within the rank using\n        // its temp variable\n        for (let i = 0; i < numCellsForRank; i += 1) {\n            if (reservedPositions[i] == null) {\n                const cell = (medianValues.shift().cell);\n                cell.setGeneralPurposeVariable(rankValue, i);\n            }\n        }\n    }\n    /**\n     * Calculates the median rank order positioning for the specified cell using\n     * the connected cells on the specified rank. Returns the median rank\n     * ordering value of the connected cells\n     *\n     * @param connectedCells the cells on the specified rank connected to the\n     * specified cell\n     * @param rankValue the rank that the connected cell lie upon\n     */\n    medianValue(connectedCells, rankValue) {\n        const medianValues = [];\n        let arrayCount = 0;\n        for (let i = 0; i < connectedCells.length; i += 1) {\n            const cell = connectedCells[i];\n            medianValues[arrayCount++] = cell.getGeneralPurposeVariable(rankValue);\n        }\n        // Sort() sorts lexicographically by default (i.e. 11 before 9) so force\n        // numerical order sort\n        medianValues.sort((a, b) => {\n            return a - b;\n        });\n        if (arrayCount % 2 === 1) {\n            // For odd numbers of adjacent vertices return the median\n            return medianValues[Math.floor(arrayCount / 2)];\n        }\n        if (arrayCount === 2) {\n            return (medianValues[0] + medianValues[1]) / 2.0;\n        }\n        const medianPoint = arrayCount / 2;\n        const leftMedian = medianValues[medianPoint - 1] - medianValues[0];\n        const rightMedian = medianValues[arrayCount - 1] - medianValues[medianPoint];\n        return ((medianValues[medianPoint - 1] * rightMedian +\n            medianValues[medianPoint] * leftMedian) /\n            (leftMedian + rightMedian));\n    }\n}\nexport default MedianHybridCrossingReduction;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2018, JGraph Ltd\nCopyright (c) 2006-2018, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport HierarchicalLayoutStage from './HierarchicalLayoutStage';\nimport { GlobalConfig } from '../../../util/config';\nimport WeightedCellSorter from '../util/WeightedCellSorter';\nimport Dictionary from '../../../util/Dictionary';\nimport Point from '../../geometry/Point';\nimport HierarchicalEdgeStyle from '../datatypes/HierarchicalEdgeStyle';\n/**\n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weightings as well as heuristics to straighten edges as\n * far as possible.\n *\n * @category Layout\n */\nclass CoordinateAssignment extends HierarchicalLayoutStage {\n    /**\n     * Creates a coordinate assignment.\n     *\n     * @param layout\n     * @param intraCellSpacing the minimum buffer between cells on the same rank interRankCellSpacing\n     * @param interRankCellSpacing the minimum distance between cells on adjacent ranks\n     * @param orientation the position of the root node(s) relative to the graph\n     * @param initialX the leftmost coordinate node placement starts at\n     * @param parallelEdgeSpacing\n     */\n    constructor(layout, intraCellSpacing = 30, interRankCellSpacing = 100, orientation, initialX, parallelEdgeSpacing = 10) {\n        super();\n        /**\n         * The minimum buffer between cells on the same rank. Default is 30.\n         */\n        this.intraCellSpacing = 30;\n        /**\n         * The minimum distance between cells on adjacent ranks. Default is 100.\n         */\n        this.interRankCellSpacing = 100;\n        /**\n         * The distance between each parallel edge on each ranks for long edges.\n         * Default is 10.\n         */\n        this.parallelEdgeSpacing = 10;\n        /**\n         * The number of heuristic iterations to run. Default is 8.\n         */\n        this.maxIterations = 8;\n        /**\n         * The preferred horizontal distance between edges exiting a vertex Default is 5.\n         */\n        this.prefHozEdgeSep = 5;\n        /**\n         * The preferred vertical offset between edges exiting a vertex Default is 2.\n         */\n        this.prefVertEdgeOff = 2;\n        /**\n         * The minimum distance for an edge jetty from a vertex Default is 12.\n         */\n        this.minEdgeJetty = 12;\n        /**\n         * The size of the vertical buffer in the center of inter-rank channels\n         * where edge control points should not be placed Default is 4.\n         */\n        this.channelBuffer = 4;\n        /**\n         * Map of internal edges and (x,y) pair of positions of the start and end jetty\n         * for that edge where it connects to the source and target vertices.\n         * Note this should technically be a WeakHashMap, but since JS does not\n         * have an equivalent, housekeeping must be performed before using.\n         * i.e. check all edges are still in the model and clear the values.\n         * Note that the y co-ord is the offset of the jetty, not the\n         * absolute point\n         */\n        this.jettyPositions = null;\n        /**\n         * The position of the root ( start ) node(s) relative to the rest of the laid out graph.\n         * @default 'north'\n         */\n        this.orientation = 'north';\n        /**\n         * The maximum x value this positioning lays up to\n         */\n        this.limitX = null;\n        /**\n         * The sum of x-displacements for the current iteration\n         */\n        this.currentXDelta = null;\n        /**\n         * The rank that has the widest x position\n         */\n        this.widestRank = null;\n        /**\n         * Internal cache of top-most values of Y for each rank\n         */\n        this.rankTopY = null;\n        /**\n         * Internal cache of bottom-most value of Y for each rank\n         */\n        this.rankBottomY = null;\n        /**\n         * The X-coordinate of the edge of the widest rank\n         */\n        this.widestRankValue = null;\n        /**\n         * The width of all the ranks\n         */\n        this.rankWidths = null;\n        /**\n         * The Y-coordinate of all the ranks\n         */\n        this.rankY = null;\n        /**\n         * Whether or not to perform local optimisations and iterate multiple times\n         * through the algorithm. Default is true.\n         */\n        this.fineTuning = true;\n        /**\n         * A store of connections to the layer above for speed\n         */\n        this.nextLayerConnectedCache = null;\n        /**\n         * A store of connections to the layer below for speed\n         */\n        this.previousLayerConnectedCache = null;\n        /**\n         * Padding added to resized parents Default is 10.\n         */\n        this.groupPadding = 10;\n        this.layout = layout;\n        this.intraCellSpacing = intraCellSpacing;\n        this.interRankCellSpacing = interRankCellSpacing;\n        this.orientation = orientation;\n        this.initialX = initialX;\n        this.parallelEdgeSpacing = parallelEdgeSpacing;\n    }\n    /**\n     * Utility method to display current positions\n     */\n    printStatus() {\n        const model = this.layout.getDataModel();\n        const ranks = model.ranks;\n        const logger = GlobalConfig.logger;\n        logger.show();\n        logger.info('======Coord assignment debug=======');\n        for (let j = 0; j < ranks.length; j++) {\n            const rank = ranks[j];\n            const cellsInfo = rank\n                .map((cell) => String(cell.getGeneralPurposeVariable(j)))\n                .join('  ');\n            logger.info(`Rank ${j} : ${cellsInfo}`);\n        }\n        logger.info('====================================');\n    }\n    /**\n     * A basic horizontal coordinate assignment algorithm\n     */\n    execute(parent) {\n        this.jettyPositions = Object();\n        const model = this.layout.getDataModel();\n        this.currentXDelta = 0.0;\n        this.initialCoords(this.layout.getGraph(), model);\n        //  this.printStatus();\n        if (this.fineTuning) {\n            this.minNode(model);\n        }\n        let bestXDelta = 100000000.0;\n        if (this.fineTuning) {\n            for (let i = 0; i < this.maxIterations; i += 1) {\n                //      this.printStatus();\n                // Median Heuristic\n                if (i !== 0) {\n                    this.medianPos(i, model);\n                    this.minNode(model);\n                }\n                // if the total offset is less for the current positioning,\n                // there are less heavily angled edges and so the current\n                // positioning is used\n                const ranks = model.ranks;\n                if (this.currentXDelta < bestXDelta) {\n                    for (let j = 0; j < ranks.length; j++) {\n                        const rank = ranks[j];\n                        for (let k = 0; k < rank.length; k++) {\n                            const cell = rank[k];\n                            cell.setX(j, cell.getGeneralPurposeVariable(j));\n                        }\n                    }\n                    bestXDelta = this.currentXDelta;\n                }\n                else {\n                    // Restore the best positions\n                    for (let j = 0; j < ranks.length; j++) {\n                        const rank = ranks[j];\n                        for (let k = 0; k < rank.length; k++) {\n                            const cell = rank[k];\n                            cell.setGeneralPurposeVariable(j, cell.getX(j));\n                        }\n                    }\n                }\n                this.minPath(this.layout.getGraph(), model);\n                this.currentXDelta = 0;\n            }\n        }\n        this.setCellLocations(this.layout.getGraph(), model);\n    }\n    /**\n     * Performs one median positioning sweep in both directions\n     */\n    minNode(model) {\n        // Queue all nodes\n        const nodeList = [];\n        // Need to be able to map from cell to cellWrapper\n        const map = new Dictionary();\n        const rank = [];\n        for (let i = 0; i <= model.maxRank; i += 1) {\n            rank[i] = model.ranks[i];\n            for (let j = 0; j < rank[i].length; j += 1) {\n                // Use the weight to store the rank and visited to store whether\n                // or not the cell is in the list\n                const node = rank[i][j];\n                const nodeWrapper = new WeightedCellSorter(node, i);\n                nodeWrapper.rankIndex = j;\n                nodeWrapper.visited = true;\n                nodeList.push(nodeWrapper);\n                map.put(node, nodeWrapper);\n            }\n        }\n        // Set a limit of the maximum number of times we will access the queue\n        // in case a loop appears\n        const maxTries = nodeList.length * 10;\n        let count = 0;\n        // Don't move cell within this value of their median\n        const tolerance = 1;\n        while (nodeList.length > 0 && count <= maxTries) {\n            const cellWrapper = nodeList.shift();\n            const cell = (cellWrapper.cell);\n            const rankValue = cellWrapper.weightedValue;\n            const rankIndex = parseInt(String(cellWrapper.rankIndex));\n            const nextLayerConnectedCells = (cell.getNextLayerConnectedCells(rankValue));\n            const previousLayerConnectedCells = (cell.getPreviousLayerConnectedCells(rankValue));\n            const numNextLayerConnected = nextLayerConnectedCells.length;\n            const numPreviousLayerConnected = previousLayerConnectedCells.length;\n            const medianNextLevel = this.medianXValue(nextLayerConnectedCells, rankValue + 1);\n            const medianPreviousLevel = this.medianXValue(previousLayerConnectedCells, rankValue - 1);\n            const numConnectedNeighbours = numNextLayerConnected + numPreviousLayerConnected;\n            const currentPosition = cell.getGeneralPurposeVariable(rankValue);\n            let cellMedian = currentPosition;\n            if (numConnectedNeighbours > 0) {\n                cellMedian =\n                    (medianNextLevel * numNextLayerConnected +\n                        medianPreviousLevel * numPreviousLayerConnected) /\n                        numConnectedNeighbours;\n            }\n            // Flag storing whether or not position has changed\n            let positionChanged = false;\n            if (cellMedian < currentPosition - tolerance) {\n                if (rankIndex === 0) {\n                    cell.setGeneralPurposeVariable(rankValue, cellMedian);\n                    positionChanged = true;\n                }\n                else {\n                    const leftCell = rank[rankValue][rankIndex - 1];\n                    let leftLimit = leftCell.getGeneralPurposeVariable(rankValue);\n                    leftLimit =\n                        leftLimit + leftCell.width / 2 + this.intraCellSpacing + cell.width / 2;\n                    if (leftLimit < cellMedian) {\n                        cell.setGeneralPurposeVariable(rankValue, cellMedian);\n                        positionChanged = true;\n                    }\n                    else if (leftLimit <\n                        cell.getGeneralPurposeVariable(rankValue) - tolerance) {\n                        cell.setGeneralPurposeVariable(rankValue, leftLimit);\n                        positionChanged = true;\n                    }\n                }\n            }\n            else if (cellMedian > currentPosition + tolerance) {\n                const rankSize = rank[rankValue].length;\n                if (rankIndex === rankSize - 1) {\n                    cell.setGeneralPurposeVariable(rankValue, cellMedian);\n                    positionChanged = true;\n                }\n                else {\n                    const rightCell = rank[rankValue][rankIndex + 1];\n                    let rightLimit = rightCell.getGeneralPurposeVariable(rankValue);\n                    rightLimit =\n                        rightLimit - rightCell.width / 2 - this.intraCellSpacing - cell.width / 2;\n                    if (rightLimit > cellMedian) {\n                        cell.setGeneralPurposeVariable(rankValue, cellMedian);\n                        positionChanged = true;\n                    }\n                    else if (rightLimit >\n                        cell.getGeneralPurposeVariable(rankValue) + tolerance) {\n                        cell.setGeneralPurposeVariable(rankValue, rightLimit);\n                        positionChanged = true;\n                    }\n                }\n            }\n            if (positionChanged) {\n                // Add connected nodes to map and list\n                for (let i = 0; i < nextLayerConnectedCells.length; i += 1) {\n                    const connectedCell = nextLayerConnectedCells[i];\n                    const connectedCellWrapper = map.get(connectedCell);\n                    if (connectedCellWrapper != null) {\n                        if (connectedCellWrapper.visited == false) {\n                            connectedCellWrapper.visited = true;\n                            nodeList.push(connectedCellWrapper);\n                        }\n                    }\n                }\n                // Add connected nodes to map and list\n                for (let i = 0; i < previousLayerConnectedCells.length; i += 1) {\n                    const connectedCell = previousLayerConnectedCells[i];\n                    const connectedCellWrapper = map.get(connectedCell);\n                    if (connectedCellWrapper != null) {\n                        if (connectedCellWrapper.visited == false) {\n                            connectedCellWrapper.visited = true;\n                            nodeList.push(connectedCellWrapper);\n                        }\n                    }\n                }\n            }\n            cellWrapper.visited = false;\n            count += 1;\n        }\n    }\n    /**\n     * Performs one median positioning sweep in one direction\n     *\n     * @param i the iteration of the whole process\n     * @param model an internal model of the hierarchical layout\n     */\n    medianPos(i, model) {\n        // Reverse sweep direction each time through this method\n        const downwardSweep = i % 2 === 0;\n        if (downwardSweep) {\n            for (let j = model.maxRank; j > 0; j--) {\n                this.rankMedianPosition(j - 1, model, j);\n            }\n        }\n        else {\n            for (let j = 0; j < model.maxRank - 1; j++) {\n                this.rankMedianPosition(j + 1, model, j);\n            }\n        }\n    }\n    /**\n     * Performs median minimisation over one rank.\n     *\n     * @param rankValue the layer number of this rank\n     * @param model an internal model of the hierarchical layout\n     * @param nextRankValue the layer number whose connected cels are to be laid out\n     * relative to\n     */\n    rankMedianPosition(rankValue, model, nextRankValue) {\n        const ranks = model.ranks;\n        const rank = ranks[rankValue];\n        // Form an array of the order in which the cell are to be processed\n        // , the order is given by the weighted sum of the in or out edges,\n        // depending on whether we're traveling up or down the hierarchy.\n        const weightedValues = [];\n        const cellMap = {};\n        for (let i = 0; i < rank.length; i += 1) {\n            const currentCell = rank[i];\n            weightedValues[i] = new WeightedCellSorter(currentCell);\n            weightedValues[i].rankIndex = i;\n            cellMap[currentCell.id] = weightedValues[i];\n            let nextLayerConnectedCells = null;\n            if (nextRankValue < rankValue) {\n                nextLayerConnectedCells = currentCell.getPreviousLayerConnectedCells(rankValue);\n            }\n            else {\n                nextLayerConnectedCells = currentCell.getNextLayerConnectedCells(rankValue);\n            }\n            // Calculate the weighing based on this node type and those this\n            // node is connected to on the next layer\n            weightedValues[i].weightedValue = this.calculatedWeightedValue(currentCell, nextLayerConnectedCells);\n        }\n        weightedValues.sort(WeightedCellSorter.compare);\n        // Set the new position of each node within the rank using\n        // its temp variable\n        for (let i = 0; i < weightedValues.length; i += 1) {\n            let numConnectionsNextLevel = 0;\n            const cell = weightedValues[i].cell;\n            let nextLayerConnectedCells = null;\n            let medianNextLevel = 0;\n            if (nextRankValue < rankValue) {\n                nextLayerConnectedCells = cell.getPreviousLayerConnectedCells(rankValue).slice();\n            }\n            else {\n                nextLayerConnectedCells = cell.getNextLayerConnectedCells(rankValue).slice();\n            }\n            if (nextLayerConnectedCells != null) {\n                numConnectionsNextLevel = nextLayerConnectedCells.length;\n                if (numConnectionsNextLevel > 0) {\n                    medianNextLevel = this.medianXValue(nextLayerConnectedCells, nextRankValue);\n                }\n                else {\n                    // For case of no connections on the next level set the\n                    // median to be the current position and try to be\n                    // positioned there\n                    medianNextLevel = cell.getGeneralPurposeVariable(rankValue);\n                }\n            }\n            let leftBuffer = 0.0;\n            let leftLimit = -100000000.0;\n            for (let j = weightedValues[i].rankIndex - 1; j >= 0;) {\n                const weightedValue = cellMap[rank[j].id];\n                if (weightedValue != null) {\n                    const leftCell = weightedValue.cell;\n                    if (weightedValue.visited) {\n                        // The left limit is the right hand limit of that\n                        // cell plus any allowance for unallocated cells\n                        // in-between\n                        leftLimit =\n                            leftCell.getGeneralPurposeVariable(rankValue) +\n                                leftCell.width / 2.0 +\n                                this.intraCellSpacing +\n                                leftBuffer +\n                                cell.width / 2.0;\n                        j = -1;\n                    }\n                    else {\n                        leftBuffer += leftCell.width + this.intraCellSpacing;\n                        j--;\n                    }\n                }\n            }\n            let rightBuffer = 0.0;\n            let rightLimit = 100000000.0;\n            for (let j = weightedValues[i].rankIndex + 1; j < weightedValues.length;) {\n                const weightedValue = cellMap[rank[j].id];\n                if (weightedValue != null) {\n                    const rightCell = weightedValue.cell;\n                    if (weightedValue.visited) {\n                        // The left limit is the right hand limit of that\n                        // cell plus any allowance for unallocated cells\n                        // in-between\n                        rightLimit =\n                            rightCell.getGeneralPurposeVariable(rankValue) -\n                                rightCell.width / 2.0 -\n                                this.intraCellSpacing -\n                                rightBuffer -\n                                cell.width / 2.0;\n                        j = weightedValues.length;\n                    }\n                    else {\n                        rightBuffer += rightCell.width + this.intraCellSpacing;\n                        j++;\n                    }\n                }\n            }\n            if (medianNextLevel >= leftLimit && medianNextLevel <= rightLimit) {\n                cell.setGeneralPurposeVariable(rankValue, medianNextLevel);\n            }\n            else if (medianNextLevel < leftLimit) {\n                // Couldn't place at median value, place as close to that\n                // value as possible\n                cell.setGeneralPurposeVariable(rankValue, leftLimit);\n                this.currentXDelta = this.currentXDelta + leftLimit - medianNextLevel;\n            }\n            else if (medianNextLevel > rightLimit) {\n                // Couldn't place at median value, place as close to that\n                // value as possible\n                cell.setGeneralPurposeVariable(rankValue, rightLimit);\n                this.currentXDelta = this.currentXDelta + medianNextLevel - rightLimit;\n            }\n            weightedValues[i].visited = true;\n        }\n    }\n    /**\n     * Calculates the priority the specified cell has based on the type of its\n     * cell and the cells it is connected to on the next layer\n     *\n     * @param currentCell the cell whose weight is to be calculated\n     * @param collection the cells the specified cell is connected to\n     */\n    calculatedWeightedValue(currentCell, collection) {\n        let totalWeight = 0;\n        for (let i = 0; i < collection.length; i += 1) {\n            const cell = collection[i];\n            if (currentCell.isVertex() && cell.isVertex()) {\n                totalWeight += 1;\n            }\n            else if (currentCell.isEdge() && cell.isEdge()) {\n                totalWeight += 8;\n            }\n            else {\n                totalWeight += 2;\n            }\n        }\n        return totalWeight;\n    }\n    /**\n     * Calculates the median position of the connected cell on the specified\n     * rank\n     *\n     * @param connectedCells the cells the candidate connects to on this level\n     * @param rankValue the layer number of this rank\n     */\n    medianXValue(connectedCells, rankValue) {\n        if (connectedCells.length === 0) {\n            return 0;\n        }\n        const medianValues = [];\n        for (let i = 0; i < connectedCells.length; i += 1) {\n            medianValues[i] = connectedCells[i].getGeneralPurposeVariable(rankValue);\n        }\n        medianValues.sort((a, b) => a - b);\n        if (connectedCells.length % 2 === 1) {\n            // For odd numbers of adjacent vertices return the median\n            return medianValues[Math.floor(connectedCells.length / 2)];\n        }\n        const medianPoint = connectedCells.length / 2;\n        const leftMedian = medianValues[medianPoint - 1];\n        const rightMedian = medianValues[medianPoint];\n        return (leftMedian + rightMedian) / 2;\n    }\n    /**\n     * Sets up the layout in an initial positioning. The ranks are all centered\n     * as much as possible along the middle vertex in each rank. The other cells\n     * are then placed as close as possible on either side.\n     *\n     * @param facade the facade describing the input graph\n     * @param model an internal model of the hierarchical layout\n     */\n    initialCoords(facade, model) {\n        this.calculateWidestRank(facade, model);\n        // Sweep up and down from the widest rank\n        for (let i = this.widestRank; i >= 0; i--) {\n            if (i < model.maxRank) {\n                this.rankCoordinates(i, facade, model);\n            }\n        }\n        for (let i = this.widestRank + 1; i <= model.maxRank; i += 1) {\n            if (i > 0) {\n                this.rankCoordinates(i, facade, model);\n            }\n        }\n    }\n    /**\n     * Sets up the layout in an initial positioning. All the first cells in each\n     * rank are moved to the left and the rest of the rank inserted as close\n     * together as their size and buffering permits. This method works on just\n     * the specified rank.\n     *\n     * @param rankValue the current rank being processed\n     * @param graph the facade describing the input graph\n     * @param model an internal model of the hierarchical layout\n     */\n    rankCoordinates(rankValue, graph, model) {\n        const ranks = model.ranks;\n        const rank = ranks[rankValue];\n        let maxY = 0.0;\n        let localX = this.initialX +\n            (this.widestRankValue - this.rankWidths[rankValue]) / 2;\n        // Store whether or not any of the cells' bounds were unavailable so\n        // to only issue the warning once for all cells\n        let boundsWarning = false;\n        for (let i = 0; i < rank.length; i += 1) {\n            const node = rank[i];\n            if (node.isVertex()) {\n                const bounds = this.layout.getVertexBounds(node.cell);\n                if (bounds != null) {\n                    if (this.orientation === 'north' || this.orientation === 'south') {\n                        node.width = bounds.width;\n                        node.height = bounds.height;\n                    }\n                    else {\n                        node.width = bounds.height;\n                        node.height = bounds.width;\n                    }\n                }\n                else {\n                    boundsWarning = true;\n                }\n                maxY = Math.max(maxY, node.height);\n            }\n            else if (node.isEdge()) {\n                // The width is the number of additional parallel edges\n                // time the parallel edge spacing\n                let numEdges = 1;\n                if (node.edges != null) {\n                    numEdges = node.edges.length;\n                }\n                else {\n                    GlobalConfig.logger.warn('edge.edges is null');\n                }\n                node.width = (numEdges - 1) * this.parallelEdgeSpacing;\n            }\n            // Set the initial x-value as being the best result so far\n            localX += node.width / 2.0;\n            node.setX(rankValue, localX);\n            node.setGeneralPurposeVariable(rankValue, localX);\n            localX += node.width / 2.0;\n            localX += this.intraCellSpacing;\n        }\n        if (boundsWarning) {\n            GlobalConfig.logger.warn('At least one cell has no bounds');\n        }\n    }\n    /**\n     * Calculates the width rank in the hierarchy. Also set the y value of each\n     * rank whilst performing the calculation\n     *\n     * @param graph the facade describing the input graph\n     * @param model an internal model of the hierarchical layout\n     */\n    calculateWidestRank(graph, model) {\n        // Starting y co-ordinate\n        let y = -this.interRankCellSpacing;\n        // Track the widest cell on the last rank since the y\n        // difference depends on it\n        let lastRankMaxCellHeight = 0.0;\n        this.rankWidths = [];\n        this.rankY = [];\n        for (let rankValue = model.maxRank; rankValue >= 0; rankValue -= 1) {\n            // Keep track of the widest cell on this rank\n            let maxCellHeight = 0.0;\n            const ranks = model.ranks;\n            const rank = ranks[rankValue];\n            let localX = this.initialX;\n            // Store whether or not any of the cells' bounds were unavailable so\n            // to only issue the warning once for all cells\n            let boundsWarning = false;\n            for (let i = 0; i < rank.length; i += 1) {\n                const node = rank[i];\n                if (node.isVertex()) {\n                    const bounds = this.layout.getVertexBounds(node.cell);\n                    if (bounds != null) {\n                        if (this.orientation === 'north' || this.orientation === 'south') {\n                            node.width = bounds.width;\n                            node.height = bounds.height;\n                        }\n                        else {\n                            node.width = bounds.height;\n                            node.height = bounds.width;\n                        }\n                    }\n                    else {\n                        boundsWarning = true;\n                    }\n                    maxCellHeight = Math.max(maxCellHeight, node.height);\n                }\n                else if (node.isEdge()) {\n                    // The width is the number of additional parallel edges\n                    // time the parallel edge spacing\n                    let numEdges = 1;\n                    if (node.edges != null) {\n                        numEdges = node.edges.length;\n                    }\n                    else {\n                        GlobalConfig.logger.warn('edge.edges is null');\n                    }\n                    node.width = (numEdges - 1) * this.parallelEdgeSpacing;\n                }\n                // Set the initial x-value as being the best result so far\n                localX += node.width / 2.0;\n                node.setX(rankValue, localX);\n                node.setGeneralPurposeVariable(rankValue, localX);\n                localX += node.width / 2.0;\n                localX += this.intraCellSpacing;\n                if (localX > this.widestRankValue) {\n                    this.widestRankValue = localX;\n                    this.widestRank = rankValue;\n                }\n                this.rankWidths[rankValue] = localX;\n            }\n            if (boundsWarning) {\n                GlobalConfig.logger.warn('At least one cell has no bounds');\n            }\n            this.rankY[rankValue] = y;\n            const distanceToNextRank = maxCellHeight / 2.0 + lastRankMaxCellHeight / 2.0 + this.interRankCellSpacing;\n            lastRankMaxCellHeight = maxCellHeight;\n            if (this.orientation === 'north' || this.orientation === 'west') {\n                y += distanceToNextRank;\n            }\n            else {\n                y -= distanceToNextRank;\n            }\n            for (let i = 0; i < rank.length; i += 1) {\n                const cell = rank[i];\n                cell.setY(rankValue, y);\n            }\n        }\n    }\n    /**\n     * Straightens out chains of virtual nodes where possibleacade to those stored after this layout\n     * processing step has completed.\n     *\n     * @param graph the facade describing the input graph\n     * @param model an internal model of the hierarchical layout\n     */\n    minPath(graph, model) {\n        // Work down and up each edge with at least 2 control points\n        // trying to straighten each one out. If the same number of\n        // straight segments are formed in both directions, the\n        // preferred direction used is the one where the final\n        // control points have the least offset from the connectable\n        // region of the terminating vertices\n        const edges = model.edgeMapper.getValues();\n        for (let j = 0; j < edges.length; j++) {\n            const cell = edges[j];\n            if (cell.maxRank - cell.minRank - 1 < 1) {\n                continue;\n            }\n            // At least two virtual nodes in the edge\n            // Check first whether the edge is already straight\n            let referenceX = cell.getGeneralPurposeVariable(cell.minRank + 1);\n            let edgeStraight = true;\n            let refSegCount = 0;\n            for (let i = cell.minRank + 2; i < cell.maxRank; i += 1) {\n                const x = cell.getGeneralPurposeVariable(i);\n                if (referenceX !== x) {\n                    edgeStraight = false;\n                    referenceX = x;\n                }\n                else {\n                    refSegCount += 1;\n                }\n            }\n            if (!edgeStraight) {\n                let upSegCount = 0;\n                let downSegCount = 0;\n                const upXPositions = [];\n                const downXPositions = [];\n                let i = 0;\n                let currentX = cell.getGeneralPurposeVariable(cell.minRank + 1);\n                for (i = cell.minRank + 1; i < cell.maxRank - 1; i += 1) {\n                    // Attempt to straight out the control point on the\n                    // next segment up with the current control point.\n                    const nextX = cell.getX(i + 1);\n                    if (currentX === nextX) {\n                        upXPositions[i - cell.minRank - 1] = currentX;\n                        upSegCount += 1;\n                    }\n                    else if (this.repositionValid(model, cell, i + 1, currentX)) {\n                        upXPositions[i - cell.minRank - 1] = currentX;\n                        upSegCount += 1;\n                        // Leave currentX at same value\n                    }\n                    else {\n                        upXPositions[i - cell.minRank - 1] = nextX;\n                        currentX = nextX;\n                    }\n                }\n                currentX = cell.getX(i);\n                for (let i = cell.maxRank - 1; i > cell.minRank + 1; i--) {\n                    // Attempt to straight out the control point on the\n                    // next segment down with the current control point.\n                    const nextX = cell.getX(i - 1);\n                    if (currentX === nextX) {\n                        downXPositions[i - cell.minRank - 2] = currentX;\n                        downSegCount += 1;\n                    }\n                    else if (this.repositionValid(model, cell, i - 1, currentX)) {\n                        downXPositions[i - cell.minRank - 2] = currentX;\n                        downSegCount += 1;\n                        // Leave currentX at same value\n                    }\n                    else {\n                        downXPositions[i - cell.minRank - 2] = cell.getX(i - 1);\n                        currentX = nextX;\n                    }\n                }\n                if (downSegCount > refSegCount || upSegCount > refSegCount) {\n                    if (downSegCount >= upSegCount) {\n                        // Apply down calculation values\n                        for (let i = cell.maxRank - 2; i > cell.minRank; i--) {\n                            cell.setX(i, downXPositions[i - cell.minRank - 1]);\n                        }\n                    }\n                    else if (upSegCount > downSegCount) {\n                        // Apply up calculation values\n                        for (let i = cell.minRank + 2; i < cell.maxRank; i += 1) {\n                            cell.setX(i, upXPositions[i - cell.minRank - 2]);\n                        }\n                    }\n                    else {\n                        // Neither direction provided a favourable result\n                        // But both calculations are better than the\n                        // existing solution, so apply the one with minimal\n                        // offset to attached vertices at either end.\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Determines whether or not a node may be moved to the specified x\n     * position on the specified rank\n     *\n     * @param model the layout model\n     * @param cell the cell being analysed\n     * @param rank the layer of the cell\n     * @param position the x position being sought\n     */\n    repositionValid(model, cell, rank, position) {\n        const ranks = model.ranks;\n        const rankArray = ranks[rank];\n        let rankIndex = -1;\n        for (let i = 0; i < rankArray.length; i += 1) {\n            if (cell === rankArray[i]) {\n                rankIndex = i;\n                break;\n            }\n        }\n        if (rankIndex < 0) {\n            return false;\n        }\n        const currentX = cell.getGeneralPurposeVariable(rank);\n        if (position < currentX) {\n            // Trying to move node to the left.\n            if (rankIndex === 0) {\n                // Left-most node, can move anywhere\n                return true;\n            }\n            const leftCell = rankArray[rankIndex - 1];\n            let leftLimit = leftCell.getGeneralPurposeVariable(rank);\n            leftLimit = leftLimit + leftCell.width / 2 + this.intraCellSpacing + cell.width / 2;\n            return leftLimit <= position;\n        }\n        if (position > currentX) {\n            // Trying to move node to the right.\n            if (rankIndex === rankArray.length - 1) {\n                // Right-most node, can move anywhere\n                return true;\n            }\n            const rightCell = rankArray[rankIndex + 1];\n            let rightLimit = rightCell.getGeneralPurposeVariable(rank);\n            rightLimit =\n                rightLimit - rightCell.width / 2 - this.intraCellSpacing - cell.width / 2;\n            return rightLimit >= position;\n        }\n        return true;\n    }\n    /**\n     * Sets the cell locations in the facade to those stored after this layout\n     * processing step has completed.\n     *\n     * @param graph the input graph\n     * @param model the layout model\n     */\n    setCellLocations(graph, model) {\n        this.rankTopY = [];\n        this.rankBottomY = [];\n        const ranks = model.ranks;\n        for (let i = 0; i < ranks.length; i += 1) {\n            this.rankTopY[i] = Number.MAX_VALUE;\n            this.rankBottomY[i] = -Number.MAX_VALUE;\n        }\n        const vertices = model.vertexMapper.getValues();\n        // Process vertices all first, since they define the lower and\n        // limits of each rank. Between these limits lie the channels\n        // where the edges can be routed across the graph\n        for (let i = 0; i < vertices.length; i += 1) {\n            this.setVertexLocation(vertices[i]);\n        }\n        // Post process edge styles. Needs the vertex locations set for initial\n        // values of the top and bottoms of each rank\n        if (this.layout.edgeStyle === HierarchicalEdgeStyle.ORTHOGONAL ||\n            this.layout.edgeStyle === HierarchicalEdgeStyle.POLYLINE ||\n            this.layout.edgeStyle === HierarchicalEdgeStyle.CURVE) {\n            this.localEdgeProcessing(model);\n        }\n        const edges = model.edgeMapper.getValues();\n        for (let i = 0; i < edges.length; i += 1) {\n            this.setEdgePosition(edges[i]);\n        }\n    }\n    /**\n     * Separates the x position of edges as they connect to vertices\n     *\n     * @param model the layout model\n     */\n    localEdgeProcessing(model) {\n        // Iterate through each vertex, look at the edges connected in\n        // both directions.\n        const ranks = model.ranks;\n        for (let rankIndex = 0; rankIndex < ranks.length; rankIndex += 1) {\n            const rank = ranks[rankIndex];\n            for (let cellIndex = 0; cellIndex < rank.length; cellIndex += 1) {\n                const cell = rank[cellIndex];\n                if (cell.isVertex()) {\n                    let currentCells = cell.getPreviousLayerConnectedCells(rankIndex);\n                    let currentRank = rankIndex - 1;\n                    // Two loops, last connected cells, and next\n                    for (let k = 0; k < 2; k += 1) {\n                        if (currentRank > -1 &&\n                            currentRank < ranks.length &&\n                            currentCells != null &&\n                            currentCells.length > 0) {\n                            const sortedCells = [];\n                            for (let j = 0; j < currentCells.length; j++) {\n                                const sorter = new WeightedCellSorter(currentCells[j], currentCells[j].getX(currentRank));\n                                sortedCells.push(sorter);\n                            }\n                            sortedCells.sort(WeightedCellSorter.compare);\n                            let leftLimit = cell.x[0] - cell.width / 2;\n                            let rightLimit = leftLimit + cell.width;\n                            // Connected edge count starts at 1 to allow for buffer\n                            // with edge of vertex\n                            let connectedEdgeCount = 0;\n                            let connectedEdgeGroupCount = 0;\n                            const connectedEdges = [];\n                            // Calculate width requirements for all connected edges\n                            for (let j = 0; j < sortedCells.length; j++) {\n                                const innerCell = sortedCells[j].cell;\n                                let connections;\n                                if (innerCell.isVertex()) {\n                                    // Get the connecting edge\n                                    if (k === 0) {\n                                        connections = cell.connectsAsSource;\n                                    }\n                                    else {\n                                        connections = cell.connectsAsTarget;\n                                    }\n                                    for (let connIndex = 0; connIndex < connections.length; connIndex += 1) {\n                                        if (connections[connIndex].source === innerCell ||\n                                            connections[connIndex].target === innerCell) {\n                                            connectedEdgeCount += connections[connIndex].edges.length;\n                                            connectedEdgeGroupCount += 1;\n                                            connectedEdges.push(connections[connIndex]);\n                                        }\n                                    }\n                                }\n                                else {\n                                    connectedEdgeCount += innerCell.edges.length;\n                                    connectedEdgeGroupCount += 1;\n                                    connectedEdges.push(innerCell);\n                                }\n                            }\n                            const requiredWidth = (connectedEdgeCount + 1) * this.prefHozEdgeSep;\n                            // Add a buffer on the edges of the vertex if the edge count allows\n                            if (cell.width > requiredWidth + 2 * this.prefHozEdgeSep) {\n                                leftLimit += this.prefHozEdgeSep;\n                                rightLimit -= this.prefHozEdgeSep;\n                            }\n                            const availableWidth = rightLimit - leftLimit;\n                            const edgeSpacing = availableWidth / connectedEdgeCount;\n                            let currentX = leftLimit + edgeSpacing / 2.0;\n                            let currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n                            let maxYOffset = 0;\n                            for (let j = 0; j < connectedEdges.length; j++) {\n                                const numActualEdges = connectedEdges[j].edges.length;\n                                const jettyPositions = this.jettyPositions;\n                                let pos = jettyPositions[connectedEdges[j].ids[0]];\n                                if (pos == null) {\n                                    pos = [];\n                                    jettyPositions[connectedEdges[j].ids[0]] = pos;\n                                }\n                                if (j < connectedEdgeCount / 2) {\n                                    currentYOffset += this.prefVertEdgeOff;\n                                }\n                                else if (j > connectedEdgeCount / 2) {\n                                    currentYOffset -= this.prefVertEdgeOff;\n                                }\n                                // Ignore the case if equals, this means the second of 2\n                                // jettys with the same y (even number of edges)\n                                for (let m = 0; m < numActualEdges; m += 1) {\n                                    pos[m * 4 + k * 2] = currentX;\n                                    currentX += edgeSpacing;\n                                    pos[m * 4 + k * 2 + 1] = currentYOffset;\n                                }\n                                maxYOffset = Math.max(maxYOffset, currentYOffset);\n                            }\n                        }\n                        currentCells = cell.getNextLayerConnectedCells(rankIndex);\n                        currentRank = rankIndex + 1;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Fixes the control points\n     */\n    setEdgePosition(cell) {\n        // For parallel edges we need to seperate out the points a\n        // little\n        let offsetX = 0;\n        // Only set the edge control points once\n        if (cell.temp[0] !== 101207) {\n            let { maxRank } = cell;\n            let { minRank } = cell;\n            if (maxRank === minRank) {\n                maxRank = cell.source.maxRank;\n                minRank = cell.target.minRank;\n            }\n            let parallelEdgeCount = 0;\n            const jettyPositions = this.jettyPositions;\n            const jettys = jettyPositions[cell.ids[0]];\n            const source = cell.isReversed\n                ? cell.target.cell\n                : cell.source.cell;\n            const { graph } = this.layout;\n            const layoutReversed = this.orientation === 'east' || this.orientation === 'south';\n            for (let i = 0; i < cell.edges.length; i += 1) {\n                const realEdge = cell.edges[i];\n                const realSource = this.layout.getVisibleTerminal(realEdge, true);\n                // List oldPoints = graph.getPoints(realEdge);\n                const newPoints = [];\n                // Single length reversed edges end up with the jettys in the wrong\n                // places. Since single length edges only have jettys, not segment\n                // control points, we just say the edge isn't reversed in this section\n                let reversed = cell.isReversed;\n                if (realSource !== source) {\n                    // The real edges include all core model edges and these can go\n                    // in both directions. If the source of the hierarchical model edge\n                    // isn't the source of the specific real edge in this iteration\n                    // treat if as reversed\n                    reversed = !reversed;\n                }\n                // First jetty of edge\n                if (jettys != null) {\n                    const arrayOffset = reversed ? 2 : 0;\n                    const rankBottomY = this.rankBottomY;\n                    const rankTopY = this.rankTopY;\n                    let y = reversed\n                        ? layoutReversed\n                            ? rankBottomY[minRank]\n                            : rankTopY[minRank]\n                        : layoutReversed\n                            ? rankTopY[maxRank]\n                            : rankBottomY[maxRank];\n                    let jetty = jettys[parallelEdgeCount * 4 + 1 + arrayOffset];\n                    if (reversed !== layoutReversed) {\n                        jetty = -jetty;\n                    }\n                    y += jetty;\n                    let x = jettys[parallelEdgeCount * 4 + arrayOffset];\n                    const modelSource = realEdge.getTerminal(true);\n                    if (this.layout.isPort(modelSource) && modelSource.getParent() === realSource) {\n                        const state = graph.view.getState(modelSource);\n                        if (state != null) {\n                            x = state.x;\n                        }\n                        else {\n                            x =\n                                realSource.geometry.x +\n                                    cell.source.width *\n                                        modelSource.geometry.x;\n                        }\n                    }\n                    if (this.orientation === 'north' || this.orientation === 'south') {\n                        newPoints.push(new Point(x, y));\n                        if (this.layout.edgeStyle === HierarchicalEdgeStyle.CURVE) {\n                            newPoints.push(new Point(x, y + jetty));\n                        }\n                    }\n                    else {\n                        newPoints.push(new Point(y, x));\n                        if (this.layout.edgeStyle === HierarchicalEdgeStyle.CURVE) {\n                            newPoints.push(new Point(y + jetty, x));\n                        }\n                    }\n                }\n                // Declare variables to define loop through edge points and\n                // change direction if edge is reversed\n                let loopStart = cell.x.length - 1;\n                let loopLimit = -1;\n                let loopDelta = -1;\n                let currentRank = cell.maxRank - 1;\n                if (reversed) {\n                    loopStart = 0;\n                    loopLimit = cell.x.length;\n                    loopDelta = 1;\n                    currentRank = cell.minRank + 1;\n                }\n                // Reversed edges need the points inserted in\n                // reverse order\n                for (let j = loopStart; cell.maxRank !== cell.minRank && j !== loopLimit; j += loopDelta) {\n                    // The horizontal position in a vertical layout\n                    const positionX = cell.x[j] + offsetX;\n                    // Work out the vertical positions in a vertical layout\n                    // in the edge buffer channels above and below this rank\n                    const rankTopY = this.rankTopY;\n                    const rankBottomY = this.rankBottomY;\n                    let topChannelY = (rankTopY[currentRank] + rankBottomY[currentRank + 1]) / 2.0;\n                    let bottomChannelY = (rankTopY[currentRank - 1] + rankBottomY[currentRank]) / 2.0;\n                    if (reversed) {\n                        const tmp = topChannelY;\n                        topChannelY = bottomChannelY;\n                        bottomChannelY = tmp;\n                    }\n                    if (this.orientation === 'north' || this.orientation === 'south') {\n                        newPoints.push(new Point(positionX, topChannelY));\n                        newPoints.push(new Point(positionX, bottomChannelY));\n                    }\n                    else {\n                        newPoints.push(new Point(topChannelY, positionX));\n                        newPoints.push(new Point(bottomChannelY, positionX));\n                    }\n                    this.limitX = Math.max(this.limitX, positionX);\n                    currentRank += loopDelta;\n                }\n                // Second jetty of edge\n                if (jettys != null) {\n                    const arrayOffset = reversed ? 2 : 0;\n                    const rankTopY = this.rankTopY;\n                    const rankBottomY = this.rankBottomY;\n                    const rankY = reversed\n                        ? layoutReversed\n                            ? rankTopY[maxRank]\n                            : rankBottomY[maxRank]\n                        : layoutReversed\n                            ? rankBottomY[minRank]\n                            : rankTopY[minRank];\n                    let jetty = jettys[parallelEdgeCount * 4 + 3 - arrayOffset];\n                    if (reversed !== layoutReversed) {\n                        jetty = -jetty;\n                    }\n                    const y = rankY - jetty;\n                    let x = jettys[parallelEdgeCount * 4 + 2 - arrayOffset];\n                    const modelTarget = realEdge.getTerminal(false);\n                    const realTarget = this.layout.getVisibleTerminal(realEdge, false);\n                    if (this.layout.isPort(modelTarget) && modelTarget.getParent() === realTarget) {\n                        const state = graph.view.getState(modelTarget);\n                        if (state != null) {\n                            x = state.x;\n                        }\n                        else {\n                            x =\n                                realTarget.geometry.x +\n                                    cell.target.width *\n                                        modelTarget.geometry.x;\n                        }\n                    }\n                    if (this.orientation === 'north' || this.orientation === 'south') {\n                        if (this.layout.edgeStyle === HierarchicalEdgeStyle.CURVE) {\n                            newPoints.push(new Point(x, y - jetty));\n                        }\n                        newPoints.push(new Point(x, y));\n                    }\n                    else {\n                        if (this.layout.edgeStyle === HierarchicalEdgeStyle.CURVE) {\n                            newPoints.push(new Point(y - jetty, x));\n                        }\n                        newPoints.push(new Point(y, x));\n                    }\n                }\n                if (cell.isReversed) {\n                    this.processReversedEdge(cell, realEdge);\n                }\n                this.layout.setEdgePoints(realEdge, newPoints);\n                // Increase offset so next edge is drawn next to\n                // this one\n                if (offsetX === 0.0) {\n                    offsetX = this.parallelEdgeSpacing;\n                }\n                else if (offsetX > 0) {\n                    offsetX = -offsetX;\n                }\n                else {\n                    offsetX = -offsetX + this.parallelEdgeSpacing;\n                }\n                parallelEdgeCount++;\n            }\n            cell.temp[0] = 101207;\n        }\n    }\n    /**\n     * Fixes the position of the specified vertex.\n     *\n     * @param cell the vertex to position\n     */\n    setVertexLocation(cell) {\n        const realCell = cell.cell;\n        const positionX = cell.x[0] - cell.width / 2;\n        const positionY = cell.y[0] - cell.height / 2;\n        const rankTopY = this.rankTopY;\n        const rankBottomY = this.rankBottomY;\n        rankTopY[cell.minRank] = Math.min(rankTopY[cell.minRank], positionY);\n        rankBottomY[cell.minRank] = Math.max(rankBottomY[cell.minRank], positionY + cell.height);\n        if (this.orientation === 'north' || this.orientation === 'south') {\n            this.layout.setVertexLocation(realCell, positionX, positionY);\n        }\n        else {\n            this.layout.setVertexLocation(realCell, positionY, positionX);\n        }\n        this.limitX = Math.max(this.limitX, positionX + cell.width);\n    }\n    /**\n     * Hook to add additional processing\n     *\n     * @param edge the hierarchical model edge\n     * @param realEdge the real edge in the graph\n     */\n    processReversedEdge(edge, realEdge) {\n        // hook for subclassers\n    }\n}\nexport default CoordinateAssignment;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2018, JGraph Ltd\nCopyright (c) 2006-2018, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport GraphLayout from './GraphLayout';\nimport HierarchicalEdgeStyle from './datatypes/HierarchicalEdgeStyle';\nimport Dictionary from '../../util/Dictionary';\nimport GraphHierarchyModel from './hierarchical/GraphHierarchyModel';\nimport ObjectIdentity from '../../util/ObjectIdentity';\nimport MinimumCycleRemover from './hierarchical/MinimumCycleRemover';\nimport MedianHybridCrossingReduction from './hierarchical/MedianHybridCrossingReduction';\nimport CoordinateAssignment from './hierarchical/CoordinateAssignment';\n/**\n * A hierarchical layout algorithm.\n *\n * @category Layout\n */\nclass HierarchicalLayout extends GraphLayout {\n    /**\n     * Constructs a new hierarchical layout algorithm.\n     *\n     * @param graph Reference to the enclosing {@link AbstractGraph}.\n     * @param orientation Optional constant that defines the orientation of this layout. Default is 'north'.\n     * @param deterministic Optional boolean that specifies if this layout should be deterministic. Default is true.\n     */\n    constructor(graph, orientation = 'north', deterministic = true) {\n        super(graph);\n        this.parentX = null;\n        this.parentY = null;\n        /**\n         * Holds the array of <Cell> that this layout contains.\n         */\n        this.roots = null;\n        /**\n         * Specifies if the parent should be resized after the layout so that it\n         * contains all the child cells. Default is false. See also <parentBorder>.\n         */\n        this.resizeParent = false;\n        /**\n         * Specifies if the parent location should be maintained, so that the\n         * top, left corner stays the same before and after execution of\n         * the layout. Default is false for backwards compatibility.\n         */\n        this.maintainParentLocation = false;\n        /**\n         * Specifies if the parent should be moved if <resizeParent> is enabled.\n         * Default is false.\n         */\n        this.moveParent = false;\n        /**\n         * The border to be added around the children if the parent is to be\n         * resized using <resizeParent>. Default is 0.\n         */\n        this.parentBorder = 0;\n        /**\n         * The spacing buffer added between cells on the same layer. Default is 30.\n         */\n        this.intraCellSpacing = 30;\n        /**\n         * The spacing buffer added between cell on adjacent layers. Default is 100.\n         */\n        this.interRankCellSpacing = 100;\n        /**\n         * The spacing buffer between unconnected hierarchies. Default is 60.\n         */\n        this.interHierarchySpacing = 60;\n        /**\n         * The distance between each parallel edge on each ranks for long edges.\n         * Default is 10.\n         */\n        this.parallelEdgeSpacing = 10;\n        /**\n         * The position of the root node(s) relative to the laid out graph in.\n         * @default north\n         */\n        this.orientation = 'north';\n        /**\n         * Whether or not to perform local optimisations and iterate multiple times\n         * through the algorithm. Default is true.\n         */\n        this.fineTuning = true;\n        /**\n         * Whether or not to tighten the assigned ranks of vertices up towards\n         * the source cells. Default is true.\n         */\n        this.tightenToSource = true;\n        /**\n         * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n         * modified by the result. Default is true.\n         */\n        this.disableEdgeStyle = true;\n        /**\n         * Whether or not to drill into child cells and layout in reverse\n         * group order. This also cause the layout to navigate edges whose\n         * terminal vertices have different parents but are in the same\n         * ancestry chain. Default is true.\n         */\n        this.traverseAncestors = true;\n        /**\n         * The internal <GraphHierarchyModel> formed of the layout.\n         */\n        this.model = null;\n        /**\n         * A cache of edges whose source terminal is the key\n         */\n        this.edgesCache = new Dictionary();\n        /**\n         * A cache of edges whose source terminal is the key\n         */\n        this.edgeSourceTermCache = new Dictionary();\n        /**\n         * A cache of edges whose source terminal is the key\n         */\n        this.edgesTargetTermCache = new Dictionary();\n        /**\n         * The style to apply between cell layers to edge segments.\n         * Default is {@link HierarchicalEdgeStyle#POLYLINE}.\n         */\n        this.edgeStyle = HierarchicalEdgeStyle.POLYLINE;\n        this.orientation = orientation;\n        this.deterministic = deterministic;\n    }\n    /**\n     * Returns the internal <GraphHierarchyModel> for this layout algorithm.\n     */\n    getDataModel() {\n        return this.model;\n    }\n    /**\n     * Executes the layout for the children of the specified parent.\n     *\n     * @param parent Parent <Cell> that contains the children to be laid out.\n     * @param roots Optional starting roots of the layout.\n     */\n    execute(parent, roots = null) {\n        this.parent = parent;\n        this.edgesCache = new Dictionary();\n        this.edgeSourceTermCache = new Dictionary();\n        this.edgesTargetTermCache = new Dictionary();\n        if (roots != null && !(roots instanceof Array)) {\n            roots = [roots];\n        }\n        // If the roots are set and the parent is set, only\n        // use the roots that are some dependent of the that\n        // parent.\n        // If just the root are set, use them as-is\n        // If just the parent is set use it's immediate\n        // children as the initial set\n        if (roots == null && parent == null) {\n            // TODO indicate the problem\n            return;\n        }\n        //  Maintaining parent location\n        this.parentX = null;\n        this.parentY = null;\n        if (parent !== this.graph.getDataModel().root &&\n            parent.isVertex() != null &&\n            this.maintainParentLocation) {\n            const geo = parent.getGeometry();\n            if (geo != null) {\n                this.parentX = geo.x;\n                this.parentY = geo.y;\n            }\n        }\n        if (roots != null) {\n            const rootsCopy = [];\n            for (let i = 0; i < roots.length; i += 1) {\n                const ancestor = parent != null ? parent.isAncestor(roots[i]) : true;\n                if (ancestor && roots[i].isVertex()) {\n                    rootsCopy.push(roots[i]);\n                }\n            }\n            this.roots = rootsCopy;\n        }\n        const { model } = this.graph;\n        model.batchUpdate(() => {\n            this.run(parent);\n            if (this.resizeParent && !parent.isCollapsed()) {\n                this.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n            }\n            // Maintaining parent location\n            if (this.parentX != null && this.parentY != null) {\n                let geo = parent.getGeometry();\n                if (geo != null) {\n                    geo = geo.clone();\n                    geo.x = this.parentX;\n                    geo.y = this.parentY;\n                    model.setGeometry(parent, geo);\n                }\n            }\n        });\n    }\n    /**\n     * Returns all visible children in the given parent which do not have\n     * incoming edges. If the result is empty then the children with the\n     * maximum difference between incoming and outgoing edges are returned.\n     * This takes into account edges that are being promoted to the given\n     * root due to invisible children or collapsed cells.\n     *\n     * @param parent <Cell> whose children should be checked.\n     * @param vertices array of vertices to limit search to\n     */\n    findRoots(parent, vertices) {\n        const roots = [];\n        if (parent != null && vertices != null) {\n            const { model } = this.graph;\n            let best = null;\n            let maxDiff = -100000;\n            for (const i in vertices) {\n                const cell = vertices[i];\n                if (cell.isVertex() && cell.isVisible()) {\n                    const conns = this.getEdges(cell);\n                    let fanOut = 0;\n                    let fanIn = 0;\n                    for (let k = 0; k < conns.length; k++) {\n                        const src = this.getVisibleTerminal(conns[k], true);\n                        if (src === cell) {\n                            fanOut++;\n                        }\n                        else {\n                            fanIn++;\n                        }\n                    }\n                    if (fanIn === 0 && fanOut > 0) {\n                        roots.push(cell);\n                    }\n                    const diff = fanOut - fanIn;\n                    if (diff > maxDiff) {\n                        maxDiff = diff;\n                        best = cell;\n                    }\n                }\n            }\n            if (roots.length === 0 && best != null) {\n                roots.push(best);\n            }\n        }\n        return roots;\n    }\n    /**\n     * Returns the connected edges for the given cell.\n     *\n     * @param cell <Cell> whose edges should be returned.\n     */\n    getEdges(cell) {\n        const cachedEdges = this.edgesCache.get(cell);\n        if (cachedEdges != null) {\n            return cachedEdges;\n        }\n        const { model } = this.graph;\n        let edges = [];\n        const isCollapsed = cell.isCollapsed();\n        const childCount = cell.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            const child = cell.getChildAt(i);\n            if (this.isPort(child)) {\n                edges = edges.concat(child.getEdges(true, true));\n            }\n            else if (isCollapsed || !child.isVisible()) {\n                edges = edges.concat(child.getEdges(true, true));\n            }\n        }\n        edges = edges.concat(cell.getEdges(true, true));\n        const result = [];\n        for (let i = 0; i < edges.length; i += 1) {\n            const source = this.getVisibleTerminal(edges[i], true);\n            const target = this.getVisibleTerminal(edges[i], false);\n            if (source === target ||\n                (source !== target &&\n                    ((target === cell &&\n                        (this.parent == null ||\n                            this.isAncestor(this.parent, source, this.traverseAncestors))) ||\n                        (source === cell &&\n                            (this.parent == null ||\n                                this.isAncestor(this.parent, target, this.traverseAncestors)))))) {\n                result.push(edges[i]);\n            }\n        }\n        this.edgesCache.put(cell, result);\n        return result;\n    }\n    /**\n     * Helper function to return visible terminal for edge allowing for ports\n     *\n     * @param edge <Cell> whose edges should be returned.\n     * @param source Boolean that specifies whether the source or target terminal is to be returned\n     */\n    getVisibleTerminal(edge, source) {\n        let terminalCache;\n        if (source) {\n            terminalCache = this.edgeSourceTermCache;\n        }\n        else {\n            terminalCache = this.edgesTargetTermCache;\n        }\n        const term = terminalCache.get(edge);\n        if (term != null) {\n            return term;\n        }\n        const state = this.graph.view.getState(edge);\n        let terminal = state != null\n            ? state.getVisibleTerminal(source)\n            : this.graph.view.getVisibleTerminal(edge, source);\n        if (terminal == null) {\n            terminal =\n                state != null\n                    ? state.getVisibleTerminal(source)\n                    : this.graph.view.getVisibleTerminal(edge, source);\n        }\n        if (terminal != null) {\n            if (this.isPort(terminal)) {\n                terminal = terminal.getParent();\n            }\n            terminalCache.put(edge, terminal);\n        }\n        return terminal;\n    }\n    /**\n     * The API method used to exercise the layout upon the graph description\n     * and produce a separate description of the vertex position and edge\n     * routing changes made. It runs each stage of the layout that has been\n     * created.\n     */\n    run(parent) {\n        // Separate out unconnected hierarchies\n        const hierarchyVertices = [];\n        const allVertexSet = {};\n        if (this.roots == null && parent != null) {\n            const filledVertexSet = Object();\n            this.filterDescendants(parent, filledVertexSet);\n            this.roots = [];\n            let filledVertexSetEmpty = true;\n            // Poor man's isSetEmpty\n            for (const key in filledVertexSet) {\n                if (filledVertexSet[key] != null) {\n                    filledVertexSetEmpty = false;\n                    break;\n                }\n            }\n            while (!filledVertexSetEmpty) {\n                const candidateRoots = this.findRoots(parent, filledVertexSet);\n                // If the candidate root is an unconnected group cell, remove it from\n                // the layout. We may need a custom set that holds such groups and forces\n                // them to be processed for resizing and/or moving.\n                for (let i = 0; i < candidateRoots.length; i += 1) {\n                    const vertexSet = Object();\n                    hierarchyVertices.push(vertexSet);\n                    this.traverse({\n                        vertex: candidateRoots[i],\n                        directed: true,\n                        edge: null,\n                        allVertices: allVertexSet,\n                        currentComp: vertexSet,\n                        hierarchyVertices: hierarchyVertices,\n                        filledVertexSet: filledVertexSet,\n                        func: null,\n                        visited: null,\n                    });\n                }\n                for (let i = 0; i < candidateRoots.length; i += 1) {\n                    this.roots.push(candidateRoots[i]);\n                }\n                filledVertexSetEmpty = true;\n                // Poor man's isSetEmpty\n                for (const key in filledVertexSet) {\n                    if (filledVertexSet[key] != null) {\n                        filledVertexSetEmpty = false;\n                        break;\n                    }\n                }\n            }\n        }\n        else {\n            // Find vertex set as directed traversal from roots\n            const roots = this.roots; // NEED CHECK - roots cannot be null\n            for (let i = 0; i < roots.length; i += 1) {\n                const vertexSet = Object();\n                hierarchyVertices.push(vertexSet);\n                this.traverse({\n                    vertex: roots[i],\n                    directed: true,\n                    edge: null,\n                    allVertices: allVertexSet,\n                    currentComp: vertexSet,\n                    hierarchyVertices: hierarchyVertices,\n                    filledVertexSet: null,\n                    func: null,\n                    visited: null,\n                });\n            }\n        }\n        // Iterate through the result removing parents who have children in this layout\n        // Perform a layout for each seperate hierarchy\n        // Track initial coordinate x-positioning\n        let initialX = 0;\n        for (let i = 0; i < hierarchyVertices.length; i += 1) {\n            const vertexSet = hierarchyVertices[i];\n            const tmp = [];\n            for (const key in vertexSet) {\n                tmp.push(vertexSet[key]);\n            }\n            this.model = new GraphHierarchyModel(this, tmp, this.roots, parent, this.tightenToSource);\n            this.cycleStage(parent);\n            this.layeringStage();\n            this.crossingStage(parent);\n            initialX = this.placementStage(initialX, parent);\n        }\n    }\n    /**\n     * Creates an array of descendant cells\n     */\n    filterDescendants(cell, result) {\n        const { model } = this.graph;\n        if (cell.isVertex() && cell !== this.parent && cell.isVisible()) {\n            result[ObjectIdentity.get(cell)] = cell;\n        }\n        if (this.traverseAncestors || (cell === this.parent && cell.isVisible())) {\n            const childCount = cell.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                const child = cell.getChildAt(i);\n                // Ignore ports in the layout vertex list, they are dealt with\n                // in the traversal mechanisms\n                if (!this.isPort(child)) {\n                    this.filterDescendants(child, result);\n                }\n            }\n        }\n    }\n    /**\n     * Returns true if the given cell is a \"port\", that is, when connecting to\n     * it, its parent is the connecting vertex in terms of graph traversal\n     *\n     * @param cell <Cell> that represents the port.\n     */\n    isPort(cell) {\n        if (cell != null && cell.geometry != null) {\n            return cell.geometry.relative;\n        }\n        return false;\n    }\n    /**\n     * Returns the edges between the given source and target. This takes into\n     * account collapsed and invisible cells and ports.\n     *\n     * source -\n     * target -\n     * directed -\n     */\n    getEdgesBetween(source, target, directed) {\n        directed = directed != null ? directed : false;\n        const edges = this.getEdges(source);\n        const result = [];\n        // Checks if the edge is connected to the correct\n        // cell and returns the first match\n        for (let i = 0; i < edges.length; i += 1) {\n            const src = this.getVisibleTerminal(edges[i], true);\n            const trg = this.getVisibleTerminal(edges[i], false);\n            if ((src === source && trg === target) ||\n                (!directed && src === target && trg === source)) {\n                result.push(edges[i]);\n            }\n        }\n        return result;\n    }\n    /**\n     * Traverses the (directed) graph invoking the given function for each\n     * visited vertex and edge. The function is invoked with the current vertex\n     * and the incoming edge as a parameter. This implementation makes sure\n     * each vertex is only visited once. The function may return false if the\n     * traversal should stop at the given vertex.\n     *\n     * @param vertex <Cell> that represents the vertex where the traversal starts.\n     * @param directed boolean indicating if edges should only be traversed\n     * from source to target. Default is true.\n     * @param edge Optional <Cell> that represents the incoming edge. This is\n     * null for the first step of the traversal.\n     * @param allVertices Array of cell paths for the visited cells.\n     */\n    traverse({ vertex, directed, allVertices, currentComp, hierarchyVertices, filledVertexSet, }) {\n        if (vertex != null && allVertices != null) {\n            // Has this vertex been seen before in any traversal\n            // And if the filled vertex set is populated, only\n            // process vertices in that it contains\n            const vertexID = ObjectIdentity.get(vertex);\n            if (allVertices[vertexID] == null &&\n                (filledVertexSet == null ? true : filledVertexSet[vertexID] != null)) {\n                if (currentComp[vertexID] == null) {\n                    currentComp[vertexID] = vertex;\n                }\n                if (allVertices[vertexID] == null) {\n                    allVertices[vertexID] = vertex;\n                }\n                if (filledVertexSet !== null) {\n                    delete filledVertexSet[vertexID];\n                }\n                const edges = this.getEdges(vertex);\n                const edgeIsSource = [];\n                for (let i = 0; i < edges.length; i += 1) {\n                    edgeIsSource[i] = this.getVisibleTerminal(edges[i], true) == vertex;\n                }\n                for (let i = 0; i < edges.length; i += 1) {\n                    if (!directed || edgeIsSource[i]) {\n                        const next = this.getVisibleTerminal(edges[i], !edgeIsSource[i]);\n                        // Check whether there are more edges incoming from the target vertex than outgoing\n                        // The hierarchical model treats bi-directional parallel edges as being sourced\n                        // from the more \"sourced\" terminal. If the directions are equal in number, the direction\n                        // is that of the natural direction from the roots of the layout.\n                        // The checks below are slightly more verbose than need be for performance reasons\n                        let netCount = 1;\n                        for (let j = 0; j < edges.length; j++) {\n                            if (j !== i) {\n                                const isSource2 = edgeIsSource[j];\n                                const otherTerm = this.getVisibleTerminal(edges[j], !isSource2);\n                                if (otherTerm === next) {\n                                    if (isSource2) {\n                                        netCount++;\n                                    }\n                                    else {\n                                        netCount--;\n                                    }\n                                }\n                            }\n                        }\n                        if (netCount >= 0) {\n                            currentComp = this.traverse({\n                                vertex: next,\n                                directed,\n                                edge: edges[i],\n                                allVertices,\n                                currentComp,\n                                hierarchyVertices,\n                                filledVertexSet,\n                                func: null,\n                                visited: null,\n                            });\n                        }\n                    }\n                }\n            }\n            else if (currentComp[vertexID] == null) {\n                // We've seen this vertex before, but not in the current component\n                // This component and the one it's in need to be merged\n                for (let i = 0; i < hierarchyVertices.length; i += 1) {\n                    const comp = hierarchyVertices[i];\n                    // @ts-expect-error\n                    if (comp[vertexID] != null) {\n                        for (const key in comp) {\n                            // @ts-expect-error\n                            currentComp[key] = comp[key];\n                        }\n                        // Remove the current component from the hierarchy set\n                        hierarchyVertices.splice(i, 1);\n                        return currentComp;\n                    }\n                }\n            }\n        }\n        return currentComp;\n    }\n    /**\n     * Executes the cycle stage using mxMinimumCycleRemover.\n     */\n    cycleStage(parent) {\n        const cycleStage = new MinimumCycleRemover(this);\n        cycleStage.execute(parent);\n    }\n    /**\n     * Implements first stage of a Sugiyama layout.\n     */\n    layeringStage() {\n        const model = this.model;\n        model.initialRank();\n        model.fixRanks();\n    }\n    /**\n     * Executes the crossing stage using mxMedianHybridCrossingReduction.\n     */\n    crossingStage(parent) {\n        const crossingStage = new MedianHybridCrossingReduction(this);\n        crossingStage.execute(parent);\n    }\n    /**\n     * Executes the placement stage using mxCoordinateAssignment.\n     */\n    placementStage(initialX, parent) {\n        const placementStage = new CoordinateAssignment(this, this.intraCellSpacing, this.interRankCellSpacing, this.orientation, initialX, this.parallelEdgeSpacing);\n        placementStage.fineTuning = this.fineTuning;\n        placementStage.execute(parent);\n        return placementStage.limitX + this.interHierarchySpacing;\n    }\n}\nexport default HierarchicalLayout;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2018, JGraph Ltd\nCopyright (c) 2006-2018, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport GraphHierarchyNode from '../datatypes/GraphHierarchyNode';\nimport GraphHierarchyEdge from '../datatypes/GraphHierarchyEdge';\nimport CellPath from '../../cell/CellPath';\nimport Dictionary from '../../../util/Dictionary';\nimport { clone } from '../../../util/cloneUtils';\n/**\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * @category Layout\n */\nclass SwimlaneModel {\n    /**\n     * Creates an internal ordered graph model using the vertices passed in. If\n     * there are any, leftward edge need to be inverted in the internal model.\n     *\n     * @param layout\n     * @param vertices the vertices for this hierarchy\n     * @param roots\n     * @param parent\n     * @param tightenToSource whether or not to tighten vertices towards the sources\n     */\n    constructor(layout, vertices, roots, parent, tightenToSource) {\n        /**\n         * Mapping from rank number to actual rank\n         */\n        this.ranks = [];\n        /**\n         * Count of the number of times the ancestor dfs has been used.\n         */\n        this.dfsCount = 0;\n        /**\n         * High value to start source layering scan rank value from.\n         */\n        this.SOURCESCANSTARTRANK = 100000000;\n        /**\n         * Whether or not to tighten the assigned ranks of vertices up towards\n         * the source cells.\n         */\n        this.tightenToSource = false;\n        /**\n         * An array of the number of ranks within each swimlane\n         */\n        this.ranksPerGroup = null;\n        const graph = layout.getGraph();\n        this.tightenToSource = tightenToSource;\n        this.roots = roots;\n        this.parent = parent;\n        // map of cells to internal cell needed for second run through\n        // to setup the sink of edges correctly\n        this.vertexMapper = new Dictionary();\n        this.edgeMapper = new Dictionary();\n        this.maxRank = 0;\n        const internalVertices = [];\n        if (vertices == null) {\n            vertices = graph.getChildVertices(parent);\n        }\n        this.maxRank = this.SOURCESCANSTARTRANK;\n        // map of cells to internal cell needed for second run through\n        // to setup the sink of edges correctly. Guess size by number\n        // of edges is roughly same as number of vertices.\n        this.createInternalCells(layout, vertices, internalVertices);\n        // Go through edges set their sink values. Also check the\n        // ordering if and invert edges if necessary\n        for (let i = 0; i < vertices.length; i += 1) {\n            const edges = internalVertices[i].connectsAsSource;\n            for (let j = 0; j < edges.length; j++) {\n                const internalEdge = edges[j];\n                const realEdges = internalEdge.edges;\n                // Only need to process the first real edge, since\n                // all the edges connect to the same other vertex\n                if (realEdges != null && realEdges.length > 0) {\n                    const realEdge = realEdges[0];\n                    let targetCell = layout.getVisibleTerminal(realEdge, false);\n                    let internalTargetCell = this.vertexMapper.get(targetCell);\n                    if (internalVertices[i] == internalTargetCell) {\n                        // If there are parallel edges going between two vertices and not all are in the same direction\n                        // you can have navigated across one direction when doing the cycle reversal that isn't the same\n                        // direction as the first real edge in the array above. When that happens the if above catches\n                        // that and we correct the target cell before continuing.\n                        // This branch only detects this single case\n                        targetCell = layout.getVisibleTerminal(realEdge, true);\n                        internalTargetCell = this.vertexMapper.get(targetCell);\n                    }\n                    if (internalTargetCell != null && internalVertices[i] !== internalTargetCell) {\n                        internalEdge.target = internalTargetCell;\n                        if (internalTargetCell.connectsAsTarget.length == 0) {\n                            internalTargetCell.connectsAsTarget = [];\n                        }\n                        if (internalTargetCell.connectsAsTarget.indexOf(internalEdge) < 0) {\n                            internalTargetCell.connectsAsTarget.push(internalEdge);\n                        }\n                    }\n                }\n            }\n            // Use the temp variable in the internal nodes to mark this\n            // internal vertex as having been visited.\n            internalVertices[i].temp[0] = 1;\n        }\n    }\n    /**\n     * Creates all edges in the internal model\n     *\n     * @param layout Reference to the <HierarchicalLayout> algorithm.\n     * @param vertices Array of {@link Cells} that represent the vertices whom are to\n     * have an internal representation created.\n     * @param internalVertices The array of {@link GraphHierarchyNodes} to have their\n     * information filled in using the real vertices.\n     */\n    createInternalCells(layout, vertices, internalVertices) {\n        const graph = layout.getGraph();\n        const swimlanes = layout.swimlanes;\n        // Create internal edges\n        for (let i = 0; i < vertices.length; i += 1) {\n            internalVertices[i] = new GraphHierarchyNode(vertices[i]);\n            this.vertexMapper.put(vertices[i], internalVertices[i]);\n            internalVertices[i].swimlaneIndex = -1;\n            for (let ii = 0; ii < swimlanes.length; ii += 1) {\n                if (vertices[i].getParent() === swimlanes[ii]) {\n                    internalVertices[i].swimlaneIndex = ii;\n                    break;\n                }\n            }\n            // If the layout is deterministic, order the cells\n            // List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n            const conns = layout.getEdges(vertices[i]);\n            internalVertices[i].connectsAsSource = [];\n            // Create internal edges, but don't do any rank assignment yet\n            // First use the information from the greedy cycle remover to\n            // invert the leftward edges internally\n            for (let j = 0; j < conns.length; j += 1) {\n                const cell = layout.getVisibleTerminal(conns[j], false);\n                // Looking for outgoing edges only\n                if (cell !== vertices[i] && cell.isVertex() && !layout.isVertexIgnored(cell)) {\n                    // We process all edge between this source and its targets\n                    // If there are edges going both ways, we need to collect\n                    // them all into one internal edges to avoid looping problems\n                    // later. We assume this direction (source -> target) is the\n                    // natural direction if at least half the edges are going in\n                    // that direction.\n                    // The check below for edges[0] being in the vertex mapper is\n                    // in case we've processed this the other way around\n                    // (target -> source) and the number of edges in each direction\n                    // are the same. All the graph edges will have been assigned to\n                    // an internal edge going the other way, so we don't want to\n                    // process them again\n                    const undirectedEdges = layout.getEdgesBetween(vertices[i], cell, false);\n                    const directedEdges = layout.getEdgesBetween(vertices[i], cell, true);\n                    if (undirectedEdges != null &&\n                        undirectedEdges.length > 0 &&\n                        this.edgeMapper.get(undirectedEdges[0]) == null &&\n                        directedEdges.length * 2 >= undirectedEdges.length) {\n                        const internalEdge = new GraphHierarchyEdge(undirectedEdges);\n                        for (let k = 0; k < undirectedEdges.length; k += 1) {\n                            const edge = undirectedEdges[k];\n                            this.edgeMapper.put(edge, internalEdge);\n                            // Resets all point on the edge and disables the edge style\n                            // without deleting it from the cell style\n                            graph.resetEdge(edge);\n                            if (layout.disableEdgeStyle) {\n                                layout.setEdgeStyleEnabled(edge, false);\n                                layout.setOrthogonalEdge(edge, true);\n                            }\n                        }\n                        internalEdge.source = internalVertices[i];\n                        if (internalVertices[i].connectsAsSource.indexOf(internalEdge) < 0) {\n                            internalVertices[i].connectsAsSource.push(internalEdge);\n                        }\n                    }\n                }\n            }\n            // Ensure temp variable is cleared from any previous use\n            internalVertices[i].temp[0] = 0;\n        }\n    }\n    /**\n     * Basic determination of minimum layer ranking by working from from sources\n     * or sinks and working through each node in the relevant edge direction.\n     * Starting at the sinks is basically a longest path layering algorithm.\n     */\n    initialRank() {\n        this.ranksPerGroup = [];\n        const startNodes = [];\n        const seen = {};\n        if (this.roots != null) {\n            for (let i = 0; i < this.roots.length; i += 1) {\n                const internalNode = this.vertexMapper.get(this.roots[i]);\n                this.maxChainDfs(null, internalNode, null, seen, 0);\n                if (internalNode != null) {\n                    startNodes.push(internalNode);\n                }\n            }\n        }\n        // Calculate the lower and upper rank bounds of each swimlane\n        const lowerRank = {};\n        const upperRank = {};\n        for (let i = this.ranksPerGroup.length - 1; i >= 0; i--) {\n            if (i === this.ranksPerGroup.length - 1) {\n                lowerRank[i] = 0;\n            }\n            else {\n                lowerRank[i] = upperRank[i + 1] + 1;\n            }\n            upperRank[i] = lowerRank[i] + this.ranksPerGroup[i];\n        }\n        this.maxRank = upperRank[0];\n        const internalNodes = this.vertexMapper.getValues();\n        for (let i = 0; i < internalNodes.length; i += 1) {\n            // Mark the node as not having had a layer assigned\n            internalNodes[i].temp[0] = -1;\n        }\n        const startNodesCopy = startNodes.slice();\n        while (startNodes.length > 0) {\n            const internalNode = startNodes[0];\n            const layerDeterminingEdges = internalNode.connectsAsTarget;\n            const edgesToBeMarked = internalNode.connectsAsSource;\n            // flag to keep track of whether or not all layer determining\n            // edges have been scanned\n            let allEdgesScanned = true;\n            // Work out the layer of this node from the layer determining\n            // edges. The minimum layer number of any node connected by one of\n            // the layer determining edges variable\n            let minimumLayer = upperRank[0];\n            for (let i = 0; i < layerDeterminingEdges.length; i += 1) {\n                const internalEdge = layerDeterminingEdges[i];\n                if (internalEdge.temp[0] === 5270620) {\n                    // This edge has been scanned, get the layer of the\n                    // node on the other end\n                    const otherNode = internalEdge.source;\n                    minimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n                }\n                else {\n                    allEdgesScanned = false;\n                    break;\n                }\n            }\n            // If all edge have been scanned, assign the layer, mark all\n            // edges in the other direction and remove from the nodes list\n            if (allEdgesScanned) {\n                if (minimumLayer > upperRank[internalNode.swimlaneIndex]) {\n                    minimumLayer = upperRank[internalNode.swimlaneIndex];\n                }\n                internalNode.temp[0] = minimumLayer;\n                if (edgesToBeMarked != null) {\n                    for (let i = 0; i < edgesToBeMarked.length; i += 1) {\n                        const internalEdge = edgesToBeMarked[i];\n                        // Assign unique stamp ( y/m/d/h )\n                        internalEdge.temp[0] = 5270620;\n                        // Add node on other end of edge to LinkedList of\n                        // nodes to be analysed\n                        const otherNode = internalEdge.target;\n                        // Only add node if it hasn't been assigned a layer\n                        if (otherNode.temp[0] === -1) {\n                            startNodes.push(otherNode);\n                            // Mark this other node as neither being\n                            // unassigned nor assigned so it isn't\n                            // added to this list again, but it's\n                            // layer isn't used in any calculation.\n                            otherNode.temp[0] = -2;\n                        }\n                    }\n                }\n                startNodes.shift();\n            }\n            else {\n                // Not all the edges have been scanned, get to the back of\n                // the class and put the dunces cap on\n                const removedCell = startNodes.shift();\n                startNodes.push(internalNode);\n                if (removedCell === internalNode && startNodes.length === 1) {\n                    // This is an error condition, we can't get out of\n                    // this loop. It could happen for more than one node\n                    // but that's a lot harder to detect. Log the error\n                    // TODO make log comment\n                    break;\n                }\n            }\n        }\n        // Normalize the ranks down from their large starting value to place\n        // at least 1 sink on layer 0\n        //  for (var key in this.vertexMapper)\n        //  {\n        //    let internalNode = this.vertexMapper[key];\n        //    // Mark the node as not having had a layer assigned\n        //    internalNode.temp[0] -= this.maxRank;\n        //  }\n        // Tighten the rank 0 nodes as far as possible\n        //  for ( let i = 0; i < startNodesCopy.length; i += 1)\n        //  {\n        //    let internalNode = startNodesCopy[i];\n        //    let currentMaxLayer = 0;\n        //    let layerDeterminingEdges = internalNode.connectsAsSource;\n        //\n        //    for ( let j = 0; j < layerDeterminingEdges.length; j++)\n        //    {\n        //      let internalEdge = layerDeterminingEdges[j];\n        //      let otherNode = internalEdge.target;\n        //      internalNode.temp[0] = Math.max(currentMaxLayer,\n        //          otherNode.temp[0] + 1);\n        //      currentMaxLayer = internalNode.temp[0];\n        //    }\n        //  }\n    }\n    /**\n     * Performs a depth first search on the internal hierarchy model. This dfs\n     * extends the default version by keeping track of chains within groups.\n     * Any cycles should be removed prior to running, but previously seen cells\n     * are ignored.\n     *\n     * @param parent the parent internal node of the current internal node\n     * @param root the current internal node\n     * @param connectingEdge the internal edge connecting the internal node and the parent\n     * internal node, if any\n     * @param seen a set of all nodes seen by this dfs\n     * @param chainCount the number of edges in the chain of vertices going through\n     * the current swimlane\n     */\n    maxChainDfs(parent, root, connectingEdge, seen, chainCount) {\n        if (root != null) {\n            const rootId = CellPath.create(root.cell);\n            if (seen[rootId] == null) {\n                seen[rootId] = root;\n                const slIndex = root.swimlaneIndex;\n                const ranksPerGroup = this.ranksPerGroup;\n                if (ranksPerGroup[slIndex] == null || ranksPerGroup[slIndex] < chainCount) {\n                    ranksPerGroup[slIndex] = chainCount;\n                }\n                // Copy the connects as source list so that visitors\n                // can change the original for edge direction inversions\n                const outgoingEdges = root.connectsAsSource.slice();\n                for (let i = 0; i < outgoingEdges.length; i += 1) {\n                    const internalEdge = outgoingEdges[i];\n                    const targetNode = internalEdge.target;\n                    // Only navigate in source->target direction within the same\n                    // swimlane, or from a lower index swimlane to a higher one\n                    if (root.swimlaneIndex < targetNode.swimlaneIndex) {\n                        this.maxChainDfs(root, targetNode, internalEdge, clone(seen, null, true), 0);\n                    }\n                    else if (root.swimlaneIndex === targetNode.swimlaneIndex) {\n                        this.maxChainDfs(root, targetNode, internalEdge, clone(seen, null, true), chainCount + 1);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Fixes the layer assignments to the values stored in the nodes. Also needs\n     * to create dummy nodes for edges that cross layers.\n     */\n    fixRanks() {\n        const rankList = [];\n        this.ranks = [];\n        for (let i = 0; i < this.maxRank + 1; i += 1) {\n            rankList[i] = [];\n            this.ranks[i] = rankList[i];\n        }\n        // Perform a DFS to obtain an initial ordering for each rank.\n        // Without doing this you would end up having to process\n        // crossings for a standard tree.\n        let rootsArray = null;\n        if (this.roots != null) {\n            const oldRootsArray = this.roots;\n            rootsArray = [];\n            for (let i = 0; i < oldRootsArray.length; i += 1) {\n                const cell = oldRootsArray[i];\n                const internalNode = this.vertexMapper.get(cell);\n                rootsArray[i] = internalNode;\n            }\n        }\n        this.visit((parent, node, edge, layer, seen) => {\n            if (seen === 0 && node.maxRank < 0 && node.minRank < 0) {\n                rankList[node.temp[0]].push(node);\n                node.maxRank = node.temp[0];\n                node.minRank = node.temp[0];\n                // Set temp[0] to the nodes position in the rank\n                node.temp[0] = rankList[node.maxRank].length - 1;\n            }\n            if (parent != null && edge != null) {\n                const parentToCellRankDifference = parent.maxRank - node.maxRank;\n                if (parentToCellRankDifference > 1) {\n                    // There are ranks in between the parent and current cell\n                    edge.maxRank = parent.maxRank;\n                    edge.minRank = node.maxRank;\n                    edge.temp = [];\n                    edge.x = [];\n                    edge.y = [];\n                    for (let i = edge.minRank + 1; i < edge.maxRank; i += 1) {\n                        // The connecting edge must be added to the\n                        // appropriate ranks\n                        rankList[i].push(edge);\n                        edge.setGeneralPurposeVariable(i, rankList[i].length - 1);\n                    }\n                }\n            }\n        }, rootsArray, false, null);\n    }\n    /**\n     * A depth first search through the internal heirarchy model.\n     *\n     * @param visitor The visitor function pattern to be called for each node.\n     * @param trackAncestors Whether or not the search is to keep track all nodes\n     * directly above this one in the search path.\n     */\n    visit(visitor, dfsRoots, trackAncestors, seenNodes) {\n        // Run dfs through on all roots\n        if (dfsRoots != null) {\n            for (let i = 0; i < dfsRoots.length; i += 1) {\n                const internalNode = dfsRoots[i];\n                if (internalNode != null) {\n                    if (seenNodes == null) {\n                        seenNodes = {};\n                    }\n                    if (trackAncestors) {\n                        // Set up hash code for root\n                        internalNode.hashCode = [];\n                        internalNode.hashCode[0] = this.dfsCount;\n                        internalNode.hashCode[1] = i;\n                        this.extendedDfs(null, internalNode, null, visitor, seenNodes, internalNode.hashCode, i, 0);\n                    }\n                    else {\n                        this.dfs(null, internalNode, null, visitor, seenNodes, 0);\n                    }\n                }\n            }\n            this.dfsCount += 1;\n        }\n    }\n    /**\n     * Performs a depth first search on the internal hierarchy model\n     *\n     * @param parent the parent internal node of the current internal node\n     * @param root the current internal node\n     * @param connectingEdge the internal edge connecting the internal node and the parent\n     * internal node, if any\n     * @param visitor the visitor pattern to be called for each node\n     * @param seen a set of all nodes seen by this dfs a set of all of the\n     * ancestor node of the current node\n     * @param layer the layer on the dfs tree ( not the same as the model ranks )\n     */\n    dfs(parent, root, connectingEdge, visitor, seen, layer) {\n        if (root != null) {\n            const rootId = root.id;\n            if (seen[rootId] == null) {\n                seen[rootId] = root;\n                visitor(parent, root, connectingEdge, layer, 0);\n                // Copy the connects as source list so that visitors\n                // can change the original for edge direction inversions\n                const outgoingEdges = root.connectsAsSource.slice();\n                for (let i = 0; i < outgoingEdges.length; i += 1) {\n                    const internalEdge = outgoingEdges[i];\n                    const targetNode = internalEdge.target;\n                    // Root check is O(|roots|)\n                    this.dfs(root, targetNode, internalEdge, visitor, seen, layer + 1);\n                }\n            }\n            else {\n                // Use the int field to indicate this node has been seen\n                visitor(parent, root, connectingEdge, layer, 1);\n            }\n        }\n    }\n    /**\n     * Performs a depth first search on the internal hierarchy model. This dfs\n     * extends the default version by keeping track of cells ancestors, but it\n     * should be only used when necessary because of it can be computationally\n     * intensive for deep searches.\n     *\n     * @param parent the parent internal node of the current internal node\n     * @param root the current internal node\n     * @param connectingEdge the internal edge connecting the internal node and the parent\n     * internal node, if any\n     * @param visitor the visitor pattern to be called for each node\n     * @param seen a set of all nodes seen by this dfs\n     * @param ancestors the parent hash code\n     * @param childHash the new hash code for this node\n     * @param layer the layer on the dfs tree ( not the same as the model ranks )\n     */\n    extendedDfs(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer) {\n        // Explanation of custom hash set. Previously, the ancestors variable\n        // was passed through the dfs as a HashSet. The ancestors were copied\n        // into a new HashSet and when the new child was processed it was also\n        // added to the set. If the current node was in its ancestor list it\n        // meant there is a cycle in the graph and this information is passed\n        // to the visitor.visit() in the seen parameter. The HashSet clone was\n        // very expensive on CPU so a custom hash was developed using primitive\n        // types. temp[] couldn't be used so hashCode[] was added to each node.\n        // Each new child adds another int to the array, copying the prefix\n        // from its parent. Child of the same parent add different ints (the\n        // limit is therefore 2^32 children per parent...). If a node has a\n        // child with the hashCode already set then the child code is compared\n        // to the same portion of the current nodes array. If they match there\n        // is a loop.\n        // Note that the basic mechanism would only allow for 1 use of this\n        // functionality, so the root nodes have two ints. The second int is\n        // incremented through each node root and the first is incremented\n        // through each run of the dfs algorithm (therefore the dfs is not\n        // thread safe). The hash code of each node is set if not already set,\n        // or if the first int does not match that of the current run.\n        if (root != null) {\n            if (parent != null) {\n                // Form this nodes hash code if necessary, that is, if the\n                // hashCode variable has not been initialized or if the\n                // start of the parent hash code does not equal the start of\n                // this nodes hash code, indicating the code was set on a\n                // previous run of this dfs.\n                if (root.hashCode == null || root.hashCode[0] !== parent.hashCode[0]) {\n                    const hashCodeLength = parent.hashCode.length + 1;\n                    root.hashCode = parent.hashCode.slice();\n                    root.hashCode[hashCodeLength - 1] = childHash;\n                }\n            }\n            const rootId = root.id;\n            if (seen[rootId] == null) {\n                seen[rootId] = root;\n                visitor(parent, root, connectingEdge, layer, 0);\n                // Copy the connects as source list so that visitors\n                // can change the original for edge direction inversions\n                const outgoingEdges = root.connectsAsSource.slice();\n                const incomingEdges = root.connectsAsTarget.slice();\n                for (let i = 0; i < outgoingEdges.length; i += 1) {\n                    const internalEdge = outgoingEdges[i];\n                    const targetNode = internalEdge.target;\n                    // Only navigate in source->target direction within the same\n                    // swimlane, or from a lower index swimlane to a higher one\n                    if (root.swimlaneIndex <= targetNode.swimlaneIndex) {\n                        this.extendedDfs(root, targetNode, internalEdge, visitor, seen, root.hashCode, i, layer + 1);\n                    }\n                }\n                for (let i = 0; i < incomingEdges.length; i += 1) {\n                    const internalEdge = incomingEdges[i];\n                    const targetNode = internalEdge.source;\n                    // Only navigate in target->source direction from a lower index\n                    // swimlane to a higher one\n                    if (root.swimlaneIndex < targetNode.swimlaneIndex) {\n                        this.extendedDfs(root, targetNode, internalEdge, visitor, seen, root.hashCode, i, layer + 1);\n                    }\n                }\n            }\n            else {\n                // Use the int field to indicate this node has been seen\n                visitor(parent, root, connectingEdge, layer, 1);\n            }\n        }\n    }\n}\nexport default SwimlaneModel;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport HierarchicalLayoutStage from './HierarchicalLayoutStage';\nimport { remove } from '../../../util/arrayUtils';\nimport CellPath from '../../cell/CellPath';\nimport { clone } from '../../../util/cloneUtils';\n/**\n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n *\n * @category Layout\n */\nclass SwimlaneOrdering extends HierarchicalLayoutStage {\n    /**\n     * Creates a cycle remover for the given internal model.\n     */\n    constructor(layout) {\n        super();\n        this.layout = layout;\n    }\n    /**\n     * Takes the graph detail and configuration information within the facade\n     * and creates the resulting laid out graph within that facade for further\n     * use.\n     */\n    execute(parent) {\n        const model = this.layout.getDataModel();\n        const seenNodes = {};\n        const unseenNodes = clone(model.vertexMapper, null, true);\n        // Perform a dfs through the internal model. If a cycle is found,\n        // reverse it.\n        let rootsArray = null;\n        if (model.roots != null) {\n            const modelRoots = model.roots;\n            rootsArray = [];\n            for (let i = 0; i < modelRoots.length; i += 1) {\n                rootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n            }\n        }\n        model.visit((parent, node, connectingEdge, layer, seen) => {\n            // Check if the cell is in it's own ancestor list, if so\n            // invert the connecting edge and reverse the target/source\n            // relationship to that edge in the parent and the cell\n            // Ancestor hashes only line up within a swimlane\n            const isAncestor = parent != null &&\n                parent.swimlaneIndex === node.swimlaneIndex &&\n                node.isAncestor(parent);\n            // If the source->target swimlane indices go from higher to\n            // lower, the edge is reverse\n            const reversedOverSwimlane = parent != null &&\n                connectingEdge != null &&\n                parent.swimlaneIndex < node.swimlaneIndex &&\n                connectingEdge.source === node;\n            if (isAncestor) {\n                connectingEdge.invert();\n                remove(connectingEdge, parent.connectsAsSource);\n                node.connectsAsSource.push(connectingEdge);\n                parent.connectsAsTarget.push(connectingEdge);\n                remove(connectingEdge, node.connectsAsTarget);\n            }\n            else if (reversedOverSwimlane) {\n                connectingEdge.invert();\n                remove(connectingEdge, parent.connectsAsTarget);\n                node.connectsAsTarget.push(connectingEdge);\n                parent.connectsAsSource.push(connectingEdge);\n                remove(connectingEdge, node.connectsAsSource);\n            }\n            const cellId = CellPath.create(node.cell);\n            seenNodes[cellId] = node;\n            delete unseenNodes[cellId];\n        }, rootsArray, true, null);\n    }\n}\nexport default SwimlaneOrdering;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport GraphLayout from './GraphLayout';\nimport HierarchicalEdgeStyle from './datatypes/HierarchicalEdgeStyle';\nimport Dictionary from '../../util/Dictionary';\nimport Rectangle from '../geometry/Rectangle';\nimport SwimlaneModel from './hierarchical/SwimlaneModel';\nimport ObjectIdentity from '../../util/ObjectIdentity';\nimport SwimlaneOrdering from './hierarchical/SwimlaneOrdering';\nimport MedianHybridCrossingReduction from './hierarchical/MedianHybridCrossingReduction';\nimport CoordinateAssignment from './hierarchical/CoordinateAssignment';\n/**\n * A hierarchical layout algorithm.\n *\n * @category Layout\n */\nclass SwimlaneLayout extends GraphLayout {\n    /**\n     * Constructs a new hierarchical layout algorithm.\n     *\n     * @param graph Reference to the enclosing {@link AbstractGraph}.\n     * @param orientation Optional constant that defines the orientation of this layout. Default is 'north'.\n     * @param deterministic Optional boolean that specifies if this layout should be deterministic. Default is `true`.\n     */\n    constructor(graph, orientation, deterministic = true) {\n        super(graph);\n        this.parentX = null;\n        this.parentY = null;\n        /**\n         * Holds the array of <Cell> that this layout contains.\n         */\n        this.roots = null;\n        /**\n         * Holds the array of <Cell> of the ordered swimlanes to lay out\n         */\n        this.swimlanes = null;\n        /**\n         * The cell width of any dummy vertices inserted\n         */\n        this.dummyVertexWidth = 50;\n        /**\n         * Specifies if the parent should be resized after the layout so that it\n         * contains all the child cells. Default is false. See also <parentBorder>.\n         */\n        this.resizeParent = false;\n        /**\n         * Specifies if the parent location should be maintained, so that the\n         * top, left corner stays the same before and after execution of\n         * the layout. Default is false for backwards compatibility.\n         */\n        this.maintainParentLocation = false;\n        /**\n         * Specifies if the parent should be moved if <resizeParent> is enabled.\n         * Default is false.\n         */\n        this.moveParent = false;\n        /**\n         * The border to be added around the children if the parent is to be\n         * resized using <resizeParent>. Default is 30.\n         */\n        this.parentBorder = 30;\n        /**\n         * The spacing buffer added between cells on the same layer. Default is 30.\n         */\n        this.intraCellSpacing = 30;\n        /**\n         * The spacing buffer added between cell on adjacent layers. Default is 100.\n         */\n        this.interRankCellSpacing = 100;\n        /**\n         * The spacing buffer between unconnected hierarchies. Default is 60.\n         */\n        this.interHierarchySpacing = 60;\n        /**\n         * The distance between each parallel edge on each ranks for long edges.\n         * Default is 10.\n         */\n        this.parallelEdgeSpacing = 10;\n        /**\n         * The position of the root node(s) relative to the laid out graph in.\n         * @default 'north'.\n         */\n        this.orientation = 'north';\n        /**\n         * Whether or not to perform local optimisations and iterate multiple times\n         * through the algorithm. Default is true.\n         */\n        this.fineTuning = true;\n        /**\n         * Whether or not to tighten the assigned ranks of vertices up towards\n         * the source cells. Default is true.\n         */\n        this.tightenToSource = true;\n        /**\n         * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n         * modified by the result. Default is true.\n         */\n        this.disableEdgeStyle = true;\n        /**\n         * Whether or not to drill into child cells and layout in reverse\n         * group order. This also cause the layout to navigate edges whose\n         * terminal vertices have different parents but are in the same\n         * ancestry chain. Default is true.\n         */\n        this.traverseAncestors = true;\n        /**\n         * The internal {@link SwimlaneModel} formed of the layout.\n         */\n        this.model = null;\n        /**\n         * A cache of edges whose source terminal is the key\n         */\n        this.edgesCache = new Dictionary();\n        /**\n         * A cache of edges whose source terminal is the key\n         */\n        this.edgeSourceTermCache = new Dictionary();\n        /**\n         * A cache of edges whose source terminal is the key\n         */\n        this.edgesTargetTermCache = new Dictionary();\n        /**\n         * The style to apply between cell layers to edge segments.\n         * Default is {@link HierarchicalEdgeStyle#POLYLINE}.\n         */\n        this.edgeStyle = HierarchicalEdgeStyle.POLYLINE;\n        this.orientation = orientation != null ? orientation : 'north';\n        this.deterministic = deterministic != null ? deterministic : true;\n    }\n    /**\n     * Returns the internal {@link SwimlaneModel} for this layout algorithm.\n     */\n    getDataModel() {\n        return this.model;\n    }\n    /**\n     * Executes the layout for the children of the specified parent.\n     *\n     * @param parent Parent <Cell> that contains the children to be laid out.\n     * @param swimlanes Ordered array of swimlanes to be laid out\n     */\n    execute(parent, swimlanes = null) {\n        this.parent = parent;\n        const { model } = this.graph;\n        this.edgesCache = new Dictionary();\n        this.edgeSourceTermCache = new Dictionary();\n        this.edgesTargetTermCache = new Dictionary();\n        // If the roots are set and the parent is set, only\n        // use the roots that are some dependent of the that\n        // parent.\n        // If just the root are set, use them as-is\n        // If just the parent is set use it's immediate\n        // children as the initial set\n        if (swimlanes == null || swimlanes.length < 1) {\n            // TODO indicate the problem\n            return;\n        }\n        if (parent == null) {\n            parent = swimlanes[0].getParent();\n        }\n        //  Maintaining parent location\n        this.parentX = null;\n        this.parentY = null;\n        if (parent !== this.graph.getDataModel().root &&\n            parent.isVertex() != null &&\n            this.maintainParentLocation) {\n            const geo = parent.getGeometry();\n            if (geo != null) {\n                this.parentX = geo.x;\n                this.parentY = geo.y;\n            }\n        }\n        this.swimlanes = swimlanes;\n        const dummyVertices = [];\n        // Check the swimlanes all have vertices\n        // in them\n        for (let i = 0; i < swimlanes.length; i += 1) {\n            const children = this.graph.getChildCells(swimlanes[i]);\n            if (children == null || children.length === 0) {\n                const vertex = this.graph.insertVertex(swimlanes[i], null, null, 0, 0, this.dummyVertexWidth, 0);\n                dummyVertices.push(vertex);\n            }\n        }\n        model.beginUpdate();\n        try {\n            this.run(parent);\n            if (this.resizeParent && !parent.isCollapsed()) {\n                this.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n            }\n            // Maintaining parent location\n            if (this.parentX != null && this.parentY != null) {\n                let geo = parent.getGeometry();\n                if (geo != null) {\n                    geo = geo.clone();\n                    geo.x = this.parentX;\n                    geo.y = this.parentY;\n                    model.setGeometry(parent, geo);\n                }\n            }\n            this.graph.removeCells(dummyVertices);\n        }\n        finally {\n            model.endUpdate();\n        }\n    }\n    /**\n     * Updates the bounds of the given array of groups so that it includes\n     * all child vertices.\n     *\n     */\n    updateGroupBounds() {\n        // Get all vertices and edge in the layout\n        const cells = [];\n        const model = this.model;\n        for (const key in model.edgeMapper) {\n            // @ts-expect-error\n            const edge = model.edgeMapper[key];\n            for (let i = 0; i < edge.edges.length; i += 1) {\n                cells.push(edge.edges[i]);\n            }\n        }\n        let layoutBounds = this.graph.getBoundingBoxFromGeometry(cells, true);\n        const childBounds = [];\n        const swimlanes = this.swimlanes;\n        for (let i = 0; i < swimlanes.length; i += 1) {\n            const lane = swimlanes[i];\n            const geo = lane.getGeometry();\n            if (geo != null) {\n                const children = this.graph.getChildCells(lane);\n                const size = this.graph.isSwimlane(lane)\n                    ? this.graph.getStartSize(lane)\n                    : new Rectangle();\n                const bounds = this.graph.getBoundingBoxFromGeometry(children);\n                childBounds[i] = bounds;\n                const childrenY = bounds.y + geo.y - size.height - this.parentBorder;\n                const maxChildrenY = bounds.y + geo.y + bounds.height;\n                if (layoutBounds == null) {\n                    layoutBounds = new Rectangle(0, childrenY, 0, maxChildrenY - childrenY);\n                }\n                else {\n                    layoutBounds.y = Math.min(layoutBounds.y, childrenY);\n                    const maxY = Math.max(layoutBounds.y + layoutBounds.height, maxChildrenY);\n                    layoutBounds.height = maxY - layoutBounds.y;\n                }\n            }\n        }\n        for (let i = 0; i < swimlanes.length; i += 1) {\n            const lane = swimlanes[i];\n            const geo = lane.getGeometry();\n            if (geo != null) {\n                const children = this.graph.getChildCells(lane);\n                const size = this.graph.isSwimlane(lane)\n                    ? this.graph.getStartSize(lane)\n                    : new Rectangle();\n                const newGeo = geo.clone();\n                const leftGroupBorder = i === 0 ? this.parentBorder : this.interRankCellSpacing / 2;\n                const w = size.width + leftGroupBorder;\n                const x = childBounds[i].x - w;\n                const y = layoutBounds.y - this.parentBorder;\n                newGeo.x += x;\n                newGeo.y = y;\n                newGeo.width = childBounds[i].width + w + this.interRankCellSpacing / 2;\n                newGeo.height =\n                    layoutBounds.height + size.height + 2 * this.parentBorder;\n                this.graph.model.setGeometry(lane, newGeo);\n                this.graph.moveCells(children, -x, geo.y - y);\n            }\n        }\n    }\n    /**\n     * Returns all visible children in the given parent which do not have\n     * incoming edges. If the result is empty then the children with the\n     * maximum difference between incoming and outgoing edges are returned.\n     * This takes into account edges that are being promoted to the given\n     * root due to invisible children or collapsed cells.\n     *\n     * @param parent <Cell> whose children should be checked.\n     * @param vertices array of vertices to limit search to\n     */\n    findRoots(parent, vertices) {\n        const roots = [];\n        if (parent != null && vertices != null) {\n            const { model } = this.graph;\n            let best = null;\n            let maxDiff = -100000;\n            for (const i in vertices) {\n                const cell = vertices[i];\n                if (cell != null &&\n                    cell.isVertex() &&\n                    cell.isVisible() &&\n                    parent.isAncestor(cell)) {\n                    const conns = this.getEdges(cell);\n                    let fanOut = 0;\n                    let fanIn = 0;\n                    for (let k = 0; k < conns.length; k++) {\n                        const src = this.getVisibleTerminal(conns[k], true);\n                        if (src === cell) {\n                            // Only count connection within this swimlane\n                            const other = this.getVisibleTerminal(conns[k], false);\n                            if (parent.isAncestor(other)) {\n                                fanOut += 1;\n                            }\n                        }\n                        else if (parent.isAncestor(src)) {\n                            fanIn += 1;\n                        }\n                    }\n                    if (fanIn === 0 && fanOut > 0) {\n                        roots.push(cell);\n                    }\n                    const diff = fanOut - fanIn;\n                    if (diff > maxDiff) {\n                        maxDiff = diff;\n                        best = cell;\n                    }\n                }\n            }\n            if (roots.length === 0 && best != null) {\n                roots.push(best);\n            }\n        }\n        return roots;\n    }\n    /**\n     * Returns the connected edges for the given cell.\n     *\n     * @param cell <Cell> whose edges should be returned.\n     */\n    getEdges(cell) {\n        const cachedEdges = this.edgesCache.get(cell);\n        if (cachedEdges != null) {\n            return cachedEdges;\n        }\n        let edges = [];\n        const isCollapsed = cell.isCollapsed();\n        const childCount = cell.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            const child = cell.getChildAt(i);\n            if (this.isPort(child)) {\n                edges = edges.concat(child.getEdges(true, true));\n            }\n            else if (isCollapsed || !child.isVisible()) {\n                edges = edges.concat(child.getEdges(true, true));\n            }\n        }\n        edges = edges.concat(cell.getEdges(true, true));\n        const result = [];\n        for (let i = 0; i < edges.length; i += 1) {\n            const source = this.getVisibleTerminal(edges[i], true);\n            const target = this.getVisibleTerminal(edges[i], false);\n            if (source === target ||\n                (source !== target &&\n                    ((target === cell &&\n                        (this.parent == null ||\n                            this.graph.isValidAncestor(source, this.parent, this.traverseAncestors))) ||\n                        (source === cell &&\n                            (this.parent == null ||\n                                this.graph.isValidAncestor(target, this.parent, this.traverseAncestors)))))) {\n                result.push(edges[i]);\n            }\n        }\n        this.edgesCache.put(cell, result);\n        return result;\n    }\n    /**\n     * Helper function to return visible terminal for edge allowing for ports\n     *\n     * @param edge <Cell> whose edges should be returned.\n     * @param source Boolean that specifies whether the source or target terminal is to be returned\n     */\n    getVisibleTerminal(edge, source) {\n        let terminalCache = this.edgesTargetTermCache;\n        if (source) {\n            terminalCache = this.edgeSourceTermCache;\n        }\n        const term = terminalCache.get(edge);\n        if (term != null) {\n            return term;\n        }\n        const state = this.graph.view.getState(edge);\n        let terminal = state != null\n            ? state.getVisibleTerminal(source)\n            : this.graph.view.getVisibleTerminal(edge, source);\n        if (terminal == null) {\n            terminal =\n                state != null\n                    ? state.getVisibleTerminal(source)\n                    : this.graph.view.getVisibleTerminal(edge, source);\n        }\n        if (terminal != null) {\n            if (this.isPort(terminal)) {\n                terminal = terminal.getParent();\n            }\n            terminalCache.put(edge, terminal);\n        }\n        return terminal;\n    }\n    /**\n     * The API method used to exercise the layout upon the graph description\n     * and produce a separate description of the vertex position and edge\n     * routing changes made. It runs each stage of the layout that has been\n     * created.\n     */\n    run(parent) {\n        // Separate out unconnected hierarchies\n        const hierarchyVertices = [];\n        const allVertexSet = {};\n        if (this.swimlanes != null && this.swimlanes.length > 0 && parent != null) {\n            const filledVertexSet = {};\n            for (let i = 0; i < this.swimlanes.length; i += 1) {\n                this.filterDescendants(this.swimlanes[i], filledVertexSet);\n            }\n            this.roots = [];\n            let filledVertexSetEmpty = true;\n            // Poor man's isSetEmpty\n            for (const key in filledVertexSet) {\n                if (filledVertexSet[key] != null) {\n                    filledVertexSetEmpty = false;\n                    break;\n                }\n            }\n            // Only test for candidates in each swimlane in order\n            let laneCounter = 0;\n            while (!filledVertexSetEmpty && laneCounter < this.swimlanes.length) {\n                const candidateRoots = this.findRoots(this.swimlanes[laneCounter], filledVertexSet);\n                if (candidateRoots.length === 0) {\n                    laneCounter++;\n                    continue;\n                }\n                // If the candidate root is an unconnected group cell, remove it from\n                // the layout. We may need a custom set that holds such groups and forces\n                // them to be processed for resizing and/or moving.\n                for (let i = 0; i < candidateRoots.length; i += 1) {\n                    const vertexSet = Object();\n                    hierarchyVertices.push(vertexSet);\n                    this.traverse({\n                        vertex: candidateRoots[i],\n                        directed: true,\n                        edge: null,\n                        allVertices: allVertexSet,\n                        currentComp: vertexSet,\n                        hierarchyVertices,\n                        filledVertexSet,\n                        swimlaneIndex: laneCounter,\n                        func: null,\n                        visited: null,\n                    });\n                }\n                for (let i = 0; i < candidateRoots.length; i += 1) {\n                    this.roots.push(candidateRoots[i]);\n                }\n                filledVertexSetEmpty = true;\n                // Poor man's isSetEmpty\n                for (const key in filledVertexSet) {\n                    if (filledVertexSet[key] != null) {\n                        filledVertexSetEmpty = false;\n                        break;\n                    }\n                }\n            }\n        }\n        else {\n            // Find vertex set as directed traversal from roots\n            const roots = this.roots;\n            for (let i = 0; i < roots.length; i += 1) {\n                const vertexSet = Object();\n                hierarchyVertices.push(vertexSet);\n                this.traverse({\n                    vertex: roots[i],\n                    directed: true,\n                    edge: null,\n                    allVertices: allVertexSet,\n                    currentComp: vertexSet,\n                    hierarchyVertices,\n                    filledVertexSet: null,\n                    swimlaneIndex: i,\n                    func: null,\n                    visited: null,\n                }); // CHECK THIS PARAM!! ====================\n            }\n        }\n        const tmp = [];\n        for (const key in allVertexSet) {\n            tmp.push(allVertexSet[key]);\n        }\n        this.model = new SwimlaneModel(this, tmp, this.roots, parent, this.tightenToSource);\n        this.cycleStage(parent);\n        this.layeringStage();\n        this.crossingStage(parent);\n        this.placementStage(0, parent);\n    }\n    /**\n     * Creates an array of descendant cells\n     */\n    filterDescendants(cell, result) {\n        const { model } = this.graph;\n        if (cell.isVertex() &&\n            cell !== this.parent &&\n            cell.getParent() !== this.parent &&\n            cell.isVisible()) {\n            result[ObjectIdentity.get(cell)] = cell;\n        }\n        if (this.traverseAncestors || (cell === this.parent && cell.isVisible())) {\n            const childCount = cell.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                const child = cell.getChildAt(i);\n                // Ignore ports in the layout vertex list, they are dealt with\n                // in the traversal mechanisms\n                if (!this.isPort(child)) {\n                    this.filterDescendants(child, result);\n                }\n            }\n        }\n    }\n    /**\n     * Returns true if the given cell is a \"port\", that is, when connecting to\n     * it, its parent is the connecting vertex in terms of graph traversal\n     *\n     * @param cell <Cell> that represents the port.\n     */\n    isPort(cell) {\n        if (cell.geometry.relative) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns the edges between the given source and target. This takes into\n     * account collapsed and invisible cells and ports.\n     *\n     * source -\n     * target -\n     * directed -\n     */\n    getEdgesBetween(source, target, directed = false) {\n        const edges = this.getEdges(source);\n        const result = [];\n        // Checks if the edge is connected to the correct\n        // cell and returns the first match\n        for (let i = 0; i < edges.length; i += 1) {\n            const src = this.getVisibleTerminal(edges[i], true);\n            const trg = this.getVisibleTerminal(edges[i], false);\n            if ((src === source && trg === target) ||\n                (!directed && src === target && trg === source)) {\n                result.push(edges[i]);\n            }\n        }\n        return result;\n    }\n    /**\n     * Traverses the (directed) graph invoking the given function for each\n     * visited vertex and edge. The function is invoked with the current vertex\n     * and the incoming edge as a parameter. This implementation makes sure\n     * each vertex is only visited once. The function may return false if the\n     * traversal should stop at the given vertex.\n     *\n     * @param vertex <Cell> that represents the vertex where the traversal starts.\n     * @param directed boolean indicating if edges should only be traversed\n     * from source to target. Default is true.\n     * @param edge Optional <Cell> that represents the incoming edge. This is\n     * null for the first step of the traversal.\n     * @param allVertices Array of cell paths for the visited cells.\n     * @param swimlaneIndex the laid out order index of the swimlane vertex is contained in\n     */\n    traverse({ vertex, directed, allVertices, currentComp, hierarchyVertices, filledVertexSet, swimlaneIndex, }) {\n        if (vertex != null && allVertices != null) {\n            // Has this vertex been seen before in any traversal\n            // And if the filled vertex set is populated, only\n            // process vertices in that it contains\n            const vertexID = ObjectIdentity.get(vertex);\n            if (allVertices[vertexID] == null &&\n                (filledVertexSet == null ? true : filledVertexSet[vertexID] != null)) {\n                if (currentComp[vertexID] == null) {\n                    currentComp[vertexID] = vertex;\n                }\n                if (allVertices[vertexID] == null) {\n                    allVertices[vertexID] = vertex;\n                }\n                if (filledVertexSet !== null) {\n                    delete filledVertexSet[vertexID];\n                }\n                const edges = this.getEdges(vertex);\n                for (let i = 0; i < edges.length; i += 1) {\n                    let otherVertex = this.getVisibleTerminal(edges[i], true);\n                    const isSource = otherVertex === vertex;\n                    if (isSource) {\n                        otherVertex = this.getVisibleTerminal(edges[i], false);\n                    }\n                    let otherIndex = 0;\n                    // Get the swimlane index of the other terminal\n                    for (otherIndex = 0; otherIndex < this.swimlanes.length; otherIndex++) {\n                        if (this.swimlanes[otherIndex].isAncestor(otherVertex)) {\n                            break;\n                        }\n                    }\n                    if (otherIndex >= this.swimlanes.length) {\n                        continue;\n                    }\n                    // Traverse if the other vertex is within the same swimlane as\n                    // as the current vertex, or if the swimlane index of the other\n                    // vertex is greater than that of this vertex\n                    if (otherIndex > swimlaneIndex ||\n                        ((!directed || isSource) && otherIndex === swimlaneIndex)) {\n                        currentComp = this.traverse({\n                            vertex: otherVertex,\n                            directed,\n                            edge: edges[i],\n                            allVertices,\n                            currentComp,\n                            hierarchyVertices,\n                            filledVertexSet,\n                            swimlaneIndex: otherIndex,\n                            func: null,\n                            visited: null,\n                        });\n                    }\n                }\n            }\n            else if (currentComp[vertexID] == null) {\n                // We've seen this vertex before, but not in the current component\n                // This component and the one it's in need to be merged\n                for (let i = 0; i < hierarchyVertices.length; i += 1) {\n                    const comp = hierarchyVertices[i];\n                    // @ts-expect-error\n                    if (comp[vertexID] != null) {\n                        for (const key in comp) {\n                            // @ts-expect-error\n                            currentComp[key] = comp[key];\n                        }\n                        // Remove the current component from the hierarchy set\n                        hierarchyVertices.splice(i, 1);\n                        return currentComp;\n                    }\n                }\n            }\n        }\n        return currentComp;\n    }\n    /**\n     * Executes the cycle stage using mxMinimumCycleRemover.\n     */\n    cycleStage(parent) {\n        const cycleStage = new SwimlaneOrdering(this);\n        cycleStage.execute(parent);\n    }\n    /**\n     * Implements first stage of a Sugiyama layout.\n     */\n    layeringStage() {\n        const model = this.model;\n        model.initialRank();\n        model.fixRanks();\n    }\n    /**\n     * Executes the crossing stage using mxMedianHybridCrossingReduction.\n     */\n    crossingStage(parent) {\n        const crossingStage = new MedianHybridCrossingReduction(this);\n        crossingStage.execute(parent);\n    }\n    /**\n     * Executes the placement stage using mxCoordinateAssignment.\n     */\n    placementStage(initialX, parent) {\n        const placementStage = new CoordinateAssignment(this, this.intraCellSpacing, this.interRankCellSpacing, this.orientation, initialX, this.parallelEdgeSpacing);\n        placementStage.fineTuning = this.fineTuning;\n        placementStage.execute(parent);\n        return placementStage.limitX + this.interHierarchySpacing;\n    }\n}\nexport default SwimlaneLayout;\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../../ObjectCodec';\nimport Editor from '../../../editor/Editor';\nimport MaxWindow from '../../../gui/MaxWindow';\nimport { addLinkToHead, getChildNodes } from '../../../util/domUtils';\nimport { GlobalConfig } from '../../../util/config';\nimport { translate } from '../../../internal/i18n-utils';\n/**\n * Codec for {@link Editor}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * Transient Fields:\n *\n * - modified\n * - lastSnapshot\n * - ignoredChanges\n * - undoManager\n * - graphContainer\n * - toolbarContainer\n *\n * @category Serialization with Codecs\n */\nexport class EditorCodec extends ObjectCodec {\n    constructor() {\n        const __dummy = undefined;\n        super(new Editor(__dummy), [\n            'modified',\n            'lastSnapshot',\n            'ignoredChanges',\n            'undoManager',\n            'graphContainer',\n            'toolbarContainer',\n        ]);\n    }\n    /**\n     * Decodes the ui-part of the configuration node by reading\n     * a sequence of the following child nodes and attributes\n     * and passes the control to the default decoding mechanism:\n     *\n     * Child Nodes:\n     *\n     * stylesheet - Adds a CSS stylesheet to the document.\n     * resource - Adds the basename of a resource bundle.\n     * add - Creates or configures a known UI element.\n     *\n     * These elements may appear in any order given that the\n     * graph UI element is added before the toolbar element\n     * (see Known Keys).\n     *\n     * Attributes:\n     *\n     * as - Key for the UI element (see below).\n     * element - ID for the element in the document.\n     * style - CSS style to be used for the element or window.\n     * x - X coordinate for the new window.\n     * y - Y coordinate for the new window.\n     * width - Width for the new window.\n     * height - Optional height for the new window.\n     * name - Name of the stylesheet (absolute/relative URL).\n     * basename - Basename of the resource bundle (see {@link Resources}).\n     *\n     * The x, y, width and height attributes are used to create a new\n     * <MaxWindow> if the element attribute is not specified in an add\n     * node. The name and basename are only used in the stylesheet and\n     * resource nodes, respectively.\n     *\n     * Known Keys:\n     *\n     * graph - Main graph element (see <Editor.setGraphContainer>).\n     * title - Title element (see <Editor.setTitleContainer>).\n     * toolbar - Toolbar element (see <Editor.setToolbarContainer>).\n     * status - Status bar element (see <Editor.setStatusContainer>).\n     *\n     * Example:\n     *\n     * ```javascript\n     * <ui>\n     *   <stylesheet name=\"css/process.css\"/>\n     *   <resource basename=\"resources/app\"/>\n     *   <add as=\"graph\" element=\"graph\"\n     *     style=\"left:70px;right:20px;top:20px;bottom:40px\"/>\n     *   <add as=\"status\" element=\"status\"/>\n     *   <add as=\"toolbar\" x=\"10\" y=\"20\" width=\"54\"/>\n     * </ui>\n     * ```\n     */\n    afterDecode(dec, node, obj) {\n        // Assigns the specified templates for edges\n        const defaultEdge = node.getAttribute('defaultEdge');\n        if (defaultEdge != null) {\n            node.removeAttribute('defaultEdge');\n            obj.defaultEdge = obj.templates[defaultEdge];\n        }\n        // Assigns the specified templates for groups\n        const defaultGroup = node.getAttribute('defaultGroup');\n        if (defaultGroup != null) {\n            node.removeAttribute('defaultGroup');\n            obj.defaultGroup = obj.templates[defaultGroup];\n        }\n        return obj;\n    }\n    /**\n     * Overrides decode child to handle special child nodes.\n     */\n    decodeChild(dec, child, obj) {\n        if (child.nodeName === 'Array') {\n            const role = child.getAttribute('as');\n            if (role === 'templates') {\n                this.decodeTemplates(dec, child, obj);\n                return;\n            }\n        }\n        else if (child.nodeName === 'ui') {\n            this.decodeUi(dec, child, obj);\n            return;\n        }\n        super.decodeChild.apply(this, [dec, child, obj]);\n    }\n    /**\n     * Decodes the ui elements from the given node.\n     */\n    decodeUi(dec, node, editor) {\n        let tmp = node.firstChild;\n        while (tmp != null) {\n            if (tmp.nodeName === 'add') {\n                const as = tmp.getAttribute('as');\n                const elt = tmp.getAttribute('element');\n                const style = tmp.getAttribute('style');\n                let element = null;\n                if (elt != null) {\n                    element = document.getElementById(elt);\n                    if (element != null && style != null) {\n                        element.style.cssText += `;${style}`;\n                    }\n                }\n                else {\n                    const x = parseInt(tmp.getAttribute('x'));\n                    const y = parseInt(tmp.getAttribute('y'));\n                    const width = tmp.getAttribute('width') || null;\n                    const height = tmp.getAttribute('height') || null;\n                    // Creates a new window around the element\n                    element = document.createElement('div');\n                    if (style != null) {\n                        element.style.cssText = style;\n                    }\n                    const wnd = new MaxWindow(translate(as) || as, element, x, y, width ? parseInt(width) : null, height ? parseInt(height) : null, false, true);\n                    wnd.setVisible(true);\n                }\n                // TODO: Make more generic\n                if (as === 'graph') {\n                    editor.setGraphContainer(element);\n                }\n                else if (as === 'toolbar') {\n                    editor.setToolbarContainer(element);\n                }\n                else if (as === 'title') {\n                    editor.setTitleContainer(element);\n                }\n                else if (as === 'status') {\n                    editor.setStatusContainer(element);\n                }\n                else if (as === 'map') {\n                    throw new Error('Unimplemented');\n                }\n            }\n            else if (tmp.nodeName === 'resource') {\n                GlobalConfig.i18n.addResource(tmp.getAttribute('basename'));\n            }\n            else if (tmp.nodeName === 'stylesheet') {\n                addLinkToHead('stylesheet', tmp.getAttribute('name'));\n            }\n            tmp = tmp.nextSibling;\n        }\n    }\n    /**\n     * Decodes the cells from the given node as templates.\n     */\n    decodeTemplates(dec, node, editor) {\n        if (editor.templates == null) {\n            editor.templates = [];\n        }\n        const children = getChildNodes(node);\n        for (let j = 0; j < children.length; j++) {\n            const name = children[j].getAttribute('as');\n            let child = children[j].firstChild;\n            while (child != null && child.nodeType !== 1) {\n                child = child.nextSibling;\n            }\n            if (child != null) {\n                // LATER: Only single cells means you need\n                // to group multiple cells within another\n                // cell. This should be changed to support\n                // arrays of cells, or the wrapper must\n                // be automatically handled in this class.\n                editor.templates[name] = dec.decodeCell(child);\n            }\n        }\n    }\n}\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../../ObjectCodec';\nimport EditorKeyHandler from '../../../editor/EditorKeyHandler';\n/**\n * Custom codec for configuring {@link EditorKeyHandler}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * This codec only reads configuration data for existing key handlers, it does not encode or create key handlers.\n *\n * @category Serialization with Codecs\n */\nexport class EditorKeyHandlerCodec extends ObjectCodec {\n    constructor() {\n        super(new EditorKeyHandler());\n    }\n    /**\n     * Returns `null`.\n     */\n    encode(enc, obj) {\n        return null;\n    }\n    /**\n     * Reads a sequence of the following child nodes and attributes:\n     *\n     * Child Nodes:\n     *\n     * add - Binds a keystroke to an action name.\n     *\n     * Attributes:\n     *\n     * as - Keycode.\n     * action - Action name to execute in editor.\n     * control - Optional boolean indicating if\n     *     the control key must be pressed.\n     *\n     * Example:\n     *\n     * ```javascript\n     * <EditorKeyHandler as=\"keyHandler\">\n     *   <add as=\"88\" control=\"true\" action=\"cut\"/>\n     *   <add as=\"67\" control=\"true\" action=\"copy\"/>\n     *   <add as=\"86\" control=\"true\" action=\"paste\"/>\n     * </EditorKeyHandler>\n     * ```\n     *\n     * The keycodes are for the x, c and v keys.\n     *\n     * See also: <EditorKeyHandler.bindAction>, http://www.js-examples.com/page/tutorials__key_codes.html\n     */\n    decode(dec, _node, into) {\n        if (into != null) {\n            const { editor } = into;\n            let node = _node.firstChild;\n            while (node != null) {\n                if (!this.processInclude(dec, node, into) && node.nodeName === 'add') {\n                    const as = node.getAttribute('as');\n                    const action = node.getAttribute('action');\n                    const control = node.getAttribute('control');\n                    into.bindAction(as, action, control);\n                }\n                node = node.nextSibling;\n            }\n        }\n        return into;\n    }\n}\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../../ObjectCodec';\nimport EditorPopupMenu from '../../../editor/EditorPopupMenu';\n/**\n * Custom codec for configuring {@link EditorPopupMenu}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * This codec only reads configuration data for existing popup menus, it does not encode or create menus.\n * Note that this codec only passes the configuration node to the popup menu, which uses the config to dynamically create menus.\n *\n * @see {@link EditorPopupMenu.createMenu}.\n * @category Serialization with Codecs\n */\nexport class EditorPopupMenuCodec extends ObjectCodec {\n    constructor() {\n        super(new EditorPopupMenu());\n    }\n    /**\n     * Returns null.\n     */\n    encode(_enc, _obj) {\n        return null;\n    }\n    /**\n     * Uses the given node as the config for <EditorPopupMenu>.\n     */\n    decode(dec, node, into) {\n        const inc = node.getElementsByTagName('include')[0];\n        if (inc != null) {\n            this.processInclude(dec, inc, into);\n        }\n        else if (into != null) {\n            into.config = node;\n        }\n        return into;\n    }\n}\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../../ObjectCodec';\nimport { EditorToolbar } from '../../../editor/EditorToolbar';\nimport { GlobalConfig } from '../../../util/config';\nimport { convertPoint } from '../../../util/styleUtils';\nimport { getClientX, getClientY } from '../../../util/EventUtils';\nimport InternalEvent from '../../../view/event/InternalEvent';\nimport { getChildNodes, getTextContent } from '../../../util/domUtils';\nimport { doEval, isElement } from '../../../internal/utils';\nimport { translate } from '../../../internal/i18n-utils';\n/**\n * Custom codec for configuring {@link EditorToolbar}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * This codec only reads configuration data for existing toolbars handlers, it does not encode or create toolbars.\n *\n * @category Serialization with Codecs\n */\nexport class EditorToolbarCodec extends ObjectCodec {\n    constructor() {\n        super(new EditorToolbar());\n    }\n    /**\n     * Returns `null`.\n     */\n    encode(_enc, _obj) {\n        return null;\n    }\n    /**\n     * Reads a sequence of the following child nodes and attributes:\n     *\n     * Child Nodes:\n     *\n     * add - Adds a new item to the toolbar. See below for attributes.\n     * separator - Adds a vertical separator. No attributes.\n     * hr - Adds a horizontal separator. No attributes.\n     * br - Adds a linefeed. No attributes.\n     *\n     * Attributes:\n     *\n     * as - Resource key for the label.\n     * action - Name of the action to execute in enclosing editor.\n     * mode - Mode name (see below).\n     * template - Template name for cell insertion.\n     * style - Optional style to override the template style.\n     * icon - Icon (relative/absolute URL).\n     * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n     * id - Optional ID to be used for the created DOM element.\n     * toggle - Optional 0 or 1 to disable toggling of the element. Default is 1 (true).\n     *\n     * The action, mode and template attributes are mutually exclusive. The style can only be used with the template attribute.\n     * The add node may contain another sequence of add nodes with \"as\" and action attributes to create a combo box in the toolbar.\n     * If the icon is specified then a list of the child node is expected to have its template attribute set and the action is ignored instead.\n     *\n     * Nodes with a specified template may define a function to be used for inserting the cloned template into the graph.\n     * Here is an example of such a node:\n     *\n     * ```javascript\n     * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n     *   function (editor, cell, evt, targetCell)\n     *   {\n     *     let pt = mxUtils.convertPoint(\n     *       editor.graph.container, mxEvent.getClientX(evt),\n     *         mxEvent.getClientY(evt));\n     *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n     *   }\n     * ]]></add>\n     * ```\n     *\n     * In the above function, editor is the enclosing {@link Editor} instance, cell is the clone of the template, evt is the mouse event that represents the\n     * drop and targetCell is the cell under the mouse pointer where the drop occurred. The targetCell is retrieved using {@link AbstractGraph.getCellAt}.\n     *\n     * Furthermore, nodes with the mode attribute may define a function to be executed upon selection of the respective toolbar icon. In the\n     * example below, the default edge style is set when this specific\n     * connect-mode is activated:\n     *\n     * ```javascript\n     * <add as=\"connect\" mode=\"connect\"><![CDATA[\n     *   function (editor)\n     *   {\n     *     if (editor.defaultEdge != null)\n     *     {\n     *       editor.defaultEdge.style = 'straightEdge';\n     *     }\n     *   }\n     * ]]></add>\n     * ```\n     *\n     * Both functions require {@link allowEval} to be set to `true`.\n     *\n     * Modes:\n     *\n     * select - Left mouse button used for rubberband- & cell-selection.\n     * connect - Allows connecting vertices by inserting new edges.\n     * pan - Disables selection and switches to panning on the left button.\n     *\n     * Example:\n     *\n     * To add items to the toolbar:\n     *\n     * ```javascript\n     * <EditorToolbar as=\"toolbar\">\n     *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n     *   <br/><hr/>\n     *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n     *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n     * </EditorToolbar>\n     * ```\n     */\n    decode(dec, _node, into) {\n        if (into != null) {\n            const editor = into.editor;\n            let node = _node.firstChild;\n            while (node != null) {\n                if (isElement(node)) {\n                    if (!this.processInclude(dec, node, into)) {\n                        if (node.nodeName === 'separator') {\n                            into.addSeparator();\n                        }\n                        else if (node.nodeName === 'br') {\n                            into.toolbar.addBreak();\n                        }\n                        else if (node.nodeName === 'hr') {\n                            into.toolbar.addLine();\n                        }\n                        else if (node.nodeName === 'add') {\n                            let as = node.getAttribute('as');\n                            as = translate(as) || as;\n                            const icon = node.getAttribute('icon');\n                            const pressedIcon = node.getAttribute('pressedIcon');\n                            const action = node.getAttribute('action');\n                            const mode = node.getAttribute('mode');\n                            const template = node.getAttribute('template');\n                            const toggle = node.getAttribute('toggle') != '0';\n                            const text = getTextContent(node);\n                            let elt = null;\n                            let funct;\n                            if (action != null) {\n                                elt = into.addItem(as, icon, action, pressedIcon);\n                            }\n                            else if (mode != null) {\n                                funct = EditorToolbarCodec.allowEval ? doEval(text) : null;\n                                elt = into.addMode(as, icon, mode, pressedIcon, funct);\n                            }\n                            else if (template != null || (text != null && text.length > 0)) {\n                                let cell = template ? editor.templates[template] : null;\n                                const style = node.getAttribute('style');\n                                if (cell != null && style != null) {\n                                    cell = editor.graph.cloneCell(cell);\n                                    cell.setStyle(style);\n                                }\n                                let insertFunction = null;\n                                if (text != null && text.length > 0 && EditorToolbarCodec.allowEval) {\n                                    insertFunction = doEval(text);\n                                }\n                                elt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n                            }\n                            else {\n                                const children = getChildNodes(node);\n                                if (children.length > 0) {\n                                    if (icon == null) {\n                                        const combo = into.addActionCombo(as);\n                                        for (let i = 0; i < children.length; i += 1) {\n                                            const child = children[i];\n                                            if (child.nodeName === 'separator') {\n                                                into.addOption(combo, '---');\n                                            }\n                                            else if (child.nodeName === 'add') {\n                                                const lab = child.getAttribute('as');\n                                                const act = child.getAttribute('action');\n                                                into.addActionOption(combo, lab, act);\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        const select = into.addCombo();\n                                        const create = () => {\n                                            const template = editor.templates[select.value];\n                                            if (template != null) {\n                                                const clone = template.clone();\n                                                // @ts-ignore\n                                                const style = select.options[select.selectedIndex].cellStyle;\n                                                if (style != null) {\n                                                    clone.setStyle(style);\n                                                }\n                                                return clone;\n                                            }\n                                            GlobalConfig.logger.warn(`Template ${template} not found`);\n                                            return null;\n                                        };\n                                        const img = into.addPrototype(as, icon, create, null, null, toggle);\n                                        // Selects the toolbar icon if a selection change\n                                        // is made in the corresponding combobox.\n                                        InternalEvent.addListener(select, 'change', () => {\n                                            into.toolbar.selectMode(img, (evt) => {\n                                                const pt = convertPoint(editor.graph.container, getClientX(evt), getClientY(evt));\n                                                return editor.addVertex(null, funct(), pt.x, pt.y);\n                                            });\n                                            into.toolbar.noReset = false;\n                                        });\n                                        // Adds the entries to the combobox\n                                        for (let i = 0; i < children.length; i += 1) {\n                                            const child = children[i];\n                                            if (child.nodeName === 'separator') {\n                                                into.addOption(select, '---');\n                                            }\n                                            else if (child.nodeName === 'add') {\n                                                const lab = child.getAttribute('as');\n                                                const tmp = child.getAttribute('template');\n                                                const option = into.addOption(select, lab, tmp || template);\n                                                option.cellStyle = child.getAttribute('style');\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            // Assigns an ID to the created element to access it later.\n                            if (elt != null) {\n                                const id = node.getAttribute('id');\n                                if (id != null && id.length > 0) {\n                                    elt.setAttribute('id', id);\n                                }\n                            }\n                        }\n                    }\n                }\n                node = node.nextSibling;\n            }\n        }\n        return into;\n    }\n}\n","/*\nCopyright 2024-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport { Graph } from '../../view/Graph';\nexport const excludedFields = [\n    'graphListeners',\n    'eventListeners',\n    'view',\n    'container',\n    'cellRenderer',\n    'editor',\n    'selectionModel',\n    'plugins',\n];\n/**\n * Codec for {@link Graph}s.\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * Transient Fields:\n *\n * - graphListeners\n * - eventListeners\n * - view\n * - container\n * - cellRenderer\n * - editor\n * - selectionModel\n * - plugins\n *\n * @category Serialization with Codecs\n */\nexport class GraphCodec extends ObjectCodec {\n    constructor() {\n        // Do not  load default plugins, plugins are not serialized\n        super(new Graph(undefined, undefined, []), excludedFields);\n        this.setName('Graph');\n    }\n}\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { BaseGraph } from '../../view/BaseGraph';\nimport ObjectCodec from '../ObjectCodec';\nimport { excludedFields } from './GraphCodec';\n/**\n * Codec for {@link BaseGraph}s.\n *\n * Transient Fields:\n *\n * - graphListeners\n * - eventListeners\n * - view\n * - container\n * - cellRenderer\n * - editor\n * - selectionModel\n * - plugins\n *\n * @category Serialization with Codecs\n */\nexport class BaseGraphCodec extends ObjectCodec {\n    constructor() {\n        super(new BaseGraph(), excludedFields);\n        this.setName('BaseGraph');\n    }\n}\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport ChildChange from '../../view/undoable_changes/ChildChange';\nimport { isElement } from '../../internal/utils';\n/**\n * Codec for {@link ChildChange}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n * - previousIndex\n * - child\n *\n * Reference Fields:\n *\n * - parent\n *\n * @category Serialization with Codecs\n */\nexport class ChildChangeCodec extends ObjectCodec {\n    constructor() {\n        const __dummy = undefined;\n        super(new ChildChange(__dummy, __dummy, __dummy), ['model', 'child', 'previousIndex'], ['parent', 'previous']);\n    }\n    /**\n     * Returns `true` for the child attribute if the child cell had a previous parent or if we're reading the\n     * child as an attribute rather than a child node, in which case it's always a reference.\n     */\n    isReference(obj, attr, value, isWrite) {\n        if (attr === 'child' && (!isWrite || obj.model.contains(obj.previous))) {\n            return true;\n        }\n        return this.idrefs.indexOf(attr) >= 0;\n    }\n    /**\n     * Excludes references to parent or previous if not in the model.\n     */\n    isExcluded(obj, attr, value, write) {\n        return (super.isExcluded(obj, attr, value, write) ||\n            (write &&\n                value != null &&\n                (attr === 'previous' || attr === 'parent') &&\n                !obj.model.contains(value)));\n    }\n    /**\n     * Encodes the child recursively and adds the result to the given node.\n     */\n    afterEncode(enc, obj, node) {\n        if (this.isReference(obj, 'child', obj.child, true)) {\n            // Encodes as reference (id)\n            node.setAttribute('child', enc.getId(obj.child));\n        }\n        else {\n            // At this point, the encoder is no longer able to know which cells\n            // are new, so we have to encode the complete cell hierarchy and\n            // ignore the ones that are already there at decoding time. Note:\n            // This can only be resolved by moving the notify event into the\n            // execute of the edit.\n            enc.encodeCell(obj.child, node);\n        }\n        return node;\n    }\n    /**\n     * Decodes any child nodes as using the respective codec from the registry.\n     */\n    beforeDecode(dec, _node, obj) {\n        if (isElement(_node.firstChild)) {\n            // Makes sure the original node isn't modified\n            const node = _node.cloneNode(true);\n            let tmp = node.firstChild;\n            obj.child = dec.decodeCell(tmp, false);\n            let tmp2 = tmp.nextSibling;\n            tmp.parentNode.removeChild(tmp);\n            tmp = tmp2;\n            while (tmp) {\n                tmp2 = tmp.nextSibling;\n                if (isElement(tmp)) {\n                    // Ignores all existing cells because those do not need to\n                    // be re-inserted into the model. Since the encoded version\n                    // of these cells contains the new parent, this would leave\n                    // to an inconsistent state on the model (i.e. a parent\n                    // change without a call to parentForCellChanged).\n                    const id = tmp.getAttribute('id');\n                    if (dec.lookup(id) == null) {\n                        dec.decodeCell(tmp);\n                    }\n                }\n                tmp.parentNode?.removeChild(tmp);\n                tmp = tmp2;\n            }\n            return node;\n        }\n        else {\n            const childRef = _node.getAttribute('child');\n            obj.child = dec.getObject(childRef);\n            return _node;\n        }\n    }\n    /**\n     * Restores object state in the child change.\n     */\n    afterDecode(dec, node, obj) {\n        // Cells are decoded here after a complete transaction so the previous\n        // parent must be restored on the cell for the case where the cell was\n        // added. This is needed for the local model to identify the cell as a\n        // new cell and register the ID.\n        if (obj.child != null) {\n            if (obj.child.parent != null &&\n                obj.previous != null &&\n                obj.child.parent !== obj.previous) {\n                obj.previous = obj.child.parent;\n            }\n            obj.child.parent = obj.previous;\n            obj.previous = obj.parent;\n            obj.previousIndex = obj.index;\n        }\n        return obj;\n    }\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport { isNode } from '../../util/domUtils';\n/**\n * Codec for {@link ValueChange}s, {@link StyleChange}s, {@link GeometryChange}s, {@link CollapseChange}s and {@link VisibleChange}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n *\n * Reference Fields:\n *\n * - cell\n *\n * @category Serialization with Codecs\n */\nexport class GenericChangeCodec extends ObjectCodec {\n    /**\n     *\n     * @param obj An instance of the change object.\n     * @param variable The field name for the change data.\n     */\n    constructor(obj, variable) {\n        super(obj, ['model', 'previous'], ['cell']);\n        this.variable = variable;\n    }\n    /**\n     * Restores the state by assigning the previous value.\n     */\n    afterDecode(dec, _node, obj) {\n        // Allows forward references in sessions. This is a workaround\n        // for the sequence of edits in mxGraph.moveCells and cellsAdded.\n        if (isNode(obj.cell)) {\n            obj.cell = dec.decodeCell(obj.cell, false);\n        }\n        obj.previous = obj[this.variable];\n        return obj;\n    }\n}\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { EdgeStyleRegistry } from '../../view/style/edge/EdgeStyleRegistry';\nimport { PerimeterRegistry } from '../../view/style/perimeter/PerimeterRegistry';\nconst registries = [EdgeStyleRegistry, PerimeterRegistry];\n/**\n * @since 0.20.0\n */\nexport const getNameFromRegistries = (value) => {\n    for (const registry of registries) {\n        const name = registry.getName(value);\n        if (name) {\n            return name;\n        }\n    }\n    return null;\n};\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport { getNameFromRegistries } from './utils';\nimport GraphView from '../../view/GraphView';\n/**\n * Custom encoder for {@link GraphView}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * This codec only writes views into an XML format that can be used to create an image for the graph, that is,\n * it contains absolute coordinates with computed perimeters, edge styles and cell styles.\n *\n * @category Serialization with Codecs\n */\nexport class GraphViewCodec extends ObjectCodec {\n    constructor() {\n        super(new GraphView(undefined));\n        this.setName('GraphView');\n    }\n    /**\n     * Encodes the given {@link GraphView} using {@link encodeCell} starting at the model's root. This returns the\n     * top-level graph node of the recursive encoding.\n     */\n    encode(enc, view) {\n        return this.encodeCell(enc, view, view.graph.getDataModel().getRoot());\n    }\n    /**\n     * Recursively encodes the specified cell.\n     *\n     * Uses layer as the default node name. If the cell's parent is null, then graph is used for the node name.\n     * If {@link Cell.isEdge} returns `true` for the cell, then edge is used for the node name, else if {@link Cell.isVertex} returns `true` for the cell,\n     * then vertex is used for the node name.\n     *\n     * {@link AbstractGraph.getLabel} is used to create the label attribute for the cell.\n     * For graph nodes and vertices the bounds are encoded into x, y, width and height.\n     * For edges the points are encoded into a points attribute as a space-separated list of comma-separated coordinate pairs (e.g. x0,y0 x1,y1 ... xn,yn).\n     * All values from the cell style are added as attribute values to the node.\n     */\n    encodeCell(enc, view, cell) {\n        let node;\n        const model = view.graph.getDataModel();\n        const state = view.getState(cell);\n        const parent = cell.getParent();\n        if (parent == null || state != null) {\n            const childCount = cell.getChildCount();\n            const geo = cell.getGeometry();\n            let name = null;\n            if (parent === model.getRoot()) {\n                name = 'layer';\n            }\n            else if (parent == null) {\n                name = 'graph';\n            }\n            else if (cell.isEdge()) {\n                name = 'edge';\n            }\n            else if (childCount > 0 && geo != null) {\n                name = 'group';\n            }\n            else if (cell.isVertex()) {\n                name = 'vertex';\n            }\n            if (name != null) {\n                node = enc.document.createElement(name);\n                const lab = view.graph.getLabel(cell);\n                if (lab != null) {\n                    node.setAttribute('label', view.graph.getLabel(cell));\n                    if (view.graph.isHtmlLabel(cell)) {\n                        node.setAttribute('html', true);\n                    }\n                }\n                if (parent == null) {\n                    const bounds = view.getGraphBounds();\n                    if (bounds != null) {\n                        node.setAttribute('x', Math.round(bounds.x));\n                        node.setAttribute('y', Math.round(bounds.y));\n                        node.setAttribute('width', Math.round(bounds.width));\n                        node.setAttribute('height', Math.round(bounds.height));\n                    }\n                    node.setAttribute('scale', view.scale);\n                }\n                else if (state != null && geo != null) {\n                    // Writes each key, value in the style pair to an attribute\n                    for (const i in state.style) {\n                        // @ts-ignore\n                        let value = state.style[i];\n                        // Tries to turn functions into strings\n                        if (typeof value === 'function') {\n                            value = getNameFromRegistries(value);\n                        }\n                        if (value != null &&\n                            typeof value !== 'function' &&\n                            typeof value !== 'object') {\n                            node.setAttribute(i, value);\n                        }\n                    }\n                    const abs = state.absolutePoints;\n                    // Writes the list of points into one attribute\n                    if (abs != null && abs.length > 0) {\n                        let pts = `${Math.round(abs[0].x)},${Math.round(abs[0].y)}`;\n                        for (let i = 1; i < abs.length; i += 1) {\n                            pts += ` ${Math.round(abs[i].x)},${Math.round(abs[i].y)}`;\n                        }\n                        node.setAttribute('points', pts);\n                    }\n                    // Writes the bounds into 4 attributes\n                    else {\n                        node.setAttribute('x', Math.round(state.x));\n                        node.setAttribute('y', Math.round(state.y));\n                        node.setAttribute('width', Math.round(state.width));\n                        node.setAttribute('height', Math.round(state.height));\n                    }\n                    const offset = state.absoluteOffset;\n                    // Writes the offset into 2 attributes\n                    if (offset != null) {\n                        if (offset.x !== 0) {\n                            node.setAttribute('dx', Math.round(offset.x));\n                        }\n                        if (offset.y !== 0) {\n                            node.setAttribute('dy', Math.round(offset.y));\n                        }\n                    }\n                }\n                for (let i = 0; i < childCount; i += 1) {\n                    const childNode = this.encodeCell(enc, view, cell.getChildAt(i));\n                    if (childNode != null) {\n                        node.appendChild(childNode);\n                    }\n                }\n            }\n        }\n        return node;\n    }\n}\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport RootChange from '../../view/undoable_changes/RootChange';\nimport { isElement } from '../../internal/utils';\n/**\n * Codec for {@link RootChange}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n * - root\n *\n * @category Serialization with Codecs\n */\nexport class RootChangeCodec extends ObjectCodec {\n    constructor() {\n        const __dummy = undefined;\n        super(new RootChange(__dummy, __dummy), ['model', 'previous', 'root']);\n    }\n    /**\n     * Encodes the child recursively.\n     */\n    afterEncode(enc, obj, node) {\n        enc.encodeCell(obj.root, node);\n        return node;\n    }\n    /**\n     * Decodes the optional children as cells using the respective decoder.\n     */\n    beforeDecode(dec, node, obj) {\n        if (isElement(node.firstChild)) {\n            // Makes sure the original node isn't modified\n            node = node.cloneNode(true);\n            let tmp = node.firstChild;\n            obj.root = dec.decodeCell(tmp, false);\n            let tmp2 = tmp.nextSibling;\n            tmp.parentNode?.removeChild(tmp);\n            tmp = tmp2;\n            while (tmp != null) {\n                tmp2 = tmp.nextSibling;\n                dec.decodeCell(tmp);\n                tmp.parentNode?.removeChild(tmp);\n                tmp = tmp2;\n            }\n        }\n        return node;\n    }\n    /**\n     * Restores the state by assigning the previous value.\n     */\n    afterDecode(_dec, _node, obj) {\n        obj.previous = obj.root;\n        return obj;\n    }\n}\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport { getNameFromRegistries } from './utils';\nimport { Stylesheet } from '../../view/style/Stylesheet';\nimport { clone } from '../../util/cloneUtils';\nimport { GlobalConfig } from '../../util/config';\nimport { isNumeric } from '../../util/mathUtils';\nimport { getTextContent } from '../../util/domUtils';\nimport { doEval, isElement } from '../../internal/utils';\n/**\n * Codec for {@link Stylesheet}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * @category Serialization with Codecs\n */\nexport class StylesheetCodec extends ObjectCodec {\n    constructor() {\n        super(new Stylesheet());\n    }\n    /**\n     * Encodes a stylesheet. See {@link decode} for a description of the format.\n     */\n    encode(enc, obj) {\n        const node = enc.document.createElement(this.getName());\n        for (const i in obj.styles) {\n            const style = obj.styles[i];\n            const styleNode = enc.document.createElement('add');\n            if (i != null) {\n                styleNode.setAttribute('as', i);\n                for (const j in style) {\n                    const value = this.getStringValue(j, style[j]);\n                    if (value != null) {\n                        const entry = enc.document.createElement('add');\n                        entry.setAttribute('value', value);\n                        entry.setAttribute('as', j);\n                        styleNode.appendChild(entry);\n                    }\n                }\n                if (styleNode.childNodes.length > 0) {\n                    node.appendChild(styleNode);\n                }\n            }\n        }\n        return node;\n    }\n    /**\n     * Returns the string for encoding the given value.\n     */\n    getStringValue(key, value) {\n        const type = typeof value;\n        // Tries to turn functions into strings\n        if (type === 'function') {\n            value = getNameFromRegistries(value);\n        }\n        else if (type === 'object') {\n            value = null;\n        }\n        return value;\n    }\n    /**\n     * Reads a sequence of the following child nodes and attributes:\n     *\n     * Child Nodes:\n     * - `add` - Adds a new style.\n     *\n     * Attributes:\n     * - `as` - Name of the style.\n     * - `extend` - Name of the style to inherit from.\n     *\n     * Each node contains another sequence of add and remove nodes with the following attributes:\n     * - `as` - Name of the style (see properties of {@link CellStateStyle}).\n     * - `value` - Value for the style.\n     *\n     * Instead of the value-attribute, one can put Javascript expressions into the node as follows if {@link allowEval} is `true`:\n     * <add as=\"perimeter\">Perimeter.RectanglePerimeter</add>\n     *\n     * A remove node will remove the entry with the name given in the as-attribute from the style.\n     *\n     * Example:\n     *\n     * ```javascript\n     * <Stylesheet as=\"stylesheet\">\n     *   <add as=\"text\">\n     *     <add as=\"fontSize\" value=\"12\"/>\n     *   </add>\n     *   <add as=\"defaultVertex\" extend=\"text\">\n     *     <add as=\"shape\" value=\"rectangle\"/>\n     *   </add>\n     * </Stylesheet>\n     * ```\n     */\n    decode(dec, _node, into) {\n        const obj = into || new this.template.constructor();\n        const id = _node.getAttribute('id');\n        if (id) {\n            dec.objects[id] = obj;\n        }\n        let node = _node.firstChild;\n        while (node) {\n            if (!this.processInclude(dec, node, obj) && node.nodeName === 'add') {\n                const as = node.getAttribute('as');\n                if (as) {\n                    const extend = node.getAttribute('extend');\n                    let style = extend ? clone(obj.styles[extend]) : null;\n                    if (!style) {\n                        if (extend) {\n                            GlobalConfig.logger.warn(`StylesheetCodec.decode: stylesheet ${extend} not found to extend`);\n                        }\n                        style = {};\n                    }\n                    let entry = node.firstChild;\n                    while (entry) {\n                        if (isElement(entry)) {\n                            const key = entry.getAttribute('as');\n                            if (entry.nodeName === 'add') {\n                                const text = getTextContent(entry);\n                                let value = null;\n                                if (text && StylesheetCodec.allowEval) {\n                                    value = doEval(text);\n                                }\n                                else {\n                                    value = entry.getAttribute('value');\n                                    if (isNumeric(value)) {\n                                        value = parseFloat(value);\n                                    }\n                                }\n                                if (value) {\n                                    style[key] = value;\n                                }\n                            }\n                            else if (entry.nodeName === 'remove') {\n                                delete style[key];\n                            }\n                        }\n                        entry = entry.nextSibling;\n                    }\n                    obj.putCellStyle(as, style);\n                }\n            }\n            node = node.nextSibling;\n        }\n        return obj;\n    }\n}\n/**\n * Static global switch that specifies if the use of eval is allowed for evaluating text content.\n * Set this to `false` if stylesheets may contain user input.\n *\n * **WARNING**: Enabling this switch carries a possible security risk.\n *\n * @default false\n */\nStylesheetCodec.allowEval = false;\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport TerminalChange from '../../view/undoable_changes/TerminalChange';\n/**\n * Codec for {@link TerminalChange}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n *\n * Reference Fields:\n *\n * - cell\n * - terminal\n *\n * @category Serialization with Codecs\n */\nexport class TerminalChangeCodec extends ObjectCodec {\n    constructor() {\n        const __dummy = undefined;\n        super(new TerminalChange(__dummy, __dummy, __dummy, __dummy), ['model', 'previous'], ['cell', 'terminal']);\n    }\n    /**\n     * Restores the state by assigning the previous value.\n     */\n    afterDecode(_dec, _node, obj) {\n        obj.previous = obj.terminal;\n        return obj;\n    }\n}\n","/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CodecRegistry from './CodecRegistry';\nimport { BaseGraphCodec, ChildChangeCodec, EditorCodec, EditorKeyHandlerCodec, EditorPopupMenuCodec, EditorToolbarCodec, GenericChangeCodec, GraphCodec, GraphViewCodec, RootChangeCodec, StylesheetCodec, TerminalChangeCodec, } from './codecs/_other-codecs';\nimport Rectangle from '../view/geometry/Rectangle';\nimport ImageBox from '../view/image/ImageBox';\nimport CellAttributeChange from '../view/undoable_changes/CellAttributeChange';\nimport CollapseChange from '../view/undoable_changes/CollapseChange';\nimport GeometryChange from '../view/undoable_changes/GeometryChange';\nimport StyleChange from '../view/undoable_changes/StyleChange';\nimport ValueChange from '../view/undoable_changes/ValueChange';\nimport VisibleChange from '../view/undoable_changes/VisibleChange';\nimport { CodecRegistrationStates, createObjectCodec, registerBaseCodecs, } from './register-shared';\nimport { registerModelCodecs } from './register-model-codecs';\nconst registerGenericChangeCodecs = () => {\n    const __dummy = undefined;\n    CodecRegistry.register(new GenericChangeCodec(new CellAttributeChange(__dummy, __dummy, __dummy), 'value'));\n    CodecRegistry.register(new GenericChangeCodec(new CollapseChange(__dummy, __dummy, __dummy), 'collapsed'));\n    CodecRegistry.register(new GenericChangeCodec(new GeometryChange(__dummy, __dummy, __dummy), 'geometry'));\n    CodecRegistry.register(new GenericChangeCodec(new StyleChange(__dummy, __dummy, __dummy), 'style'));\n    CodecRegistry.register(new GenericChangeCodec(new ValueChange(__dummy, __dummy, __dummy), 'value'));\n    CodecRegistry.register(new GenericChangeCodec(new VisibleChange(__dummy, __dummy, __dummy), 'visible'));\n};\n/**\n * Register core codecs i.e. codecs that don't relate to editor. This includes model codecs that can be registered individually with {@link registerModelCodecs}.\n *\n * @param force if `true` register the codecs even if they were already registered. If false, only register them\n *              if they have never been registered before.\n * @since 0.6.0\n * @category Configuration\n * @category Serialization with Codecs\n */\nexport const registerCoreCodecs = (force = false) => {\n    if (!CodecRegistrationStates.core || force) {\n        CodecRegistry.register(new ChildChangeCodec());\n        CodecRegistry.register(new BaseGraphCodec());\n        CodecRegistry.register(new GraphCodec());\n        CodecRegistry.register(new GraphViewCodec());\n        CodecRegistry.register(new RootChangeCodec());\n        CodecRegistry.register(new StylesheetCodec());\n        CodecRegistry.register(new TerminalChangeCodec());\n        registerGenericChangeCodecs();\n        // Needed at least by Graph\n        CodecRegistry.register(createObjectCodec(new Rectangle(), 'Rectangle'));\n        CodecRegistry.register(createObjectCodec(new ImageBox(undefined, 0, 0), 'ImageBox'));\n        registerModelCodecs(force);\n        CodecRegistrationStates.core = true;\n    }\n};\n/**\n * Register only editor codecs.\n * @param force if `true` register the codecs even if they were already registered. If false, only register them\n *              if they have never been registered before.\n * @since 0.6.0\n * @category Configuration\n * @category Serialization with Codecs\n */\nexport const registerEditorCodecs = (force = false) => {\n    if (!CodecRegistrationStates.editor || force) {\n        registerBaseCodecs(force);\n        CodecRegistry.register(new EditorCodec());\n        CodecRegistry.register(new EditorKeyHandlerCodec());\n        CodecRegistry.register(new EditorPopupMenuCodec());\n        CodecRegistry.register(new EditorToolbarCodec());\n        CodecRegistrationStates.editor = true;\n    }\n};\n/**\n * Register all codecs i.e. core codecs (as done by {@link registerCoreCodecs}) and editor codecs (as done by {@link registerEditorCodecs}).\n *\n * @param force if `true` register the codecs even if they were already registered. If false, only register them\n *              if they have never been registered before.\n * @since 0.6.0\n * @category Configuration\n * @category Serialization with Codecs\n */\nexport const registerAllCodecs = (force = false) => {\n    registerCoreCodecs(force);\n    registerEditorCodecs(force);\n};\n/**\n * Unregister all codecs from {@link CodecRegistry}.\n *\n * @since 0.18.0\n * @category Configuration\n * @category Serialization with Codecs\n */\nexport const unregisterAllCodecs = () => {\n    CodecRegistry.codecs = {};\n    CodecRegistry.aliases = {};\n    // reset the state to ensure that the codecs are registered again when the \"register\" functions are called\n    for (const key of Object.keys(CodecRegistrationStates)) {\n        CodecRegistrationStates[key] = false;\n    }\n};\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { StencilShapeRegistry } from './StencilShapeRegistry';\n/**\n * Unregister all {@link StencilShape}s from {@link StencilShapeRegistry}.\n *\n * @category Configuration\n * @category Style\n * @since 0.18.0\n */\nexport function unregisterAllStencilShapes() {\n    StencilShapeRegistry.clear();\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ConnectionConstraint from '../../other/ConnectionConstraint';\nimport Rectangle from '../../geometry/Rectangle';\nimport Shape from '../Shape';\nimport { NONE, RECTANGLE_ROUNDING_FACTOR } from '../../../util/Constants';\nimport { StencilShapeRegistry } from './StencilShapeRegistry';\nimport { getChildNodes, getTextContent } from '../../../util/domUtils';\nimport Point from '../../geometry/Point';\nimport { doEval, isElement, isNullish } from '../../../internal/utils';\nimport { translate } from '../../../internal/i18n-utils';\n/**\n * Configure global settings for stencil shapes.\n * @experimental subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.11.0\n * @category Configuration\n * @category Shape\n */\nexport const StencilShapeConfig = {\n    /**\n     * Specifies if the use of eval is allowed for evaluating text content and images.\n     * Set this to `true` if stencils can not contain user input.\n     *\n     * **WARNING**: Enabling this switch carries a possible security risk.\n     *\n     * @default false\n     */\n    allowEval: false,\n    /**\n     * Specifies the default value for the localized attribute of the text element.\n     * @default false\n     */\n    defaultLocalized: false,\n};\n// To manage the following attribute described in stencils.xsd\n// <xs:attribute name=\"large-arc-flag\" use=\"required\" type=\"xs:decimal\"/>\n// <xs:attribute name=\"sweep-flag\" use=\"required\" type=\"xs:decimal\"/>\nconst toBoolean = (value) => value !== '0';\n/**\n * Implements a generic shape which is based on an XML node as a description.\n *\n * The XSD for the stencil description is available in the `stencils.xsd` file.\n *\n * @category Shape\n */\nclass StencilShape extends Shape {\n    constructor(desc) {\n        super();\n        /**\n         * Holds an array of {@link ConnectionConstraint}s as defined in the shape.\n         */\n        this.constraints = [];\n        /**\n         * Holds the aspect of the shape. Default is 'auto'.\n         */\n        this.aspect = 'auto';\n        /**\n         * Holds the width of the shape. Default is 100.\n         */\n        this.w0 = 100;\n        /**\n         * Holds the height of the shape. Default is 100.\n         */\n        this.h0 = 100;\n        /**\n         * Holds the XML node with the stencil description.\n         */\n        // bgNode: Element;\n        this.bgNode = null;\n        /**\n         * Holds the XML node with the stencil description.\n         */\n        this.fgNode = null;\n        /**\n         * Holds the strokewidth direction from the description.\n         */\n        this.strokeWidthValue = null;\n        this.desc = desc;\n        this.parseDescription();\n        this.parseConstraints();\n    }\n    /**\n     * Reads <w0>, <h0>, <aspect>, <bgNodes> and <fgNodes> from <desc>.\n     */\n    parseDescription() {\n        // LATER: Preprocess nodes for faster painting\n        this.fgNode = this.desc.getElementsByTagName('foreground')[0];\n        this.bgNode = this.desc.getElementsByTagName('background')[0];\n        this.w0 = Number(this.desc.getAttribute('w') || 100);\n        this.h0 = Number(this.desc.getAttribute('h') || 100);\n        // Possible values for aspect are: variable and fixed where\n        // variable means fill the available space and fixed means\n        // use w0 and h0 to compute the aspect.\n        const aspect = this.desc.getAttribute('aspect');\n        this.aspect = aspect ?? 'variable';\n        // Possible values for strokewidth are all numbers and \"inherit\"\n        // where the inherit means take the value from the style (ie. the\n        // user-defined stroke-width). Note that the strokewidth is scaled\n        // by the minimum scaling that is used to draw the shape (sx, sy).\n        const sw = this.desc.getAttribute('strokewidth');\n        this.strokeWidthValue = !isNullish(sw) ? sw : '1';\n    }\n    /**\n     * Reads the constraints from {@link desc} into {@link constraints} using {@link parseConstraint}.\n     */\n    parseConstraints() {\n        const conns = this.desc.getElementsByTagName('connections')[0];\n        if (conns) {\n            const tmp = getChildNodes(conns);\n            if (tmp.length > 0) {\n                this.constraints = [];\n                for (let i = 0; i < tmp.length; i += 1) {\n                    this.constraints.push(this.parseConstraint(tmp[i]));\n                }\n            }\n        }\n    }\n    /**\n     * Parses the given XML node and returns its {@link ConnectionConstraint}.\n     */\n    parseConstraint(node) {\n        const x = Number(node.getAttribute('x'));\n        const y = Number(node.getAttribute('y'));\n        const perimeter = node.getAttribute('perimeter') === '1';\n        const name = node.getAttribute('name');\n        return new ConnectionConstraint(new Point(x, y), perimeter, name);\n    }\n    /**\n     * Gets the given attribute as a text. The return value from <evaluateAttribute>\n     * is used as a key to {@link Resources#get} if the localized attribute in the text\n     * node is 1 or if <defaultLocalized> is true.\n     */\n    evaluateTextAttribute(node, attribute, shape) {\n        let result = this.evaluateAttribute(node, attribute, shape);\n        const loc = node.getAttribute('localized');\n        if ((StencilShapeConfig.defaultLocalized && !loc) || loc === '1') {\n            result = translate(result);\n        }\n        return result;\n    }\n    /**\n     * Gets the attribute for the given name from the given node. If the attribute\n     * does not exist then the text content of the node is evaluated and if it is\n     * a function it is invoked with <shape> as the only argument and the return\n     * value is used as the attribute value to be returned.\n     */\n    evaluateAttribute(node, attribute, shape) {\n        let result = node.getAttribute(attribute);\n        if (!result) {\n            const text = getTextContent(node);\n            if (text && StencilShapeConfig.allowEval) {\n                const funct = doEval(text);\n                if (typeof funct === 'function') {\n                    result = funct(shape);\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Draws this stencil inside the given bounds.\n     */\n    drawShape(canvas, shape, x, y, w, h) {\n        const stack = canvas.states.slice();\n        // TODO: Internal structure (array of special structs?), relative and absolute\n        // coordinates (eg. note shape, process vs star, actor etc.), text rendering\n        // and non-proportional scaling, how to implement pluggable edge shapes\n        // (start, segment, end blocks), pluggable markers, how to implement\n        // swimlanes (title area) with this API, add icon, horizontal/vertical\n        // label, indicator for all shapes, rotation\n        const direction = shape.style?.direction;\n        const aspect = this.computeAspect(shape, x, y, w, h, direction);\n        const minScale = Math.min(aspect.width, aspect.height);\n        const sw = this.strokeWidthValue === 'inherit'\n            ? (shape.style?.strokeWidth ?? 1)\n            : Number(this.strokeWidthValue) * minScale;\n        canvas.setStrokeWidth(sw);\n        // Draws a transparent rectangle for catching events\n        if (shape.style?.pointerEvents ?? false) {\n            canvas.setStrokeColor(NONE);\n            canvas.rect(x, y, w, h);\n            canvas.stroke();\n            canvas.setStrokeColor(shape.stroke);\n        }\n        this.drawChildren(canvas, shape, x, y, w, h, this.bgNode, aspect, false, true);\n        this.drawChildren(canvas, shape, x, y, w, h, this.fgNode, aspect, true, !shape.outline || shape.style == null || !(shape.style.backgroundOutline ?? false));\n        // Restores stack for unequal count of save/restore calls\n        if (canvas.states.length != stack.length) {\n            canvas.states = stack;\n        }\n    }\n    /**\n     * Draws this stencil inside the given bounds.\n     */\n    drawChildren(canvas, shape, x, y, w, h, node, aspect, disableShadow, paint) {\n        if (node && w > 0 && h > 0) {\n            let tmp = node.firstChild;\n            while (tmp) {\n                if (isElement(tmp)) {\n                    this.drawNode(canvas, shape, tmp, aspect, disableShadow, paint);\n                }\n                tmp = tmp.nextSibling;\n            }\n        }\n    }\n    /**\n     * Returns a rectangle that contains the offset in x and y and the horizontal\n     * and vertical scale in width and height used to draw this shape inside the\n     * given {@link Rectangle}.\n     *\n     * @param shape {@link Shape} to be drawn.\n     * @param bounds {@link Rectangle} that should contain the stencil.\n     * @param direction Optional direction of the shape to be darwn.\n     */\n    computeAspect(shape = null, x, y, w, h, direction) {\n        let x0 = x;\n        let y0 = y;\n        let sx = w / this.w0;\n        let sy = h / this.h0;\n        const inverse = direction === 'north' || direction === 'south';\n        if (inverse) {\n            sy = w / this.h0;\n            sx = h / this.w0;\n            const delta = (w - h) / 2;\n            x0 += delta;\n            y0 -= delta;\n        }\n        if (this.aspect === 'fixed') {\n            sy = Math.min(sx, sy);\n            sx = sy;\n            // Centers the shape inside the available space\n            if (inverse) {\n                x0 += (h - this.w0 * sx) / 2;\n                y0 += (w - this.h0 * sy) / 2;\n            }\n            else {\n                x0 += (w - this.w0 * sx) / 2;\n                y0 += (h - this.h0 * sy) / 2;\n            }\n        }\n        return new Rectangle(x0, y0, sx, sy);\n    }\n    /**\n     * Draws this stencil inside the given bounds.\n     */\n    drawNode(canvas, shape, node, aspect, disableShadow, paint) {\n        const name = node.nodeName;\n        const x0 = aspect.x;\n        const y0 = aspect.y;\n        const sx = aspect.width;\n        const sy = aspect.height;\n        const minScale = Math.min(sx, sy);\n        if (name === 'save') {\n            canvas.save();\n        }\n        else if (name === 'restore') {\n            canvas.restore();\n        }\n        else if (paint) {\n            if (name === 'path') {\n                canvas.begin();\n                let parseRegularly = true;\n                if (node.getAttribute('rounded') == '1') {\n                    parseRegularly = false;\n                    const arcSize = Number(node.getAttribute('arcSize'));\n                    let pointCount = 0;\n                    const segs = [];\n                    // Renders the elements inside the given path\n                    let childNode = node.firstChild;\n                    while (childNode != null) {\n                        if (isElement(childNode)) {\n                            const childName = childNode.nodeName;\n                            if (childName === 'move' || childName === 'line') {\n                                if (childName === 'move' || segs.length === 0) {\n                                    segs.push([]);\n                                }\n                                segs[segs.length - 1].push(new Point(x0 + Number(childNode.getAttribute('x')) * sx, y0 + Number(childNode.getAttribute('y')) * sy));\n                                pointCount++;\n                            }\n                            else {\n                                // We only support move and line for rounded corners\n                                parseRegularly = true;\n                                break;\n                            }\n                        }\n                        childNode = childNode.nextSibling;\n                    }\n                    if (!parseRegularly && pointCount > 0) {\n                        for (let i = 0; i < segs.length; i += 1) {\n                            let close = false;\n                            const ps = segs[i][0];\n                            const pe = segs[i][segs[i].length - 1];\n                            if (ps.x === pe.x && ps.y === pe.y) {\n                                segs[i].pop();\n                                close = true;\n                            }\n                            this.addPoints(canvas, segs[i], true, arcSize, close);\n                        }\n                    }\n                    else {\n                        parseRegularly = true;\n                    }\n                }\n                if (parseRegularly) {\n                    // Renders the elements inside the given path\n                    let childNode = node.firstChild;\n                    while (childNode) {\n                        if (isElement(childNode)) {\n                            this.drawNode(canvas, shape, childNode, aspect, disableShadow, paint);\n                        }\n                        childNode = childNode.nextSibling;\n                    }\n                }\n            }\n            else if (name === 'close') {\n                canvas.close();\n            }\n            else if (name === 'move') {\n                canvas.moveTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n            }\n            else if (name === 'line') {\n                canvas.lineTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n            }\n            else if (name === 'quad') {\n                canvas.quadTo(x0 + Number(node.getAttribute('x1')) * sx, y0 + Number(node.getAttribute('y1')) * sy, x0 + Number(node.getAttribute('x2')) * sx, y0 + Number(node.getAttribute('y2')) * sy);\n            }\n            else if (name === 'curve') {\n                canvas.curveTo(x0 + Number(node.getAttribute('x1')) * sx, y0 + Number(node.getAttribute('y1')) * sy, x0 + Number(node.getAttribute('x2')) * sx, y0 + Number(node.getAttribute('y2')) * sy, x0 + Number(node.getAttribute('x3')) * sx, y0 + Number(node.getAttribute('y3')) * sy);\n            }\n            else if (name === 'arc') {\n                canvas.arcTo(Number(node.getAttribute('rx')) * sx, Number(node.getAttribute('ry')) * sy, Number(node.getAttribute('x-axis-rotation')), toBoolean(node.getAttribute('large-arc-flag')), toBoolean(node.getAttribute('sweep-flag')), x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n            }\n            else if (name === 'rect') {\n                canvas.rect(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy, Number(node.getAttribute('w')) * sx, Number(node.getAttribute('h')) * sy);\n            }\n            else if (name === 'roundrect') {\n                let arcsize = Number(node.getAttribute('arcsize'));\n                if (arcsize === 0) {\n                    arcsize = RECTANGLE_ROUNDING_FACTOR * 100;\n                }\n                const w = Number(node.getAttribute('w')) * sx;\n                const h = Number(node.getAttribute('h')) * sy;\n                const factor = Number(arcsize) / 100;\n                const r = Math.min(w * factor, h * factor);\n                canvas.roundrect(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy, w, h, r, r);\n            }\n            else if (name === 'ellipse') {\n                canvas.ellipse(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy, Number(node.getAttribute('w')) * sx, Number(node.getAttribute('h')) * sy);\n            }\n            else if (name === 'image') {\n                if (!shape.outline) {\n                    const src = this.evaluateAttribute(node, 'src', shape);\n                    canvas.image(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy, Number(node.getAttribute('w')) * sx, Number(node.getAttribute('h')) * sy, src, false, node.getAttribute('flipH') === '1', node.getAttribute('flipV') === '1');\n                }\n            }\n            else if (name === 'text') {\n                if (!shape.outline) {\n                    const str = this.evaluateTextAttribute(node, 'str', shape);\n                    let rotation = node.getAttribute('vertical') == '1' ? -90 : 0;\n                    if (node.getAttribute('align-shape') === '0') {\n                        const dr = shape.rotation;\n                        // Depends on flipping\n                        const flipH = shape.style?.flipH ?? false;\n                        const flipV = shape.style?.flipV ?? false;\n                        if (flipH && flipV) {\n                            rotation -= dr;\n                        }\n                        else if (flipH || flipV) {\n                            rotation += dr;\n                        }\n                        else {\n                            rotation -= dr;\n                        }\n                    }\n                    rotation -= Number(node.getAttribute('rotation'));\n                    canvas.text(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy, 0, 0, str, node.getAttribute('align') ?? 'left', node.getAttribute('valign') ?? 'top', false, '', 'auto', false, rotation, 'auto');\n                }\n            }\n            else if (name === 'include-shape') {\n                const stencil = StencilShapeRegistry.get(node.getAttribute('name'));\n                if (stencil) {\n                    const x = x0 + Number(node.getAttribute('x')) * sx;\n                    const y = y0 + Number(node.getAttribute('y')) * sy;\n                    const w = Number(node.getAttribute('w')) * sx;\n                    const h = Number(node.getAttribute('h')) * sy;\n                    stencil.drawShape(canvas, shape, x, y, w, h);\n                }\n            }\n            else if (name === 'fillstroke') {\n                canvas.fillAndStroke();\n            }\n            else if (name === 'fill') {\n                canvas.fill();\n            }\n            else if (name === 'stroke') {\n                canvas.stroke();\n            }\n            else if (name === 'strokewidth') {\n                const s = node.getAttribute('fixed') === '1' ? 1 : minScale;\n                canvas.setStrokeWidth(Number(node.getAttribute('width')) * s);\n            }\n            else if (name === 'dashed') {\n                canvas.setDashed(node.getAttribute('dashed') === '1');\n            }\n            else if (name === 'dashpattern') {\n                let value = node.getAttribute('pattern');\n                if (value != null) {\n                    const tmp = value.split(' ');\n                    const pat = [];\n                    for (let i = 0; i < tmp.length; i += 1) {\n                        if (tmp[i].length > 0) {\n                            pat.push(Number(tmp[i]) * minScale);\n                        }\n                    }\n                    value = pat.join(' ');\n                    canvas.setDashPattern(value);\n                }\n            }\n            else if (name === 'strokecolor') {\n                canvas.setStrokeColor(node.getAttribute('color'));\n            }\n            else if (name === 'linecap') {\n                canvas.setLineCap(node.getAttribute('cap'));\n            }\n            else if (name === 'linejoin') {\n                canvas.setLineJoin(node.getAttribute('join'));\n            }\n            else if (name === 'miterlimit') {\n                canvas.setMiterLimit(Number(node.getAttribute('limit')));\n            }\n            else if (name === 'fillcolor') {\n                canvas.setFillColor(node.getAttribute('color'));\n            }\n            else if (name === 'alpha') {\n                canvas.setAlpha(Number(node.getAttribute('alpha')));\n            }\n            else if (name === 'fillalpha') {\n                canvas.setAlpha(Number(node.getAttribute('alpha')));\n            }\n            else if (name === 'strokealpha') {\n                canvas.setAlpha(Number(node.getAttribute('alpha')));\n            }\n            else if (name === 'fontcolor') {\n                canvas.setFontColor(node.getAttribute('color'));\n            }\n            else if (name === 'fontstyle') {\n                canvas.setFontStyle(Number(node.getAttribute('style')));\n            }\n            else if (name === 'fontfamily') {\n                canvas.setFontFamily(node.getAttribute('family'));\n            }\n            else if (name === 'fontsize') {\n                canvas.setFontSize(Number(node.getAttribute('size')) * minScale);\n            }\n            if (disableShadow &&\n                (name === 'fillstroke' || name === 'fill' || name === 'stroke')) {\n                disableShadow = false;\n                canvas.setShadow(false);\n            }\n        }\n    }\n}\nexport default StencilShape;\n","/*\nCopyright 2025-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { isNullish } from '../internal/utils';\nimport { shallowCopy } from '../internal/clone-utils';\nfunction getNavigatorLanguage() {\n    return typeof window !== 'undefined' ? navigator.language : 'en';\n}\nconst values = {\n    defaultLanguage: 'en',\n    language: getNavigatorLanguage(),\n    languages: [],\n};\n// @ts-ignore the properties will be added dynamically when calling shallowCopy\nconst originalValues = {};\nshallowCopy(values, originalValues);\n/**\n * Resets {@link TranslationsConfig} to default values.\n *\n * @experimental Subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.16.0\n * @category Configuration\n * @category I18n\n */\nexport const resetTranslationsConfig = () => {\n    shallowCopy(originalValues, values);\n};\n/**\n * Global configuration for {@link Translations}.\n *\n * @experimental subject to change or removal. maxGraph's global configuration may be modified in the future without prior notice.\n * @since 0.16.0\n * @category Configuration\n * @category I18n\n */\nexport const TranslationsConfig = {\n    /**\n     * Returns whether internationalization is enabled.\n     */\n    isEnabled() {\n        return this.getLanguage() !== 'none';\n    },\n    /**\n     * @see setLanguage\n     */\n    getLanguage() {\n        return values.language;\n    },\n    /**\n     * Defines the language of the client, e.g. `en` for english, `de` for german etc.\n     *\n     * The special value `none` will disable all built-in internationalization and resource loading.\n     * See {@link Translations.getSpecialBundle} for handling identifiers with and without a dash.\n     *\n     * If internationalization is disabled, then the following variables should be overridden to reflect the current language of the system.\n     * These variables are cleared when i18n is disabled (the list may not be exhaustive):\n     * - {@link Editor.askZoomResource}\n     * - {@link Editor.currentFileResource}\n     * - {@link Editor.helpResource}\n     * - {@link Editor.lastSavedResource}\n     * - {@link Editor.outlineResource}\n     * - {@link Editor.propertiesResource}\n     * - {@link Editor.tasksResource}\n     * - {@link ElbowEdgeHandler.doubleClickOrientationResource}\n     * - {@link AbstractGraph.alreadyConnectedResource}.\n     * - {@link AbstractGraph.collapseExpandResource}\n     * - {@link AbstractGraph.containsValidationErrorsResource} and\n     * - {@link GraphSelectionModel.doneResource}\n     * - {@link GraphSelectionModel.updatingSelectionResource}\n     * - {@link GraphView.doneResource}\n     * - {@link GraphView.updatingDocumentResource}\n     * - {@link GuiConfig.closeResource}\n     * - {@link GuiConfig.errorResource}\n     *\n     * @param value The language to set. If `null` or `undefined`, use the preferred language of the navigator or 'en' as default.\n     */\n    setLanguage(value) {\n        values.language = !isNullish(value) ? value : getNavigatorLanguage();\n    },\n    /**\n     * @see setLanguages\n     */\n    getLanguages() {\n        return values.languages;\n    },\n    /**\n     * Defines the optional array of all supported language extensions.\n     * The default language does not have to be part of this list. See {@link Translations.isLanguageSupported}.\n     *\n     * This is used to avoid unnecessary requests to language files, i.e. if a 404 will be returned.\n     * @default empty array\n     */\n    setLanguages(value) {\n        if (!isNullish(value)) {\n            values.languages = value;\n        }\n    },\n    /**\n     * @see setDefaultLanguage\n     */\n    getDefaultLanguage() {\n        return values.defaultLanguage;\n    },\n    /**\n     * Defines the default language which is used in the common resource files.\n     * Any resources for this language will only load the common resource file, but not the language-specific resource file.\n     * @default 'en'\n     */\n    setDefaultLanguage(value) {\n        values.defaultLanguage = !isNullish(value) ? value : 'en';\n    },\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2016, JGraph Ltd\nCopyright (c) 2006-2016, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Client from '../Client';\nimport { NONE } from '../util/Constants';\nimport { get, load } from '../util/requestUtils';\nimport { TranslationsConfig } from './config';\nimport { isNullish } from '../internal/utils';\n// mxGraph source code: https://github.com/jgraph/mxgraph/blob/v4.2.2/javascript/src/js/util/mxResources.js\n/**\n * Implements internationalization. You can provide any number of\n * resource files on the server using the following format for the\n * filename: name[-en].properties. The en stands for any lowercase\n * 2-character language shortcut (eg. de for german, fr for french).\n *\n * If the optional language extension is omitted, then the file is used as a\n * default resource which is loaded in all cases. If a properties file for a\n * specific language exists, then it is used to override the settings in the\n * default resource. All entries in the file are of the form key=value. The\n * values may then be accessed in code via {@link get}. Lines without\n * equal signs in the properties files are ignored.\n *\n * Resource files may either be added programmatically using\n * {@link add} or via a resource tag in the UI section of the\n * editor configuration file, eg:\n *\n * ```xml\n * <Editor>\n *   <ui>\n *     <resource basename=\"examples/resources/mxWorkflow\"/>\n * ```\n *\n * The above element will load examples/resources/mxWorkflow.properties as well\n * as the language specific file for the current language, if it exists.\n *\n * Values may contain placeholders of the form {1}...{n} where each placeholder\n * is replaced with the value of the corresponding array element in the params\n * argument passed to {@link get}. The placeholder {1} maps to the first\n * element in the array (at index 0).\n *\n * See {@link Client.language} for more information on specifying the default\n * language or disabling all loading of resources.\n *\n * Lines that start with a # sign will be ignored.\n *\n * ## Special characters\n *\n * To use unicode characters, use the standard notation (eg. \\u8fd1) or %u as a\n * prefix (eg. %u20AC will display a Euro sign). For normal hex encoded strings,\n * use % as a prefix, eg. %F6 will display a \"o umlaut\" (&ouml;).\n *\n * See {@link resourcesEncoded} to disable this. If you disable this, make sure that\n * your files are UTF-8 encoded.\n *\n * ## Loading default resources\n *\n * Call {@link loadResources} to load the default resources file for both {@link AbstractGraph} and {@link Editor}.\n *\n * @category I18n\n */\nclass Translations {\n}\n/*\n * Object that maps from keys to values.\n */\nTranslations.resources = {};\n/**\n * Specifies the extension used for language files.\n * @default '.txt'\n */\nTranslations.extension = '.txt';\n/**\n * Specifies whether values in resource files are encoded with `\\u` or percentage.\n * @default false\n */\nTranslations.resourcesEncoded = false;\n/**\n * Specifies if the default file for a given basename should be loaded.\n * @default true\n */\nTranslations.loadDefaultBundle = true;\n/**\n * Specifies if the specific language file for a given basename should be loaded.\n * @default true\n */\nTranslations.loadSpecialBundle = true;\n/**\n * Hook for subclassers to disable support for a given language.\n * This implementation returns `true` if `lan` is in {@link TranslationsConfig.languages}.\n *\n * @param lan The current language.\n */\nTranslations.isLanguageSupported = (lan) => {\n    const languages = TranslationsConfig.getLanguages();\n    if (languages) {\n        return languages.indexOf(lan) >= 0;\n    }\n    return true;\n};\n/**\n * Hook for subclassers to return the URL for the special bundle. This\n * implementation returns basename + <extension> or null if\n * <loadDefaultBundle> is false.\n *\n * @param basename The basename for which the file should be loaded.\n * @param lan The current language.\n */\nTranslations.getDefaultBundle = (basename, lan) => {\n    if (Translations.loadDefaultBundle || !Translations.isLanguageSupported(lan)) {\n        return basename + Translations.extension;\n    }\n    return null;\n};\n/**\n * Hook for subclassers to return the URL for the special bundle. This\n * implementation returns `basename + '_' + lan + <extension>` or `null` if\n * {@link loadSpecialBundle} is `false` or `lan` equals {@link TranslationsConfig.getDefaultLanguage}.\n *\n * If {@link TranslationsConfig.getLanguages} is not `null` and {@link TranslationsConfig.getLanguage} contains\n * a dash, then this method checks if {@link isLanguageSupported} returns `true`\n * for the full language (including the dash). If that returns false the\n * first part of the language (up to the dash) will be tried as an extension.\n *\n * @param basename The basename for which the file should be loaded.\n * @param lan The language for which the file should be loaded.\n */\nTranslations.getSpecialBundle = (basename, lan) => {\n    if (!TranslationsConfig.getLanguages() || !Translations.isLanguageSupported(lan)) {\n        const dash = lan.indexOf('-');\n        if (dash > 0) {\n            lan = lan.substring(0, dash);\n        }\n    }\n    if (Translations.loadSpecialBundle &&\n        Translations.isLanguageSupported(lan) &&\n        lan != TranslationsConfig.getDefaultLanguage()) {\n        return `${basename}_${lan}${Translations.extension}`;\n    }\n    return null;\n};\n/**\n * Adds the default and current language properties file for the specified\n * basename. Existing keys are overridden as new files are added. If no\n * callback is used then the request is synchronous.\n *\n * Example:\n *\n * At application startup, additional resources may be\n * added using the following code:\n *\n * ```javascript\n * Translations.add('resources/editor');\n * ```\n *\n * @param basename The basename for which the file should be loaded.\n * @param lan The language for which the file should be loaded.\n * @param callback Optional callback for asynchronous loading.\n */\nTranslations.add = (basename = null, lan = null, callback = null) => {\n    lan ?? (lan = TranslationsConfig.getLanguage()?.toLowerCase() ?? NONE);\n    if (!isNullish(basename) && lan !== NONE) {\n        const defaultBundle = Translations.getDefaultBundle(basename, lan);\n        const specialBundle = Translations.getSpecialBundle(basename, lan);\n        const loadSpecialBundle = () => {\n            if (specialBundle != null) {\n                if (callback) {\n                    get(specialBundle, (req) => {\n                        Translations.parse(req.getText());\n                        callback();\n                    }, () => {\n                        callback();\n                    });\n                }\n                else {\n                    try {\n                        const req = load(specialBundle);\n                        if (req.isReady()) {\n                            Translations.parse(req.getText());\n                        }\n                    }\n                    catch (e) {\n                        // ignore\n                    }\n                }\n            }\n            else if (callback != null) {\n                callback();\n            }\n        };\n        if (defaultBundle != null) {\n            if (callback) {\n                get(defaultBundle, (req) => {\n                    Translations.parse(req.getText());\n                    loadSpecialBundle();\n                }, () => {\n                    loadSpecialBundle();\n                });\n            }\n            else {\n                try {\n                    const req = load(defaultBundle);\n                    if (req.isReady()) {\n                        Translations.parse(req.getText());\n                    }\n                    loadSpecialBundle();\n                }\n                catch (e) {\n                    // ignore\n                }\n            }\n        }\n        else {\n            // Overlays the language specific file (_lan-extension)\n            loadSpecialBundle();\n        }\n    }\n};\n/**\n * Parses the key, value pairs in the specified\n * text and stores them as local resources.\n */\nTranslations.parse = (text) => {\n    if (text != null) {\n        const lines = text.split('\\n');\n        for (let i = 0; i < lines.length; i += 1) {\n            if (lines[i].charAt(0) !== '#') {\n                const index = lines[i].indexOf('=');\n                if (index > 0) {\n                    const key = lines[i].substring(0, index);\n                    let idx = lines[i].length;\n                    if (lines[i].charCodeAt(idx - 1) === 13) {\n                        idx--;\n                    }\n                    let value = lines[i].substring(index + 1, idx);\n                    if (Translations.resourcesEncoded) {\n                        value = value.replace(/\\\\(?=u[a-fA-F\\d]{4})/g, '%');\n                        Translations.resources[key] = unescape(value);\n                    }\n                    else {\n                        Translations.resources[key] = value;\n                    }\n                }\n            }\n        }\n    }\n};\n/**\n * Returns the value for the specified resource key.\n *\n * Example:\n * To read the value for 'welcomeMessage', use the following:\n * ```javascript\n * let result = Translations.get('welcomeMessage') || '';\n * ```\n *\n * This would require an entry of the following form in\n * one of the English language resource files:\n * ```javascript\n * welcomeMessage=Welcome to mxGraph!\n * ```\n *\n * The part behind the || is the string value to be used if the given\n * resource is not available.\n *\n * @param key String that represents the key of the resource to be returned.\n * @param params Array of the values for the placeholders of the form {1}...{n}\n * to be replaced with in the resulting string.\n * @param defaultValue Optional string that specifies the default return value.\n */\nTranslations.get = (key = null, params = null, defaultValue = null) => {\n    let value = key ? Translations.resources[key] : null;\n    // Applies the default value if no resource was found\n    if (isNullish(value)) {\n        value = defaultValue;\n    }\n    // Replaces the placeholders with the values in the array\n    if (!isNullish(value) && params) {\n        value = Translations.replacePlaceholders(value, params);\n    }\n    return value;\n};\n/**\n * Replaces the given placeholders with the given parameters.\n *\n * @param value String that contains the placeholders.\n * @param params Array of the values for the placeholders of the form {1}...{n}\n * to be replaced with in the resulting string.\n */\nTranslations.replacePlaceholders = (value, params) => {\n    const result = [];\n    let index = null;\n    for (let i = 0; i < value.length; i += 1) {\n        const c = value.charAt(i);\n        if (c === '{') {\n            index = '';\n        }\n        else if (index != null && c === '}') {\n            index = parseInt(index) - 1;\n            if (index >= 0 && index < params.length) {\n                result.push(params[index]);\n            }\n            index = null;\n        }\n        else if (index != null) {\n            index += c;\n        }\n        else {\n            result.push(c);\n        }\n    }\n    return result.join('');\n};\n/**\n * Loads all required resources asynchronously. Use this to load the graph and editor resources.\n *\n * @param callback Callback function for asynchronous loading.\n */\nTranslations.loadResources = (callback) => {\n    Translations.add(`${Client.basePath}/resources/editor`, null, () => {\n        Translations.add(`${Client.basePath}/resources/graph`, null, callback);\n    });\n};\nexport default Translations;\n/**\n * A {@link I18nProvider} that uses {@link Translations} to manage translations.\n *\n * The configuration is done using {@link TranslationsConfig}.\n *\n * @experimental subject to change or removal. The I18n system may be modified in the future without prior notice.\n * @category I18n\n * @since 0.17.0\n */\nexport class TranslationsAsI18n {\n    isEnabled() {\n        return TranslationsConfig.isEnabled();\n    }\n    get(key, params, defaultValue) {\n        return Translations.get(key, params, defaultValue);\n    }\n    addResource(basename, language, callback) {\n        Translations.add(basename, language, callback);\n    }\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalEvent from '../view/event/InternalEvent';\nimport { write } from './domUtils';\n/**\n * Adds a hyperlink to the specified parent that invokes action on the\n * specified editor.\n *\n * @param parent DOM node to contain the new link.\n * @param text String that is used as the link label.\n * @param editor <Editor> that will execute the action.\n * @param action String that defines the name of the action to be executed.\n * @param pad Optional left-padding for the link. Default is 0.\n */\nexport const linkAction = (parent, text, editor, action, pad = 0) => {\n    return link(parent, text, () => {\n        editor.execute(action);\n    }, pad);\n};\n/**\n * Adds a hyperlink to the specified parent that invokes the specified\n * function on the editor passing along the specified argument. The\n * function name is the name of a function of the editor instance,\n * not an action name.\n *\n * @param parent DOM node to contain the new link.\n * @param text String that is used as the link label.\n * @param editor <Editor> instance to execute the function on.\n * @param functName String that represents the name of the function.\n * @param arg Object that represents the argument to the function.\n * @param pad Optional left-padding for the link. Default is 0.\n */\nexport const linkInvoke = (parent, text, editor, functName, arg, pad = 0) => {\n    return link(parent, text, () => {\n        // @ts-ignore\n        editor[functName](arg);\n    }, pad);\n};\n/**\n * Adds a hyperlink to the specified parent and invokes the given function\n * when the link is clicked.\n *\n * @param parent DOM node to contain the new link.\n * @param text String that is used as the link label.\n * @param funct Function to execute when the link is clicked.\n * @param pad Optional left-padding for the link. Default is 0.\n */\nexport const link = (parent, text, funct, pad = 0) => {\n    const a = document.createElement('span');\n    a.style.color = 'blue';\n    a.style.textDecoration = 'underline';\n    a.style.cursor = 'pointer';\n    a.style.paddingLeft = `${pad}px`;\n    InternalEvent.addListener(a, 'click', funct);\n    write(a, text);\n    if (parent != null) {\n        parent.appendChild(a);\n    }\n    return a;\n};\n/**\n * Returns a new button with the given level and function as an onclick event handler.\n *\n * ```javascript\n * document.body.appendChild('Test', (evt) => {\n *   alert('Hello, World!');\n * });\n * ```\n *\n * @param label String that represents the label of the button.\n * @param funct Function to be called if the button is pressed.\n * @param doc Optional document to be used for creating the button. Default is the current document.\n */\nexport const button = (label, funct, doc = null) => {\n    doc = doc != null ? doc : document;\n    const button = doc.createElement('button');\n    write(button, label);\n    InternalEvent.addListener(button, 'click', (evt) => {\n        funct(evt);\n    });\n    return button;\n};\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from '../event/EventSource';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\n/**\n * Implements a basic animation in JavaScript.\n *\n * @category Animation\n */\nclass Animation extends EventSource {\n    constructor(delay = 20) {\n        super();\n        /**\n         * Reference to the thread while the animation is running.\n         */\n        this.thread = null;\n        this.delay = delay;\n    }\n    /**\n     * Returns true if the animation is running.\n     */\n    isRunning() {\n        return this.thread != null;\n    }\n    /**\n     * Starts the animation by repeatedly invoking updateAnimation.\n     */\n    startAnimation() {\n        if (this.thread == null) {\n            this.thread = window.setInterval(this.updateAnimation.bind(this), this.delay);\n        }\n    }\n    /**\n     * Hook for subclassers to implement the animation. Invoke stopAnimation\n     * when finished, startAnimation to resume. This is called whenever the\n     * timer fires and fires an mxEvent.EXECUTE event with no properties.\n     */\n    updateAnimation() {\n        this.fireEvent(new EventObject(InternalEvent.EXECUTE));\n    }\n    /**\n     * Stops the animation by deleting the timer and fires an {@link Event#DONE}.\n     */\n    stopAnimation() {\n        if (this.thread != null) {\n            window.clearInterval(this.thread);\n            this.thread = null;\n            this.fireEvent(new EventObject(InternalEvent.DONE));\n        }\n    }\n}\nexport default Animation;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { setOpacity } from '../../util/styleUtils';\nimport GeometryChange from '../undoable_changes/GeometryChange';\nimport TerminalChange from '../undoable_changes/TerminalChange';\nimport ValueChange from '../undoable_changes/ValueChange';\nimport ChildChange from '../undoable_changes/ChildChange';\nimport StyleChange from '../undoable_changes/StyleChange';\n/**\n * Provides animation effects.\n *\n * @category Animation\n */\nclass Effects {\n    /**\n     * Asynchronous animated move operation. See also: <Morphing>.\n     *\n     * @example\n     * ```javascript\n     * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n     * {\n     *   var changes = evt.getProperty('edit').changes;\n     *\n     *   if (changes.length < 10)\n     *   {\n     *     Effects.animateChanges(graph, changes);\n     *   }\n     * });\n     * ```\n     *\n     * @param graph - {@link AbstractGraph} that received the changes.\n     * @param changes - Array of changes to be animated.\n     * @param done - Optional function argument that is invoked after the\n     * last step of the animation.\n     */\n    static animateChanges(graph, changes, done) {\n        const maxStep = 10;\n        let step = 0;\n        const animate = () => {\n            let isRequired = false;\n            for (let i = 0; i < changes.length; i += 1) {\n                const change = changes[i];\n                if (change instanceof GeometryChange ||\n                    change instanceof TerminalChange ||\n                    change instanceof ValueChange ||\n                    change instanceof ChildChange ||\n                    change instanceof StyleChange) {\n                    // @ts-ignore\n                    const state = graph.getView().getState(change.cell || change.child, false);\n                    if (state != null) {\n                        isRequired = true;\n                        if (change.constructor !== GeometryChange || change.cell.isEdge()) {\n                            setOpacity(state.shape.node, (100 * step) / maxStep);\n                        }\n                        else {\n                            const { scale } = graph.getView();\n                            const geometry = change.geometry;\n                            const previous = change.previous;\n                            const dx = (geometry.x - previous.x) * scale;\n                            const dy = (geometry.y - previous.y) * scale;\n                            const sx = (geometry.width - previous.width) * scale;\n                            const sy = (geometry.height - previous.height) * scale;\n                            if (step === 0) {\n                                state.x -= dx;\n                                state.y -= dy;\n                                state.width -= sx;\n                                state.height -= sy;\n                            }\n                            else {\n                                state.x += dx / maxStep;\n                                state.y += dy / maxStep;\n                                state.width += sx / maxStep;\n                                state.height += sy / maxStep;\n                            }\n                            graph.cellRenderer.redraw(state);\n                            // Fades all connected edges and children\n                            Effects.cascadeOpacity(graph, change.cell, (100 * step) / maxStep);\n                        }\n                    }\n                }\n            }\n            if (step < maxStep && isRequired) {\n                step++;\n                window.setTimeout(animate, delay);\n            }\n            else if (done != null) {\n                done();\n            }\n        };\n        const delay = 30;\n        animate();\n    }\n    /**\n     * Sets the opacity on the given cell and its descendants.\n     *\n     * @param graph - {@link AbstractGraph} that contains the cells.\n     * @param cell - {@link Cell} to set the opacity for.\n     * @param opacity - New value for the opacity in %.\n     */\n    static cascadeOpacity(graph, cell, opacity) {\n        // Fades all children\n        const childCount = cell.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            const child = cell.getChildAt(i);\n            const childState = graph.getView().getState(child);\n            if (childState != null) {\n                setOpacity(childState.shape.node, opacity);\n                Effects.cascadeOpacity(graph, child, opacity);\n            }\n        }\n        // Fades all connected edges\n        const edges = cell.getEdges();\n        if (edges != null) {\n            for (let i = 0; i < edges.length; i += 1) {\n                const edgeState = graph.getView().getState(edges[i]);\n                if (edgeState != null) {\n                    setOpacity(edgeState.shape.node, opacity);\n                }\n            }\n        }\n    }\n    /**\n     * Asynchronous fade-out operation.\n     */\n    static fadeOut(node, from, remove, step, delay, isEnabled) {\n        step = step || 40;\n        delay = delay || 30;\n        let opacity = from || 100;\n        setOpacity(node, opacity);\n        if (isEnabled || isEnabled == null) {\n            const f = () => {\n                opacity = Math.max(opacity - step, 0);\n                setOpacity(node, opacity);\n                if (opacity > 0) {\n                    window.setTimeout(f, delay);\n                }\n                else {\n                    node.style.visibility = 'hidden';\n                    if (remove && node.parentNode) {\n                        node.parentNode.removeChild(node);\n                    }\n                }\n            };\n            window.setTimeout(f, delay);\n        }\n        else {\n            node.style.visibility = 'hidden';\n            if (remove && node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        }\n    }\n}\nexport default Effects;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport Dictionary from '../../util/Dictionary';\n/**\n * Implements a live preview for moving cells.\n */\nclass CellStatePreview {\n    constructor(graph) {\n        /**\n         * Contains the number of entries in the map.\n         */\n        this.count = 0;\n        this.deltas = new Dictionary();\n        this.graph = graph;\n    }\n    /**\n     * Returns true if this contains no entries.\n     */\n    isEmpty() {\n        return this.count === 0;\n    }\n    /**\n     *\n     * @param {CellState} state\n     * @param {number} dx\n     * @param {number} dy\n     * @param {boolean} add\n     * @param {boolean} includeEdges\n     * @return {*}  {mxPoint}\n     */\n    moveState(state, dx, dy, add = true, includeEdges = true) {\n        let delta = this.deltas.get(state.cell);\n        if (delta == null) {\n            // Note: Deltas stores the point and the state since the key is a string.\n            delta = { point: new Point(dx, dy), state };\n            this.deltas.put(state.cell, delta);\n            this.count++;\n        }\n        else if (add) {\n            delta.point.x += dx;\n            delta.point.y += dy;\n        }\n        else {\n            delta.point.x = dx;\n            delta.point.y = dy;\n        }\n        if (includeEdges) {\n            this.addEdges(state);\n        }\n        return delta.point;\n    }\n    /**\n     *\n     * @param {Function} visitor\n     */\n    show(visitor = null) {\n        this.deltas.visit((key, delta) => {\n            this.translateState(delta.state, delta.point.x, delta.point.y);\n        });\n        this.deltas.visit((key, delta) => {\n            this.revalidateState(delta.state, delta.point.x, delta.point.y, visitor);\n        });\n    }\n    /**\n     *\n     * @param {CellState} state\n     * @param {number} dx\n     * @param {number} dy\n     */\n    translateState(state, dx, dy) {\n        if (state != null) {\n            if (state.cell.isVertex()) {\n                state.view.updateCellState(state);\n                const geo = state.cell.getGeometry();\n                // Moves selection cells and non-relative vertices in\n                // the first phase so that edge terminal points will\n                // be updated in the second phase\n                if ((dx !== 0 || dy !== 0) &&\n                    geo != null &&\n                    (!geo.relative || this.deltas.get(state.cell) != null)) {\n                    state.x += dx;\n                    state.y += dy;\n                }\n            }\n            for (const child of state.cell.getChildren()) {\n                this.translateState(state.view.getState(child), dx, dy);\n            }\n        }\n    }\n    /**\n     *\n     * @param {CellState} state\n     * @param {number} dx\n     * @param {number} dy\n     * @param {Function} visitor\n     */\n    revalidateState(state, dx, dy, visitor = null) {\n        // Updates the edge terminal points and restores the\n        // (relative) positions of any (relative) children\n        if (state.cell.isEdge()) {\n            state.view.updateCellState(state);\n        }\n        const geo = state.cell.getGeometry();\n        const pState = state.view.getState(state.cell.getParent());\n        // Moves selection vertices which are relative\n        if ((dx !== 0 || dy !== 0) &&\n            geo != null &&\n            geo.relative &&\n            state.cell.isVertex() &&\n            (pState == null || pState.cell.isVertex() || this.deltas.get(state.cell) != null)) {\n            state.x += dx;\n            state.y += dy;\n        }\n        this.graph.cellRenderer.redraw(state);\n        // Invokes the visitor on the given state\n        if (visitor != null) {\n            visitor(state);\n        }\n        for (const child of state.cell.getChildren()) {\n            this.revalidateState(this.graph.view.getState(child), dx, dy, visitor);\n        }\n    }\n    /**\n     *\n     * @param {CellState} state\n     */\n    addEdges(state) {\n        const edgeCount = state.cell.getEdgeCount();\n        for (let i = 0; i < edgeCount; i += 1) {\n            const s = state.view.getState(state.cell.getEdgeAt(i));\n            if (s != null) {\n                this.moveState(s, 0, 0);\n            }\n        }\n    }\n}\nexport default CellStatePreview;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport CellStatePreview from '../cell/CellStatePreview';\nimport Animation from './Animation';\n/**\n * Implements animation for morphing cells.\n *\n * Here is an example of using this class for animating the result of a layout algorithm:\n *\n * ```javascript\n * graph.getDataModel().beginUpdate();\n * try {\n *   const circleLayout = new CircleLayout(graph);\n *   circleLayout.execute(graph.getDefaultParent());\n * } finally {\n *   const morph = new Morphing(graph);\n *   morph.addListener(mxEvent.DONE, () => {\n *     graph.getDataModel().endUpdate();\n *   });\n *\n *   morph.startAnimation();\n * }\n * ```\n *\n * @category Animation\n */\nclass Morphing extends Animation {\n    /**\n     * Constructs an animation.\n     *\n     * @param graph Reference to the enclosing {@link AbstractGraph}.\n     * @param steps Optional number of steps in the morphing animation. Default is 6.\n     * @param ease Optional easing constant for the animation. Default is 1.5.\n     * @param delay Optional delay between the animation steps. Passed to {@link Animation}.\n     */\n    constructor(graph, steps = 6, ease = 1.5, delay) {\n        super(delay);\n        /**\n         * Contains the current step.\n         */\n        this.step = 0;\n        /**\n         * Optional array of cells to be animated. If this is not specified\n         * then all cells are checked and animated if they have been moved\n         * in the current transaction.\n         */\n        this.cells = null;\n        this.graph = graph;\n        this.steps = steps;\n        this.ease = ease;\n    }\n    /**\n     * Animation step.\n     */\n    updateAnimation() {\n        super.updateAnimation();\n        const move = new CellStatePreview(this.graph);\n        if (this.cells != null) {\n            // Animates the given cells individually without recursion\n            for (const cell of this.cells) {\n                this.animateCell(cell, move, false);\n            }\n        }\n        else {\n            // Animates all changed cells by using recursion to find\n            // the changed cells but not for the animation itself\n            this.animateCell(this.graph.getDataModel().getRoot(), move, true);\n        }\n        this.show(move);\n        if (move.isEmpty() || this.step++ >= this.steps) {\n            this.stopAnimation();\n        }\n    }\n    /**\n     * Shows the changes in the given <CellStatePreview>.\n     */\n    show(move) {\n        move.show();\n    }\n    /**\n     * Animates the given cell state using <CellStatePreview.moveState>.\n     */\n    animateCell(cell, move, recurse = false) {\n        const state = this.graph.getView().getState(cell);\n        let delta = null;\n        if (state != null) {\n            // Moves the animated state from where it will be after the model\n            // change by subtracting the given delta vector from that location\n            delta = this.getDelta(state);\n            if (cell.isVertex() && (delta.x != 0 || delta.y != 0)) {\n                const translate = this.graph.view.getTranslate();\n                const scale = this.graph.view.getScale();\n                delta.x += translate.x * scale;\n                delta.y += translate.y * scale;\n                move.moveState(state, -delta.x / this.ease, -delta.y / this.ease);\n            }\n        }\n        if (recurse && !this.stopRecursion(state, delta)) {\n            const childCount = cell.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                this.animateCell(cell.getChildAt(i), move, recurse);\n            }\n        }\n    }\n    /**\n     * Returns true if the animation should not recursively find more\n     * deltas for children if the given parent state has been animated.\n     */\n    stopRecursion(state = null, delta = null) {\n        return delta != null && (delta.x != 0 || delta.y != 0);\n    }\n    /**\n     * Returns the vector between the current rendered state and the future\n     * location of the state after the display will be updated.\n     */\n    getDelta(state) {\n        const origin = this.getOriginForCell(state.cell);\n        const translate = this.graph.getView().getTranslate();\n        const scale = this.graph.getView().getScale();\n        const x = state.x / scale - translate.x;\n        const y = state.y / scale - translate.y;\n        return new Point((origin.x - x) * scale, (origin.y - y) * scale);\n    }\n    /**\n     * Returns the top, left corner of the given cell. TODO: Improve performance\n     * by using caching inside this method as the result per cell never changes\n     * during the lifecycle of this object.\n     */\n    getOriginForCell(cell = null) {\n        let result = null;\n        if (cell != null) {\n            const parent = cell.getParent();\n            const geo = cell.getGeometry();\n            result = this.getOriginForCell(parent);\n            // TODO: Handle offsets\n            if (geo != null && parent != null) {\n                if (geo.relative) {\n                    const pgeo = parent.getGeometry();\n                    if (pgeo != null) {\n                        result.x += geo.x * pgeo.width;\n                        result.y += geo.y * pgeo.height;\n                    }\n                }\n                else {\n                    result.x += geo.x;\n                    result.y += geo.y;\n                }\n            }\n        }\n        if (result == null) {\n            const t = this.graph.view.getTranslate();\n            result = new Point(-t.x, -t.y);\n        }\n        return result;\n    }\n}\nexport default Morphing;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport AbstractCanvas2D from './AbstractCanvas2D';\nimport { DEFAULT_FONTFAMILY, DEFAULT_FONTSIZE, NONE } from '../../util/Constants';\nimport { getOuterHtml, isNode } from '../../util/domUtils';\nimport { StyleDefaultsConfig } from '../../util/config';\n/**\n * @category Serialization\n */\nclass XmlCanvas2D extends AbstractCanvas2D {\n    constructor(root) {\n        super();\n        /**\n         * Specifies if text output should be enabled.\n         * @default true\n         */\n        this.textEnabled = true;\n        /**\n         * Specifies if the output should be compressed by removing redundant calls.\n         * @default true\n         */\n        this.compressed = true;\n        this.root = root;\n        // Writes default settings;\n        this.writeDefaults();\n    }\n    /**\n     * Writes the rendering defaults to {@link root}:\n     */\n    writeDefaults() {\n        let elem;\n        // Writes font defaults\n        elem = this.createElement('fontfamily');\n        elem.setAttribute('family', DEFAULT_FONTFAMILY);\n        this.root.appendChild(elem);\n        elem = this.createElement('fontsize');\n        elem.setAttribute('size', String(DEFAULT_FONTSIZE));\n        this.root.appendChild(elem);\n        // Writes shadow defaults\n        elem = this.createElement('shadowcolor');\n        elem.setAttribute('color', StyleDefaultsConfig.shadowColor);\n        this.root.appendChild(elem);\n        elem = this.createElement('shadowalpha');\n        elem.setAttribute('alpha', String(StyleDefaultsConfig.shadowOpacity));\n        this.root.appendChild(elem);\n        elem = this.createElement('shadowoffset');\n        elem.setAttribute('dx', String(StyleDefaultsConfig.shadowOffsetX));\n        elem.setAttribute('dy', String(StyleDefaultsConfig.shadowOffsetY));\n        this.root.appendChild(elem);\n    }\n    /**\n     * Returns a formatted number with 2 decimal places.\n     */\n    format(value) {\n        if (typeof value === 'string') {\n            return parseFloat(parseFloat(value).toFixed(2));\n        }\n        else {\n            return parseFloat(value.toFixed(2));\n        }\n    }\n    /**\n     * Creates the given element using the owner document of {@link root}.\n     */\n    createElement(name) {\n        return this.root.ownerDocument.createElement(name);\n    }\n    /**\n     * Saves the drawing state.\n     */\n    save() {\n        if (this.compressed) {\n            super.save();\n        }\n        this.root.appendChild(this.createElement('save'));\n    }\n    /**\n     * Restores the drawing state.\n     */\n    restore() {\n        if (this.compressed) {\n            super.restore();\n        }\n        this.root.appendChild(this.createElement('restore'));\n    }\n    /**\n     * Scales the output.\n     *\n     * @param scale Number that represents the scale where 1 is equal to 100%.\n     */\n    scale(value) {\n        const elem = this.createElement('scale');\n        elem.setAttribute('scale', String(value));\n        this.root.appendChild(elem);\n    }\n    /**\n     * Translates the output.\n     *\n     * @param dx Number that specifies the horizontal translation.\n     * @param dy Number that specifies the vertical translation.\n     */\n    translate(dx, dy) {\n        const elem = this.createElement('translate');\n        elem.setAttribute('dx', String(this.format(dx)));\n        elem.setAttribute('dy', String(this.format(dy)));\n        this.root.appendChild(elem);\n    }\n    /**\n     * Rotates and/or flips the output around a given center. (Note: Due to\n     * limitations in VML, the rotation cannot be concatenated.)\n     *\n     * @param theta Number that represents the angle of the rotation (in degrees).\n     * @param flipH Boolean indicating if the output should be flipped horizontally.\n     * @param flipV Boolean indicating if the output should be flipped vertically.\n     * @param cx Number that represents the x-coordinate of the rotation center.\n     * @param cy Number that represents the y-coordinate of the rotation center.\n     */\n    rotate(theta, flipH, flipV, cx, cy) {\n        const elem = this.createElement('rotate');\n        if (theta !== 0 || flipH || flipV) {\n            elem.setAttribute('theta', String(this.format(theta)));\n            elem.setAttribute('flipH', flipH ? '1' : '0');\n            elem.setAttribute('flipV', flipV ? '1' : '0');\n            elem.setAttribute('cx', String(this.format(cx)));\n            elem.setAttribute('cy', String(this.format(cy)));\n            this.root.appendChild(elem);\n        }\n    }\n    /**\n     * Sets the current alpha.\n     *\n     * @param value Number that represents the new alpha. Possible values are between\n     * 1 (opaque) and 0 (transparent).\n     */\n    setAlpha(value) {\n        if (this.compressed) {\n            if (this.state.alpha === value) {\n                return;\n            }\n            super.setAlpha(value);\n        }\n        const elem = this.createElement('alpha');\n        elem.setAttribute('alpha', String(this.format(value)));\n        this.root.appendChild(elem);\n    }\n    /**\n     * Sets the current fill alpha.\n     *\n     * @param value Number that represents the new fill alpha. Possible values are between\n     * 1 (opaque) and 0 (transparent).\n     */\n    setFillAlpha(value) {\n        if (this.compressed) {\n            if (this.state.fillAlpha === value) {\n                return;\n            }\n            super.setFillAlpha(value);\n        }\n        const elem = this.createElement('fillalpha');\n        elem.setAttribute('alpha', String(this.format(value)));\n        this.root.appendChild(elem);\n    }\n    /**\n     * Sets the current stroke alpha.\n     *\n     * @param value Number that represents the new stroke alpha. Possible values are between\n     * 1 (opaque) and 0 (transparent).\n     */\n    setStrokeAlpha(value) {\n        if (this.compressed) {\n            if (this.state.strokeAlpha === value) {\n                return;\n            }\n            super.setStrokeAlpha(value);\n        }\n        const elem = this.createElement('strokealpha');\n        elem.setAttribute('alpha', String(this.format(value)));\n        this.root.appendChild(elem);\n    }\n    /**\n     * Sets the current fill color.\n     *\n     * @param value Hexadecimal representation of the color or 'none'.\n     */\n    setFillColor(value = null) {\n        if (value === NONE) {\n            value = null;\n        }\n        if (this.compressed) {\n            if (this.state.fillColor === value) {\n                return;\n            }\n            super.setFillColor(value);\n        }\n        const elem = this.createElement('fillcolor');\n        elem.setAttribute('color', value != null ? value : NONE);\n        this.root.appendChild(elem);\n    }\n    /**\n     * Sets the gradient. Note that the coordinates may be ignored by some implementations.\n     *\n     * @param color1 Hexadecimal representation of the start color.\n     * @param color2 Hexadecimal representation of the end color.\n     * @param x X-coordinate of the gradient region.\n     * @param y y-coordinate of the gradient region.\n     * @param w Width of the gradient region.\n     * @param h Height of the gradient region.\n     * @param direction One of {@link Constants#DIRECTION_NORTH}, {@link Constants#DIRECTION_EAST},\n     * {@link Constants#DIRECTION_SOUTH} or {@link Constants#DIRECTION_WEST}.\n     * @param alpha1 Optional alpha of the start color. Default is 1. Possible values\n     * are between 1 (opaque) and 0 (transparent).\n     * @param alpha2 Optional alpha of the end color. Default is 1. Possible values\n     * are between 1 (opaque) and 0 (transparent).\n     */\n    setGradient(color1, color2, x, y, w, h, direction, alpha1 = 1.0, alpha2 = 1.0) {\n        if (color1 != null && color2 != null) {\n            super.setGradient(color1, color2, x, y, w, h, direction, alpha1, alpha2);\n            const elem = this.createElement('gradient');\n            elem.setAttribute('c1', color1);\n            elem.setAttribute('c2', color2);\n            elem.setAttribute('x', String(this.format(x)));\n            elem.setAttribute('y', String(this.format(y)));\n            elem.setAttribute('w', String(this.format(w)));\n            elem.setAttribute('h', String(this.format(h)));\n            // Default direction is south\n            if (direction != null) {\n                elem.setAttribute('direction', direction);\n            }\n            if (alpha1 != null) {\n                elem.setAttribute('alpha1', String(alpha1));\n            }\n            if (alpha2 != null) {\n                elem.setAttribute('alpha2', String(alpha2));\n            }\n            this.root.appendChild(elem);\n        }\n    }\n    /**\n     * Sets the current stroke color.\n     *\n     * @param value Hexadecimal representation of the color or 'none'.\n     */\n    setStrokeColor(value = null) {\n        if (value === NONE) {\n            value = null;\n        }\n        if (this.compressed) {\n            if (this.state.strokeColor === value) {\n                return;\n            }\n            super.setStrokeColor(value);\n        }\n        const elem = this.createElement('strokecolor');\n        elem.setAttribute('color', value != null ? value : NONE);\n        this.root.appendChild(elem);\n    }\n    /**\n     * Sets the current stroke width.\n     *\n     * @param value Numeric representation of the stroke width.\n     */\n    setStrokeWidth(value) {\n        if (this.compressed) {\n            if (this.state.strokeWidth === value) {\n                return;\n            }\n            super.setStrokeWidth(value);\n        }\n        const elem = this.createElement('strokewidth');\n        elem.setAttribute('width', String(this.format(value)));\n        this.root.appendChild(elem);\n    }\n    /**\n     * Enables or disables dashed lines.\n     *\n     * @param value Boolean that specifies if dashed lines should be enabled.\n     * @param value Boolean that specifies if the stroke width should be ignored\n     * for the dash pattern.\n     * @default false\n     */\n    setDashed(value, fixDash) {\n        if (this.compressed) {\n            if (this.state.dashed === value) {\n                return;\n            }\n            super.setDashed(value, fixDash);\n        }\n        const elem = this.createElement('dashed');\n        elem.setAttribute('dashed', value ? '1' : '0');\n        if (fixDash != null) {\n            elem.setAttribute('fixDash', fixDash ? '1' : '0');\n        }\n        this.root.appendChild(elem);\n    }\n    /**\n     * Sets the current dash pattern.\n     * @default '3 3'\n     *\n     * @param value String that represents the dash pattern, which is a sequence of\n     * numbers defining the length of the dashes and the length of the spaces\n     * between the dashes. The lengths are relative to the line width - a length\n     * of 1 is equals to the line width.\n     */\n    setDashPattern(value) {\n        if (this.compressed) {\n            if (this.state.dashPattern === value) {\n                return;\n            }\n            super.setDashPattern(value);\n        }\n        const elem = this.createElement('dashpattern');\n        elem.setAttribute('pattern', value);\n        this.root.appendChild(elem);\n    }\n    /**\n     * Sets the line cap.\n     * @default 'flat' which corresponds to 'butt' in SVG\n     *\n     * @param value String that represents the line cap. Possible values are flat, round\n     * and square.\n     */\n    setLineCap(value) {\n        if (this.compressed) {\n            if (this.state.lineCap === value) {\n                return;\n            }\n            super.setLineCap(value);\n        }\n        const elem = this.createElement('linecap');\n        elem.setAttribute('cap', value);\n        this.root.appendChild(elem);\n    }\n    /**\n     * Sets the line join.\n     * @default 'miter'\n     *\n     * @param value String that represents the line join. Possible values are miter,\n     * round and bevel.\n     */\n    setLineJoin(value) {\n        if (this.compressed) {\n            if (this.state.lineJoin === value) {\n                return;\n            }\n            super.setLineJoin(value);\n        }\n        const elem = this.createElement('linejoin');\n        elem.setAttribute('join', value);\n        this.root.appendChild(elem);\n    }\n    /**\n     * Sets the miter limit.\n     * @default 10\n     *\n     * @param value Number that represents the miter limit.\n     */\n    setMiterLimit(value) {\n        if (this.compressed) {\n            if (this.state.miterLimit === value) {\n                return;\n            }\n            super.setMiterLimit(value);\n        }\n        const elem = this.createElement('miterlimit');\n        elem.setAttribute('limit', String(value));\n        this.root.appendChild(elem);\n    }\n    /**\n     * Sets the current font color.\n     * @default '#000000'\n     *\n     * @param value Hexadecimal representation of the color or 'none'.\n     */\n    setFontColor(value = null) {\n        if (this.textEnabled) {\n            if (value === NONE) {\n                value = null;\n            }\n            if (this.compressed) {\n                if (this.state.fontColor === value) {\n                    return;\n                }\n                super.setFontColor(value);\n            }\n            const elem = this.createElement('fontcolor');\n            elem.setAttribute('color', value != null ? value : NONE);\n            this.root.appendChild(elem);\n        }\n    }\n    /**\n     * Sets the current font background color.\n     *\n     * @param value Hexadecimal representation of the color or 'none'.\n     */\n    setFontBackgroundColor(value = null) {\n        if (this.textEnabled) {\n            if (value === NONE) {\n                value = null;\n            }\n            if (this.compressed) {\n                if (this.state.fontBackgroundColor === value) {\n                    return;\n                }\n                super.setFontBackgroundColor(value);\n            }\n            const elem = this.createElement('fontbackgroundcolor');\n            elem.setAttribute('color', value != null ? value : NONE);\n            this.root.appendChild(elem);\n        }\n    }\n    /**\n     * Sets the current font border color.\n     *\n     * @param value Hexadecimal representation of the color or 'none'.\n     */\n    setFontBorderColor(value = null) {\n        if (this.textEnabled) {\n            if (value === NONE) {\n                value = null;\n            }\n            if (this.compressed) {\n                if (this.state.fontBorderColor === value) {\n                    return;\n                }\n                super.setFontBorderColor(value);\n            }\n            const elem = this.createElement('fontbordercolor');\n            elem.setAttribute('color', value != null ? value : NONE);\n            this.root.appendChild(elem);\n        }\n    }\n    /**\n     * Sets the current font size.\n     * @default {@link mxConstants.DEFAULT_FONTSIZE}\n     *\n     * @param value Numeric representation of the font size.\n     */\n    setFontSize(value) {\n        if (this.textEnabled) {\n            if (this.compressed) {\n                if (this.state.fontSize === value) {\n                    return;\n                }\n                super.setFontSize(value);\n            }\n            const elem = this.createElement('fontsize');\n            elem.setAttribute('size', String(value));\n            this.root.appendChild(elem);\n        }\n    }\n    /**\n     * Sets the current font family.\n     * @default {@link mxConstants.DEFAULT_FONTFAMILY}\n     *\n     * @param value String representation of the font family. This handles the same\n     * values as the CSS font-family property.\n     */\n    setFontFamily(value) {\n        if (this.textEnabled) {\n            if (this.compressed) {\n                if (this.state.fontFamily === value) {\n                    return;\n                }\n                super.setFontFamily(value);\n            }\n            const elem = this.createElement('fontfamily');\n            elem.setAttribute('family', value);\n            this.root.appendChild(elem);\n        }\n    }\n    /**\n     * Sets the current font style.\n     *\n     * @param value Numeric representation of the font family. This is the sum of the\n     * font styles from {@link mxConstants}.\n     */\n    setFontStyle(value = 0) {\n        if (this.textEnabled) {\n            if (value == null) {\n                value = 0;\n            }\n            if (this.compressed) {\n                if (this.state.fontStyle === value) {\n                    return;\n                }\n                super.setFontStyle(value);\n            }\n            const elem = this.createElement('fontstyle');\n            elem.setAttribute('style', String(value));\n            this.root.appendChild(elem);\n        }\n    }\n    /**\n     * Enables or disables shadows.\n     *\n     * @param value Boolean that specifies if shadows should be enabled.\n     */\n    setShadow(value) {\n        if (this.compressed) {\n            if (this.state.shadow === value) {\n                return;\n            }\n            super.setShadow(value);\n        }\n        const elem = this.createElement('shadow');\n        elem.setAttribute('enabled', value ? '1' : '0');\n        this.root.appendChild(elem);\n    }\n    setShadowColor(value = null) {\n        if (this.compressed) {\n            if (value === NONE) {\n                value = null;\n            }\n            if (this.state.shadowColor === value) {\n                return;\n            }\n            super.setShadowColor(value);\n        }\n        const elem = this.createElement('shadowcolor');\n        elem.setAttribute('color', value != null ? value : NONE);\n        this.root.appendChild(elem);\n    }\n    setShadowAlpha(value) {\n        if (this.compressed) {\n            if (this.state.shadowAlpha === value) {\n                return;\n            }\n            super.setShadowAlpha(value);\n        }\n        const elem = this.createElement('shadowalpha');\n        elem.setAttribute('alpha', String(value));\n        this.root.appendChild(elem);\n    }\n    setShadowOffset(dx, dy) {\n        if (this.compressed) {\n            if (this.state.shadowDx === dx && this.state.shadowDy === dy) {\n                return;\n            }\n            super.setShadowOffset(dx, dy);\n        }\n        const elem = this.createElement('shadowoffset');\n        elem.setAttribute('dx', String(dx));\n        elem.setAttribute('dy', String(dy));\n        this.root.appendChild(elem);\n    }\n    /**\n     * Puts a rectangle into the drawing buffer.\n     *\n     * @param x Number that represents the x-coordinate of the rectangle.\n     * @param y Number that represents the y-coordinate of the rectangle.\n     * @param w Number that represents the width of the rectangle.\n     * @param h Number that represents the height of the rectangle.\n     */\n    rect(x, y, w, h) {\n        const elem = this.createElement('rect');\n        elem.setAttribute('x', String(this.format(x)));\n        elem.setAttribute('y', String(this.format(y)));\n        elem.setAttribute('w', String(this.format(w)));\n        elem.setAttribute('h', String(this.format(h)));\n        this.root.appendChild(elem);\n    }\n    /**\n     * Puts a rounded rectangle into the drawing buffer.\n     *\n     * @param x Number that represents the x-coordinate of the rectangle.\n     * @param y Number that represents the y-coordinate of the rectangle.\n     * @param w Number that represents the width of the rectangle.\n     * @param h Number that represents the height of the rectangle.\n     * @param dx Number that represents the horizontal rounding.\n     * @param dy Number that represents the vertical rounding.\n     */\n    roundrect(x, y, w, h, dx, dy) {\n        const elem = this.createElement('roundrect');\n        elem.setAttribute('x', String(this.format(x)));\n        elem.setAttribute('y', String(this.format(y)));\n        elem.setAttribute('w', String(this.format(w)));\n        elem.setAttribute('h', String(this.format(h)));\n        elem.setAttribute('dx', String(this.format(dx)));\n        elem.setAttribute('dy', String(this.format(dy)));\n        this.root.appendChild(elem);\n    }\n    /**\n     * Puts an ellipse into the drawing buffer.\n     *\n     * @param x Number that represents the x-coordinate of the ellipse.\n     * @param y Number that represents the y-coordinate of the ellipse.\n     * @param w Number that represents the width of the ellipse.\n     * @param h Number that represents the height of the ellipse.\n     */\n    ellipse(x, y, w, h) {\n        const elem = this.createElement('ellipse');\n        elem.setAttribute('x', String(this.format(x)));\n        elem.setAttribute('y', String(this.format(y)));\n        elem.setAttribute('w', String(this.format(w)));\n        elem.setAttribute('h', String(this.format(h)));\n        this.root.appendChild(elem);\n    }\n    /**\n     * Paints an image.\n     *\n     * @param x Number that represents the x-coordinate of the image.\n     * @param y Number that represents the y-coordinate of the image.\n     * @param w Number that represents the width of the image.\n     * @param h Number that represents the height of the image.\n     * @param src String that specifies the URL of the image.\n     * @param aspect Boolean indicating if the aspect of the image should be preserved.\n     * @param flipH Boolean indicating if the image should be flipped horizontally.\n     * @param flipV Boolean indicating if the image should be flipped vertically.\n     */\n    image(x, y, w, h, src, aspect = true, flipH = false, flipV = false) {\n        src = this.converter.convert(src);\n        // LATER: Add option for embedding images as base64.\n        const elem = this.createElement('image');\n        elem.setAttribute('x', String(this.format(x)));\n        elem.setAttribute('y', String(this.format(y)));\n        elem.setAttribute('w', String(this.format(w)));\n        elem.setAttribute('h', String(this.format(h)));\n        elem.setAttribute('src', src);\n        elem.setAttribute('aspect', aspect ? '1' : '0');\n        elem.setAttribute('flipH', flipH ? '1' : '0');\n        elem.setAttribute('flipV', flipV ? '1' : '0');\n        this.root.appendChild(elem);\n    }\n    updateText() {\n        return;\n    }\n    /**\n     * Starts a new path and puts it into the drawing buffer.\n     */\n    begin() {\n        this.root.appendChild(this.createElement('begin'));\n        this.lastX = 0;\n        this.lastY = 0;\n    }\n    end() {\n        return;\n    }\n    /**\n     * Moves the current path the given point.\n     *\n     * @param x Number that represents the x-coordinate of the point.\n     * @param y Number that represents the y-coordinate of the point.\n     */\n    moveTo(x, y) {\n        const elem = this.createElement('move');\n        elem.setAttribute('x', String(this.format(x)));\n        elem.setAttribute('y', String(this.format(y)));\n        this.root.appendChild(elem);\n        this.lastX = x;\n        this.lastY = y;\n    }\n    /**\n     * Draws a line to the given coordinates.\n     *\n     * @param x Number that represents the x-coordinate of the endpoint.\n     * @param y Number that represents the y-coordinate of the endpoint.\n     */\n    lineTo(x, y) {\n        const elem = this.createElement('line');\n        elem.setAttribute('x', String(this.format(x)));\n        elem.setAttribute('y', String(this.format(y)));\n        this.root.appendChild(elem);\n        this.lastX = x;\n        this.lastY = y;\n    }\n    /**\n     * Adds a quadratic curve to the current path.\n     *\n     * @param x1 Number that represents the x-coordinate of the control point.\n     * @param y1 Number that represents the y-coordinate of the control point.\n     * @param x2 Number that represents the x-coordinate of the endpoint.\n     * @param y2 Number that represents the y-coordinate of the endpoint.\n     */\n    quadTo(x1, y1, x2, y2) {\n        const elem = this.createElement('quad');\n        elem.setAttribute('x1', String(this.format(x1)));\n        elem.setAttribute('y1', String(this.format(y1)));\n        elem.setAttribute('x2', String(this.format(x2)));\n        elem.setAttribute('y2', String(this.format(y2)));\n        this.root.appendChild(elem);\n        this.lastX = x2;\n        this.lastY = y2;\n    }\n    /**\n     * Adds a bezier curve to the current path.\n     *\n     * @param x1 Number that represents the x-coordinate of the first control point.\n     * @param y1 Number that represents the y-coordinate of the first control point.\n     * @param x2 Number that represents the x-coordinate of the second control point.\n     * @param y2 Number that represents the y-coordinate of the second control point.\n     * @param x3 Number that represents the x-coordinate of the endpoint.\n     * @param y3 Number that represents the y-coordinate of the endpoint.\n     */\n    curveTo(x1, y1, x2, y2, x3, y3) {\n        const elem = this.createElement('curve');\n        elem.setAttribute('x1', String(this.format(x1)));\n        elem.setAttribute('y1', String(this.format(y1)));\n        elem.setAttribute('x2', String(this.format(x2)));\n        elem.setAttribute('y2', String(this.format(y2)));\n        elem.setAttribute('x3', String(this.format(x3)));\n        elem.setAttribute('y3', String(this.format(y3)));\n        this.root.appendChild(elem);\n        this.lastX = x3;\n        this.lastY = y3;\n    }\n    /**\n     * Closes the current path.\n     */\n    close() {\n        this.root.appendChild(this.createElement('close'));\n    }\n    /**\n     * Paints the given text. Possible values for format are empty string for\n     * plain text and html for HTML markup. Background and border color as well\n     * as clipping is not available in plain text labels for VML. HTML labels\n     * are not available as part of shapes with no foreignObject support in SVG\n     * (eg. IE9, IE10).\n     *\n     * @param x Number that represents the x-coordinate of the text.\n     * @param y Number that represents the y-coordinate of the text.\n     * @param w Number that represents the available width for the text or 0 for automatic width.\n     * @param h Number that represents the available height for the text or 0 for automatic height.\n     * @param str String that specifies the text to be painted.\n     * @param align String that represents the horizontal alignment.\n     * @param valign String that represents the vertical alignment.\n     * @param wrap Boolean that specifies if word-wrapping is enabled. Requires w > 0.\n     * @param format Empty string for plain text or 'html' for HTML markup.\n     * @param overflow Specifies the overflow behaviour of the label. Requires w > 0 and/or h > 0.\n     * @param clip Boolean that specifies if the label should be clipped. Requires w > 0 and/or h > 0.\n     * @param rotation Number that specifies the angle of the rotation around the anchor point of the text.\n     * @param dir Optional string that specifies the text direction. Possible values are rtl and ltr.\n     */\n    text(x, y, w, h, str, align = null, valign = null, wrap = null, format = null, overflow = null, clip = null, rotation = null, dir = null) {\n        if (this.textEnabled && str != null) {\n            if (isNode(str)) {\n                str = getOuterHtml(str);\n            }\n            const elem = this.createElement('text');\n            elem.setAttribute('x', String(this.format(x)));\n            elem.setAttribute('y', String(this.format(y)));\n            elem.setAttribute('w', String(this.format(w)));\n            elem.setAttribute('h', String(this.format(h)));\n            elem.setAttribute('str', str);\n            if (align != null) {\n                elem.setAttribute('align', align);\n            }\n            if (valign != null) {\n                elem.setAttribute('valign', valign);\n            }\n            elem.setAttribute('wrap', wrap ? '1' : '0');\n            if (format == null) {\n                format = '';\n            }\n            elem.setAttribute('format', format);\n            if (overflow != null) {\n                elem.setAttribute('overflow', overflow);\n            }\n            if (clip != null) {\n                elem.setAttribute('clip', clip ? '1' : '0');\n            }\n            if (rotation != null) {\n                elem.setAttribute('rotation', String(rotation));\n            }\n            if (dir != null) {\n                elem.setAttribute('dir', dir);\n            }\n            this.root.appendChild(elem);\n        }\n    }\n    /**\n     * Paints the outline of the current drawing buffer.\n     */\n    stroke() {\n        this.root.appendChild(this.createElement('stroke'));\n    }\n    /**\n     * Fills the current drawing buffer.\n     */\n    fill() {\n        this.root.appendChild(this.createElement('fill'));\n    }\n    /**\n     * Fills the current drawing buffer and its outline.\n     */\n    fillAndStroke() {\n        this.root.appendChild(this.createElement('fillstroke'));\n    }\n}\nexport default XmlCanvas2D;\n","/*\nCopyright 2024-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport MaxLog from './MaxLog';\n/**\n * A {@link Logger} that uses {@link MaxLog} to log messages.\n *\n * Notice that the log level for this logger are configured in {@link MaxLog}.\n *\n * @experimental subject to change or removal. The logging system may be modified in the future without prior notice.\n * @since 0.11.0\n * @category GUI\n * @category Logging\n */\nexport class MaxLogAsLogger {\n    enter(message) {\n        return MaxLog.enter(message);\n    }\n    leave(message, baseTimestamp) {\n        MaxLog.leave(message, baseTimestamp);\n    }\n    show() {\n        MaxLog.show();\n    }\n    info(message) {\n        MaxLog.writeln(message);\n    }\n    debug(message) {\n        MaxLog.debug(message);\n    }\n    error(message, ...optionalParams) {\n        const args = optionalParams?.map((param) => String(param));\n        MaxLog.writeln(`[ERROR] ${message}`, ...args);\n    }\n    trace(message) {\n        MaxLog.trace(message);\n    }\n    warn(message) {\n        MaxLog.warn(message);\n    }\n}\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n *\n * To add a new image bundle to an existing graph, the following code is used:\n *\n * ```javascript\n * let bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * ```;\n *\n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n *\n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n *\n * The keys for images are resolved in {@link AbstractGraph.postProcessCellStyle} and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n *\n * A typical value for the fallback is a HTML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n *\n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nclass ImageBundle {\n    constructor(alt = false) {\n        this.images = {};\n        this.alt = alt;\n    }\n    /**\n     * Adds the specified entry to the map. The entry is an object with a value and\n     * fallback property as specified in the arguments.\n     */\n    putImage(key, value, fallback) {\n        this.images[key] = { value, fallback };\n    }\n    /**\n     * Returns the value for the given key. This returns the value\n     * or fallback, depending on <alt>. The fallback is returned if\n     * <alt> is true, the value is returned otherwise.\n     */\n    getImage(key) {\n        let result = null;\n        if (key) {\n            const img = this.images[key];\n            if (img) {\n                result = this.alt ? img.fallback : img.value;\n            }\n        }\n        return result;\n    }\n}\nexport default ImageBundle;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../shape/Shape';\n/**\n * Creates a new image export instance to be used with an export canvas.\n *\n * Here is an example that uses this class to create an image via a backend using {@link XmlCanvas2D}.\n *\n * ```javascript\n * const xmlDoc = xmlUtils.createXmlDocument();\n * const root = xmlDoc.createElement('output');\n * xmlDoc.appendChild(root);\n *\n * const xmlCanvas = new XmlCanvas2D(root);\n * const imageExport = new ImageExport();\n *\n * imageExport.drawState(graph.getView().getState(graph.model.root), xmlCanvas);\n * const xml = xmlUtils.getXml(root);\n *\n * const bounds = graph.getGraphBounds();\n * const w = Math.ceil(bounds.x + bounds.width);\n * const h = Math.ceil(bounds.y + bounds.height);\n *\n * new MaxXmlRequest('export', 'format=png&w=' + w +\n * \t\t'&h=' + h + '&bg=#F9F7ED&xml=' + encodeURIComponent(xml))\n * \t\t.simulate(document, '_blank');\n * ```\n *\n * @category Serialization\n */\nclass ImageExport {\n    constructor() {\n        /**\n         * Specifies if overlays should be included in the export.\n         * @default false\n         */\n        this.includeOverlays = false;\n    }\n    /**\n     * Draws the given state and all its descendants to the given canvas.\n     */\n    drawState(state, canvas) {\n        if (state) {\n            this.visitStatesRecursive(state, canvas, this.drawCellState.bind(this));\n            // Paints the overlays\n            if (this.includeOverlays) {\n                this.visitStatesRecursive(state, canvas, this.drawOverlays.bind(this));\n            }\n        }\n    }\n    /**\n     * Visits the given state and all its descendants to the given canvas recursively.\n     */\n    visitStatesRecursive(state, canvas, visitor) {\n        if (state) {\n            visitor(state, canvas);\n            const graph = state.view.graph;\n            const childCount = state.cell.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                const childState = graph.view.getState(state.cell.getChildAt(i));\n                if (childState)\n                    this.visitStatesRecursive(childState, canvas, visitor);\n            }\n        }\n    }\n    /**\n     * Returns the link for the given cell state and canvas. This returns null.\n     */\n    getLinkForCellState(_state, _canvas) {\n        return null;\n    }\n    /**\n     * Draws the given state to the given canvas.\n     */\n    drawCellState(state, canvas) {\n        // Experimental feature\n        const link = this.getLinkForCellState(state, canvas);\n        if (link) {\n            canvas.setLink(link);\n        }\n        // Paints the shape and text\n        this.drawShape(state, canvas);\n        this.drawText(state, canvas);\n        if (link) {\n            canvas.setLink(null);\n        }\n    }\n    /**\n     * Draws the shape of the given state.\n     */\n    drawShape(state, canvas) {\n        if (state.shape instanceof Shape && state.shape.checkBounds()) {\n            canvas.save();\n            state.shape.beforePaint(canvas);\n            state.shape.paint(canvas);\n            state.shape.afterPaint(canvas);\n            canvas.restore();\n        }\n    }\n    /**\n     * Draws the text of the given state.\n     */\n    drawText(state, canvas) {\n        if (state.text && state.text.checkBounds()) {\n            canvas.save();\n            state.text.beforePaint(canvas);\n            state.text.paint(canvas);\n            state.text.afterPaint(canvas);\n            canvas.restore();\n        }\n    }\n    /**\n     * Draws the overlays for the given state. This is called if <includeOverlays>\n     * is true.\n     */\n    drawOverlays(state, canvas) {\n        if (state.overlays != null) {\n            state.overlays.visit((_id, shape) => {\n                if (shape instanceof Shape) {\n                    shape.paint(canvas);\n                }\n            });\n        }\n    }\n}\nexport default ImageExport;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from '../event/EventSource';\nimport InternalEvent from '../event/InternalEvent';\n/**\n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n *\n * ```javascript\n * const mgr = new AutoSaveManager(editor.graph);\n * mgr.save() {\n *   GlobalConfig.logger.show();\n *   GlobalConfig.logger.debug('save');\n * };\n * ```\n */\nclass AutoSaveManager extends EventSource {\n    constructor(graph) {\n        super();\n        /**\n         * Reference to the enclosing {@link AbstractGraph}.\n         */\n        this.graph = null;\n        /**\n         * Minimum amount of seconds between two consecutive autosaves. Eg. a\n         * value of 1 (s) means the graph is not stored more than once per second.\n         * Default is 10.\n         */\n        this.autoSaveDelay = 10;\n        /**\n         * Minimum amount of seconds between two consecutive autosaves triggered by\n         * more than <autoSaveThreshhold> changes within a timespan of less than\n         * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n         * stored more than once per second even if there are more than\n         * <autoSaveThreshold> changes within that timespan. Default is 2.\n         */\n        this.autoSaveThrottle = 2;\n        /**\n         * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n         * means after 2 change of the graph model the autosave will trigger if the\n         * condition below is true. Default is 5.\n         */\n        this.autoSaveThreshold = 5;\n        /**\n         * Counter for ignored changes in autosave.\n         */\n        this.ignoredChanges = 0;\n        /**\n         * Used for autosaving. See <autosave>.\n         */\n        this.lastSnapshot = 0;\n        /**\n         * Specifies if event handling is enabled. Default is true.\n         */\n        this.enabled = true;\n        // Notifies the manager of a change\n        this.changeHandler = (sender, evt) => {\n            if (this.isEnabled()) {\n                this.graphModelChanged(evt.getProperty('edit').changes);\n            }\n        };\n        this.setGraph(graph);\n    }\n    /**\n     * Returns true if events are handled. This implementation\n     * returns <enabled>.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Enables or disables event handling. This implementation\n     * updates <enabled>.\n     *\n     * @param enabled - Boolean that specifies the new enabled state.\n     */\n    setEnabled(value) {\n        this.enabled = value;\n    }\n    /**\n     * Sets the graph that the layouts operate on.\n     */\n    setGraph(graph) {\n        if (this.graph != null) {\n            this.graph.getDataModel().removeListener(this.changeHandler);\n        }\n        this.graph = graph;\n        if (this.graph != null) {\n            this.graph.getDataModel().addListener(InternalEvent.CHANGE, this.changeHandler);\n        }\n    }\n    /**\n     * Empty hook that is called if the graph should be saved.\n     */\n    save() {\n        // empty\n    }\n    /**\n     * Invoked when the graph model has changed.\n     */\n    graphModelChanged(changes) {\n        const now = new Date().getTime();\n        const dt = (now - this.lastSnapshot) / 1000;\n        if (dt > this.autoSaveDelay ||\n            (this.ignoredChanges >= this.autoSaveThreshold && dt > this.autoSaveThrottle)) {\n            this.save();\n            this.reset();\n        }\n        else {\n            // Increments the number of ignored changes\n            this.ignoredChanges++;\n        }\n    }\n    /**\n     * Resets all counters.\n     */\n    reset() {\n        this.lastSnapshot = new Date().getTime();\n        this.ignoredChanges = 0;\n    }\n    /**\n     * Removes all handlers from the {@link graph} and deletes the reference to it.\n     */\n    destroy() {\n        this.setGraph(null);\n    }\n}\nexport default AutoSaveManager;\n","/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { isNode } from '../../util/domUtils';\nimport { translate } from '../../internal/i18n-utils';\n/**\n * @class Multiplicity\n *\n * Defines invalid connections along with the error messages that they produce.\n * To add or remove rules on a graph, you must add/remove instances of this\n * class to {@link AbstractGraph.multiplicities}.\n *\n * ### Example\n *\n * ```javascript\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only circle targets allowed'));\n * ```\n *\n * Defines a rule where each rectangle must be connected to no more than 2\n * circles and no other types of targets are allowed.\n */\nclass Multiplicity {\n    constructor(source, type, attr, value, min, max, validNeighbors, countError, typeError, validNeighborsAllowed = true) {\n        /**\n         * Boolean indicating if the list of validNeighbors are those that are allowed\n         * for this rule or those that are not allowed for this rule.\n         */\n        this.validNeighborsAllowed = true;\n        this.source = source;\n        this.type = type;\n        this.attr = attr;\n        this.value = value;\n        this.min = min ?? 0;\n        this.max = max ?? Number.MAX_VALUE;\n        this.validNeighbors = validNeighbors;\n        this.countError = translate(countError) || countError;\n        this.typeError = translate(typeError) || typeError;\n        this.validNeighborsAllowed = validNeighborsAllowed;\n    }\n    /**\n     * Checks the multiplicity for the given arguments and returns the error\n     * for the given connection or null if the multiplicity does not apply.\n     *\n     * @param graph Reference to the enclosing {@link AbstractGraph} instance.\n     * @param edge {@link Cell} that represents the edge to validate.\n     * @param source {@link Cell} that represents the source terminal.\n     * @param target {@link Cell} that represents the target terminal.\n     * @param sourceOut Number of outgoing edges from the source terminal.\n     * @param targetIn Number of incoming edges for the target terminal.\n     */\n    check(graph, edge, source, target, sourceOut, targetIn) {\n        let error = '';\n        if ((this.source && this.checkTerminal(graph, source, edge)) ||\n            (!this.source && this.checkTerminal(graph, target, edge))) {\n            if (this.countError != null &&\n                ((this.source && (this.max === 0 || sourceOut >= this.max)) ||\n                    (!this.source && (this.max === 0 || targetIn >= this.max)))) {\n                error += `${this.countError}\\n`;\n            }\n            if (this.validNeighbors != null &&\n                this.typeError != null &&\n                this.validNeighbors.length > 0) {\n                const isValid = this.checkNeighbors(graph, edge, source, target);\n                if (!isValid) {\n                    error += `${this.typeError}\\n`;\n                }\n            }\n        }\n        return error.length > 0 ? error : null;\n    }\n    /**\n     * Checks if there are any valid neighbours in {@link validNeighbors}. This is only\n     * called if {@link validNeighbors} is a non-empty array.\n     */\n    checkNeighbors(graph, edge, source, target) {\n        const sourceValue = source.getValue();\n        const targetValue = target.getValue();\n        let isValid = !this.validNeighborsAllowed;\n        const valid = this.validNeighbors;\n        for (let j = 0; j < valid.length; j++) {\n            if (this.source && this.checkType(graph, targetValue, valid[j])) {\n                isValid = this.validNeighborsAllowed;\n                break;\n            }\n            else if (!this.source && this.checkType(graph, sourceValue, valid[j])) {\n                isValid = this.validNeighborsAllowed;\n                break;\n            }\n        }\n        return isValid;\n    }\n    /**\n     * Checks the given terminal cell and returns true if this rule applies. The\n     * given cell is the source or target of the given edge, depending on\n     * {@link source}. This implementation uses {@link checkType} on the terminal's value.\n     */\n    checkTerminal(graph, edge, terminal) {\n        const value = terminal?.getValue() ?? null;\n        return this.checkType(graph, value, this.type, this.attr, this.value);\n    }\n    /**\n     * Checks the type of the given value.\n     */\n    checkType(graph, value, type, attr, attrValue) {\n        if (value != null) {\n            if (typeof value !== 'string' &&\n                'nodeType' in value &&\n                !Number.isNaN(value.nodeType)) {\n                // Checks if value is a DOM node\n                return isNode(value, type, attr, attrValue);\n            }\n            return value === type;\n        }\n        return false;\n    }\n}\nexport default Multiplicity;\n","/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n","// 'mime-score' back-ported to CommonJS\n\n// Score RFC facets (see https://tools.ietf.org/html/rfc6838#section-3)\nvar FACET_SCORES = {\n  'prs.': 100,\n  'x-': 200,\n  'x.': 300,\n  'vnd.': 400,\n  default: 900\n}\n\n// Score mime source (Logic originally from `jshttp/mime-types` module)\nvar SOURCE_SCORES = {\n  nginx: 10,\n  apache: 20,\n  iana: 40,\n  default: 30 // definitions added by `jshttp/mime-db` project?\n}\n\nvar TYPE_SCORES = {\n  // prefer application/xml over text/xml\n  // prefer application/rtf over text/rtf\n  application: 1,\n\n  // prefer font/woff over application/font-woff\n  font: 2,\n\n  default: 0\n}\n\n/**\n * Get each component of the score for a mime type.  The sum of these is the\n * total score.  The higher the score, the more \"official\" the type.\n */\nmodule.exports = function mimeScore (mimeType, source = 'default') {\n  if (mimeType === 'application/octet-stream') {\n    return 0\n  }\n\n  const [type, subtype] = mimeType.split('/')\n\n  const facet = subtype.replace(/(\\.|x-).*/, '$1')\n\n  const facetScore = FACET_SCORES[facet] || FACET_SCORES.default\n  const sourceScore = SOURCE_SCORES[source] || SOURCE_SCORES.default\n  const typeScore = TYPE_SCORES[type] || TYPE_SCORES.default\n\n  // All else being equal prefer shorter types\n  const lengthScore = 1 - mimeType.length / 100\n\n  return facetScore + sourceScore + typeScore + lengthScore\n}\n","/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\nvar mimeScore = require('./mimeScore')\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\nexports._extensionConflicts = []\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .slice(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n      types[extension] = _preferredType(extension, types[extension], type)\n\n      // DELETE (eventually): Capture extension->type maps that change as a\n      // result of switching to mime-score.  This is just to help make reviewing\n      // PR #119 easier, and can be removed once that PR is approved.\n      const legacyType = _preferredTypeLegacy(\n        extension,\n        types[extension],\n        type\n      )\n      if (legacyType !== types[extension]) {\n        exports._extensionConflicts.push([extension, legacyType, types[extension]])\n      }\n    }\n  })\n}\n\n// Resolve type conflict using mime-score\nfunction _preferredType (ext, type0, type1) {\n  var score0 = type0 ? mimeScore(type0, db[type0].source) : 0\n  var score1 = type1 ? mimeScore(type1, db[type1].source) : 0\n\n  return score0 > score1 ? type0 : type1\n}\n\n// Resolve type conflict using pre-mime-score logic\nfunction _preferredTypeLegacy (ext, type0, type1) {\n  var SOURCE_RANK = ['nginx', 'apache', undefined, 'iana']\n\n  var score0 = type0 ? SOURCE_RANK.indexOf(db[type0].source) : 0\n  var score1 = type1 ? SOURCE_RANK.indexOf(db[type1].source) : 0\n\n  if (\n    exports.types[extension] !== 'application/octet-stream' &&\n    (score0 > score1 ||\n      (score0 === score1 &&\n        exports.types[extension]?.slice(0, 12) === 'application/'))\n  ) {\n    return type0\n  }\n\n  return score0 > score1 ? type0 : type1\n}\n","import fsp from 'fs/promises';\r\nimport mime from 'mime-types';\r\n\r\nexport const inlineImage = async (image: SVGImageElement): Promise<void> => {\r\n    const path = image.getAttribute('xlink:href') ?? '';\r\n\r\n    let isFile = false;\r\n\r\n    try {\r\n        const url = new URL(path);\r\n        isFile = url.protocol === 'file:';\r\n    } catch (_e) {\r\n        // It's not a file:// url if it's not a url at all\r\n    }\r\n\r\n    let buffer: ArrayBufferLike;\r\n\r\n    if (isFile) {\r\n        buffer = await fsp.readFile(path.slice(7));\r\n    } else {\r\n        const response = await fetch(path);\r\n        buffer = await response.arrayBuffer();\r\n    }\r\n\r\n    const content = Buffer.from(buffer).toString('base64');\r\n\r\n    const mimeType = mime.lookup(path);\r\n    const contentType = mimeType ? mimeType : '';\r\n\r\n    const newUrl = `data:${contentType};base64, ${content}`;\r\n\r\n    image.setAttribute('xlink:href', newUrl);\r\n};\r\n","import { Graph } from '@maxgraph/core';\r\nimport { inlineImage } from './inlineImage';\r\n\r\nexport type MaxGraphToSvgOptions = {\r\n    inlineImages?: boolean;\r\n};\r\n\r\nexport const maxGraphToSvg = async (\r\n    graph: Graph,\r\n    options?: MaxGraphToSvgOptions,\r\n): Promise<string> => {\r\n    const container = graph.container.cloneNode(true) as typeof graph.container; // https://github.com/microsoft/TypeScript/issues/283\r\n\r\n    const inlineImages: boolean =\r\n        (options ?? { inlineImages: false }).inlineImages ?? false;\r\n\r\n    if (inlineImages) {\r\n        const images = Array.from(container.querySelectorAll('image'));\r\n\r\n        for (const image of images) {\r\n            await inlineImage(image);\r\n        }\r\n    }\r\n\r\n    const svg = container.firstElementChild!;\r\n\r\n    svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\r\n    svg.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');\r\n\r\n    const xml = [\r\n        `<?xml version=\"1.0\" standalone=\"no\"?>`,\r\n        `<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">`,\r\n        container.innerHTML,\r\n    ].join('\\n');\r\n\r\n    return xml;\r\n};\r\n"],"names":["br","link","index","clone","intersects","cx","pt","dx","dy","target","source","translate","state","points","result","this","write","createXmlDocument","document","cy","w","h","Image","EdgeStyle.EntityRelation","b","show","intersection","p0","p1","error","err","EdgeStyle.Loop","flex","block","remove","EdgeStyle.ElbowConnector","EdgeStyle.ManhattanConnector","EdgeStyle.OrthConnector","EdgeStyle.SegmentConnector","EdgeStyle.SideToSide","EdgeStyle.TopToBottom","Perimeter.EllipsePerimeter","Perimeter.HexagonPerimeter","Perimeter.RectanglePerimeter","Perimeter.RhombusPerimeter","Perimeter.TrianglePerimeter","EdgeMarker.createArrow","EdgeMarker.createOpenArrow","EdgeMarker.oval","EdgeMarker.diamond","evt","outline","sizer","div","_isControlDown","tmp","mod","button","parent","i","template","mimeScore","require$$0","require$$2","exports","mime","charset","extension"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236]}